// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Combined Prisma Schema
// Models PriceListItem and ServiceCategory are from the newer schema.
// All other models and enums are from schema.prisma_old.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Core Models ---

model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String    @unique // Робимо ім'я обов'язковим та унікальним
  email         String?   @unique // Email залишаємо опціональним
  emailVerified DateTime? // Додано для next-auth
  image         String? // Додано для next-auth
  password      String // Зберігаємо хеш пароля
  role          Role      @default(STAFF)
  position      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[] // Relation to Order
  accounts      Account[] // Додано для next-auth
  sessions      Session[] // Додано для next-auth
  // tasks Task[] // Removed for MVP
  // notifications Notification[] // Removed for MVP

  @@map("users")
}

model Client {
  id             String       @id @default(uuid()) @db.Uuid
  firstName      String
  lastName       String
  phone          String       @unique
  email          String?      @unique
  address        String?
  birthdate      DateTime?
  notes          String?
  loyaltyLevel   LoyaltyLevel @default(STANDARD)
  gender         String?
  totalSpent     Decimal      @default(0) @db.Decimal(10, 2)
  loyaltyPoints  Int          @default(0)
  lastPurchaseAt DateTime?
  status         ClientStatus @default(ACTIVE)
  source         ClientSource @default(OTHER)
  tags           String[]
  nextContactAt  DateTime?
  lastContactAt  DateTime?
  allowSMS       Boolean      @default(true)
  allowEmail     Boolean      @default(true)
  allowCalls     Boolean      @default(true)
  frequencyScore Int          @default(0)
  monetaryScore  Int          @default(0)
  recencyScore   Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  // favoriteItems ClientFavoriteItem[] // Removed for MVP
  // communications Communication[] // Removed for MVP
  orders         Order[] // Relation to Order
  payments       Payment[] // Relation to Payment

  @@index([phone])
  @@index([email])
  @@index([lastPurchaseAt])
  @@index([loyaltyLevel])
  @@index([status, createdAt])
  @@index([totalSpent])
  @@index([recencyScore, frequencyScore, monetaryScore])
  @@index([deletedAt])
  @@map("clients")
}

model Order {
  id                   String         @id @default(uuid()) @db.Uuid
  number               String         @unique
  totalAmount          Decimal        @db.Decimal(10, 2) // Should be calculated based on items
  createdAt            DateTime       @default(now())
  completedAt          DateTime?
  estimatedReleaseDate DateTime?
  paymentMethod        String?
  prepaidAmount        Decimal?       @default(0) @db.Decimal(10, 2)
  notes                String?
  clientId             String         @db.Uuid
  userId               String?        @db.Uuid // User who created/processed the order
  status               OrderStatus
  // itemsDetails Item[] // Removed, merged into OrderItem
  items                OrderItem[] // Relation to the merged OrderItem model
  client               Client         @relation(fields: [clientId], references: [id])
  user                 User?          @relation(fields: [userId], references: [id])
  payments             Payment[]
  history              OrderHistory[]

  @@index([clientId])
  @@index([userId])
  @@index([status, createdAt])
  @@map("orders")
}

// Merged OrderItem model (combining OrderItem and Item)
model OrderItem {
  id              String  @id @default(uuid()) @db.Uuid
  orderId         String  @db.Uuid
  priceListItemId String? @db.Uuid // Link to the specific Price List item
  // productId    String?     @db.Uuid // Kept from old OrderItem, meaning unclear, maybe refers to PriceListItem.id? No relation for now.

  // Fields from old OrderItem
  quantity   Int
  name       String // Can be copied from PriceListItem initially, but editable
  unitPrice  Decimal @db.Decimal(10, 2) // Price per unit at the time of adding
  totalPrice Decimal @db.Decimal(10, 2) // quantity * unitPrice (potentially adjusted)
  category   String? // Category name at the time of adding

  // Fields from old Item model
  itemType     String? // e.g., 'Jacket', 'Trousers'
  fabric       String?
  color        String?
  description  String? // Additional description by staff
  markings     String? // Specific markings or tags on the item
  specialNotes String? // Special instructions or notes for this item

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order         Order          @relation(fields: [orderId], references: [id])
  priceListItem PriceListItem? @relation(fields: [priceListItemId], references: [id]) // Relation to PriceListItem
  photos        Photo[] // Relation to Photo model

  @@index([orderId])
  @@index([priceListItemId])
  // @@index([productId])
  @@map("order_items")
}

model Payment {
  id        String   @id @default(uuid()) @db.Uuid
  amount    Decimal  @db.Decimal(10, 2)
  method    String
  status    String // e.g., 'PENDING', 'COMPLETED', 'FAILED'
  createdAt DateTime @default(now())
  clientId  String   @db.Uuid
  orderId   String?  @db.Uuid
  client    Client   @relation(fields: [clientId], references: [id])
  order     Order?   @relation(fields: [orderId], references: [id])

  @@index([clientId])
  @@index([orderId])
  @@index([status])
  @@map("payments")
}

model Photo {
  id          String    @id @default(uuid()) @db.Uuid
  url         String // URL to the stored image
  description String?
  orderItemId String    @db.Uuid // Changed from itemId to orderItemId
  createdAt   DateTime  @default(now())
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id]) // Changed relation

  @@index([orderItemId]) // Index added
  @@map("photos")
}

model OrderHistory {
  id        String   @id @default(uuid()) @db.Uuid
  orderId   String   @db.Uuid
  status    String // Could reference OrderStatus enum value
  comment   String?
  createdAt DateTime @default(now())
  createdBy String   @db.Uuid // Assuming this relates to User.id - needs relation if required
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_history")
}

// --- Pricelist Models (Preserved from the new schema) ---

model ServiceCategory {
  id          String   @id @default(uuid()) @db.Uuid
  code        String   @unique // Technical code (latin)
  name        String // Category name (Ukrainian)
  description String?
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  services PriceListItem[] // Relation to PriceListItem
  // Service Service[] // Removed relation to the deleted Service model

  @@map("service_categories")
}

model PriceListItem {
  id            String  @id @default(uuid()) @db.Uuid
  categoryId    String  @db.Uuid // Foreign key for ServiceCategory
  jsonId        String? // Original ID from JSON (for tracking)
  catalogNumber Int // Number in the pricelist
  name          String // Item name
  unitOfMeasure String // Unit (pcs, kg, pair)
  basePrice     Decimal @db.Decimal(10, 2) // Base price

  priceBlack Decimal? @db.Decimal(10, 2) // Optional price for black items
  priceColor Decimal? @db.Decimal(10, 2) // Optional price for other colors

  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category   ServiceCategory @relation(fields: [categoryId], references: [id]) // Relation to ServiceCategory
  // Item Item[] // Removed relation to the deleted Item model
  orderItems OrderItem[] // Relation to the merged OrderItem model
  // Service Service[] // Removed relation to the deleted Service model

  @@unique([categoryId, jsonId])
  @@unique([categoryId, catalogNumber, name])
  @@index([categoryId])
  @@index([jsonId])
  @@map("price_list_items")
}

// --- Enums (Imported from schema.prisma_old) ---

enum LoyaltyLevel {
  STANDARD
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum ClientSource {
  REFERRAL
  SOCIAL_MEDIA
  GOOGLE
  ADVERTISEMENT
  RETURNING
  WALK_IN
  OTHER
}

enum Role {
  ADMIN
  MANAGER
  STAFF
}

enum OrderStatus {
  NEW
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// --- Моделі, необхідні для @auth/prisma-adapter ---

model Account {
  id                String  @id @default(cuid())
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
