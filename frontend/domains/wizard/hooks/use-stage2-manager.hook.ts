import { useCallback, useMemo } from 'react';

import { useStage2Store } from '../store/stage2.store';

import type { OrderItemDTO } from '../../../lib/api/generated/models/OrderItemDTO';
import type { UseStage2ManagerReturn } from '../types/stage2.types';

/**
 * –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è Stage 2 - Item Manager
 *
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å:
 * - –ù–∞–¥–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
 * - –û–±–≥–æ—Ä—Ç–∫–∞ –Ω–∞–¥ Zustand —Å—Ç–æ—Ä–æ–º –∑ –º–µ–º–æ—ñ–∑–∞—Ü—ñ—î—é
 * - –Ü–Ω–∫–∞–ø—Å—É–ª—è—Ü—ñ—è –ª–æ–≥—ñ–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
 */
export const useStage2Manager = (): UseStage2ManagerReturn => {
  // –í–∏—Ç—è–≥—É—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–∞–Ω—ñ —Ç–∞ –º–µ—Ç–æ–¥–∏ –∑—ñ —Å—Ç–æ—Ä—É
  const {
    manager,
    currentState,
    isLoading,
    error,
    totalAmount,
    itemCount,
    canProceedToNextStage,

    // –ú–µ—Ç–æ–¥–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
    initializeManager,
    refreshManager,
    terminateSession,
    resetSession,

    // –ú–µ—Ç–æ–¥–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
    addItem,
    updateItem,
    deleteItem,

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    validateCurrentState,
    checkReadiness,
    completeStage2,

    // –£—Ç–∏–ª—ñ—Ç–∏
    clearError,
  } = useStage2Store();

  // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
  console.log('üìä useStage2Manager state:', {
    currentState,
    isLoading,
    error,
    hasManager: !!manager,
    sessionId: manager?.sessionId,
  });

  // –ú–µ–º–æ—ñ–∑–æ–≤–∞–Ω—ñ –æ–±—á–∏—Å–ª—é–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
  const addedItems = useMemo((): OrderItemDTO[] => {
    return manager?.addedItems || [];
  }, [manager?.addedItems]);

  // –ú–µ–º–æ—ñ–∑–æ–≤–∞–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä—ñ–≤
  const memoizedInitializeManager = useCallback(
    async (orderId: string) => {
      await initializeManager(orderId);
    },
    [initializeManager]
  );

  const memoizedRefreshManager = useCallback(async () => {
    await refreshManager();
  }, [refreshManager]);

  const memoizedTerminateSession = useCallback(async () => {
    await terminateSession();
  }, [terminateSession]);

  const memoizedResetSession = useCallback(async () => {
    await resetSession();
  }, [resetSession]);

  const memoizedAddItem = useCallback(
    async (item: OrderItemDTO) => {
      await addItem(item);
    },
    [addItem]
  );

  const memoizedUpdateItem = useCallback(
    async (itemId: string, item: OrderItemDTO) => {
      await updateItem(itemId, item);
    },
    [updateItem]
  );

  const memoizedDeleteItem = useCallback(
    async (itemId: string) => {
      await deleteItem(itemId);
    },
    [deleteItem]
  );

  const memoizedValidateCurrentState = useCallback(async () => {
    return await validateCurrentState();
  }, [validateCurrentState]);

  const memoizedCheckReadiness = useCallback(async () => {
    return await checkReadiness();
  }, [checkReadiness]);

  const memoizedCompleteStage2 = useCallback(async () => {
    await completeStage2();
  }, [completeStage2]);

  const memoizedClearError = useCallback(() => {
    clearError();
  }, [clearError]);

  return {
    // –°—Ç–∞–Ω
    manager,
    currentState,
    isLoading,
    error,

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    totalAmount,
    itemCount,
    canProceedToNextStage,
    addedItems,

    // –ú–µ—Ç–æ–¥–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
    initializeManager: memoizedInitializeManager,
    refreshManager: memoizedRefreshManager,
    terminateSession: memoizedTerminateSession,
    resetSession: memoizedResetSession,

    // –ú–µ—Ç–æ–¥–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
    addItem: memoizedAddItem,
    updateItem: memoizedUpdateItem,
    deleteItem: memoizedDeleteItem,

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    validateCurrentState: memoizedValidateCurrentState,
    checkReadiness: memoizedCheckReadiness,
    completeStage2: memoizedCompleteStage2,

    // –£—Ç–∏–ª—ñ—Ç–∏
    clearError: memoizedClearError,
  };
};
