import { useCallback } from 'react';
import { useQueryClient } from '@tanstack/react-query';

import { useMainStore } from '../../main/store/main.store';
import { useStage1Store } from '../../stage1/store/stage1.store';
import { useOrderWizardClearAllSessions } from '@/shared/api/generated/main';

/**
 * üßπ –•—É–∫ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—î—ó –ø–∞–º'—è—Ç—ñ Order Wizard
 *
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é sessionId
 * —Ç–∞ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∞–º–∏ –º—ñ–∂ frontend —Ç–∞ backend —Å–µ—Å—ñ—è–º–∏.
 *
 * @returns —Ñ—É–Ω–∫—Ü—ñ—è clearAllMemory –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—î—ó –ø–∞–º'—è—Ç—ñ
 */
export const useClearWizardMemory = () => {
  const queryClient = useQueryClient();

  // –û—Ç—Ä–∏–º—É—î–º–æ reset —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –≤—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–≤
  const resetMainStore = useMainStore((state) => state.reset);
  const resetStage1Store = useStage1Store((state) => state.reset);

  // Orval —Ö—É–∫ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è backend —Å–µ—Å—ñ–π
  const clearBackendSessionsMutation = useOrderWizardClearAllSessions();

  const clearAllMemory = useCallback(async () => {
    console.log("üßπ –û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—î—ó –ø–∞–º'—è—Ç—ñ Order Wizard...");

    // 1. –û—á–∏—â—É—î–º–æ localStorage
    try {
      const keysToRemove = [
        'wizard-session',
        'stage1-data',
        'stage2-data',
        'stage3-data',
        'stage4-data',
        'client-search-data',
        'order-wizard-data',
        'wizard-ui-state',
        'item-manager-data',
      ];

      keysToRemove.forEach((key) => {
        localStorage.removeItem(key);
      });

      console.log('‚úÖ localStorage –æ—á–∏—â–µ–Ω–æ');
    } catch (error) {
      console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ localStorage:', error);
    }

    // 2. –û—á–∏—â—É—î–º–æ React Query –∫–µ—à –¥–ª—è –≤—Å—ñ—Ö wizard –∑–∞–ø–∏—Ç—ñ–≤
    try {
      const queryKeys = [
        'order-wizard',
        'stage1',
        'stage2',
        'stage3',
        'stage4',
        'client-search',
        'item-manager',
      ];

      queryKeys.forEach((key) => {
        queryClient.invalidateQueries({ queryKey: [key] });
        queryClient.removeQueries({ queryKey: [key] });
      });

      console.log('‚úÖ React Query –∫–µ—à –æ—á–∏—â–µ–Ω–æ');
    } catch (error) {
      console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ React Query –∫–µ—à—É:', error);
    }

    // 3. –°–∫–∏–¥–∞—î–º–æ –≤—Å—ñ Zustand —Å—Ç–æ—Ä–∏
    try {
      resetMainStore();
      resetStage1Store();

      console.log('‚úÖ Zustand —Å—Ç–æ—Ä–∏ —Å–∫–∏–Ω—É—Ç–æ');
    } catch (error) {
      console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∏–¥–∞–Ω–Ω—ñ Zustand —Å—Ç–æ—Ä—ñ–≤:', error);
    }

    // 4. –û—á–∏—â—É—î–º–æ sessionStorage —è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è
    try {
      const sessionKeys = ['wizard-temp-data', 'current-step', 'form-cache'];

      sessionKeys.forEach((key) => {
        sessionStorage.removeItem(key);
      });

      console.log('‚úÖ sessionStorage –æ—á–∏—â–µ–Ω–æ');
    } catch (error) {
      console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ sessionStorage:', error);
    }

    // 5. –û—á–∏—â—É—î–º–æ backend —Å–µ—Å—ñ—ó —á–µ—Ä–µ–∑ Orval —Ö—É–∫
    try {
      await clearBackendSessionsMutation.mutateAsync();
      console.log('‚úÖ Backend —Å–µ—Å—ñ—ó –æ—á–∏—â–µ–Ω–æ —á–µ—Ä–µ–∑ Orval');
    } catch (error) {
      console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ backend —Å–µ—Å—ñ–π:', error);
    }

    // 6. –í–ê–ñ–õ–ò–í–û: –ü—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è backend —Å–µ—Å—ñ–π, —Å–∫–∏–¥–∞—î–º–æ —Å—Ç–æ—Ä–∏ —â–µ —Ä–∞–∑
    // —â–æ–± –ø–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è —â–æ sessionId = null
    try {
      resetMainStore();
      resetStage1Store();
      console.log('‚úÖ –°—Ç–æ—Ä–∏ —Å–∫–∏–Ω—É—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è backend');
    } catch (error) {
      console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É —Å–∫–∏–¥–∞–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–≤:', error);
    }

    console.log("üéâ –ü–∞–º'—è—Ç—å Order Wizard –ø–æ–≤–Ω—ñ—Å—Ç—é –æ—á–∏—â–µ–Ω–∞!");
  }, [queryClient, resetMainStore, resetStage1Store, clearBackendSessionsMutation]);

  return {
    clearAllMemory,
  };
};
