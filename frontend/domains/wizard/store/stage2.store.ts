import { create } from 'zustand';
import { devtools } from 'zustand/middleware';

import {
  initializeItemManager,
  getCurrentManager,
  synchronizeManager,
  terminateSession,
  resetSession,
  addItemToOrder,
  updateItemInOrder,
  deleteItemFromOrder,
  startNewItemWizard,
  startEditItemWizard,
  closeWizard,
  completeStage2,
  validateCurrentState,
  checkReadinessToProceed,
  type ItemManagerDTO,
  type OrderItemDTO,
  type ValidationResult,
} from '@/shared/api/generated/full';

import { STAGE2_INITIAL_STATE } from '../types/stage2.types';

import type { Stage2Store, Stage2State, WizardMode } from '../types/stage2.types';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏
const SESSION_NOT_INITIALIZED_ERROR = '–°–µ—Å—ñ—è –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞';

/**
 * Zustand —Å—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è Stage 2 - Item Manager
 *
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å:
 * - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–∞–Ω–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
 * - –í–∑–∞—î–º–æ–¥—ñ—è –∑ API –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
 * - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—ñ–¥–≤—ñ–∑–∞—Ä–¥–æ–º –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è/—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
 * - –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –µ—Ç–∞–ø—É
 */
export const useStage2Store = create<Stage2Store>()(
  devtools(
    (set, get) => ({
      // ========== –ü–û–ß–ê–¢–ö–û–í–ò–ô –°–¢–ê–ù ==========
      ...STAGE2_INITIAL_STATE,

      // ========== –î–¶–Ü–á –î–õ–Ø –ú–ï–ù–ï–î–ñ–ï–†–ê ==========

      initializeManager: async (orderId: string) => {
        const { setLoading, clearError } = get();

        console.log('üöÄ initializeManager: orderId =', orderId);

        try {
          setLoading(true);
          clearError();

          const manager = await initializeItemManager(orderId);

          console.log('‚úÖ initializeManager: manager =', manager);
          console.log('‚úÖ initializeManager: sessionId =', manager.sessionId);

          set({
            orderId,
            sessionId: manager.sessionId || null,
            manager,
            currentState: 'ITEMS_MANAGER_SCREEN',
            totalAmount: manager.totalAmount || 0,
            itemCount: manager.itemCount || 0,
            canProceedToNextStage: manager.canProceedToNextStage || false,
            isLoading: false,
          });
        } catch (error) {
          set({
            error: error instanceof Error ? error.message : '–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–µ–Ω–µ–¥–∂–µ—Ä–∞',
            currentState: 'ERROR',
            isLoading: false,
          });
        }
      },

      refreshManager: async () => {
        const { sessionId, setLoading, clearError } = get();

        if (!sessionId) {
          set({ error: SESSION_NOT_INITIALIZED_ERROR });
          return;
        }

        try {
          setLoading(true);
          clearError();

          const manager = await getCurrentManager(sessionId);

          set({
            manager,
            totalAmount: manager.totalAmount || 0,
            itemCount: manager.itemCount || 0,
            canProceedToNextStage: manager.canProceedToNextStage || false,
            wizardMode: manager.wizardActive ? (manager.editMode ? 'edit' : 'create') : 'inactive',
            editingItemId: manager.editingItemId || null,
            activeWizardId: manager.activeWizardId || null,
            isLoading: false,
          });
        } catch (error) {
          set({
            error: error instanceof Error ? error.message : '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞',
            isLoading: false,
          });
        }
      },

      synchronizeManager: async () => {
        const { sessionId, setLoading, clearError } = get();

        if (!sessionId) {
          set({ error: SESSION_NOT_INITIALIZED_ERROR });
          return;
        }

        try {
          setLoading(true);
          clearError();

          const manager = await synchronizeManager(sessionId);

          set({
            manager,
            totalAmount: manager.totalAmount || 0,
            itemCount: manager.itemCount || 0,
            canProceedToNextStage: manager.canProceedToNextStage || false,
            isLoading: false,
          });
        } catch (error) {
          set({
            error: error instanceof Error ? error.message : '–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó',
            isLoading: false,
          });
        }
      },

      terminateSession: async () => {
        const { sessionId, setLoading, clearError } = get();

        if (!sessionId) return;

        try {
          setLoading(true);
          clearError();

          await terminateSession(sessionId);

          set({
            ...STAGE2_INITIAL_STATE,
            isLoading: false,
          });
        } catch (error) {
          set({
            error: error instanceof Error ? error.message : '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ—ó',
            isLoading: false,
          });
        }
      },

      resetSession: async () => {
        const { sessionId, setLoading, clearError } = get();

        if (!sessionId) return;

        try {
          setLoading(true);
          clearError();

          await resetSession(sessionId);

          set({
            manager: null,
            currentState: 'ITEMS_MANAGER_SCREEN',
            wizardMode: 'inactive',
            editingItemId: null,
            activeWizardId: null,
            totalAmount: 0,
            itemCount: 0,
            canProceedToNextStage: false,
            isLoading: false,
          });
        } catch (error) {
          set({
            error: error instanceof Error ? error.message : '–ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è —Å–µ—Å—ñ—ó',
            isLoading: false,
          });
        }
      },

      // ========== –î–Ü–á –î–õ–Ø –ü–†–ï–î–ú–ï–¢–Ü–í ==========

      addItem: async (item: OrderItemDTO) => {
        const { sessionId, setLoading, clearError, refreshManager } = get();

        if (!sessionId) {
          set({ error: SESSION_NOT_INITIALIZED_ERROR });
          return;
        }

        try {
          setLoading(true);
          clearError();

          await addItemToOrder(sessionId, item);

          // –û–Ω–æ–≤–ª—é—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
          await refreshManager();
        } catch (error) {
          set({
            error: error instanceof Error ? error.message : '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞',
            isLoading: false,
          });
        }
      },

      updateItem: async (itemId: string, item: OrderItemDTO) => {
        const { sessionId, setLoading, clearError, refreshManager } = get();

        if (!sessionId) {
          set({ error: SESSION_NOT_INITIALIZED_ERROR });
          return;
        }

        try {
          setLoading(true);
          clearError();

          await updateItemInOrder(sessionId, itemId, item);

          // –û–Ω–æ–≤–ª—é—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
          await refreshManager();
        } catch (error) {
          set({
            error: error instanceof Error ? error.message : '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞',
            isLoading: false,
          });
        }
      },

      deleteItem: async (itemId: string) => {
        const { sessionId, setLoading, clearError, refreshManager } = get();

        if (!sessionId) {
          set({ error: SESSION_NOT_INITIALIZED_ERROR });
          return;
        }

        try {
          setLoading(true);
          clearError();

          await deleteItemFromOrder(sessionId, itemId);

          // –û–Ω–æ–≤–ª—é—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
          await refreshManager();
        } catch (error) {
          set({
            error: error instanceof Error ? error.message : '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞',
            isLoading: false,
          });
        }
      },

      // ========== –î–Ü–á –î–õ–Ø –í–Ü–ó–ê–†–î–ê ==========

      startNewItemWizard: async () => {
        const { sessionId, setLoading, clearError } = get();

        console.log('üéØ startNewItemWizard: sessionId =', sessionId);

        if (!sessionId) {
          console.error('‚ùå startNewItemWizard: No sessionId found');
          set({ error: SESSION_NOT_INITIALIZED_ERROR });
          return;
        }

        try {
          setLoading(true);
          clearError();

          const manager = await startNewItemWizard(sessionId);

          set({
            manager,
            currentState: 'ITEM_WIZARD_ACTIVE',
            wizardMode: 'create',
            editingItemId: null,
            activeWizardId: manager.activeWizardId || null,
            isLoading: false,
          });
        } catch (error) {
          set({
            error: error instanceof Error ? error.message : '–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –≤—ñ–∑–∞—Ä–¥–∞',
            isLoading: false,
          });
        }
      },

      startEditItemWizard: async (itemId: string) => {
        const { sessionId, setLoading, clearError } = get();

        if (!sessionId) {
          set({ error: SESSION_NOT_INITIALIZED_ERROR });
          return;
        }

        try {
          setLoading(true);
          clearError();

          const manager = await startEditItemWizard(sessionId, itemId);

          set({
            manager,
            currentState: 'ITEM_WIZARD_ACTIVE',
            wizardMode: 'edit',
            editingItemId: itemId,
            activeWizardId: manager.activeWizardId || null,
            isLoading: false,
          });
        } catch (error) {
          set({
            error: error instanceof Error ? error.message : '–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è',
            isLoading: false,
          });
        }
      },

      closeWizard: async () => {
        const { sessionId, setLoading, clearError } = get();

        if (!sessionId) {
          set({ error: SESSION_NOT_INITIALIZED_ERROR });
          return;
        }

        try {
          setLoading(true);
          clearError();

          const manager = await closeWizard(sessionId);

          set({
            manager,
            currentState: 'ITEMS_MANAGER_SCREEN',
            wizardMode: 'inactive',
            editingItemId: null,
            activeWizardId: null,
            isLoading: false,
          });
        } catch (error) {
          set({
            error: error instanceof Error ? error.message : '–ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –≤—ñ–∑–∞—Ä–¥–∞',
            isLoading: false,
          });
        }
      },

      // ========== –í–ê–õ–Ü–î–ê–¶–Ü–Ø –¢–ê –ù–ê–í–Ü–ì–ê–¶–Ü–Ø ==========

      validateCurrentState: async (): Promise<ValidationResult> => {
        const { sessionId, setLoading, clearError } = get();

        if (!sessionId) {
          const errorResult: ValidationResult = {
            valid: false,
            errors: [SESSION_NOT_INITIALIZED_ERROR],
          };
          set({ error: SESSION_NOT_INITIALIZED_ERROR });
          return errorResult;
        }

        try {
          setLoading(true);
          clearError();

          const result = await validateCurrentState(sessionId);

          set({ isLoading: false });
          return result;
        } catch (error) {
          const errorResult: ValidationResult = {
            valid: false,
            errors: [error instanceof Error ? error.message : '–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó'],
          };

          set({
            error: error instanceof Error ? error.message : '–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó',
            isLoading: false,
          });

          return errorResult;
        }
      },

      checkReadiness: async (): Promise<boolean> => {
        const { sessionId, setLoading, clearError } = get();

        if (!sessionId) {
          set({ error: SESSION_NOT_INITIALIZED_ERROR });
          return false;
        }

        try {
          setLoading(true);
          clearError();

          const isReady = await checkReadinessToProceed(sessionId);

          set({
            canProceedToNextStage: isReady,
            isLoading: false,
          });

          return isReady;
        } catch (error) {
          set({
            error: error instanceof Error ? error.message : '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ',
            isLoading: false,
          });
          return false;
        }
      },

      completeStage2: async () => {
        const { sessionId, setLoading, clearError } = get();

        if (!sessionId) {
          set({ error: SESSION_NOT_INITIALIZED_ERROR });
          return;
        }

        try {
          setLoading(true);
          clearError();

          const manager = await completeStage2(sessionId);

          set({
            manager,
            currentState: 'COMPLETED',
            isLoading: false,
          });
        } catch (error) {
          set({
            error: error instanceof Error ? error.message : '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ç–∞–ø—É',
            isLoading: false,
          });
        }
      },

      // ========== –°–ï–†–í–Ü–°–ù–Ü –î–Ü–á ==========

      clearError: () => set({ error: null }),

      setLoading: (loading: boolean) => set({ isLoading: loading }),
    }),
    {
      name: 'stage2-store',
      partialize: (state: Stage2Store) => ({
        sessionId: state.sessionId,
        orderId: state.orderId,
        currentState: state.currentState,
      }),
    }
  )
);
