/**
 * @fileoverview –ë—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∞ —Ö—É–∫ –¥–ª—è –¥–æ–º–µ–Ω—É "–ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤"
 *
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—è –º—ñ–∂ API —Ç–∞ UI —Å—Ç–æ—Ä–æ–º
 * –ü—Ä–∏–Ω—Ü–∏–ø: Single Responsibility Principle
 */

import { useCallback, useMemo, useEffect } from 'react';

import { useDebounce } from '@/shared/lib/hooks/useDebounce';

import { useClientSearchStore } from './client-search.store';
import { useClientSearchAPI } from './use-client-search-api.hook';

import type { SearchFormData, PhoneFormData } from './client-search.schemas';

/**
 * –•—É–∫ –¥–ª—è –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∏ –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤
 * –ö–æ–æ—Ä–¥–∏–Ω—É—î –≤–∑–∞—î–º–æ–¥—ñ—é –º—ñ–∂ API —Ç–∞ UI —Å—Ç–∞–Ω–æ–º
 */
export const useClientSearchBusiness = () => {
  const {
    // –°—Ç–∞–Ω
    searchTerm,
    phoneNumber,
    selectedClientId,
    showAdvanced,
    autoSearchEnabled,
    sessionId,

    // –î—ñ—ó –∑ —Å—Ç–æ—Ä–æ–º
    setSearchTerm,
    setPhoneNumber,
    setSelectedClient,
    toggleAdvanced,
    toggleAutoSearch,
    setSessionId,
    reset,
  } = useClientSearchStore();

  // API –æ–ø–µ—Ä–∞—Ü—ñ—ó
  const api = useClientSearchAPI(sessionId);

  // Debounced –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø–æ—à—É–∫—É
  const debouncedSearchTerm = useDebounce(searchTerm, 500); // 500ms –∑–∞—Ç—Ä–∏–º–∫–∞
  const debouncedPhoneNumber = useDebounce(phoneNumber, 500);

  // –°—Ç–∞–±—ñ–ª—å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ API —Ñ—É–Ω–∫—Ü—ñ—ó
  const searchClientsAPI = useCallback(
    (term: string) => api.operations.searchClients(term),
    [api.operations]
  );

  const searchByPhoneAPI = useCallback(
    (phone: string) => api.operations.searchByPhone(phone),
    [api.operations]
  );

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ –ø—Ä–∏ –∑–º—ñ–Ω—ñ debounced –∑–Ω–∞—á–µ–Ω—å (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–∏–π)
  useEffect(() => {
    console.log('üîç Debounce effect triggered:', {
      autoSearchEnabled,
      sessionId: !!sessionId,
      searchTerm,
      debouncedSearchTerm,
      length: debouncedSearchTerm?.length || 0,
    });

    if (autoSearchEnabled && sessionId && debouncedSearchTerm && debouncedSearchTerm.length >= 2) {
      console.log('üöÄ Auto-searching for:', debouncedSearchTerm);
      searchClientsAPI(debouncedSearchTerm).catch((error) => {
        console.error('Auto-search failed:', error);
      });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [autoSearchEnabled, sessionId, debouncedSearchTerm]);

  useEffect(() => {
    if (
      autoSearchEnabled &&
      sessionId &&
      debouncedPhoneNumber &&
      debouncedPhoneNumber.length >= 10
    ) {
      console.log('üìû Auto-searching by phone:', debouncedPhoneNumber);
      searchByPhoneAPI(debouncedPhoneNumber).catch((error) => {
        console.error('Auto phone search failed:', error);
      });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [autoSearchEnabled, sessionId, debouncedPhoneNumber]);

  // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ–π–Ω—ñ –±—ñ–∑–Ω–µ—Å-–æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ useCallback
  const initializeSearch = useCallback(async () => {
    try {
      const newSessionId = await api.operations.initializeSearch();

      if (typeof newSessionId === 'string') {
        setSessionId(newSessionId);
      }

      return newSessionId;
    } catch (error) {
      console.error('Business Error - Failed to initialize search:', error);
      throw error;
    }
  }, [api.operations, setSessionId]);

  const searchClients = useCallback(
    async (data: SearchFormData) => {
      try {
        // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
        setSearchTerm(data.searchTerm);

        // –í–∏–∫–æ–Ω—É—î–º–æ API –∑–∞–ø–∏—Ç
        return await api.operations.searchClients(data.searchTerm);
      } catch (error) {
        console.error('Business Error - Failed to search clients:', error);
        throw error;
      }
    },
    [api.operations, setSearchTerm]
  );

  const searchByPhone = useCallback(
    async (data: PhoneFormData) => {
      try {
        // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
        setPhoneNumber(data.phoneNumber);

        // –í–∏–∫–æ–Ω—É—î–º–æ API –∑–∞–ø–∏—Ç
        return await api.operations.searchByPhone(data.phoneNumber);
      } catch (error) {
        console.error('Business Error - Failed to search by phone:', error);
        throw error;
      }
    },
    [api.operations, setPhoneNumber]
  );

  const selectClient = useCallback(
    async (clientId: string) => {
      try {
        // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
        setSelectedClient(clientId);

        // –í–∏–∫–æ–Ω—É—î–º–æ API –∑–∞–ø–∏—Ç
        return await api.operations.selectClient(clientId);
      } catch (error) {
        console.error('Business Error - Failed to select client:', error);
        throw error;
      }
    },
    [api.operations, setSelectedClient]
  );

  const clearSearch = useCallback(async () => {
    try {
      // –°–ø–æ—á–∞—Ç–∫—É –æ—á–∏—â—É—î–º–æ API —Å—Ç–∞–Ω
      if (sessionId) {
        await api.operations.clearSearch();
      }
    } catch (error) {
      console.error('Business Error - Failed to clear search on server:', error);
      // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –ª–æ–∫–∞–ª—å–Ω–∏–º –æ—á–∏—â–µ–Ω–Ω—è–º –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ API –Ω–µ –≤–¥–∞–ª–æ—Å—è
    } finally {
      // –ó–∞–≤–∂–¥–∏ –æ—á–∏—â—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
      reset();
    }
  }, [api.operations, sessionId, reset]);

  // UI –æ–ø–µ—Ä–∞—Ü—ñ—ó (–ø—Ä–æ—Å—Ç—ñ, –±–µ–∑ API) –∑ useCallback
  const toggleAdvancedMode = useCallback(() => {
    toggleAdvanced();
  }, [toggleAdvanced]);

  const toggleAutoSearchMode = useCallback(() => {
    toggleAutoSearch();
  }, [toggleAutoSearch]);

  const updateSearchTerm = useCallback(
    (term: string) => {
      setSearchTerm(term);
    },
    [setSearchTerm]
  );

  const updatePhoneNumber = useCallback(
    (phone: string) => {
      setPhoneNumber(phone);
    },
    [setPhoneNumber]
  );

  const setExternalSessionId = useCallback(
    (newSessionId: string) => {
      setSessionId(newSessionId);
    },
    [setSessionId]
  );

  // –ú–µ–º–æ—ñ–∑–æ–≤–∞–Ω—ñ –≥—Ä—É–ø–∏ –¥–∞–Ω–∏—Ö
  const data = useMemo(() => api.data, [api.data]);
  const loading = useMemo(() => api.loading, [api.loading]);
  const ui = useMemo(
    () => ({
      searchTerm,
      phoneNumber,
      selectedClientId,
      showAdvanced,
      autoSearchEnabled,
      sessionId,
    }),
    [searchTerm, phoneNumber, selectedClientId, showAdvanced, autoSearchEnabled, sessionId]
  );

  return {
    // –û—Å–Ω–æ–≤–Ω—ñ –±—ñ–∑–Ω–µ—Å-–æ–ø–µ—Ä–∞—Ü—ñ—ó
    initializeSearch,
    searchClients,
    searchByPhone,
    selectClient,
    clearSearch,

    // UI –æ–ø–µ—Ä–∞—Ü—ñ—ó
    toggleAdvancedMode,
    toggleAutoSearchMode,
    updateSearchTerm,
    updatePhoneNumber,
    setExternalSessionId,

    // API –¥–∞–Ω—ñ
    data,

    // –°—Ç–∞–Ω–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    loading,

    // UI —Å—Ç–∞–Ω
    ui,
  };
};

export type UseClientSearchBusinessReturn = ReturnType<typeof useClientSearchBusiness>;
