/**
 * @fileoverview API —Ö—É–∫ –¥–ª—è –¥–æ–º–µ–Ω—É "–ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤"
 *
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å: —Ç—ñ–ª—å–∫–∏ API –æ–ø–µ—Ä–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ Orval —Ö—É–∫–∏
 * –ü—Ä–∏–Ω—Ü–∏–ø: Single Responsibility Principle
 */

import { useMemo } from 'react';

// –ì–æ—Ç–æ–≤—ñ Orval —Ö—É–∫–∏
import {
  useStage1SearchClients,
  useStage1SearchClientsByPhone,
  useStage1SelectClient,
  useStage1InitializeClientSearch,
  useStage1GetClientSearchState,
  useStage1GetSelectedClient,
  useStage1ClearClientSearch,
} from '@/shared/api/generated/wizard/aksiApi';

/**
 * –•—É–∫ –¥–ª—è API –æ–ø–µ—Ä–∞—Ü—ñ–π –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤
 * –Ü–Ω–∫–∞–ø—Å—É–ª—é—î –≤—Å—ñ Orval —Ö—É–∫–∏ —Ç–∞ –º—É—Ç–∞—Ü—ñ—ó
 */
export const useClientSearchAPI = (sessionId: string | null) => {
  // –ú—É—Ç–∞—Ü—ñ—ó –¥–ª—è –¥—ñ–π
  const searchClientsMutation = useStage1SearchClients({
    mutation: {
      onSuccess: (data) => {
        console.log('üéâ API Success - Search completed:', data);
      },
      onError: (error) => {
        console.error('üí• API Error - Search failed:', error);
      },
      onMutate: (variables) => {
        console.log('üöÄ API Mutation starting with variables:', variables);
      },
    },
  });

  const searchByPhoneMutation = useStage1SearchClientsByPhone({
    mutation: {
      onSuccess: (data) => {
        console.log('API Success - Phone search completed:', data);
      },
      onError: (error) => {
        console.error('API Error - Phone search failed:', error);
      },
    },
  });

  const selectClientMutation = useStage1SelectClient({
    mutation: {
      onSuccess: (data) => {
        console.log('API Success - Client selected:', data);
      },
      onError: (error) => {
        console.error('API Error - Client selection failed:', error);
      },
    },
  });

  const initializeMutation = useStage1InitializeClientSearch({
    mutation: {
      onSuccess: (data) => {
        console.log('API Success - Search initialized:', data);
      },
      onError: (error) => {
        console.error('API Error - Initialization failed:', error);
      },
    },
  });

  const clearSearchMutation = useStage1ClearClientSearch({
    mutation: {
      onSuccess: () => {
        console.log('API Success - Search cleared');
      },
      onError: (error) => {
        console.error('API Error - Clear failed:', error);
      },
    },
  });

  // –ó–∞–ø–∏—Ç–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—É
  const searchStateQuery = useStage1GetClientSearchState(sessionId || '', {
    query: {
      enabled: !!sessionId,
      refetchOnWindowFocus: false,
      retry: (failureCount, error: unknown) => {
        console.error(
          `‚ùå API Error: GET /v1/order-wizard/stage1/client-search/session/${sessionId}/state`,
          error
        );
        return failureCount < 2; // Retry –º–∞–∫—Å–∏–º—É–º 2 —Ä–∞–∑–∏
      },
    },
  });

  const selectedClientQuery = useStage1GetSelectedClient(sessionId || '', {
    query: {
      enabled: !!sessionId,
      refetchOnWindowFocus: false,
      retry: (failureCount, error: unknown) => {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ –º–æ–∂–ª–∏–≤—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø–æ–º–∏–ª–∫–∏
        const status =
          (error as any)?.status || (error as any)?.response?.status || (error as any)?.code;

        // 404 - —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –∫–æ–ª–∏ –∫–ª—ñ—î–Ω—Ç —â–µ –Ω–µ –æ–±—Ä–∞–Ω–∏–π
        if (status === 404) {
          console.log('‚ÑπÔ∏è No client selected yet (404) - this is normal');
          return false; // –ù–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç –¥–ª—è 404
        }

        console.error(
          `‚ùå API Error: GET /v1/order-wizard/stage1/client-search/session/${sessionId}/selected-client`,
          error
        );
        return failureCount < 2; // –ü–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ –¥–ª—è —ñ–Ω—à–∏—Ö –ø–æ–º–∏–ª–æ–∫
      },
    },
  });

  // API –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é sessionId
  const operations = useMemo(
    () => ({
      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ—à—É–∫—É
      initializeSearch: async () => {
        return await initializeMutation.mutateAsync();
      },

      // –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ –∑–∞–≥–∞–ª—å–Ω–∏–º —Ç–µ—Ä–º—ñ–Ω–æ–º
      searchClients: async (searchTerm: string) => {
        if (!sessionId) throw new Error('No session ID for client search');

        console.log('üîç API: Starting search for term:', searchTerm, 'sessionId:', sessionId);

        const result = await searchClientsMutation.mutateAsync({
          sessionId,
          data: {
            generalSearchTerm: searchTerm,
          },
        });

        console.log('‚úÖ API: Search completed, results:', result);
        return result;
      },

      // –ü–æ—à—É–∫ –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
      searchByPhone: async (phoneNumber: string) => {
        if (!sessionId) throw new Error('No session ID for phone search');

        return await searchByPhoneMutation.mutateAsync({
          sessionId,
          params: {
            phone: phoneNumber,
          },
        });
      },

      // –í–∏–±—ñ—Ä –∫–ª—ñ—î–Ω—Ç–∞
      selectClient: async (clientId: string) => {
        if (!sessionId) throw new Error('No session ID for client selection');

        return await selectClientMutation.mutateAsync({
          sessionId,
          params: {
            clientId,
          },
        });
      },

      // –û—á–∏—â–µ–Ω–Ω—è –ø–æ—à—É–∫—É
      clearSearch: async () => {
        if (!sessionId) throw new Error('No session ID for clear search');

        return await clearSearchMutation.mutateAsync({
          sessionId,
        });
      },
    }),
    [
      sessionId,
      initializeMutation,
      searchClientsMutation,
      searchByPhoneMutation,
      selectClientMutation,
      clearSearchMutation,
    ]
  );

  // –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ API
  const data = useMemo(() => {
    const searchResults = searchClientsMutation.data?.clients || [];
    const phoneSearchResults = searchByPhoneMutation.data?.clients || [];
    const allResults = [...searchResults, ...phoneSearchResults];

    console.log('üìä API Data update:', {
      searchResults: searchResults.length,
      phoneSearchResults: phoneSearchResults.length,
      allResults: allResults.length,
      searchState: searchStateQuery.data,
      selectedClient: selectedClientQuery.data,
    });

    return {
      // –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –∑ –º—É—Ç–∞—Ü—ñ–π
      searchResults,
      phoneSearchResults,

      // –î–∞–Ω—ñ –∑ –∑–∞–ø–∏—Ç—ñ–≤
      searchState: searchStateQuery.data,
      selectedClient: selectedClientQuery.data,

      // –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
      allResults,

      // –ú–µ—Ç–∞–¥–∞–Ω—ñ
      totalResults: allResults.length,
    };
  }, [
    searchClientsMutation.data,
    searchByPhoneMutation.data,
    searchStateQuery.data,
    selectedClientQuery.data,
  ]);

  // –°—Ç–∞–Ω–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  const loading = useMemo(
    () => ({
      isInitializing: initializeMutation.isPending,
      isSearching: searchClientsMutation.isPending,
      isPhoneSearching: searchByPhoneMutation.isPending,
      isSelecting: selectClientMutation.isPending,
      isClearing: clearSearchMutation.isPending,
      isLoadingState: searchStateQuery.isFetching,
      isLoadingSelectedClient: selectedClientQuery.isFetching,

      // –ê–≥—Ä–µ–≥–æ–≤–∞–Ω—ñ —Å—Ç–∞–Ω–∏
      anyLoading:
        initializeMutation.isPending ||
        searchClientsMutation.isPending ||
        searchByPhoneMutation.isPending ||
        selectClientMutation.isPending ||
        clearSearchMutation.isPending ||
        searchStateQuery.isFetching ||
        selectedClientQuery.isFetching,
    }),
    [
      initializeMutation.isPending,
      searchClientsMutation.isPending,
      searchByPhoneMutation.isPending,
      selectClientMutation.isPending,
      clearSearchMutation.isPending,
      searchStateQuery.isFetching,
      selectedClientQuery.isFetching,
    ]
  );

  return {
    operations,
    data,
    loading,
  };
};

export type UseClientSearchAPIReturn = ReturnType<typeof useClientSearchAPI>;
