// Stage1 Workflow —Ö—É–∫ - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—è –ø—ñ–¥–µ—Ç–∞–ø—ñ–≤ –∑ Orval —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é
// –¢–æ–Ω–∫–∞ –æ–±–≥–æ—Ä—Ç–∫–∞ –Ω–∞–¥ Orval —Ö—É–∫–∞–º–∏ + Zustand workflow —Å—Ç–æ—Ä

import { useMemo } from 'react';

// Orval —Ö—É–∫–∏ –¥–ª—è Stage1
import {
  useOrderWizardStart,
  useOrderWizardGetCurrentState,
  useOrderWizardCompleteStage1,
  useOrderWizardClientSelected,
} from '@api/main';

// Workflow —Å—Ç–æ—Ä
import { useStage1WorkflowStore } from './workflow.store';

/**
 * –¢–û–ù–ö–ê –û–ë–ì–û–†–¢–ö–ê –¥–ª—è Stage1 Workflow
 * –ü—Ä–∏–Ω—Ü–∏–ø: "–±–µ–∫–µ–Ω–¥ —Ä–æ–±–∏—Ç—å –≤—Å–µ, —Ñ—Ä–æ–Ω—Ç —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î"
 */
export const useStage1Workflow = () => {
  // ========== ZUSTAND UI –°–¢–ê–ù ==========
  const ui = useStage1WorkflowStore();

  // ========== ORVAL –ú–£–¢–ê–¶–Ü–á ==========
  const startWizardMutation = useOrderWizardStart();
  const completeStage1Mutation = useOrderWizardCompleteStage1();
  const clientSelectedMutation = useOrderWizardClientSelected();

  // ========== ORVAL –ó–ê–ü–ò–¢–ò ==========
  const currentStateQuery = useOrderWizardGetCurrentState(ui.sessionId || '', {
    query: {
      enabled: !!ui.sessionId,
      refetchOnWindowFocus: false,
      staleTime: 30000, // 30 —Å–µ–∫—É–Ω–¥
    },
  });

  // ========== –ü–†–û–°–¢–ò–ô –°–¢–ê–ù –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø ==========
  const loading = useMemo(
    () => ({
      isInitializing: startWizardMutation.isPending,
      isCompletingStage: completeStage1Mutation.isPending,
      isSelectingClient: clientSelectedMutation.isPending,
      isNavigating: ui.hasUnsavedChanges,
      isSyncing: currentStateQuery.isFetching,
      isLoading:
        startWizardMutation.isPending ||
        completeStage1Mutation.isPending ||
        clientSelectedMutation.isPending,
    }),
    [
      startWizardMutation.isPending,
      completeStage1Mutation.isPending,
      clientSelectedMutation.isPending,
      ui.hasUnsavedChanges,
      currentStateQuery.isFetching,
    ]
  );

  // ========== –ü–û–í–ï–†–ù–ï–ù–ù–Ø (–ì–†–£–ü–£–í–ê–ù–ù–Ø) ==========
  return {
    // UI —Å—Ç–∞–Ω –∑ Zustand
    ui: {
      sessionId: ui.sessionId,
      orderId: ui.orderId,
      selectedClientId: ui.selectedClientId,
      currentSubstep: ui.currentSubstep,
      isInitialized: ui.isInitialized,
      isCompleted: ui.isCompleted,
      completedSubsteps: ui.completedSubsteps,
      canProceedToNext: ui.canProceedToNext,
      hasValidationErrors: ui.hasValidationErrors,
      validationMessage: ui.validationMessage,
      hasUnsavedChanges: ui.hasUnsavedChanges,
      lastSavedAt: ui.lastSavedAt,

      // –î—ñ—ó
      initializeWorkflow: ui.initializeWorkflow,
      resetWorkflow: ui.resetWorkflow,
      setSelectedClientId: ui.setSelectedClientId,
      goToSubstep: ui.goToSubstep,
      goToNextSubstep: ui.goToNextSubstep,
      goToPreviousSubstep: ui.goToPreviousSubstep,
      markSubstepCompleted: ui.markSubstepCompleted,
      markSubstepIncomplete: ui.markSubstepIncomplete,
      setCanProceedToNext: ui.setCanProceedToNext,
      setValidationError: ui.setValidationError,
      clearValidationError: ui.clearValidationError,
      markHasUnsavedChanges: ui.markHasUnsavedChanges,
      markChangesSaved: ui.markChangesSaved,
      completeWorkflow: ui.completeWorkflow,

      // –ö–æ–º–ø–æ–∑–∏—Ü—ñ–π–Ω—ñ –¥—ñ—ó (–∫–æ–º–±—ñ–Ω—É—é—Ç—å UI + API)
      selectClient: async (clientId: string, substep: 'client-search' | 'client-creation') => {
        try {
          console.log('üîÑ selectClient –≤–∏–∫–ª–∏–∫–∞–Ω–æ:', { clientId, substep, sessionId: ui.sessionId });

          // 1. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ selectedClientId –≤ UI —Å—Ç–∞–Ω—ñ
          ui.setSelectedClientId(clientId);
          console.log('‚úÖ selectedClientId –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ UI —Å—Ç–∞–Ω—ñ');

          // 2. –í–∏–∫–ª–∏–∫–∞—î–º–æ API –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –∑ CLIENT_SELECTION –¥–æ ORDER_INITIALIZATION
          if (ui.sessionId) {
            console.log('üîÑ –í–∏–∫–ª–∏–∫–∞—î–º–æ clientSelected API...');
            console.log('üîÑ sessionId –¥–ª—è API –≤–∏–∫–ª–∏–∫—É:', ui.sessionId);
            const result = await clientSelectedMutation.mutateAsync({ sessionId: ui.sessionId });
            console.log('üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç clientSelected API:', result);
            console.log(
              '‚úÖ Client selected API —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ, state machine –º–∞—î –ø–µ—Ä–µ–π—Ç–∏ –¥–æ ORDER_INITIALIZATION'
            );
          } else {
            console.error('‚ùå –ù–µ–º–∞—î sessionId –¥–ª—è –≤–∏–∫–ª–∏–∫—É clientSelected API');
            ui.setValidationError('–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó –¥–ª—è –≤–∏–±–æ—Ä—É –∫–ª—ñ—î–Ω—Ç–∞');
            return false;
          }

          // 3. –û–Ω–æ–≤–ª—é—î–º–æ UI —Å—Ç–∞–Ω
          console.log('üîÑ –û–Ω–æ–≤–ª—é—î–º–æ UI —Å—Ç–∞–Ω...');
          ui.goToSubstep('basic-order-info');
          ui.markSubstepCompleted(substep);
          ui.setCanProceedToNext(true);
          console.log('‚úÖ UI —Å—Ç–∞–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ, –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ basic-order-info');

          return true;
        } catch (error) {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –∫–ª—ñ—î–Ω—Ç–∞:', error);
          ui.setValidationError('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –∫–ª—ñ—î–Ω—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
          return false;
        }
      },
    },

    // API –¥–∞–Ω—ñ –∑ Orval
    data: {
      currentState: currentStateQuery.data,
    },

    // –°—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    loading,

    // –ü—Ä—è–º–∏–π –¥–æ—Å—Ç—É–ø –¥–æ Orval –º—É—Ç–∞—Ü—ñ–π
    mutations: {
      startWizard: startWizardMutation,
      completeStage1: completeStage1Mutation,
      clientSelected: clientSelectedMutation,
    },

    // –ü—Ä—è–º–∏–π –¥–æ—Å—Ç—É–ø –¥–æ Orval –∑–∞–ø–∏—Ç—ñ–≤
    queries: {
      currentState: currentStateQuery,
    },
  };
};

export type UseStage1WorkflowReturn = ReturnType<typeof useStage1Workflow>;
