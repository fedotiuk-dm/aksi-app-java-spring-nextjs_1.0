/**
 * @fileoverview API —Ö—É–∫ –¥–ª—è –¥–æ–º–µ–Ω—É "–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
 *
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å: —Ç—ñ–ª—å–∫–∏ API –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ backend
 * –ü—Ä–∏–Ω—Ü–∏–ø: Single Responsibility Principle
 */

import { useCallback } from 'react';
import React from 'react';

// Orval API —Ö—É–∫–∏ —Ç–∞ —Ç–∏–ø–∏
import {
  useStage1InitializeBasicOrder,
  useStage1GetBasicOrderData,
  useStage1GetBasicOrderState,
  useStage1UpdateBasicOrder,
  useStage1ValidateBasicOrder,
  useStage1SelectBranch,
  useStage1CompleteBasicOrder,
  useStage1CancelBasicOrder,
  useStage1ResetBasicOrder,
  useStage1StartBasicOrderWorkflow,
  useStage1GetBranchesForSession,
  useStage1AreBranchesLoaded,
  useStage1GenerateReceiptNumber,
  useStage1SetUniqueTag,
  type Stage1UpdateBasicOrderMutationBody,
} from '@/shared/api/generated/wizard/aksiApi';

// –Ü–º–ø–æ—Ä—Ç —Ç–∏–ø—É —Ñ—ñ–ª—ñ—ó
import type { BasicOrderUIFormData } from './basic-order-info.schemas';
import type { BranchLocationDTO } from '@/shared/api/generated/wizard/aksiApi.schemas';

const SESSION_ID_REQUIRED_ERROR = 'Session ID is required';

/**
 * –•—É–∫ –¥–ª—è API –æ–ø–µ—Ä–∞—Ü—ñ–π –æ—Å–Ω–æ–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * –Ü–Ω–∫–∞–ø—Å—É–ª—é—î –≤—Å—ñ —Å–µ—Ä–≤–µ—Ä–Ω—ñ –≤–∑–∞—î–º–æ–¥—ñ—ó
 */
export const useBasicOrderInfoAPI = (sessionId: string | null) => {
  // API –º—É—Ç–∞—Ü—ñ—ó (–≤–∏–∫–ª–∏–∫–∞—é—Ç—å—Å—è –Ω–∞ –≤–µ—Ä—Ö–Ω—å–æ–º—É —Ä—ñ–≤–Ω—ñ)
  const initializeBasicOrderMutation = useStage1InitializeBasicOrder();
  const updateBasicOrderMutation = useStage1UpdateBasicOrder();
  const validateBasicOrderMutation = useStage1ValidateBasicOrder();
  const selectBranchMutation = useStage1SelectBranch();
  const completeBasicOrderMutation = useStage1CompleteBasicOrder();
  const cancelBasicOrderMutation = useStage1CancelBasicOrder();
  const resetBasicOrderMutation = useStage1ResetBasicOrder();
  const startWorkflowMutation = useStage1StartBasicOrderWorkflow();
  const generateReceiptNumberMutation = useStage1GenerateReceiptNumber();
  const setUniqueTagMutation = useStage1SetUniqueTag();

  // API –∑–∞–ø–∏—Ç–∏ –¥–ª—è –¥–∞–Ω–∏—Ö (–≤–∏–∫–ª–∏–∫–∞—é—Ç—å—Å—è –Ω–∞ –≤–µ—Ä—Ö–Ω—å–æ–º—É —Ä—ñ–≤–Ω—ñ –∑ sessionId)
  const basicOrderDataQuery = useStage1GetBasicOrderData(sessionId || '', {
    query: {
      enabled: !!sessionId,
      refetchOnWindowFocus: false,
    },
  });

  const basicOrderStateQuery = useStage1GetBasicOrderState(sessionId || '', {
    query: {
      enabled: !!sessionId,
      refetchInterval: 2000, // –ü–æ–ª–ª—ñ–Ω–≥ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É workflow
      refetchOnWindowFocus: false,
    },
  });

  // API –∑–∞–ø–∏—Ç–∏ –¥–ª—è —Ñ—ñ–ª—ñ–π
  const branchesQuery = useStage1GetBranchesForSession(sessionId || '', {
    query: {
      enabled: !!sessionId && sessionId.length > 10, // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ sessionId –≤–∞–ª—ñ–¥–Ω–∏–π
      refetchOnWindowFocus: false,
      staleTime: 5 * 60 * 1000, // –§—ñ–ª—ñ—ó –∫–µ—à—É—é—Ç—å—Å—è –Ω–∞ 5 —Ö–≤–∏–ª–∏–Ω
      retry: 1, // –ó–º–µ–Ω—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä—ñ–≤
      retryDelay: 1000, // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—Ç–æ—Ä–∞–º–∏
    },
  });

  const branchesLoadedQuery = useStage1AreBranchesLoaded(sessionId || '', {
    query: {
      enabled: !!sessionId && sessionId.length > 10, // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ sessionId –≤–∞–ª—ñ–¥–Ω–∏–π
      refetchOnWindowFocus: false,
      retry: 1, // –ó–º–µ–Ω—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä—ñ–≤
      retryDelay: 1000, // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—Ç–æ—Ä–∞–º–∏
    },
  });

  // –ö–∞—Å—Ç–æ–º–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö —Ñ—ñ–ª—ñ–π (API –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤, –∞–ª–µ Orval –≥–µ–Ω–µ—Ä—É—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø)
  const processedBranchesData = React.useMemo(() => {
    const rawData = branchesQuery.data;

    // API –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ —Ñ—ñ–ª—ñ–π –Ω–∞–ø—Ä—è–º—É
    if (Array.isArray(rawData)) {
      return rawData as BranchLocationDTO[];
    }

    // –Ø–∫—â–æ –¥–∞–Ω—ñ –ø—Ä–∏—Ö–æ–¥—è—Ç—å —è–∫ –æ–±'—î–∫—Ç, —à—É–∫–∞—î–º–æ –º–∞—Å–∏–≤ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ
    if (rawData && typeof rawData === 'object') {
      const dataObject = rawData as Record<string, unknown>;
      const possibleArrays = [
        dataObject.branches,
        dataObject.data,
        dataObject.items,
        dataObject.content,
      ];

      for (const possibleArray of possibleArrays) {
        if (Array.isArray(possibleArray)) {
          return possibleArray as BranchLocationDTO[];
        }
      }
    }

    return [];
  }, [branchesQuery.data]);

  // –ú–µ—Ç–æ–¥–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
  const refreshBranches = useCallback(async () => {
    if (!sessionId) return;

    try {
      return await branchesQuery.refetch();
    } catch (error) {
      console.error('Failed to refresh branches:', error);
      throw error;
    }
  }, [sessionId, branchesQuery]);

  // –û–±–≥–æ—Ä—Ç–∫–∏ –¥–ª—è –º—É—Ç–∞—Ü—ñ–π –∑ error handling
  const initializeBasicOrder = useCallback(async () => {
    try {
      return await initializeBasicOrderMutation.mutateAsync();
    } catch (error) {
      console.error('API Error - Failed to initialize basic order:', error);
      throw error;
    }
  }, [initializeBasicOrderMutation]);

  const updateBasicOrderData = useCallback(
    async (data: Partial<BasicOrderUIFormData>) => {
      if (!sessionId) throw new Error(SESSION_ID_REQUIRED_ERROR);

      try {
        return await updateBasicOrderMutation.mutateAsync({
          sessionId,
          data: data as Stage1UpdateBasicOrderMutationBody,
        });
      } catch (error) {
        console.error('API Error - Failed to update basic order data:', error);
        throw error;
      }
    },
    [sessionId, updateBasicOrderMutation]
  );

  const validateBasicOrder = useCallback(async () => {
    if (!sessionId) throw new Error(SESSION_ID_REQUIRED_ERROR);

    try {
      return await validateBasicOrderMutation.mutateAsync({ sessionId });
    } catch (error) {
      console.error('API Error - Failed to validate basic order:', error);
      throw error;
    }
  }, [sessionId, validateBasicOrderMutation]);

  const selectBranch = useCallback(
    async (branchId: string) => {
      if (!sessionId) throw new Error(SESSION_ID_REQUIRED_ERROR);

      try {
        return await selectBranchMutation.mutateAsync({
          sessionId,
          params: { branchId },
        });
      } catch (error) {
        console.error('API Error - Failed to select branch:', error);
        throw error;
      }
    },
    [sessionId, selectBranchMutation]
  );

  const completeBasicOrder = useCallback(async () => {
    if (!sessionId) throw new Error(SESSION_ID_REQUIRED_ERROR);

    try {
      return await completeBasicOrderMutation.mutateAsync({ sessionId });
    } catch (error) {
      console.error('API Error - Failed to complete basic order:', error);
      throw error;
    }
  }, [sessionId, completeBasicOrderMutation]);

  const cancelBasicOrder = useCallback(async () => {
    if (!sessionId) return;

    try {
      return await cancelBasicOrderMutation.mutateAsync({ sessionId });
    } catch (error) {
      console.error('API Error - Failed to cancel basic order:', error);
      throw error;
    }
  }, [sessionId, cancelBasicOrderMutation]);

  const resetBasicOrder = useCallback(async () => {
    if (!sessionId) return;

    try {
      return await resetBasicOrderMutation.mutateAsync({ sessionId });
    } catch (error) {
      console.error('API Error - Failed to reset basic order:', error);
      throw error;
    }
  }, [sessionId, resetBasicOrderMutation]);

  const startWorkflow = useCallback(async () => {
    if (!sessionId) throw new Error(SESSION_ID_REQUIRED_ERROR);

    try {
      return await startWorkflowMutation.mutateAsync();
    } catch (error) {
      console.error('API Error - Failed to start workflow:', error);
      throw error;
    }
  }, [sessionId, startWorkflowMutation]);

  const generateReceiptNumber = useCallback(
    async (branchCode: string) => {
      if (!sessionId) throw new Error(SESSION_ID_REQUIRED_ERROR);

      try {
        console.log('üåê API –≤–∏–∫–ª–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –Ω–æ–º–µ—Ä–∞ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó:', { sessionId, branchCode });

        const result = await generateReceiptNumberMutation.mutateAsync({
          sessionId,
          params: { branchCode },
        });

        console.log('üåê API –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –Ω–æ–º–µ—Ä–∞ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó:', result);
        return result;
      } catch (error) {
        console.error('API Error - Failed to generate receipt number:', error);
        throw error;
      }
    },
    [sessionId, generateReceiptNumberMutation]
  );

  const setUniqueTag = useCallback(
    async (uniqueTag: string) => {
      if (!sessionId) throw new Error(SESSION_ID_REQUIRED_ERROR);

      try {
        return await setUniqueTagMutation.mutateAsync({
          sessionId,
          params: { uniqueTag },
        });
      } catch (error) {
        console.error('API Error - Failed to set unique tag:', error);
        throw error;
      }
    },
    [sessionId, setUniqueTagMutation]
  );

  const refreshBasicOrderData = useCallback(async () => {
    if (!sessionId) return;
    try {
      await basicOrderDataQuery.refetch();
    } catch (error) {
      console.error('API Error - Failed to refresh basic order data:', error);
    }
  }, [sessionId, basicOrderDataQuery]);

  return {
    // –û–ø–µ—Ä–∞—Ü—ñ—ó
    operations: {
      initializeBasicOrder,
      updateBasicOrderData,
      validateBasicOrder,
      selectBranch,
      completeBasicOrder,
      cancelBasicOrder,
      resetBasicOrder,
      startWorkflow,
      generateReceiptNumber,
      setUniqueTag,
      refreshBranches,
      refreshBasicOrderData,
    },

    // –°—Ç–∞–Ω–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    loading: {
      isInitializing: initializeBasicOrderMutation.isPending,
      isUpdating: updateBasicOrderMutation.isPending,
      isValidating: validateBasicOrderMutation.isPending,
      isSelectingBranch: selectBranchMutation.isPending,
      isCompleting: completeBasicOrderMutation.isPending,
      isCancelling: cancelBasicOrderMutation.isPending,
      isResetting: resetBasicOrderMutation.isPending,
      isStartingWorkflow: startWorkflowMutation.isPending,
      isGeneratingReceiptNumber: generateReceiptNumberMutation.isPending,
      isSettingUniqueTag: setUniqueTagMutation.isPending,
      isLoadingOrderData: basicOrderDataQuery.isFetching,
      isLoadingOrderState: basicOrderStateQuery.isFetching,
      isLoadingBranches: branchesQuery.isFetching,
      isLoadingBranchesStatus: branchesLoadedQuery.isFetching,
    },

    // API –¥–∞–Ω—ñ
    data: {
      basicOrderData: basicOrderDataQuery.data,
      orderState: basicOrderStateQuery.data,
      completedOrder: completeBasicOrderMutation.data,
      branches: processedBranchesData,
      areBranchesLoaded: branchesLoadedQuery.data,
    },
  };
};

export type UseBasicOrderInfoAPIReturn = ReturnType<typeof useBasicOrderInfoAPI>;
