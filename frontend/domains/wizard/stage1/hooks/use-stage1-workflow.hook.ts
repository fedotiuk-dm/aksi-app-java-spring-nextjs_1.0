// üéØ –ì–û–õ–û–í–ù–ò–ô –ö–û–ú–ü–û–ó–ò–¶–Ü–ô–ù–ò–ô –•–£–ö –¥–ª—è Stage1 Order Wizard
// –û–±'—î–¥–Ω—É—î –≤—Å—ñ –ø—ñ–¥–µ—Ç–∞–ø–∏ —Ç–∞ –∫–µ—Ä—É—î workflow

import { useCallback, useMemo } from 'react';

import { useBasicOrderInfo } from './use-basic-order-info.hook';
import { useClientCreate } from './use-client-create.hook';
import { useClientSearch } from './use-client-search.hook';
import { useMainStore } from '../../main/store/main.store';
import {
  STAGE1_SUBSTEPS,
  getSubstepProgress,
  canNavigateToSubstep,
  type Stage1Substep,
} from '../utils/stage1-mapping';

/**
 * üéØ –ì–æ–ª–æ–≤–Ω–∏–π —Ö—É–∫ –¥–ª—è Stage1 Order Wizard
 *
 * –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å:
 * - –ö–µ—Ä—É–≤–∞–Ω–Ω—è workflow –º—ñ–∂ –ø—ñ–¥–µ—Ç–∞–ø–∞–º–∏
 * - –ö–æ–º–ø–æ–∑–∏—Ü—ñ—è –≤—Å—ñ—Ö –ø—ñ–¥–µ—Ç–∞–ø—ñ–≤
 * - –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –º—ñ–∂ –∫—Ä–æ–∫–∞–º–∏
 * - –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –¥–æ –ø–µ—Ä–µ—Ö–æ–¥—É
 */
export const useStage1Workflow = () => {
  // 1. –ü—ñ–¥–µ—Ç–∞–ø–∏
  const clientSearch = useClientSearch();
  const clientCreate = useClientCreate();
  const basicOrderInfo = useBasicOrderInfo();

  // 2. UI —Å—Ç–∞–Ω –∑ Zustand
  const sessionId = useMainStore((state) => state.sessionId);

  // 3. –ü–æ—Ç–æ—á–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∏–π –ø—ñ–¥–µ—Ç–∞–ø (–≤–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ UI —Å—Ç–∞–Ω—ñ–≤)
  const currentSubstep = useMemo((): Stage1Substep => {
    if (clientCreate.ui.isCreateMode) {
      return STAGE1_SUBSTEPS.CLIENT_CREATION;
    }
    if (basicOrderInfo.ui.isBasicOrderInfoMode) {
      return STAGE1_SUBSTEPS.BASIC_ORDER_INFO;
    }
    // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –ø–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞
    return STAGE1_SUBSTEPS.CLIENT_SEARCH;
  }, [clientCreate.ui.isCreateMode, basicOrderInfo.ui.isBasicOrderInfoMode]);

  // 4. –û–±—Ä–æ–±–Ω–∏–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
  const handleNavigateToSubstep = useCallback(
    (targetSubstep: Stage1Substep) => {
      if (!canNavigateToSubstep(targetSubstep, currentSubstep)) {
        console.warn('‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –ø—ñ–¥–µ—Ç–∞–ø—É:', targetSubstep);
        return;
      }

      // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—Å—ñ —Ä–µ–∂–∏–º–∏
      clientSearch.actions.startSearch();
      clientCreate.actions.cancelCreate();
      basicOrderInfo.actions.cancelBasicOrderInfo();

      // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–µ–∂–∏–º
      switch (targetSubstep) {
        case STAGE1_SUBSTEPS.CLIENT_SEARCH:
          clientSearch.actions.startSearch();
          break;
        case STAGE1_SUBSTEPS.CLIENT_CREATION:
          clientCreate.actions.startCreate();
          break;
        case STAGE1_SUBSTEPS.BASIC_ORDER_INFO:
          basicOrderInfo.actions.startBasicOrderInfo();
          break;
      }
    },
    [currentSubstep, clientSearch.actions, clientCreate.actions, basicOrderInfo.actions]
  );

  const handleNextSubstep = useCallback(() => {
    const substeps = Object.values(STAGE1_SUBSTEPS);
    const currentIndex = substeps.indexOf(currentSubstep);

    if (currentIndex < substeps.length - 1) {
      const nextSubstep = substeps[currentIndex + 1];
      handleNavigateToSubstep(nextSubstep);
    }
  }, [currentSubstep, handleNavigateToSubstep]);

  const handlePreviousSubstep = useCallback(() => {
    const substeps = Object.values(STAGE1_SUBSTEPS);
    const currentIndex = substeps.indexOf(currentSubstep);

    if (currentIndex > 0) {
      const previousSubstep = substeps[currentIndex - 1];
      handleNavigateToSubstep(previousSubstep);
    }
  }, [currentSubstep, handleNavigateToSubstep]);

  // 5. Computed –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è workflow
  const computed = useMemo(() => {
    const substeps = Object.values(STAGE1_SUBSTEPS);
    const currentIndex = substeps.indexOf(currentSubstep);

    return {
      // –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
      currentSubstep,
      currentSubstepIndex: currentIndex,
      totalSubsteps: substeps.length,
      progress: getSubstepProgress(currentSubstep),

      // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
      canGoNext: currentIndex < substeps.length - 1,
      canGoPrevious: currentIndex > 0,
      isFirstSubstep: currentIndex === 0,
      isLastSubstep: currentIndex === substeps.length - 1,

      // –ì–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –ø—ñ–¥–µ—Ç–∞–ø—ñ–≤
      isClientSearchCompleted: !!clientSearch.computed.selectedClient,
      isClientCreateCompleted:
        clientCreate.computed.isFormValid && !clientCreate.loading.isCreating,
      isBasicOrderInfoCompleted:
        basicOrderInfo.computed.isFormValid && !basicOrderInfo.loading.isUpdating,

      // –ó–∞–≥–∞–ª—å–Ω–∞ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å Stage1
      isStage1Ready:
        !!sessionId &&
        !!clientSearch.computed.selectedClient &&
        !!basicOrderInfo.computed.selectedBranch &&
        !!basicOrderInfo.computed.hasUniqueTag &&
        !!basicOrderInfo.computed.hasReceiptNumber,

      // –°—Ç–∞–Ω–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      isAnyLoading:
        clientSearch.loading.isSearching ||
        clientCreate.loading.isCreating ||
        basicOrderInfo.loading.isUpdating,
    };
  }, [
    currentSubstep,
    sessionId,
    clientSearch.computed.selectedClient,
    clientCreate.computed.isFormValid,
    clientCreate.loading.isCreating,
    basicOrderInfo.computed.isFormValid,
    basicOrderInfo.computed.selectedBranch,
    basicOrderInfo.computed.hasUniqueTag,
    basicOrderInfo.computed.hasReceiptNumber,
    basicOrderInfo.loading.isUpdating,
    clientSearch.loading.isSearching,
  ]);

  // 6. –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
  return {
    // –ü—ñ–¥–µ—Ç–∞–ø–∏
    substeps: {
      clientSearch,
      clientCreate,
      basicOrderInfo,
    },

    // Workflow —Å—Ç–∞–Ω
    workflow: {
      currentSubstep: computed.currentSubstep,
      currentIndex: computed.currentSubstepIndex,
      totalSubsteps: computed.totalSubsteps,
      progress: computed.progress,
    },

    // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
    navigation: {
      canGoNext: computed.canGoNext,
      canGoPrevious: computed.canGoPrevious,
      isFirstSubstep: computed.isFirstSubstep,
      isLastSubstep: computed.isLastSubstep,
      navigateToSubstep: handleNavigateToSubstep,
      nextSubstep: handleNextSubstep,
      previousSubstep: handlePreviousSubstep,
    },

    // –°—Ç–∞–Ω–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ
    readiness: {
      isClientSearchCompleted: computed.isClientSearchCompleted,
      isClientCreateCompleted: computed.isClientCreateCompleted,
      isBasicOrderInfoCompleted: computed.isBasicOrderInfoCompleted,
      isStage1Ready: computed.isStage1Ready,
    },

    // –ó–∞–≥–∞–ª—å–Ω—ñ —Å—Ç–∞–Ω–∏
    loading: {
      isAnyLoading: computed.isAnyLoading,
    },

    // Computed –∑–Ω–∞—á–µ–Ω–Ω—è
    computed,

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
    constants: {
      substeps: STAGE1_SUBSTEPS,
    },
  };
};

export type UseStage1WorkflowReturn = ReturnType<typeof useStage1Workflow>;
