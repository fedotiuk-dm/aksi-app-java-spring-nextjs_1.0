// üéØ –ö–û–ú–ü–û–ó–ò–¶–Ü–ô–ù–ò–ô –•–£–ö –¥–ª—è –≤–∏–±–æ—Ä—É/—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
// –û–±'—î–¥–Ω—É—î –ª–æ–≥—ñ–∫—É –ø–æ—à—É–∫—É —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –≤ –æ–¥–Ω–æ–º—É –º—ñ—Å—Ü—ñ

import { useCallback, useMemo } from 'react';

import { useClientCreate } from './use-client-create.hook';
import { useClientSearch } from './use-client-search.hook';
import { CLIENT_MODES, type ClientMode } from '../utils/stage1-mapping';

/**
 * üéØ –ì–æ–ª–æ–≤–Ω–∏–π —Ö—É–∫ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏ –≤ Stage1
 *
 * –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å:
 * - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –º—ñ–∂ —Ä–µ–∂–∏–º–∞–º–∏ –ø–æ—à—É–∫—É —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
 * - –ö–æ–º–ø–æ–∑–∏—Ü—ñ—è –ª–æ–≥—ñ–∫–∏ –ø–æ—à—É–∫—É —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
 * - –Ñ–¥–∏–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
 */
export const useClientSelection = () => {
  // 1. –ü—ñ–¥—Ö—É–∫–∏
  const clientSearch = useClientSearch();
  const clientCreate = useClientCreate();

  // 2. –ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏
  const currentMode = useMemo((): ClientMode => {
    if (clientCreate.ui.isCreateMode) {
      return CLIENT_MODES.CREATE;
    }
    return CLIENT_MODES.SEARCH;
  }, [clientCreate.ui.isCreateMode]);

  // 3. –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è —Ä–µ–∂–∏–º—ñ–≤
  const handleSwitchToSearch = useCallback(() => {
    clientCreate.actions.cancelCreate();
    clientSearch.actions.startSearch();
  }, [clientCreate.actions, clientSearch.actions]);

  const handleSwitchToCreate = useCallback(() => {
    clientSearch.actions.clearSearch();
    clientCreate.actions.startCreate();
  }, [clientSearch.actions, clientCreate.actions]);

  // 4. –û–±—Ä–æ–±–Ω–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—ñ–≤
  const handleClientSelected = useCallback(() => {
    // –ö–ª—ñ—î–Ω—Ç –æ–±—Ä–∞–Ω–∏–π - –º–æ–∂–Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–∏ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –µ—Ç–∞–ø—É
    return clientSearch.computed.selectedClient;
  }, [clientSearch.computed.selectedClient]);

  const handleClientCreated = useCallback(() => {
    // –ö–ª—ñ—î–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –ø–æ—à—É–∫—É –∑ –∞–≤—Ç–æ–≤–∏–±–æ—Ä–æ–º
    handleSwitchToSearch();
    return clientCreate.data.creationState;
  }, [clientCreate.data.creationState, handleSwitchToSearch]);

  // 5. Computed –∑–Ω–∞—á–µ–Ω–Ω—è
  const computed = useMemo(() => {
    return {
      // –†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏
      currentMode,
      isSearchMode: currentMode === CLIENT_MODES.SEARCH,
      isCreateMode: currentMode === CLIENT_MODES.CREATE,

      // –°—Ç–∞–Ω –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ
      hasSelectedClient: !!clientSearch.computed.selectedClient,
      isClientSelectionCompleted: !!clientSearch.computed.selectedClient,

      // –û–±—Ä–∞–Ω–∏–π –∫–ª—ñ—î–Ω—Ç
      selectedClient: clientSearch.computed.selectedClient,

      // –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –µ—Ç–∞–ø—É
      canProceedToNextStep: !!clientSearch.computed.selectedClient,
    };
  }, [currentMode, clientSearch.computed.selectedClient]);

  // 6. –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
  return {
    // –†–µ–∂–∏–º–∏ —Ä–æ–±–æ—Ç–∏
    mode: {
      current: computed.currentMode,
      isSearch: computed.isSearchMode,
      isCreate: computed.isCreateMode,
      switchToSearch: handleSwitchToSearch,
      switchToCreate: handleSwitchToCreate,
    },

    // –ü—ñ–¥—Ö—É–∫–∏
    search: clientSearch,
    create: clientCreate,

    // –î–∞–Ω—ñ
    data: {
      selectedClient: computed.selectedClient,
      creationState: clientCreate.data.creationState,
    },

    // –°—Ç–∞–Ω–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    loading: {
      isSearching: clientSearch.loading.isSearching,
      isCreating: clientCreate.loading.isCreating,
      isAnyLoading: clientSearch.loading.isSearching || clientCreate.loading.isCreating,
    },

    // –î—ñ—ó
    actions: {
      selectClient: clientSearch.actions.selectClient,
      createClient: clientCreate.actions.createClient,
      onClientSelected: handleClientSelected,
      onClientCreated: handleClientCreated,
    },

    // Computed –∑–Ω–∞—á–µ–Ω–Ω—è
    computed,

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
    constants: {
      modes: CLIENT_MODES,
    },
  };
};

export type UseClientSelectionReturn = ReturnType<typeof useClientSelection>;
