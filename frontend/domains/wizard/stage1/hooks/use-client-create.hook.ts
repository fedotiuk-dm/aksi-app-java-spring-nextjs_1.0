// üë§ –ü–Ü–î–ï–¢–ê–ü 1.2: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
// –ö–æ–º–ø–æ–∑–∏—Ü—ñ–π–Ω–∏–π —Ö—É–∫ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ñ–æ—Ä–º–æ—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞

import { zodResolver } from '@hookform/resolvers/zod';
import { useCallback, useMemo } from 'react';
import { useForm } from 'react-hook-form';

// –ì–æ—Ç–æ–≤—ñ React Query —Ö—É–∫–∏ –∑ Orval –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
import {
  useStage1UpdateClientData,
  useStage1CreateClient,
  useStage1GetClientFormState,
  useStage1CompleteClientCreation,
} from '@/shared/api/generated/stage1';

// Zod —Å—Ö–µ–º–∏ –∑ Orval
import { stage1UpdateClientDataBody } from '@/shared/api/generated/stage1/schemas.zod';
// –¢–∏–ø–∏ –∑ API
import type { NewClientFormDTO } from '@/shared/api/generated/stage1';

import { useStage1Store } from '../store/stage1.store';
import { useMainStore } from '../../main/store/main.store';
import {
  CONTACT_METHODS,
  INFO_SOURCES,
  CONTACT_METHOD_NAMES,
  INFO_SOURCE_NAMES,
  getContactMethodName,
  getInfoSourceName,
} from '../utils/stage1-mapping';

/**
 * üë§ –•—É–∫ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ (–ø—ñ–¥–µ—Ç–∞–ø 1.2)
 *
 * –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å:
 * - –§–æ—Ä–º–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é
 * - –í–∏–±—ñ—Ä —Å–ø–æ—Å–æ–±—ñ–≤ –∑–≤'—è–∑–∫—É (–º—É–ª—å—Ç–∏–≤–∏–±—ñ—Ä)
 * - –í–∏–±—ñ—Ä –¥–∂–µ—Ä–µ–ª–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ö—ñ–º—á–∏—Å—Ç–∫—É
 * - –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ React Hook Form + Zod
 */
export const useClientCreate = () => {
  // 1. UI —Å—Ç–∞–Ω –∑ Zustand
  const sessionId = useMainStore((state) => state.sessionId);
  const { isClientCreateMode, clientCreateFormData, setClientCreateMode, setClientCreateFormData } =
    useStage1Store();

  // 2. API —Ö—É–∫–∏ –∑ Orval - Query
  const clientFormStateQuery = useStage1GetClientFormState(sessionId || '', {
    query: {
      enabled: !!sessionId && isClientCreateMode,
      staleTime: 30000,
    },
  });

  // 3. React Hook Form –∑ Zod –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é (–ø–æ—Ç—Ä—ñ–±–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–¥ mutations)
  const form = useForm<NewClientFormDTO>({
    resolver: zodResolver(stage1UpdateClientDataBody),
    defaultValues: clientCreateFormData || {
      firstName: '',
      lastName: '',
      phone: '',
      email: '',
      address: '',
      communicationChannels: [],
      informationSource: 'INSTAGRAM',
      sourceDetails: '',
    },
    mode: 'onChange',
  });

  // 4. API —Ö—É–∫–∏ –∑ Orval - Mutations
  const updateClientDataMutation = useStage1UpdateClientData({
    mutation: {
      onSuccess: (data) => {
        console.log('‚úÖ –î–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ:', data);
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —Ñ–æ—Ä–º–∏ –¥–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        setClientCreateFormData(form.getValues());
      },
      onError: (error) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç–∞:', error);
      },
    },
  });

  const createClientMutation = useStage1CreateClient({
    mutation: {
      onSuccess: (data) => {
        console.log('‚úÖ –ö–ª—ñ—î–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ:', data);
      },
      onError: (error) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞:', error);
      },
    },
  });

  const completeClientCreationMutation = useStage1CompleteClientCreation({
    mutation: {
      onSuccess: () => {
        console.log('‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        setClientCreateMode(false);
        form.reset();
        setClientCreateFormData(null);
      },
      onError: (error) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞:', error);
      },
    },
  });

  // 5. –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
  const handleUpdateClientData = useCallback(
    (data: NewClientFormDTO) => {
      if (!sessionId) {
        console.warn('‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ–π sessionId –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç–∞');
        return;
      }

      console.log('üë§ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç–∞:', data);

      updateClientDataMutation.mutate({ sessionId, data });
    },
    [sessionId, updateClientDataMutation]
  );

  const handleCreateClient = useCallback(() => {
    if (!sessionId) {
      console.warn('‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ–π sessionId –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞');
      return;
    }

    console.log('üë§ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞');

    createClientMutation.mutate({ sessionId });
  }, [sessionId, createClientMutation]);

  const handleCompleteClientCreation = useCallback(() => {
    if (!sessionId) {
      console.warn('‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ–π sessionId –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞');
      return;
    }

    completeClientCreationMutation.mutate({
      sessionId,
    });
  }, [sessionId, completeClientCreationMutation]);

  const handleStartClientCreate = useCallback(() => {
    setClientCreateMode(true);
    // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ —Ñ–æ—Ä–º–∏ —è–∫—â–æ —î
    if (clientCreateFormData) {
      form.reset(clientCreateFormData);
    }
  }, [setClientCreateMode, clientCreateFormData, form]);

  const handleCancelClientCreate = useCallback(() => {
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Ñ–æ—Ä–º–∏
    setClientCreateFormData(form.getValues());
    setClientCreateMode(false);
  }, [setClientCreateMode, setClientCreateFormData, form]);

  const handleClearForm = useCallback(() => {
    form.reset();
    setClientCreateFormData(null);
  }, [form, setClientCreateFormData]);

  // 6. Computed –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –º–µ–º–æ—ñ–∑–∞—Ü—ñ—î—é
  const informationSource = form.watch('informationSource');
  const communicationChannels = form.watch('communicationChannels');

  const computed = useMemo(
    () => ({
      // –°—Ç–∞–Ω —Ñ–æ—Ä–º–∏
      isFormValid: form.formState.isValid,
      isDirty: form.formState.isDirty,
      hasErrors: Object.keys(form.formState.errors).length > 0,

      // –°—Ç–∞–Ω —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑ API
      creationState: clientFormStateQuery.data,

      // –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
      canCompleteCreation: !!sessionId && !completeClientCreationMutation.isPending,
      canSubmit: !!sessionId && form.formState.isValid && !updateClientDataMutation.isPending,
      canCreateClient: !!sessionId && !createClientMutation.isPending,

      // –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ø–æ–ª—è
      needsInfoSourceOther: informationSource === INFO_SOURCES.OTHER,
      selectedContactMethods: communicationChannels || [],
    }),
    [
      form.formState.isValid,
      form.formState.isDirty,
      form.formState.errors,
      informationSource,
      communicationChannels,
      sessionId,
      clientFormStateQuery.data,
      completeClientCreationMutation.isPending,
      updateClientDataMutation.isPending,
      createClientMutation.isPending,
    ]
  );

  // 7. –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
  return {
    // UI —Å—Ç–∞–Ω
    ui: {
      isCreateMode: isClientCreateMode,
      formData: clientCreateFormData,
    },

    // API –¥–∞–Ω—ñ
    data: {
      creationState: computed.creationState,
    },

    // –°—Ç–∞–Ω–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    loading: {
      isUpdatingData: updateClientDataMutation.isPending,
      isCreating: createClientMutation.isPending,
      isCompleting: completeClientCreationMutation.isPending,
      isLoadingCreationState: clientFormStateQuery.isLoading,
    },

    // –î—ñ—ó
    actions: {
      updateClientData: handleUpdateClientData,
      createClient: handleCreateClient,
      completeCreation: handleCompleteClientCreation,
      startCreate: handleStartClientCreate,
      cancelCreate: handleCancelClientCreate,
      clearForm: handleClearForm,
    },

    // –§–æ—Ä–º–∞
    form: {
      ...form,
      handleSubmit: form.handleSubmit(handleUpdateClientData),
    },

    // Computed –∑–Ω–∞—á–µ–Ω–Ω—è
    computed,

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è UI
    constants: {
      contactMethods: CONTACT_METHODS,
      infoSources: INFO_SOURCES,
      contactMethodNames: CONTACT_METHOD_NAMES,
      infoSourceNames: INFO_SOURCE_NAMES,
      getContactMethodName,
      getInfoSourceName,
    },
  };
};

export type UseClientCreateReturn = ReturnType<typeof useClientCreate>;
