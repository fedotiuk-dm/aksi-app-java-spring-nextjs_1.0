// üéØ –°–ü–†–û–©–ï–ù–ò–ô WORKFLOW –•–£–ö –¥–ª—è Stage1 Order Wizard
// –î–≤–∞ –µ—Ç–∞–ø–∏: 1) –í–∏–±—ñ—Ä/—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞, 2) –í–∏–±—ñ—Ä —Ñ—ñ–ª—ñ—ó —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞

import { useCallback, useMemo } from 'react';

import { useBranchSelection } from './use-branch-selection.hook';
import { useClientSelection } from './use-client-selection.hook';
import { useMainStore } from '../../main/store/main.store';
import {
  STAGE1_SUBSTEPS,
  getSubstepProgress,
  canNavigateToSubstep,
  type Stage1Substep,
} from '../utils/stage1-mapping';

/**
 * üéØ –°–ø—Ä–æ—â–µ–Ω–∏–π workflow —Ö—É–∫ –¥–ª—è Stage1
 *
 * –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å:
 * - –î–≤–∞ –µ—Ç–∞–ø–∏: –≤–∏–±—ñ—Ä –∫–ª—ñ—î–Ω—Ç–∞ ‚Üí –≤–∏–±—ñ—Ä —Ñ—ñ–ª—ñ—ó
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞ –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É —Ñ—ñ–ª—ñ—ó
 * - –°–ø—Ä–æ—â–µ–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è –º—ñ–∂ –µ—Ç–∞–ø–∞–º–∏
 */
export const useStage1SimplifiedWorkflow = () => {
  // 1. –ö–æ–º–ø–æ–∑–∏—Ü—ñ–π–Ω—ñ —Ö—É–∫–∏
  const clientSelection = useClientSelection();
  const branchSelection = useBranchSelection();

  // 2. UI —Å—Ç–∞–Ω –∑ Zustand
  const sessionId = useMainStore((state) => state.sessionId);

  // 3. –ü–æ—Ç–æ—á–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∏–π –ø—ñ–¥–µ—Ç–∞–ø
  const currentSubstep = useMemo((): Stage1Substep => {
    // –Ø–∫—â–æ –∫–ª—ñ—î–Ω—Ç –æ–±—Ä–∞–Ω–∏–π, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É —Ñ—ñ–ª—ñ—ó
    if (clientSelection.computed.hasSelectedClient) {
      return STAGE1_SUBSTEPS.BRANCH_SELECTION;
    }
    // –Ü–Ω–∞–∫—à–µ –∑–∞–ª–∏—à–∞—î–º–æ—Å—è –Ω–∞ –≤–∏–±–æ—Ä—É –∫–ª—ñ—î–Ω—Ç–∞
    return STAGE1_SUBSTEPS.CLIENT_SELECTION;
  }, [clientSelection.computed.hasSelectedClient]);

  // 4. –û–±—Ä–æ–±–Ω–∏–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
  const handleNavigateToSubstep = useCallback(
    (targetSubstep: Stage1Substep) => {
      if (!canNavigateToSubstep(targetSubstep, currentSubstep)) {
        console.warn('‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –ø—ñ–¥–µ—Ç–∞–ø—É:', targetSubstep);
        return;
      }

      // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ç–∞–Ω—É
      if (targetSubstep === STAGE1_SUBSTEPS.CLIENT_SELECTION) {
        // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≤–∏–±–æ—Ä—É –∫–ª—ñ—î–Ω—Ç–∞ - –æ—á–∏—â—É—î–º–æ –≤–∏–±—ñ—Ä
        clientSelection.search.actions.clearSearch();
        clientSelection.mode.switchToSearch();
      }
    },
    [currentSubstep, clientSelection.search.actions, clientSelection.mode]
  );

  const handleClientSelected = useCallback(() => {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–∏–±–æ—Ä—É —Ñ—ñ–ª—ñ—ó –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –∫–ª—ñ—î–Ω—Ç–∞
    // –õ–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É –≤–∂–µ –≤ currentSubstep
  }, []);

  const handleOrderCreated = useCallback(() => {
    // –û—Ä–¥–µ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–∏–π - Stage1 –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π
    return branchSelection.computed.isBranchSelectionCompleted;
  }, [branchSelection.computed.isBranchSelectionCompleted]);

  // 5. Computed –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è workflow
  const computed = useMemo(() => {
    const substeps = Object.values(STAGE1_SUBSTEPS);
    const currentIndex = substeps.indexOf(currentSubstep);

    return {
      // –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
      currentSubstep,
      currentSubstepIndex: currentIndex,
      totalSubsteps: substeps.length,
      progress: getSubstepProgress(currentSubstep),

      // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
      canGoNext: false, // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞
      canGoPrevious: currentSubstep === STAGE1_SUBSTEPS.BRANCH_SELECTION,
      isFirstSubstep: currentIndex === 0,
      isLastSubstep: currentIndex === substeps.length - 1,

      // –ì–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –ø—ñ–¥–µ—Ç–∞–ø—ñ–≤
      isClientSelectionCompleted: clientSelection.computed.isClientSelectionCompleted,
      isBranchSelectionCompleted: branchSelection.computed.isBranchSelectionCompleted,

      // –ó–∞–≥–∞–ª—å–Ω–∞ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å Stage1
      isStage1Ready:
        !!sessionId &&
        clientSelection.computed.hasSelectedClient &&
        branchSelection.computed.canCreateOrder,

      // –°—Ç–∞–Ω–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      isAnyLoading: clientSelection.loading.isAnyLoading || branchSelection.loading.isAnyLoading,
    };
  }, [
    currentSubstep,
    sessionId,
    clientSelection.computed.isClientSelectionCompleted,
    clientSelection.computed.hasSelectedClient,
    clientSelection.loading.isAnyLoading,
    branchSelection.computed.isBranchSelectionCompleted,
    branchSelection.computed.canCreateOrder,
    branchSelection.loading.isAnyLoading,
  ]);

  // 6. –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
  return {
    // –ü—ñ–¥–µ—Ç–∞–ø–∏
    substeps: {
      clientSelection,
      branchSelection,
    },

    // Workflow —Å—Ç–∞–Ω
    workflow: {
      currentSubstep: computed.currentSubstep,
      currentIndex: computed.currentSubstepIndex,
      totalSubsteps: computed.totalSubsteps,
      progress: computed.progress,
    },

    // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
    navigation: {
      canGoNext: computed.canGoNext,
      canGoPrevious: computed.canGoPrevious,
      isFirstSubstep: computed.isFirstSubstep,
      isLastSubstep: computed.isLastSubstep,
      navigateToSubstep: handleNavigateToSubstep,
      goBackToClientSelection: () => handleNavigateToSubstep(STAGE1_SUBSTEPS.CLIENT_SELECTION),
    },

    // –°—Ç–∞–Ω–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ
    readiness: {
      isClientSelectionCompleted: computed.isClientSelectionCompleted,
      isBranchSelectionCompleted: computed.isBranchSelectionCompleted,
      isStage1Ready: computed.isStage1Ready,
    },

    // –ó–∞–≥–∞–ª—å–Ω—ñ —Å—Ç–∞–Ω–∏
    loading: {
      isAnyLoading: computed.isAnyLoading,
    },

    // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    handlers: {
      onClientSelected: handleClientSelected,
      onOrderCreated: handleOrderCreated,
    },

    // Computed –∑–Ω–∞—á–µ–Ω–Ω—è
    computed,

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
    constants: {
      substeps: STAGE1_SUBSTEPS,
    },
  };
};

export type UseStage1SimplifiedWorkflowReturn = ReturnType<typeof useStage1SimplifiedWorkflow>;
