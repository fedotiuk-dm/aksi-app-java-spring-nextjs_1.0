// üìã –ü–Ü–î–ï–¢–ê–ü 1.3: –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
// –ö–æ–º–ø–æ–∑–∏—Ü—ñ–π–Ω–∏–π —Ö—É–∫ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è

import { zodResolver } from '@hookform/resolvers/zod';
import { useCallback, useMemo, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { useQueryClient } from '@tanstack/react-query';

// –ì–æ—Ç–æ–≤—ñ React Query —Ö—É–∫–∏ –∑ Orval –¥–ª—è –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
import {
  useStage1UpdateBasicOrder,
  useStage1GetBasicOrderData,
  useStage1GetBranchesForSession,
  useStage1GenerateReceiptNumber,
  useStage1SetUniqueTag,
  useStage1SelectBranch,
  useStage1CompleteBasicOrder,
} from '@/shared/api/generated/stage1';

// Zod —Å—Ö–µ–º–∏ –∑ Orval
import { stage1UpdateBasicOrderBody } from '@/shared/api/generated/stage1/schemas.zod';
// –¢–∏–ø–∏ –∑ API
import type { BasicOrderInfoDTO, ErrorResponse } from '@/shared/api/generated/stage1';

import { useStage1Store } from '../store/stage1.store';
import { useMainStore } from '../../main/store/main.store';

/**
 * üìã –•—É–∫ –¥–ª—è –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–ø—ñ–¥–µ—Ç–∞–ø 1.3)
 *
 * –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å:
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≥–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 * - –í–≤–µ–¥–µ–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—ó –º—ñ—Ç–∫–∏ (–≤—Ä—É—á–Ω—É –∞–±–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è)
 * - –í–∏–±—ñ—Ä –ø—É–Ω–∫—Ç—É –ø—Ä–∏–π–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (—Ñ—ñ–ª—ñ—ó)
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
 */
export const useBasicOrderInfo = () => {
  // 1. UI —Å—Ç–∞–Ω –∑ Zustand
  const sessionId = useMainStore((state) => state.sessionId);
  const {
    isBasicOrderInfoMode,
    basicOrderInfoFormData,
    setBasicOrderInfoMode,
    setBasicOrderInfoFormData,
  } = useStage1Store();

  // 2. API —Ö—É–∫–∏ –∑ Orval - Query
  const basicOrderDataQuery = useStage1GetBasicOrderData(sessionId || '', {
    query: {
      enabled: !!sessionId,
      staleTime: 60000,
    },
  });

  const branchesQuery = useStage1GetBranchesForSession(sessionId || '', {
    query: {
      enabled: !!sessionId,
      staleTime: 300000, // 5 —Ö–≤–∏–ª–∏–Ω - —Ñ—ñ–ª—ñ—ó —Ä—ñ–¥–∫–æ –∑–º—ñ–Ω—é—é—Ç—å—Å—è
    },
  });

  // 3. API —Ö—É–∫–∏ –∑ Orval - Mutations
  const updateBasicOrderMutation = useStage1UpdateBasicOrder({
    mutation: {
      onSuccess: () => {
        console.log('‚úÖ –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–∞');
        // –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        queryClient.invalidateQueries({
          queryKey: ['stage1GetBasicOrderData', sessionId],
        });
      },
      onError: (error: ErrorResponse) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:', error);
      },
    },
  });

  const generateReceiptNumberMutation = useStage1GenerateReceiptNumber({
    mutation: {
      onSuccess: (receiptNumber) => {
        console.log('‚úÖ –ù–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ:', receiptNumber);
        // –û–Ω–æ–≤–ª—é—î–º–æ —Ñ–æ—Ä–º—É –∑ –Ω–æ–≤–∏–º –Ω–æ–º–µ—Ä–æ–º
        form.setValue('receiptNumber', receiptNumber);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ API
        if (sessionId) {
          const currentFormData = form.getValues();
          updateBasicOrderMutation.mutate({
            sessionId,
            data: {
              ...currentFormData,
              receiptNumber, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–≤—ñ–∂–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –Ω–æ–º–µ—Ä
            },
          });
        }
      },
      onError: (error: ErrorResponse) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó:', error);
      },
    },
  });

  const setUniqueTagMutation = useStage1SetUniqueTag({
    mutation: {
      onSuccess: () => {
        console.log('‚úÖ –£–Ω—ñ–∫–∞–ª—å–Ω–∞ –º—ñ—Ç–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
        // –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        queryClient.invalidateQueries({
          queryKey: ['stage1GetBasicOrderData', sessionId],
        });
      },
      onError: (error: ErrorResponse) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—ó –º—ñ—Ç–∫–∏:', error);
      },
    },
  });

  const queryClient = useQueryClient();

  const selectBranchMutation = useStage1SelectBranch({
    mutation: {
      onSuccess: () => {
        console.log('‚úÖ –§—ñ–ª—ñ—è –≤–∏–±—Ä–∞–Ω–∞');
        // –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        queryClient.invalidateQueries({
          queryKey: ['stage1GetBasicOrderData', sessionId],
        });
        queryClient.invalidateQueries({
          queryKey: ['stage1GetBasicOrderState', sessionId],
        });
      },
      onError: (error: ErrorResponse) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É —Ñ—ñ–ª—ñ—ó:', error);
      },
    },
  });

  const completeBasicOrderMutation = useStage1CompleteBasicOrder({
    mutation: {
      onSuccess: () => {
        console.log('‚úÖ –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        setBasicOrderInfoMode(false);
      },
      onError: (error: ErrorResponse) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:', error);
      },
    },
  });

  // 4. React Hook Form –∑ Zod –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é
  const form = useForm<BasicOrderInfoDTO>({
    resolver: zodResolver(stage1UpdateBasicOrderBody),
    defaultValues: basicOrderInfoFormData || {
      receiptNumber: '',
      uniqueTag: '',
      selectedBranchId: '',
      creationDate: new Date().toISOString(),
    },
    mode: 'onChange',
  });

  // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —Ñ–æ—Ä–º–∏ –∑ API –¥–∞–Ω–∏–º–∏
  useEffect(() => {
    if (basicOrderDataQuery.data) {
      const apiData = basicOrderDataQuery.data;
      form.setValue('receiptNumber', apiData.receiptNumber || '');
      form.setValue('uniqueTag', apiData.uniqueTag || '');
      form.setValue('selectedBranchId', apiData.selectedBranchId || '');
      form.setValue('creationDate', apiData.creationDate || new Date().toISOString());
    }
  }, [basicOrderDataQuery.data, form]);

  // 5. –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
  const handleUpdateBasicOrder = useCallback(
    (data: BasicOrderInfoDTO) => {
      if (!sessionId) {
        console.warn('‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ–π sessionId –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó');
        return;
      }

      console.log('üìã –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:', data);
      updateBasicOrderMutation.mutate({ sessionId, data });
    },
    [sessionId, updateBasicOrderMutation]
  );

  const handleGenerateReceiptNumber = useCallback(
    (branchCode?: string) => {
      if (!sessionId) {
        console.warn('‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ–π sessionId –¥–ª—è –≥–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó');
        return;
      }

      generateReceiptNumberMutation.mutate({
        sessionId,
        params: { branchCode: branchCode || 'DEFAULT' },
      });
    },
    [sessionId, generateReceiptNumberMutation]
  );

  const handleSetUniqueTag = useCallback(
    (uniqueTag: string) => {
      if (!sessionId) {
        console.warn('‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ–π sessionId –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—ó –º—ñ—Ç–∫–∏');
        return;
      }

      setUniqueTagMutation.mutate({
        sessionId,
        params: { uniqueTag },
      });
      form.setValue('uniqueTag', uniqueTag);
    },
    [sessionId, setUniqueTagMutation, form]
  );

  const handleSelectBranch = useCallback(
    (branchId: string) => {
      if (!sessionId) {
        console.warn('‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ–π sessionId –¥–ª—è –≤–∏–±–æ—Ä—É —Ñ—ñ–ª—ñ—ó');
        return;
      }

      console.log('üè¢ –í–∏–±—ñ—Ä —Ñ—ñ–ª—ñ—ó:', { sessionId, branchId });

      selectBranchMutation.mutate({
        sessionId,
        params: { branchId },
      });
      form.setValue('selectedBranchId', branchId);

      console.log('üìù –§–æ—Ä–º–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞ –∑ selectedBranchId:', branchId);
    },
    [sessionId, selectBranchMutation, form]
  );

  const handleCompleteBasicOrder = useCallback(() => {
    if (!sessionId) {
      console.warn('‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ–π sessionId –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó');
      return;
    }

    completeBasicOrderMutation.mutate({ sessionId });
  }, [sessionId, completeBasicOrderMutation]);

  const handleStartBasicOrderInfo = useCallback(() => {
    setBasicOrderInfoMode(true);
    // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ —Ñ–æ—Ä–º–∏ —è–∫—â–æ —î
    if (basicOrderInfoFormData) {
      form.reset(basicOrderInfoFormData);
    }
  }, [setBasicOrderInfoMode, basicOrderInfoFormData, form]);

  const handleCancelBasicOrderInfo = useCallback(() => {
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Ñ–æ—Ä–º–∏
    setBasicOrderInfoFormData(form.getValues());
    setBasicOrderInfoMode(false);
  }, [setBasicOrderInfoMode, setBasicOrderInfoFormData, form]);

  const handleScanUniqueTag = useCallback(
    (scannedTag: string) => {
      handleSetUniqueTag(scannedTag);
      console.log('üì± –£–Ω—ñ–∫–∞–ª—å–Ω–∞ –º—ñ—Ç–∫–∞ –≤—ñ–¥—Å–∫–∞–Ω–æ–≤–∞–Ω–∞:', scannedTag);
    },
    [handleSetUniqueTag]
  );

  // 6. Watch –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è computed
  const receiptNumber = form.watch('receiptNumber');
  const uniqueTag = form.watch('uniqueTag');
  const selectedBranchId = form.watch('selectedBranchId');

  // 7. Computed –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –º–µ–º–æ—ñ–∑–∞—Ü—ñ—î—é
  const computed = useMemo(() => {
    // –ë–µ—Ä–µ–º–æ selectedBranchId –∑ API –¥–∞–Ω–∏—Ö, –∞ –Ω–µ –∑ —Ñ–æ—Ä–º–∏
    const apiSelectedBranchId = basicOrderDataQuery.data?.selectedBranchId;
    const effectiveSelectedBranchId = apiSelectedBranchId || selectedBranchId;

    const foundBranch = branchesQuery.data?.find(
      (branch) => branch.id === effectiveSelectedBranchId
    );

    // –ù–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó –º–æ–∂–µ –±—É—Ç–∏ –∑ API –∞–±–æ –∑ —Ñ–æ—Ä–º–∏
    const apiReceiptNumber = basicOrderDataQuery.data?.receiptNumber;
    const effectiveReceiptNumber = apiReceiptNumber || receiptNumber;

    // –£–Ω—ñ–∫–∞–ª—å–Ω–∞ –º—ñ—Ç–∫–∞ –º–æ–∂–µ –±—É—Ç–∏ –∑ API –∞–±–æ –∑ —Ñ–æ—Ä–º–∏
    const apiUniqueTag = basicOrderDataQuery.data?.uniqueTag;
    const effectiveUniqueTag = apiUniqueTag || uniqueTag;

    // –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏
    if (process.env.NODE_ENV === 'development') {
      console.log('üîç Debug computed values:', {
        apiReceiptNumber,
        formReceiptNumber: receiptNumber,
        effectiveReceiptNumber,
        hasReceiptNumber: !!effectiveReceiptNumber,
        apiSelectedBranchId,
        formSelectedBranchId: selectedBranchId,
        effectiveSelectedBranchId,
        foundBranch: foundBranch?.name,
      });
    }

    return {
      // –°—Ç–∞–Ω —Ñ–æ—Ä–º–∏
      isFormValid: form.formState.isValid,
      isDirty: form.formState.isDirty,
      hasErrors: Object.keys(form.formState.errors).length > 0,

      // –î–∞–Ω—ñ –∑ API
      basicOrderData: {
        ...basicOrderDataQuery.data,
        receiptNumber: effectiveReceiptNumber,
        uniqueTag: effectiveUniqueTag,
        selectedBranchId: effectiveSelectedBranchId,
      },
      branches: branchesQuery.data || [],

      // –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–∞–≤–µ—Ä—à–∏—Ç–∏
      canCompleteBasicOrder: !!sessionId && !completeBasicOrderMutation.isPending,
      canSubmit: !!sessionId && form.formState.isValid && !updateBasicOrderMutation.isPending,

      // –°—Ç–∞–Ω –ø–æ–ª—ñ–≤
      hasReceiptNumber: !!effectiveReceiptNumber,
      hasUniqueTag: !!effectiveUniqueTag,
      selectedBranchId: effectiveSelectedBranchId,
      selectedBranch: foundBranch,
    };
  }, [
    form.formState.isValid,
    form.formState.isDirty,
    form.formState.errors,
    sessionId,
    basicOrderDataQuery.data,
    branchesQuery.data,
    completeBasicOrderMutation.isPending,
    updateBasicOrderMutation.isPending,
    receiptNumber,
    uniqueTag,
    selectedBranchId,
  ]);

  // 8. –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
  return {
    // UI —Å—Ç–∞–Ω
    ui: {
      isBasicOrderInfoMode,
      formData: basicOrderInfoFormData,
    },

    // API –¥–∞–Ω—ñ
    data: {
      basicOrderData: computed.basicOrderData,
      branches: computed.branches,
      selectedBranch: computed.selectedBranch,
    },

    // –°—Ç–∞–Ω–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    loading: {
      isUpdating: updateBasicOrderMutation.isPending,
      isGeneratingReceiptNumber: generateReceiptNumberMutation.isPending,
      isSettingUniqueTag: setUniqueTagMutation.isPending,
      isSelectingBranch: selectBranchMutation.isPending,
      isCompleting: completeBasicOrderMutation.isPending,
      isLoadingBasicOrderData: basicOrderDataQuery.isLoading,
      isLoadingBranches: branchesQuery.isLoading,
    },

    // –î—ñ—ó
    actions: {
      updateBasicOrder: handleUpdateBasicOrder,
      generateReceiptNumber: handleGenerateReceiptNumber,
      setUniqueTag: handleSetUniqueTag,
      selectBranch: handleSelectBranch,
      completeBasicOrder: handleCompleteBasicOrder,
      startBasicOrderInfo: handleStartBasicOrderInfo,
      cancelBasicOrderInfo: handleCancelBasicOrderInfo,
      scanUniqueTag: handleScanUniqueTag,
    },

    // –§–æ—Ä–º–∞
    form: {
      ...form,
      handleSubmit: form.handleSubmit(handleUpdateBasicOrder),
    },

    // Computed –∑–Ω–∞—á–µ–Ω–Ω—è
    computed,
  };
};

export type UseBasicOrderInfoReturn = ReturnType<typeof useBasicOrderInfo>;
