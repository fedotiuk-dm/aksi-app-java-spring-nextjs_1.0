// üîç –ü–Ü–î–ï–¢–ê–ü 1.1: –ü–æ—à—É–∫ —Ç–∞ –≤–∏–±—ñ—Ä —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
// –ö–æ–º–ø–æ–∑–∏—Ü—ñ–π–Ω–∏–π —Ö—É–∫ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø–æ—à—É–∫–æ–º –∫–ª—ñ—î–Ω—Ç—ñ–≤

import { useCallback, useMemo, useEffect, useState } from 'react';

// –ì–æ—Ç–æ–≤—ñ React Query —Ö—É–∫–∏ –∑ Orval –¥–ª—è –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤
import {
  useStage1GetClientSearchState,
  useStage1GetSelectedClient,
  useStage1SearchClients,
  useStage1SearchClientsByPhone,
  useStage1SelectClient,
  useStage1CompleteClientSearch,
} from '@/shared/api/generated/stage1';
import { useDebounce } from '@/shared/lib/hooks/useDebounce';

import { useStage1Store } from '../store/stage1.store';
import { useMainStore } from '../../main/store/main.store';
import {
  CLIENT_SEARCH_CRITERIA,
  CLIENT_SEARCH_CRITERIA_NAMES,
  getSearchCriteriaName,
  isValidSearchTerm,
} from '../utils/stage1-mapping';

/**
 * üîç –•—É–∫ –¥–ª—è –ø–æ—à—É–∫—É —Ç–∞ –≤–∏–±–æ—Ä—É —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ (–ø—ñ–¥–µ—Ç–∞–ø 1.1)
 *
 * –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å:
 * - –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ —Ä—ñ–∑–Ω–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏ (—Ç–µ–ª–µ—Ñ–æ–Ω, —ñ–º'—è, email, –∞–¥—Ä–µ—Å–∞)
 * - –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É
 * - –í–∏–±—ñ—Ä –∫–ª—ñ—î–Ω—Ç–∞ –∑—ñ —Å–ø–∏—Å–∫—É
 * - –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
 */
export const useClientSearch = () => {
  // 1. UI —Å—Ç–∞–Ω –∑ Zustand
  const sessionId = useMainStore((state) => state.sessionId);
  const {
    clientSearchTerm,
    selectedClientId,
    showClientSearchResults,
    isClientSearchMode,
    setClientSearchTerm,
    setSelectedClientId,
    setShowClientSearchResults,
    setClientSearchMode,
  } = useStage1Store();

  // 1.1. Debounced –ø–æ—à—É–∫–æ–≤–∏–π —Ç–µ—Ä–º—ñ–Ω (–∑–∞—Ç—Ä–∏–º–∫–∞ 500–º—Å)
  const debouncedSearchTerm = useDebounce(clientSearchTerm, 500);

  // 1.2. –§—ñ–∫—Ç–∏–≤–Ω–∏–π sessionId –¥–ª—è –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤ (–∫–æ–ª–∏ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó –≤—ñ–∑–∞—Ä–¥–∞)
  const searchSessionId = sessionId || 'search-only-session';

  // 1.3. –°—Ç–∞–Ω –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ—à—É–∫–æ–≤–æ–≥–æ —Ç–µ—Ä–º—ñ–Ω—É
  const [lastSearchedTerm, setLastSearchedTerm] = useState<string>('');

  // 1.3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∞–∫—Ç–∏–≤—É—î–º–æ —Ä–µ–∂–∏–º –ø–æ—à—É–∫—É –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
  useEffect(() => {
    if (!isClientSearchMode) {
      console.log('üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—è —Ä–µ–∂–∏–º—É –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤');
      setClientSearchMode(true);
    }
  }, [isClientSearchMode, setClientSearchMode]);

  // 2. API —Ö—É–∫–∏ –∑ Orval - Query (–ø—Ä–∞—Ü—é—é—Ç—å –∑–∞–≤–∂–¥–∏)
  const clientSearchStateQuery = useStage1GetClientSearchState(searchSessionId, {
    query: {
      enabled: true, // –ó–∞–≤–∂–¥–∏ –∞–∫—Ç–∏–≤–Ω–∏–π
      staleTime: 30000,
    },
  });

  const selectedClientQuery = useStage1GetSelectedClient(searchSessionId, {
    query: {
      enabled: !!selectedClientId,
      staleTime: 60000,
    },
  });

  // 3. API —Ö—É–∫–∏ –∑ Orval - Mutations
  const searchClientsMutation = useStage1SearchClients({
    mutation: {
      onSuccess: () => {
        console.log('‚úÖ –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ —É—Å–ø—ñ—à–Ω–∏–π');
        setShowClientSearchResults(true);
      },
      onError: (error) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤:', error);
        setShowClientSearchResults(false);
      },
    },
  });

  const searchClientsByPhoneMutation = useStage1SearchClientsByPhone({
    mutation: {
      onSuccess: () => {
        console.log('‚úÖ –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º —É—Å–ø—ñ—à–Ω–∏–π');
        setShowClientSearchResults(true);
      },
      onError: (error) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º:', error);
        setShowClientSearchResults(false);
      },
    },
  });

  const selectClientMutation = useStage1SelectClient({
    mutation: {
      onSuccess: () => {
        console.log('‚úÖ –ö–ª—ñ—î–Ω—Ç –≤–∏–±—Ä–∞–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ');
        setShowClientSearchResults(false);
      },
      onError: (error) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –∫–ª—ñ—î–Ω—Ç–∞:', error);
      },
    },
  });

  const completeClientSearchMutation = useStage1CompleteClientSearch({
    mutation: {
      onSuccess: () => {
        console.log('‚úÖ –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        setClientSearchMode(false);
      },
      onError: (error) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç–∞:', error);
      },
    },
  });

  // 4. –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
  const handleSearchClients = useCallback(
    (searchTerm: string, criteria?: string) => {
      if (!isValidSearchTerm(searchTerm)) {
        console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–µ—Ä–º—ñ–Ω –¥–ª—è –ø–æ—à—É–∫—É');
        return;
      }

      setClientSearchTerm(searchTerm);

      // –í–∏–±–∏—Ä–∞—î–º–æ —Ç–∏–ø –ø–æ—à—É–∫—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫—Ä–∏—Ç–µ—Ä—ñ—é
      if (criteria === CLIENT_SEARCH_CRITERIA.PHONE) {
        searchClientsByPhoneMutation.mutate({
          sessionId: searchSessionId,
          params: { phone: searchTerm },
        });
      } else {
        searchClientsMutation.mutate({
          sessionId: searchSessionId,
          data: {
            generalSearchTerm: searchTerm,
          },
        });
      }
    },
    [searchSessionId, searchClientsMutation, searchClientsByPhoneMutation, setClientSearchTerm]
  );

  const handleSelectClient = useCallback(
    (clientId: string) => {
      if (!clientId) {
        console.warn('‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ–π clientId –¥–ª—è –≤–∏–±–æ—Ä—É');
        return;
      }

      // –¢—ñ–ª—å–∫–∏ —è–∫—â–æ —î –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å—ñ—è –≤—ñ–∑–∞—Ä–¥–∞, –≤–∏–∫–ª–∏–∫–∞—î–º–æ API
      if (sessionId) {
        selectClientMutation.mutate({
          sessionId,
          params: { clientId },
        });
      }

      setSelectedClientId(clientId);
    },
    [sessionId, selectClientMutation, setSelectedClientId]
  );

  const handleCompleteClientSearch = useCallback(() => {
    if (!sessionId) {
      console.warn('‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ–π sessionId –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç–∞');
      return;
    }

    completeClientSearchMutation.mutate({
      sessionId,
    });
  }, [sessionId, completeClientSearchMutation]);

  const handleStartClientSearch = useCallback(() => {
    setClientSearchMode(true);
    setShowClientSearchResults(false);
  }, [setClientSearchMode, setShowClientSearchResults]);

  const handleClearSearch = useCallback(() => {
    setClientSearchTerm('');
    setShowClientSearchResults(false);
    setSelectedClientId(null);
    setLastSearchedTerm('');
  }, [setClientSearchTerm, setShowClientSearchResults, setSelectedClientId]);

  // 4.1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ –ø—Ä–∏ –∑–º—ñ–Ω—ñ debounced —Ç–µ—Ä–º—ñ–Ω—É
  useEffect(() => {
    if (
      debouncedSearchTerm &&
      isValidSearchTerm(debouncedSearchTerm) &&
      debouncedSearchTerm !== lastSearchedTerm // –£–Ω–∏–∫–∞—î–º–æ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
    ) {
      console.log('üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫:', debouncedSearchTerm);
      setLastSearchedTerm(debouncedSearchTerm);

      // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –ø–æ—à—É–∫—É –∑–∞ —Ñ–æ—Ä–º–∞—Ç–æ–º
      const isPhoneSearch = /^\+?[0-9\s\-\(\)]{10,}$/.test(debouncedSearchTerm);

      if (isPhoneSearch) {
        searchClientsByPhoneMutation.mutate({
          sessionId: searchSessionId,
          params: { phone: debouncedSearchTerm.replace(/\s|\-|\(|\)/g, '') },
        });
      } else {
        searchClientsMutation.mutate({
          sessionId: searchSessionId,
          data: { generalSearchTerm: debouncedSearchTerm },
        });
      }
    } else if (!debouncedSearchTerm && lastSearchedTerm) {
      // –û—á–∏—â—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É, —è–∫—â–æ —Ç–µ—Ä–º—ñ–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π
      setLastSearchedTerm('');
    }
  }, [
    debouncedSearchTerm,
    lastSearchedTerm,
    searchSessionId,
    searchClientsByPhoneMutation,
    searchClientsMutation,
  ]);

  // 5. Computed –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –º–µ–º–æ—ñ–∑–∞—Ü—ñ—î—é
  const computed = useMemo(
    () => ({
      // –°—Ç–∞–Ω –ø–æ—à—É–∫—É
      hasSearchTerm: clientSearchTerm.length > 0,
      hasDebouncedSearchTerm: debouncedSearchTerm.length > 0,
      isSearchTermValid: isValidSearchTerm(clientSearchTerm),
      isDebouncedSearchTermValid: isValidSearchTerm(debouncedSearchTerm),
      canSearch: isValidSearchTerm(clientSearchTerm),
      isSearching: searchClientsMutation.isPending || searchClientsByPhoneMutation.isPending,

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫
      isAutoSearchEnabled: true, // –ó–∞–≤–∂–¥–∏ –∞–∫—Ç–∏–≤–Ω–∏–π
      willAutoSearch: isValidSearchTerm(debouncedSearchTerm),

      // –°—Ç–∞–Ω –ø–æ—à—É–∫—É –∑ API
      searchState: clientSearchStateQuery.data,

      // –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –∑ –º—É—Ç–∞—Ü—ñ–π
      searchResults:
        searchClientsMutation.data?.clients || searchClientsByPhoneMutation.data?.clients || [],
      searchResultsData: searchClientsMutation.data || searchClientsByPhoneMutation.data || null,
      hasSearchResults:
        (searchClientsMutation.data?.clients?.length || 0) > 0 ||
        (searchClientsByPhoneMutation.data?.clients?.length || 0) > 0,

      // –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è
      totalElements:
        searchClientsMutation.data?.totalElements ||
        searchClientsByPhoneMutation.data?.totalElements ||
        0,
      totalPages:
        searchClientsMutation.data?.totalPages ||
        searchClientsByPhoneMutation.data?.totalPages ||
        0,
      currentPage:
        searchClientsMutation.data?.pageNumber ||
        searchClientsByPhoneMutation.data?.pageNumber ||
        0,
      pageSize:
        searchClientsMutation.data?.pageSize || searchClientsByPhoneMutation.data?.pageSize || 10,
      hasPrevious:
        searchClientsMutation.data?.hasPrevious ||
        searchClientsByPhoneMutation.data?.hasPrevious ||
        false,
      hasNext:
        searchClientsMutation.data?.hasNext || searchClientsByPhoneMutation.data?.hasNext || false,

      // –í–∏–±—Ä–∞–Ω–∏–π –∫–ª—ñ—î–Ω—Ç
      selectedClient: selectedClientQuery.data,
      hasSelectedClient: !!selectedClientId && !!selectedClientQuery.data,

      // –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å—ñ—è –≤—ñ–∑–∞—Ä–¥–∞)
      canCompleteSearch: !!sessionId && !completeClientSearchMutation.isPending,

      // Debounce —Å—Ç–∞–Ω
      isTyping: clientSearchTerm !== debouncedSearchTerm,
    }),
    [
      clientSearchTerm,
      debouncedSearchTerm,
      sessionId,
      clientSearchStateQuery.data,
      searchClientsMutation.data,
      searchClientsByPhoneMutation.data,
      selectedClientQuery.data,
      selectedClientId,
      completeClientSearchMutation.isPending,
      searchClientsMutation.isPending,
      searchClientsByPhoneMutation.isPending,
    ]
  );

  // 6. –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
  return {
    // UI —Å—Ç–∞–Ω
    ui: {
      searchTerm: clientSearchTerm,
      debouncedSearchTerm,
      selectedClientId,
      showSearchResults: showClientSearchResults,
      isSearchMode: isClientSearchMode,
      isTyping: computed.isTyping,
    },

    // API –¥–∞–Ω—ñ
    data: {
      searchState: computed.searchState,
      selectedClient: computed.selectedClient,
      searchResults: computed.searchResults,
      searchResultsData: computed.searchResultsData,
    },

    // –°—Ç–∞–Ω–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    loading: {
      isSearching: computed.isSearching,
      isSelecting: selectClientMutation.isPending,
      isCompleting: completeClientSearchMutation.isPending,
      isLoadingSearchState: clientSearchStateQuery.isLoading,
      isLoadingSelectedClient: selectedClientQuery.isLoading,
      isTyping: computed.isTyping,
    },

    // –î—ñ—ó
    actions: {
      searchClients: handleSearchClients,
      selectClient: handleSelectClient,
      completeSearch: handleCompleteClientSearch,
      clearSearch: handleClearSearch,
      startSearch: handleStartClientSearch,
      setSearchTerm: setClientSearchTerm,
    },

    // Computed –∑–Ω–∞—á–µ–Ω–Ω—è
    computed,

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è UI
    constants: {
      searchCriteria: CLIENT_SEARCH_CRITERIA,
      searchCriteriaNames: CLIENT_SEARCH_CRITERIA_NAMES,
      getSearchCriteriaName,
    },
  };
};

export type UseClientSearchReturn = ReturnType<typeof useClientSearch>;
