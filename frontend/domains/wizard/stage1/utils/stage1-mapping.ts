// üéØ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ —Ç–∞ –º–∞–ø–ø—ñ–Ω–≥ –¥–ª—è Stage1 Order Wizard
// –í–∏–Ω–µ—Å–µ–Ω–æ –∑ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è

// üìã –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –ø—ñ–¥–µ—Ç–∞–ø—ñ–≤ Stage1
export const STAGE1_SUBSTEPS = {
  CLIENT_SEARCH: 'client-search',
  CLIENT_CREATION: 'client-creation',
  BASIC_ORDER_INFO: 'basic-order-info',
} as const;

export const STAGE1_SUBSTEP_NAMES = {
  'client-search': '–ü–æ—à—É–∫ –∞–±–æ –≤–∏–±—ñ—Ä –∫–ª—ñ—î–Ω—Ç–∞',
  'client-creation': '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞',
  'basic-order-info': '–ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
} as const;

export type Stage1Substep = (typeof STAGE1_SUBSTEPS)[keyof typeof STAGE1_SUBSTEPS];

// üìã –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –∫–ª—ñ—î–Ω—Ç—Å—å–∫–æ–≥–æ –ø–æ—à—É–∫—É
export const CLIENT_SEARCH_CRITERIA = {
  PHONE: 'phone',
  NAME: 'name',
  EMAIL: 'email',
  ADDRESS: 'address',
} as const;

export const CLIENT_SEARCH_CRITERIA_NAMES = {
  phone: '–¢–µ–ª–µ—Ñ–æ–Ω',
  name: "–Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ",
  email: 'Email',
  address: '–ê–¥—Ä–µ—Å–∞',
} as const;

// üìã –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ —Å–ø–æ—Å–æ–±—ñ–≤ –∑–≤'—è–∑–∫—É
export const CONTACT_METHODS = {
  PHONE: 'PHONE',
  SMS: 'SMS',
  VIBER: 'VIBER',
} as const;

export const CONTACT_METHOD_NAMES = {
  PHONE: '–¢–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –¥–∑–≤—ñ–Ω–æ–∫',
  SMS: 'SMS –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è',
  VIBER: 'Viber',
} as const;

// üìã –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–∂–µ—Ä–µ–ª —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
export const INFO_SOURCES = {
  INSTAGRAM: 'INSTAGRAM',
  GOOGLE: 'GOOGLE',
  RECOMMENDATIONS: 'RECOMMENDATIONS',
  OTHER: 'OTHER',
} as const;

export const INFO_SOURCE_NAMES = {
  INSTAGRAM: 'Instagram',
  GOOGLE: 'Google',
  RECOMMENDATIONS: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó',
  OTHER: '–Ü–Ω—à–µ',
} as const;

// üé® –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è UI
export const getSubstepProgress = (currentSubstep: Stage1Substep): number => {
  const substeps = Object.values(STAGE1_SUBSTEPS);
  const currentIndex = substeps.indexOf(currentSubstep);
  return ((currentIndex + 1) / substeps.length) * 100;
};

export const isSubstepCompleted = (
  substep: Stage1Substep,
  currentSubstep: Stage1Substep
): boolean => {
  const substeps = Object.values(STAGE1_SUBSTEPS);
  const substepIndex = substeps.indexOf(substep);
  const currentIndex = substeps.indexOf(currentSubstep);
  return substepIndex < currentIndex;
};

export const isSubstepActive = (substep: Stage1Substep, currentSubstep: Stage1Substep): boolean => {
  return substep === currentSubstep;
};

export const canNavigateToSubstep = (
  targetSubstep: Stage1Substep,
  currentSubstep: Stage1Substep
): boolean => {
  const substeps = Object.values(STAGE1_SUBSTEPS);
  const targetIndex = substeps.indexOf(targetSubstep);
  const currentIndex = substeps.indexOf(currentSubstep);
  // –ú–æ–∂–Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø—ñ–¥–µ—Ç–∞–ø–∏ –∞–±–æ –ø–æ—Ç–æ—á–Ω–∏–π
  return targetIndex <= currentIndex;
};

// üîÑ –ú–∞–ø–ø—ñ–Ω–≥ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ñ–æ—Ä–º
export const getRequiredFieldsForSubstep = (substep: Stage1Substep): string[] => {
  switch (substep) {
    case STAGE1_SUBSTEPS.CLIENT_SEARCH:
      return ['clientSearchTerm'];
    case STAGE1_SUBSTEPS.CLIENT_CREATION:
      return ['firstName', 'lastName', 'phone'];
    case STAGE1_SUBSTEPS.BASIC_ORDER_INFO:
      return ['selectedBranchId', 'uniqueTag', 'receiptNumber'];
    default:
      return [];
  }
};

// üéØ –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
export const validatePhoneNumber = (phone: string): boolean => {
  // –ü—Ä–æ—Å—Ç–∏–π regex –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤
  const phoneRegex = /^(\+38)?[0-9]{10}$/;
  return phoneRegex.test(phone.replace(/\s/g, ''));
};

export const validateEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

export const formatPhoneNumber = (phone: string): string => {
  // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  const cleaned = phone.replace(/\D/g, '');
  if (cleaned.length === 10) {
    return `+38 (${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6, 8)}-${cleaned.slice(8)}`;
  }
  return phone;
};

// üîç –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø–æ—à—É–∫–æ–º –∫–ª—ñ—î–Ω—Ç—ñ–≤
export const buildSearchCriteria = (searchTerm: string, searchType: string) => {
  return {
    searchTerm: searchTerm.trim(),
    searchType,
    limit: 10, // –û–±–º–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É
  };
};

export const highlightSearchTerm = (text: string, searchTerm: string): string => {
  if (!searchTerm.trim()) return text;

  const regex = new RegExp(`(${searchTerm.trim()})`, 'gi');
  return text.replace(regex, '<mark>$1</mark>');
};

// üîç –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤
export const getSearchCriteriaName = (criteria: string): string => {
  return (
    CLIENT_SEARCH_CRITERIA_NAMES[criteria as keyof typeof CLIENT_SEARCH_CRITERIA_NAMES] || criteria
  );
};

export const isValidSearchTerm = (term: string): boolean => {
  return term.trim().length >= 2; // –ú—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏ –¥–ª—è –ø–æ—à—É–∫—É
};

// üéØ –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø—ñ–¥–µ—Ç–∞–ø–∞–º–∏
export const getSubstepName = (substep: Stage1Substep): string => {
  return STAGE1_SUBSTEP_NAMES[substep] || substep;
};

export const isValidSubstep = (substep: string): substep is Stage1Substep => {
  return Object.values(STAGE1_SUBSTEPS).includes(substep as Stage1Substep);
};

// üìû –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å–ø–æ—Å–æ–±—ñ–≤ –∑–≤'—è–∑–∫—É
export const getContactMethodName = (method: string): string => {
  return CONTACT_METHOD_NAMES[method as keyof typeof CONTACT_METHOD_NAMES] || method;
};

export const isValidContactMethod = (
  method: string
): method is (typeof CONTACT_METHODS)[keyof typeof CONTACT_METHODS] => {
  return (Object.values(CONTACT_METHODS) as string[]).includes(method);
};

// üì¢ –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –¥–∂–µ—Ä–µ–ª —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
export const getInfoSourceName = (source: string): string => {
  return INFO_SOURCE_NAMES[source as keyof typeof INFO_SOURCE_NAMES] || source;
};

export const isValidInfoSource = (
  source: string
): source is (typeof INFO_SOURCES)[keyof typeof INFO_SOURCES] => {
  return (Object.values(INFO_SOURCES) as string[]).includes(source);
};
