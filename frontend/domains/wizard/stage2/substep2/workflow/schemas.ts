// üìã SUBSTEP2 WORKFLOW: –°—Ö–µ–º–∏ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—ó —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø—Ä–µ–¥–º–µ—Ç–∞
// –†–µ–µ–∫—Å–ø–æ—Ä—Ç Orval —Å—Ö–µ–º + –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ UI —Ñ–æ—Ä–º–∏

import { z } from 'zod';

// =================== ORVAL –°–•–ï–ú–ò ===================
export type {
  OrderItemDTO,
  AdditionalInfoDTO,
  SubstepResultDTO,
  ErrorResponse,
} from '@api/substep2';

// =================== –ú–Ü–ù–Ü–ú–ê–õ–¨–ù–Ü UI –§–û–†–ú–ò ===================

// –§–æ—Ä–º–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó workflow
export const initializationFormSchema = z.object({
  sessionId: z.string().min(1, "Session ID –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π"),
  orderId: z.string().optional(),
  itemId: z.string().optional(),
});

export type InitializationFormData = z.infer<typeof initializationFormSchema>;

// –§–æ—Ä–º–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
export const navigationFormSchema = z.object({
  skipValidation: z.boolean().default(false),
});

export type NavigationFormData = z.infer<typeof navigationFormSchema>;

// –§–æ—Ä–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
export const completionFormSchema = z.object({
  saveProgress: z.boolean().default(true),
  proceedToNext: z.boolean().default(true),
});

export type CompletionFormData = z.infer<typeof completionFormSchema>;
