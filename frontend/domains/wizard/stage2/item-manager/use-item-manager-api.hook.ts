/**
 * @fileoverview API —Ö—É–∫ –¥–ª—è –¥–æ–º–µ–Ω—É "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ Stage2"
 *
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å: —Ç—ñ–ª—å–∫–∏ API –æ–ø–µ—Ä–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ Orval —Ö—É–∫–∏
 * –ü—Ä–∏–Ω—Ü–∏–ø: Single Responsibility Principle
 */

import { useMemo } from 'react';

// –ì–æ—Ç–æ–≤—ñ Orval —Ö—É–∫–∏
import {
  useStage2InitializeItemManager,
  useStage2AddItemToOrder,
  useStage2UpdateItemInOrder,
  useStage2DeleteItemFromOrder,
  useStage2StartNewItemWizard,
  useStage2StartEditItemWizard,
} from '@/shared/api/generated/wizard/aksiApi';

/**
 * –•—É–∫ –¥–ª—è API –æ–ø–µ—Ä–∞—Ü—ñ–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
 * –Ü–Ω–∫–∞–ø—Å—É–ª—é—î –≤—Å—ñ Orval —Ö—É–∫–∏ —Ç–∞ –º—É—Ç–∞—Ü—ñ—ó
 */
export const useItemManagerAPI = (sessionId: string | null) => {
  // –ú—É—Ç–∞—Ü—ñ—ó –¥–ª—è –¥—ñ–π
  const initializeManagerMutation = useStage2InitializeItemManager({
    mutation: {
      onSuccess: (data) => {
        console.log('üéâ API Success - Item manager initialized:', data);
      },
      onError: (error) => {
        console.error('üí• API Error - Initialize manager failed:', error);
      },
    },
  });

  const addItemMutation = useStage2AddItemToOrder({
    mutation: {
      onSuccess: (data) => {
        console.log('üéâ API Success - Item added to order:', data);
      },
      onError: (error) => {
        console.error('üí• API Error - Add item failed:', error);
      },
    },
  });

  const updateItemMutation = useStage2UpdateItemInOrder({
    mutation: {
      onSuccess: (data) => {
        console.log('üéâ API Success - Item updated in order:', data);
      },
      onError: (error) => {
        console.error('üí• API Error - Update item failed:', error);
      },
    },
  });

  const deleteItemMutation = useStage2DeleteItemFromOrder({
    mutation: {
      onSuccess: () => {
        console.log('üéâ API Success - Item deleted from order');
      },
      onError: (error) => {
        console.error('üí• API Error - Delete item failed:', error);
      },
    },
  });

  const startNewItemWizardMutation = useStage2StartNewItemWizard({
    mutation: {
      onSuccess: (data) => {
        console.log('üéâ API Success - New item wizard started:', data);
      },
      onError: (error) => {
        console.error('üí• API Error - Start new item wizard failed:', error);
      },
    },
  });

  const startEditItemWizardMutation = useStage2StartEditItemWizard({
    mutation: {
      onSuccess: (data) => {
        console.log('üéâ API Success - Edit item wizard started:', data);
      },
      onError: (error) => {
        console.error('üí• API Error - Start edit item wizard failed:', error);
      },
    },
  });

  // API –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é sessionId
  const operations = useMemo(
    () => ({
      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
      initializeManager: async (orderId: string) => {
        return await initializeManagerMutation.mutateAsync({
          orderId,
        });
      },

      // –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
      addItemToOrder: async (itemData: any) => {
        if (!sessionId) throw new Error('No session ID for add item');

        return await addItemMutation.mutateAsync({
          sessionId,
          data: itemData,
        });
      },

      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ
      updateItemInOrder: async (itemId: string, itemData: any) => {
        if (!sessionId) throw new Error('No session ID for update item');

        return await updateItemMutation.mutateAsync({
          sessionId,
          itemId,
          data: itemData,
        });
      },

      // –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
      deleteItemFromOrder: async (itemId: string) => {
        if (!sessionId) throw new Error('No session ID for delete item');

        return await deleteItemMutation.mutateAsync({
          sessionId,
          itemId,
        });
      },

      // –ó–∞–ø—É—Å–∫ –≤—ñ–∑–∞—Ä–¥–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
      startNewItemWizard: async () => {
        if (!sessionId) throw new Error('No session ID for new item wizard');

        return await startNewItemWizardMutation.mutateAsync({
          sessionId,
        });
      },

      // –ó–∞–ø—É—Å–∫ –≤—ñ–∑–∞—Ä–¥–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞
      startEditItemWizard: async (itemId: string) => {
        if (!sessionId) throw new Error('No session ID for edit item wizard');

        return await startEditItemWizardMutation.mutateAsync({
          sessionId,
          itemId,
        });
      },
    }),
    [
      sessionId,
      initializeManagerMutation,
      addItemMutation,
      updateItemMutation,
      deleteItemMutation,
      startNewItemWizardMutation,
      startEditItemWizardMutation,
    ]
  );

  // –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ API (–∑ –º—É—Ç–∞—Ü—ñ–π)
  const data = useMemo(
    () => ({
      managerState: initializeManagerMutation.data,
      addedItem: addItemMutation.data,
      updatedItem: updateItemMutation.data,
      newItemWizardState: startNewItemWizardMutation.data,
      editItemWizardState: startEditItemWizardMutation.data,
    }),
    [
      initializeManagerMutation.data,
      addItemMutation.data,
      updateItemMutation.data,
      startNewItemWizardMutation.data,
      startEditItemWizardMutation.data,
    ]
  );

  // –°—Ç–∞–Ω–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  const loading = useMemo(
    () => ({
      isInitializingManager: initializeManagerMutation.isPending,
      isAddingItem: addItemMutation.isPending,
      isUpdatingItem: updateItemMutation.isPending,
      isDeletingItem: deleteItemMutation.isPending,
      isStartingNewWizard: startNewItemWizardMutation.isPending,
      isStartingEditWizard: startEditItemWizardMutation.isPending,

      // –ê–≥—Ä–µ–≥–æ–≤–∞–Ω—ñ —Å—Ç–∞–Ω–∏
      anyLoading:
        initializeManagerMutation.isPending ||
        addItemMutation.isPending ||
        updateItemMutation.isPending ||
        deleteItemMutation.isPending ||
        startNewItemWizardMutation.isPending ||
        startEditItemWizardMutation.isPending,
    }),
    [
      initializeManagerMutation.isPending,
      addItemMutation.isPending,
      updateItemMutation.isPending,
      deleteItemMutation.isPending,
      startNewItemWizardMutation.isPending,
      startEditItemWizardMutation.isPending,
    ]
  );

  return {
    operations,
    data,
    loading,
  };
};

export type UseItemManagerAPIReturn = ReturnType<typeof useItemManagerAPI>;
