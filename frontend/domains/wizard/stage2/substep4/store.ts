// üìã –ü–Ü–î–ï–¢–ê–ü 2.4: Zustand —Å—Ç–æ—Ä –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Ü—ñ–Ω–∏
// –¢—ñ–ª—å–∫–∏ UI —Å—Ç–∞–Ω, API –¥–∞–Ω—ñ –∫–µ—Ä—É—é—Ç—å—Å—è React Query

import { create } from 'zustand';
import { subscribeWithSelector } from 'zustand/middleware';

// –õ–æ–∫–∞–ª—å–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
import {
  SUBSTEP4_UI_STEPS,
  SUBSTEP4_VALIDATION_RULES,
  SUBSTEP4_UI_LIMITS,
  type Substep4UIStep,
} from './constants';

// =================== –¢–ò–ü–ò –°–¢–ê–ù–£ ===================
interface PriceCalculationUIState {
  // –°–µ—Å—ñ—è
  sessionId: string | null;

  // UI –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è
  currentStep: Substep4UIStep;

  // UI –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
  showDetailedBreakdown: boolean;
  autoRecalculate: boolean;
  roundingMode: 'up' | 'down' | 'nearest';
  currency: string;

  // –§–æ—Ä–º–∏ —Å—Ç–∞–Ω
  selectedModifiers: string[];
  calculationNotes: string;

  // UI –ø—Ä–∞–ø–æ—Ä—Ü—ñ
  isCalculationExpanded: boolean;
  isModifiersExpanded: boolean;
  showAdvancedOptions: boolean;

  // –Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤ (–¥–ª—è UI)
  calculationHistory: Array<{
    id: string;
    timestamp: number;
    basePrice: number;
    finalPrice: number;
    modifiersCount: number;
  }>;
}

interface PriceCalculationUIActions {
  // –°–µ—Å—ñ—è
  setSessionId: (sessionId: string | null) => void;

  // UI –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è
  setCurrentStep: (step: Substep4UIStep) => void;

  // UI –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
  setShowDetailedBreakdown: (show: boolean) => void;
  setAutoRecalculate: (auto: boolean) => void;
  setRoundingMode: (mode: 'up' | 'down' | 'nearest') => void;
  setCurrency: (currency: string) => void;

  // –§–æ—Ä–º–∏
  setSelectedModifiers: (modifiers: string[]) => void;
  addSelectedModifier: (modifierId: string) => void;
  removeSelectedModifier: (modifierId: string) => void;
  setCalculationNotes: (notes: string) => void;

  // UI –ø—Ä–∞–ø–æ—Ä—Ü—ñ
  toggleCalculationExpanded: () => void;
  toggleModifiersExpanded: () => void;
  toggleAdvancedOptions: () => void;

  // –Ü—Å—Ç–æ—Ä—ñ—è
  addToHistory: (calculation: {
    basePrice: number;
    finalPrice: number;
    modifiersCount: number;
  }) => void;
  clearHistory: () => void;

  // –°–∫–∏–¥–∞–Ω–Ω—è
  resetUIState: () => void;
  resetForms: () => void;
}

// =================== –ü–û–ß–ê–¢–ö–û–í–ò–ô –°–¢–ê–ù ===================
const initialState: PriceCalculationUIState = {
  // –°–µ—Å—ñ—è
  sessionId: null,

  // UI –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è
  currentStep: SUBSTEP4_UI_STEPS.MODIFIER_SELECTION,

  // UI –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
  showDetailedBreakdown: true,
  autoRecalculate: true,
  roundingMode: 'nearest',
  currency: 'UAH',

  // –§–æ—Ä–º–∏ —Å—Ç–∞–Ω
  selectedModifiers: [],
  calculationNotes: '',

  // UI –ø—Ä–∞–ø–æ—Ä—Ü—ñ
  isCalculationExpanded: true,
  isModifiersExpanded: false,
  showAdvancedOptions: false,

  // –Ü—Å—Ç–æ—Ä—ñ—è
  calculationHistory: [],
};

// =================== ZUSTAND –°–¢–û–† ===================
export const usePriceCalculationStore = create<
  PriceCalculationUIState & PriceCalculationUIActions
>()(
  subscribeWithSelector((set) => ({
    ...initialState,

    // =================== –°–ï–°–Ü–Ø ===================
    setSessionId: (sessionId) => set({ sessionId }),

    // =================== UI –ù–ê–í–Ü–ì–ê–¶–Ü–Ø ===================
    setCurrentStep: (currentStep) => set({ currentStep }),

    // =================== UI –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ===================
    setShowDetailedBreakdown: (showDetailedBreakdown) => set({ showDetailedBreakdown }),
    setAutoRecalculate: (autoRecalculate) => set({ autoRecalculate }),
    setRoundingMode: (roundingMode) => set({ roundingMode }),
    setCurrency: (currency) => set({ currency }),

    // =================== –§–û–†–ú–ò ===================
    setSelectedModifiers: (selectedModifiers) => set({ selectedModifiers }),

    addSelectedModifier: (modifierId) =>
      set((state) => {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä—ñ–≤
        if (state.selectedModifiers.length >= SUBSTEP4_VALIDATION_RULES.MAX_MODIFIERS) {
          return state;
        }

        return {
          selectedModifiers: state.selectedModifiers.includes(modifierId)
            ? state.selectedModifiers
            : [...state.selectedModifiers, modifierId],
        };
      }),

    removeSelectedModifier: (modifierId) =>
      set((state) => ({
        selectedModifiers: state.selectedModifiers.filter((id) => id !== modifierId),
      })),

    setCalculationNotes: (calculationNotes) => {
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É –¥–æ–≤–∂–∏–Ω–∏
      const trimmedNotes = calculationNotes.slice(0, SUBSTEP4_UI_LIMITS.MAX_NOTES_LENGTH);
      set({ calculationNotes: trimmedNotes });
    },

    // =================== UI –ü–†–ê–ü–û–†–¶–Ü ===================
    toggleCalculationExpanded: () =>
      set((state) => ({
        isCalculationExpanded: !state.isCalculationExpanded,
      })),

    toggleModifiersExpanded: () =>
      set((state) => ({
        isModifiersExpanded: !state.isModifiersExpanded,
      })),

    toggleAdvancedOptions: () =>
      set((state) => ({
        showAdvancedOptions: !state.showAdvancedOptions,
      })),

    // =================== –Ü–°–¢–û–†–Ü–Ø ===================
    addToHistory: (calculation) =>
      set((state) => {
        const newEntry = {
          id: `calc_${Date.now()}`,
          timestamp: Date.now(),
          ...calculation,
        };

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 10 —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤
        const updatedHistory = [newEntry, ...state.calculationHistory].slice(0, 10);

        return { calculationHistory: updatedHistory };
      }),

    clearHistory: () => set({ calculationHistory: [] }),

    // =================== –°–ö–ò–î–ê–ù–ù–Ø ===================
    resetUIState: () => set(initialState),

    resetForms: () =>
      set({
        selectedModifiers: [],
        calculationNotes: '',
      }),
  }))
);

// =================== –°–ï–õ–ï–ö–¢–û–†–ò ===================
export const usePriceCalculationSelectors = () => {
  const store = usePriceCalculationStore();

  return {
    // –ë–∞–∑–æ–≤—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏
    hasSession: !!store.sessionId,
    hasSelectedModifiers: store.selectedModifiers.length > 0,
    hasHistory: store.calculationHistory.length > 0,

    // –û–±—á–∏—Å–ª–µ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
    modifiersCount: store.selectedModifiers.length,
    latestCalculation: store.calculationHistory[0] || null,
    canAddMoreModifiers: store.selectedModifiers.length < SUBSTEP4_VALIDATION_RULES.MAX_MODIFIERS,

    // UI —Å—Ç–∞–Ω
    isExpanded: store.isCalculationExpanded || store.isModifiersExpanded,
    showAdvanced: store.showAdvancedOptions,

    // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
    currentStep: store.currentStep,
  };
};
