/**
 * @fileoverview API —Ö—É–∫ –¥–ª—è –¥–æ–º–µ–Ω—É "–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–µ–¥–º–µ—Ç (Substep1)"
 *
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å: —Ç—ñ–ª—å–∫–∏ API –æ–ø–µ—Ä–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ Orval —Ö—É–∫–∏
 * –ü—Ä–∏–Ω—Ü–∏–ø: Single Responsibility Principle
 */

import { useMemo } from 'react';

// –ì–æ—Ç–æ–≤—ñ Orval —Ö—É–∫–∏
import {
  useSubstep1GetCategories,
  useSubstep1SelectCategory,
  useSubstep1GetItemsByCategory,
  useSubstep1SelectItem,
  useSubstep1SetQuantity,
  useSubstep1GetCurrentStep,
  useSubstep1CompleteStep,
  useSubstep1ResetStep,
} from '@/shared/api/generated/wizard/aksiApi';

/**
 * –•—É–∫ –¥–ª—è API –æ–ø–µ—Ä–∞—Ü—ñ–π –æ—Å–Ω–æ–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø—Ä–µ–¥–º–µ—Ç
 * –Ü–Ω–∫–∞–ø—Å—É–ª—é—î –≤—Å—ñ Orval —Ö—É–∫–∏ —Ç–∞ –º—É—Ç–∞—Ü—ñ—ó
 */
export const useItemBasicInfoAPI = (sessionId: string | null) => {
  // –ú—É—Ç–∞—Ü—ñ—ó –¥–ª—è –¥—ñ–π
  const selectCategoryMutation = useSubstep1SelectCategory({
    mutation: {
      onSuccess: (data) => {
        console.log('üéâ API Success - Category selected:', data);
      },
      onError: (error) => {
        console.error('üí• API Error - Select category failed:', error);
      },
    },
  });

  const selectItemMutation = useSubstep1SelectItem({
    mutation: {
      onSuccess: (data) => {
        console.log('üéâ API Success - Item selected:', data);
      },
      onError: (error) => {
        console.error('üí• API Error - Select item failed:', error);
      },
    },
  });

  const setQuantityMutation = useSubstep1SetQuantity({
    mutation: {
      onSuccess: (data) => {
        console.log('üéâ API Success - Quantity set:', data);
      },
      onError: (error) => {
        console.error('üí• API Error - Set quantity failed:', error);
      },
    },
  });

  const completeStepMutation = useSubstep1CompleteStep({
    mutation: {
      onSuccess: (data) => {
        console.log('üéâ API Success - Step completed:', data);
      },
      onError: (error) => {
        console.error('üí• API Error - Complete step failed:', error);
      },
    },
  });

  const resetStepMutation = useSubstep1ResetStep({
    mutation: {
      onSuccess: () => {
        console.log('üéâ API Success - Step reset');
      },
      onError: (error) => {
        console.error('üí• API Error - Reset step failed:', error);
      },
    },
  });

  // –ó–∞–ø–∏—Ç–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
  const categoriesQuery = useSubstep1GetCategories({
    query: {
      refetchOnWindowFocus: false,
      retry: 2,
    },
  });

  const itemsByCategoryQuery = useSubstep1GetItemsByCategory(sessionId || '', {
    query: {
      enabled: !!sessionId,
      refetchOnWindowFocus: false,
      retry: 2,
    },
  });

  const currentStepQuery = useSubstep1GetCurrentStep(sessionId || '', {
    query: {
      enabled: !!sessionId,
      refetchOnWindowFocus: false,
      retry: 2,
    },
  });

  // API –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é sessionId
  const operations = useMemo(
    () => ({
      // –í–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
      selectCategory: async (categoryId: string) => {
        if (!sessionId) throw new Error('No session ID for select category');

        return await selectCategoryMutation.mutateAsync({
          sessionId,
          categoryId,
        });
      },

      // –í–∏–±—ñ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
      selectItem: async (itemId: string) => {
        if (!sessionId) throw new Error('No session ID for select item');

        return await selectItemMutation.mutateAsync({
          sessionId,
          itemId,
        });
      },

      // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
      setQuantity: async (quantity: number, unit: string) => {
        if (!sessionId) throw new Error('No session ID for set quantity');

        return await setQuantityMutation.mutateAsync({
          sessionId,
          data: { quantity, unit },
        });
      },

      // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∫—Ä–æ–∫—É
      completeStep: async () => {
        if (!sessionId) throw new Error('No session ID for complete step');

        return await completeStepMutation.mutateAsync({
          sessionId,
        });
      },

      // –°–∫–∏–¥–∞–Ω–Ω—è –∫—Ä–æ–∫—É
      resetStep: async () => {
        if (!sessionId) throw new Error('No session ID for reset step');

        return await resetStepMutation.mutateAsync({
          sessionId,
        });
      },
    }),
    [
      sessionId,
      selectCategoryMutation,
      selectItemMutation,
      setQuantityMutation,
      completeStepMutation,
      resetStepMutation,
    ]
  );

  // –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ API
  const data = useMemo(
    () => ({
      categories: categoriesQuery.data?.categories || [],
      itemsByCategory: itemsByCategoryQuery.data?.items || [],
      currentStep: currentStepQuery.data,
    }),
    [categoriesQuery.data, itemsByCategoryQuery.data, currentStepQuery.data]
  );

  // –°—Ç–∞–Ω–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  const loading = useMemo(
    () => ({
      isSelectingCategory: selectCategoryMutation.isPending,
      isSelectingItem: selectItemMutation.isPending,
      isSettingQuantity: setQuantityMutation.isPending,
      isCompletingStep: completeStepMutation.isPending,
      isResettingStep: resetStepMutation.isPending,
      isLoadingCategories: categoriesQuery.isFetching,
      isLoadingItems: itemsByCategoryQuery.isFetching,
      isLoadingCurrentStep: currentStepQuery.isFetching,

      // –ê–≥—Ä–µ–≥–æ–≤–∞–Ω—ñ —Å—Ç–∞–Ω–∏
      anyLoading:
        selectCategoryMutation.isPending ||
        selectItemMutation.isPending ||
        setQuantityMutation.isPending ||
        completeStepMutation.isPending ||
        resetStepMutation.isPending ||
        categoriesQuery.isFetching ||
        itemsByCategoryQuery.isFetching ||
        currentStepQuery.isFetching,
    }),
    [
      selectCategoryMutation.isPending,
      selectItemMutation.isPending,
      setQuantityMutation.isPending,
      completeStepMutation.isPending,
      resetStepMutation.isPending,
      categoriesQuery.isFetching,
      itemsByCategoryQuery.isFetching,
      currentStepQuery.isFetching,
    ]
  );

  return {
    operations,
    data,
    loading,
  };
};

export type UseItemBasicInfoAPIReturn = ReturnType<typeof useItemBasicInfoAPI>;
