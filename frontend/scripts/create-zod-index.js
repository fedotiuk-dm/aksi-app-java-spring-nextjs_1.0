#!/usr/bin/env node

/**
 * @fileoverview –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è index —Ñ–∞–π–ª—ñ–≤ Zod —Å—Ö–µ–º
 *
 * –¶–µ–π —Å–∫—Ä–∏–ø—Ç:
 * - –°—Ç–≤–æ—Ä—é—î –∑—Ä—É—á–Ω—ñ index.ts —Ñ–∞–π–ª–∏ –¥–ª—è Zod —Å—Ö–µ–º
 * - –ï–∫—Å–ø–æ—Ä—Ç—É—î –≤—Å—ñ —Å—Ö–µ–º–∏ –∑ –ª–æ–≥—ñ—á–Ω–∏–º–∏ —ñ–º–µ–Ω–∞–º–∏
 * - –°—Ç–≤–æ—Ä—é—î —É—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
 * - –î–æ–¥–∞—î helper —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Å—Ö–µ–º–∞–º–∏
 */

const fs = require('fs');
const path = require('path');

/**
 * –°—Ç–≤–æ—Ä—é—î index.ts —Ñ–∞–π–ª –¥–ª—è Zod —Å—Ö–µ–º –¥–æ–º–µ–Ω—É
 */
function createZodIndex(domainName) {
  const domainPath = path.join(__dirname, '../shared/api/generated', domainName, 'zod');

  if (!domainName || domainName === 'undefined') {
    console.log('‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ - –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –¥–æ–º–µ–Ω');
    return;
  }

  if (!fs.existsSync(domainPath)) {
    console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ ${domainName} - –ø–∞–ø–∫–∞ zod –Ω–µ —ñ—Å–Ω—É—î`);
    return;
  }

  const indexPath = path.join(domainPath, 'index.ts');
  const aksiApiPath = path.join(domainPath, 'aksiApi.ts');

  if (!fs.existsSync(aksiApiPath)) {
    console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ ${domainName} - –Ω–µ–º–∞—î aksiApi.ts —É zod –ø–∞–ø—Ü—ñ`);
    return;
  }

  const content = [
    `/**`,
    ` * @fileoverview Zod —Å—Ö–µ–º–∏ –¥–ª—è –¥–æ–º–µ–Ω—É ${domainName}`,
    ` * `,
    ` * –¶–µ–π —Ñ–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è —Å–∫—Ä–∏–ø—Ç–æ–º create-zod-index.js`,
    ` * –ù–ï –†–ï–î–ê–ì–£–ô–¢–ï –í–†–£–ß–ù–£!`,
    ` */`,
    '',
    `// –ï–∫—Å–ø–æ—Ä—Ç –≤—Å—ñ—Ö Zod —Å—Ö–µ–º`,
    `export * from './aksiApi';`,
    '',
    `// Re-export zod –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ`,
    `export { z, type ZodType, type ZodSchema } from 'zod';`,
    '',
    `// –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó`,
    `import { z } from 'zod';`,
    '',
    `/**`,
    ` * –£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ—ó –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º–∏ –ø–æ–º–∏–ª–∫–∞–º–∏`,
    ` */`,
    `export function safeValidate<T>(`,
    `  schema: z.ZodType<T>,`,
    `  data: unknown`,
    `): { success: true; data: T } | { success: false; errors: string[] } {`,
    `  const result = schema.safeParse(data);`,
    `  `,
    `  if (result.success) {`,
    `    return { success: true, data: result.data };`,
    `  }`,
    `  `,
    `  return {`,
    `    success: false,`,
    `    errors: result.error.errors.map(err => \`\${err.path.join('.')}: \${err.message}\`)`,
    `  };`,
    `}`,
    '',
    `/**`,
    ` * –£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∑ –≤–∏–∫–∏–¥–∞–Ω–Ω—è–º –ø–æ–º–∏–ª–∫–∏`,
    ` */`,
    `export function validateOrThrow<T>(schema: z.ZodType<T>, data: unknown): T {`,
    `  const result = safeValidate(schema, data);`,
    `  `,
    `  if (!result.success) {`,
    `    throw new Error(\`Validation failed: \${result.errors.join(', ')}\`);`,
    `  }`,
    `  `,
    `  return result.data;`,
    `}`,
    '',
    `/**`,
    ` * –£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–∞—Å—Ç–∫–æ–≤–æ—ó —Å—Ö–µ–º–∏`,
    ` */`,
    `export function createPartialSchema<T extends z.ZodRawShape>(`,
    `  schema: z.ZodObject<T>`,
    `): z.ZodObject<{ [K in keyof T]: z.ZodOptional<T[K]> }> {`,
    `  return schema.partial();`,
    `}`,
    '',
    `/**`,
    ` * –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–æ–º–µ–Ω—É –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó`,
    ` */`,
    `export const ${domainName.toUpperCase().replace(/-/g, '_')}_VALIDATION = {`,
    `  DOMAIN_NAME: '${domainName}',`,
    `  safeValidate,`,
    `  validateOrThrow,`,
    `  createPartialSchema,`,
    `} as const;`,
  ].join('\n');

  fs.writeFileSync(indexPath, content, 'utf8');
  console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ Zod index –¥–ª—è –¥–æ–º–µ–Ω—É: ${domainName}`);
}

/**
 * –°—Ç–≤–æ—Ä—é—î –∑–∞–≥–∞–ª—å–Ω–∏–π index –¥–ª—è Order Wizard Zod —Å—Ö–µ–º
 */
function createMainZodIndex() {
  const generatedPath = path.join(__dirname, '../shared/api/generated');
  const mainIndexPath = path.join(generatedPath, 'zod-schemas.ts');

  if (!fs.existsSync(generatedPath)) {
    console.log('‚è≠Ô∏è  –ü–∞–ø–∫–∞ generated –Ω–µ —ñ—Å–Ω—É—î');
    return;
  }

  let exports = [
    `/**`,
    ` * @fileoverview –ó–∞–≥–∞–ª—å–Ω–∏–π index –¥–ª—è Order Wizard Zod —Å—Ö–µ–º`,
    ` * `,
    ` * –¶–µ–π —Ñ–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è —Å–∫—Ä–∏–ø—Ç–æ–º create-zod-index.js`,
    ` * –ù–ï –†–ï–î–ê–ì–£–ô–¢–ï –í–†–£–ß–ù–£!`,
    ` */`,
    '',
    `// Re-export zod`,
    `export { z, type ZodType, type ZodSchema } from 'zod';`,
    '',
  ];

  // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ç—ñ–ª—å–∫–∏ wizard —Å—Ö–µ–º–∏
  const wizardZodPath = path.join(generatedPath, 'wizard', 'zod', 'index.ts');
  if (fs.existsSync(wizardZodPath)) {
    exports.push(`// Order Wizard —Å—Ö–µ–º–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó`);
    exports.push(`export * as wizardSchemas from './wizard/zod';`);
    exports.push('');
    exports.push(`// –î–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º–∏ –≤–µ—Ä—Å—ñ—è–º–∏`);
    exports.push(`export * from './wizard/zod';`);
    exports.push('');
  } else {
    exports.push(`// ‚ö†Ô∏è  Wizard Zod —Å—Ö–µ–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é`);
    exports.push('');
  }

  // –î–æ–¥–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏
  exports.push(
    [
      `/**`,
      ` * –ó–∞–≥–∞–ª—å–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —É—Å—ñ–º–∞ —Å—Ö–µ–º–∞–º–∏`,
      ` */`,
      `import { z } from 'zod';`,
      '',
      `export const zodUtils = {`,
      `  /**`,
      `   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –∑–Ω–∞—á–µ–Ω–Ω—è –≤–∞–ª—ñ–¥–Ω–∏–º –¥–ª—è –±—É–¥—å-—è–∫–æ—ó —Å—Ö–µ–º–∏`,
      `   */`,
      `  isValid<T>(schema: z.ZodType<T>, data: unknown): data is T {`,
      `    return schema.safeParse(data).success;`,
      `  },`,
      '',
      `  /**`,
      `   * –û—Ç—Ä–∏–º—É—î –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —É –∑—Ä—É—á–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ`,
      `   */`,
      `  getValidationErrors<T>(schema: z.ZodType<T>, data: unknown): string[] {`,
      `    const result = schema.safeParse(data);`,
      `    if (result.success) return [];`,
      `    `,
      `    return result.error.errors.map(err => `,
      `      \`\${err.path.join('.')}: \${err.message}\``,
      `    );`,
      `  },`,
      '',
      `  /**`,
      `   * –°—Ç–≤–æ—Ä—é—î union —Å—Ö–µ–º—É –∑ –∫—ñ–ª—å–∫–æ—Ö —Å—Ö–µ–º (–º—ñ–Ω—ñ–º—É–º 2 —Å—Ö–µ–º–∏)`,
      `   */`,
      `  createUnion<T extends readonly [z.ZodTypeAny, z.ZodTypeAny, ...z.ZodTypeAny[]]>(`,
      `    schemas: T`,
      `  ): z.ZodUnion<T> {`,
      `    return z.union(schemas);`,
      `  },`,
      '',
      `  /**`,
      `   * –°—Ç–≤–æ—Ä—é—î —Å—Ö–µ–º—É –∑ default –∑–Ω–∞—á–µ–Ω–Ω—è–º`,
      `   */`,
      `  withDefault<T>(`,
      `    schema: z.ZodType<T>, `,
      `    defaultValue: z.util.noUndefined<T>`,
      `  ): z.ZodDefault<z.ZodType<T>> {`,
      `    return schema.default(defaultValue);`,
      `  },`,
      '',
      `  /**`,
      `   * –°—Ç–≤–æ—Ä—é—î –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—É —Å—Ö–µ–º—É –∑ fallback –∑–Ω–∞—á–µ–Ω–Ω—è–º`,
      `   */`,
      `  withFallback<T>(`,
      `    schema: z.ZodType<T>, `,
      `    fallbackValue: T`,
      `  ): z.ZodCatch<z.ZodType<T>> {`,
      `    return schema.catch(fallbackValue);`,
      `  },`,
      `} as const;`,
    ].join('\n')
  );

  const content = exports.join('\n');
  fs.writeFileSync(mainIndexPath, content, 'utf8');
  console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞–≥–∞–ª—å–Ω–∏–π Zod index —Ñ–∞–π–ª`);
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
 */
function main() {
  const domainName = process.argv[2] || 'wizard';

  console.log(`üöÄ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Zod index –¥–ª—è Order Wizard –¥–æ–º–µ–Ω—É...`);

  if (domainName !== 'wizard') {
    console.log(`‚ö†Ô∏è  –ü—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ wizard –¥–æ–º–µ–Ω. –û—Ç—Ä–∏–º–∞–Ω–æ: ${domainName}`);
    console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é wizard...');
  }

  createZodIndex('wizard');
  createMainZodIndex();

  console.log('üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Zod index –¥–ª—è Order Wizard!');
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —è–∫—â–æ —Ü–µ –≥–æ–ª–æ–≤–Ω–∏–π –º–æ–¥—É–ª—å
if (require.main === module) {
  main();
}

module.exports = { createZodIndex, createMainZodIndex, main };
