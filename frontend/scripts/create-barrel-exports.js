#!/usr/bin/env node

/**
 * @fileoverview üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –°–¢–í–û–†–ï–ù–ù–Ø BARREL –§–ê–ô–õ–Ü–í –¥–ª—è Domain API
 *
 * –¶–µ–π —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î index.ts —Ñ–∞–π–ª–∏ —É –≤—Å—ñ—Ö –ø–∞–ø–∫–∞—Ö –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ–≥–æ API,
 * –∑–∞–±–µ–∑–ø–µ—á—É—é—á–∏ —á–∏—Å—Ç—ñ —Ç–∞ –∑—Ä—É—á–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏:
 *
 * ‚úÖ –ó–∞–º—ñ—Å—Ç—å: import { useClients } from '@/shared/api/generated/client/aKSIDryCleaningOrderSystemAPI'
 * ‚úÖ –°—Ç–∞—î:    import { useClients } from '@/shared/api/generated/client'
 *
 * üéØ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
 * npm run barrel:all
 * –∞–±–æ
 * node scripts/create-barrel-exports.js
 */

const fs = require('fs');
const path = require('path');

// üîß –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const GENERATED_API_DIR = './shared/api/generated';
const BARREL_FILE_NAME = 'index.ts';

// üè∑Ô∏è –û–ø–∏—Å–∏ –¥–æ–º–µ–Ω—ñ–≤
const DOMAIN_DESCRIPTIONS = {
  client: 'üë§ Client Domain - —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞–º–∏, –ø–æ—à—É–∫, –∫–æ–Ω—Ç–∞–∫—Ç–∏',
  branch: 'üè¢ Branch Domain - —Ñ—ñ–ª—ñ—ó, –≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
  order: 'üì¶ Order Domain - –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è',
  item: 'üè∑Ô∏è Item Domain - –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ—Å–ª—É–≥, –ø—Ä–∞–π—Å-–ª–∏—Å—Ç, —Ñ–æ—Ç–æ',
  document: 'üìÑ Document Domain - –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó, –¥–æ–∫—É–º–µ–Ω—Ç–∏, —Ü–∏—Ñ—Ä–æ–≤—ñ –ø—ñ–¥–ø–∏—Å–∏',
};

// üé® –®–∞–±–ª–æ–Ω barrel —Ñ–∞–π–ª—É
const createBarrelContent = (domainName, files) => {
  const timestamp = new Date().toISOString();
  const description = DOMAIN_DESCRIPTIONS[domainName] || `–î–æ–º–µ–Ω ${domainName}`;

  return `// üî• AUTO-GENERATED BARREL EXPORT for ${domainName.toUpperCase()} DOMAIN
// ${description}
// –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: ${timestamp}
// –ù–µ —Ä–µ–¥–∞–≥—É–π—Ç–µ –≤—Ä—É—á–Ω—É - —Ñ–∞–π–ª –±—É–¥–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∏–π –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
//
// üí° –¶–µ –¥–æ–∑–≤–æ–ª—è—î –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —á–∏—Å—Ç—ñ —ñ–º–ø–æ—Ä—Ç–∏:
// import { useClients, ClientResponse, clientSchema } from '@/shared/api/generated/${domainName}';
//
// üéØ –î–æ—Å—Ç—É–ø–Ω—ñ –µ–∫—Å–ø–æ—Ä—Ç–∏:
${files.map((file) => `// - –∑ ${file.name}: ${file.description}`).join('\n')}

${files.map((file) => file.export).join('\n')}

// üì¶ –ï–∫—Å–ø–æ—Ä—Ç –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ TypeScript
${files
  .filter((f) => f.name.includes('.schemas.'))
  .map((f) => `export type * from './${f.name.replace('.ts', '')}';`)
  .join('\n')}
`;
};

// üîç –ê–Ω–∞–ª—ñ–∑ —Ñ–∞–π–ª—ñ–≤ —É –¥–æ–º–µ–Ω—ñ
const analyzeModuleFiles = (modulePath) => {
  const files = [];

  try {
    const dirFiles = fs.readdirSync(modulePath);

    // –û—Å–Ω–æ–≤–Ω–∏–π API —Ñ–∞–π–ª (–º–æ–∂–µ –º–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ –Ω–∞–∑–≤–∏)
    const apiFile = dirFiles.find(
      (file) =>
        file.endsWith('.ts') &&
        !file.includes('.schemas.') &&
        !file.includes('.zod.') &&
        file !== 'index.ts'
    );

    if (apiFile) {
      files.push({
        name: apiFile,
        description: 'React Query —Ö—É–∫–∏ (useQuery, useMutation)',
        export: `export * from './${apiFile.replace('.ts', '')}';`,
      });
    }

    // Schemas —Ñ–∞–π–ª - TypeScript —Ç–∏–ø–∏
    const schemasFile = dirFiles.find((file) => file.includes('.schemas.ts'));
    if (schemasFile) {
      files.push({
        name: schemasFile,
        description: 'TypeScript —Ç–∏–ø–∏ —Ç–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏',
        export: `export * from './${schemasFile.replace('.ts', '')}';`,
      });
    }

    // Zod —Å—Ö–µ–º–∏ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
    const zodFile = dirFiles.find((file) => file.includes('.zod.ts'));
    if (zodFile) {
      files.push({
        name: zodFile,
        description: 'Zod —Å—Ö–µ–º–∏ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ñ–æ—Ä–º',
        export: `export * from './${zodFile.replace('.ts', '')}';`,
      });
    }
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó ${modulePath}:`, error.message);
  }

  return files;
};

// üèóÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è barrel —Ñ–∞–π–ª—É –¥–ª—è –¥–æ–º–µ–Ω—É
const createBarrelForModule = (domainName, domainPath) => {
  console.log(`üîÑ –û–±—Ä–æ–±–ª—è—é –¥–æ–º–µ–Ω: ${domainName}`);
  console.log(`   üìÅ –®–ª—è—Ö: ${domainPath}`);

  const files = analyzeModuleFiles(domainPath);

  if (files.length === 0) {
    console.log(`‚ö†Ô∏è  –î–æ–º–µ–Ω ${domainName} –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É`);
    return;
  }

  const barrelContent = createBarrelContent(domainName, files);
  const barrelPath = path.join(domainPath, BARREL_FILE_NAME);

  try {
    fs.writeFileSync(barrelPath, barrelContent, 'utf8');
    console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ barrel: ${barrelPath}`);
    console.log(`   üìÅ –ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ ${files.length} —Ñ–∞–π–ª(–∏):`);
    files.forEach((file) => {
      console.log(`      - ${file.name}: ${file.description}`);
    });
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è barrel –¥–ª—è ${domainName}:`, error.message);
  }
};

// üöÄ –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
const main = () => {
  console.log('üî• –ü–û–ß–ê–¢–û–ö –°–¢–í–û–†–ï–ù–ù–Ø DOMAIN BARREL –§–ê–ô–õ–Ü–í');
  console.log('==========================================');

  if (!fs.existsSync(GENERATED_API_DIR)) {
    console.error(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è ${GENERATED_API_DIR} –Ω–µ —ñ—Å–Ω—É—î!`);
    console.log('üí° –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å: npm run orval');
    process.exit(1);
  }

  const domains = fs
    .readdirSync(GENERATED_API_DIR, { withFileTypes: true })
    .filter((dirent) => dirent.isDirectory())
    .map((dirent) => dirent.name);

  if (domains.length === 0) {
    console.log('‚ö†Ô∏è  –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–æ–º–µ–Ω—ñ–≤ API –¥–ª—è –æ–±—Ä–æ–±–∫–∏');
    return;
  }

  console.log(`üì¶ –ó–Ω–∞–π–¥–µ–Ω–æ ${domains.length} –¥–æ–º–µ–Ω(–∏):`);
  domains.forEach((domain) => {
    const description = DOMAIN_DESCRIPTIONS[domain] || `–î–æ–º–µ–Ω ${domain}`;
    console.log(`   - ${domain}: ${description}`);
  });
  console.log('');

  let successCount = 0;

  domains.forEach((domainName) => {
    const domainPath = path.join(GENERATED_API_DIR, domainName);
    try {
      createBarrelForModule(domainName, domainPath);
      successCount++;
      console.log('');
    } catch (error) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –¥–æ–º–µ–Ω—ñ ${domainName}:`, error.message);
    }
  });

  console.log('==========================================');
  console.log(`üéâ –ó–ê–í–ï–†–®–ï–ù–û! –°—Ç–≤–æ—Ä–µ–Ω–æ ${successCount}/${domains.length} barrel —Ñ–∞–π–ª—ñ–≤`);

  if (successCount > 0) {
    console.log('');
    console.log('üí° –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —á–∏—Å—Ç—ñ —ñ–º–ø–æ—Ä—Ç–∏:');
    console.log('   import { useClients } from "@/shared/api/generated/client";');
    console.log('   import { ClientResponse } from "@/shared/api/generated/client";');
    console.log('   import { useBranches } from "@/shared/api/generated/branch";');
    console.log('   import { useCreateOrder } from "@/shared/api/generated/order";');
  }
};

// üèÉ‚Äç‚ôÇÔ∏è –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main();
}

module.exports = { main, createBarrelForModule, analyzeModuleFiles };
