#!/usr/bin/env node

/**
 * @fileoverview üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –°–¢–í–û–†–ï–ù–ù–Ø BARREL –§–ê–ô–õ–Ü–í –¥–ª—è Orval API
 *
 * –¶–µ–π —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î index.ts —Ñ–∞–π–ª–∏ —É –≤—Å—ñ—Ö –ø–∞–ø–∫–∞—Ö –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ–≥–æ API,
 * –∑–∞–±–µ–∑–ø–µ—á—É—é—á–∏ —á–∏—Å—Ç—ñ —Ç–∞ –∑—Ä—É—á–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏:
 *
 * ‚úÖ –ó–∞–º—ñ—Å—Ç—å: import { useStage1SearchClients } from '@/shared/api/generated/stage1/aksiApi'
 * ‚úÖ –°—Ç–∞—î:    import { useStage1SearchClients } from '@/shared/api/generated/stage1'
 *
 * üéØ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
 * npm run create-barrel-exports
 * –∞–±–æ
 * node scripts/create-barrel-exports.js
 */

const fs = require('fs');
const path = require('path');

// üîß –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const GENERATED_API_DIR = './shared/api/generated';
const BARREL_FILE_NAME = 'index.ts';

// üé® –®–∞–±–ª–æ–Ω barrel —Ñ–∞–π–ª—É
const createBarrelContent = (moduleName, files) => {
  const timestamp = new Date().toISOString();

  return `// üî• AUTO-GENERATED BARREL EXPORT for ${moduleName}
// –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: ${timestamp}
// –ù–µ —Ä–µ–¥–∞–≥—É–π—Ç–µ –≤—Ä—É—á–Ω—É - —Ñ–∞–π–ª –±—É–¥–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∏–π –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
//
// üí° –¶–µ –¥–æ–∑–≤–æ–ª—è—î –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —á–∏—Å—Ç—ñ —ñ–º–ø–æ—Ä—Ç–∏:
// import { useStage1SearchClients, ClientResponse, clientSearchSchema } from '@/shared/api/generated/${moduleName}';
//
// üéØ –î–æ—Å—Ç—É–ø–Ω—ñ –µ–∫—Å–ø–æ—Ä—Ç–∏:
${files.map((file) => `// - –∑ ${file.name}: ${file.description}`).join('\n')}

${files.map((file) => file.export).join('\n')}

// üì¶ –ï–∫—Å–ø–æ—Ä—Ç –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
export type * from './aksiApi.schemas';
`;
};

// üîç –ê–Ω–∞–ª—ñ–∑ —Ñ–∞–π–ª—ñ–≤ —É –º–æ–¥—É–ª—ñ
const analyzeModuleFiles = (modulePath) => {
  const files = [];

  // aksiApi.ts - –æ—Å–Ω–æ–≤–Ω—ñ API —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ —Ö—É–∫–∏
  const aksiApiPath = path.join(modulePath, 'aksiApi.ts');
  if (fs.existsSync(aksiApiPath)) {
    files.push({
      name: 'aksiApi.ts',
      description: 'API —Ñ—É–Ω–∫—Ü—ñ—ó, React Query —Ö—É–∫–∏ (useQuery, useMutation)',
      export: "export * from './aksiApi';",
    });
  }

  // aksiApi.schemas.ts - TypeScript —Ç–∏–ø–∏
  const schemasPath = path.join(modulePath, 'aksiApi.schemas.ts');
  if (fs.existsSync(schemasPath)) {
    files.push({
      name: 'aksiApi.schemas.ts',
      description: 'TypeScript —Ç–∏–ø–∏ —Ç–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏',
      export: "export * from './aksiApi.schemas';",
    });
  }

  // schemas.zod.ts - Zod —Å—Ö–µ–º–∏ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
  const zodPath = path.join(modulePath, 'schemas.zod.ts');
  if (fs.existsSync(zodPath)) {
    files.push({
      name: 'schemas.zod.ts',
      description: 'Zod —Å—Ö–µ–º–∏ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ñ–æ—Ä–º',
      export: "export * from './schemas.zod';",
    });
  }

  return files;
};

// üèóÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è barrel —Ñ–∞–π–ª—É –¥–ª—è –º–æ–¥—É–ª—è
const createBarrelForModule = (moduleName, modulePath) => {
  console.log(`üîÑ –û–±—Ä–æ–±–ª—è—é –º–æ–¥—É–ª—å: ${moduleName}`);

  const files = analyzeModuleFiles(modulePath);

  if (files.length === 0) {
    console.log(`‚ö†Ô∏è  –ú–æ–¥—É–ª—å ${moduleName} –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É`);
    return;
  }

  const barrelContent = createBarrelContent(moduleName, files);
  const barrelPath = path.join(modulePath, BARREL_FILE_NAME);

  try {
    fs.writeFileSync(barrelPath, barrelContent, 'utf8');
    console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ barrel: ${barrelPath}`);
    console.log(`   üìÅ –ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ ${files.length} —Ñ–∞–π–ª(–∏):`);
    files.forEach((file) => {
      console.log(`      - ${file.name}: ${file.description}`);
    });
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è barrel –¥–ª—è ${moduleName}:`, error.message);
  }
};

// üöÄ –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
const main = () => {
  console.log('üî• –ü–û–ß–ê–¢–û–ö –°–¢–í–û–†–ï–ù–ù–Ø BARREL –§–ê–ô–õ–Ü–í');
  console.log('=====================================');

  if (!fs.existsSync(GENERATED_API_DIR)) {
    console.error(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è ${GENERATED_API_DIR} –Ω–µ —ñ—Å–Ω—É—î!`);
    console.log('üí° –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å: npm run orval');
    process.exit(1);
  }

  const modules = fs
    .readdirSync(GENERATED_API_DIR, { withFileTypes: true })
    .filter((dirent) => dirent.isDirectory())
    .map((dirent) => dirent.name);

  if (modules.length === 0) {
    console.log('‚ö†Ô∏è  –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –º–æ–¥—É–ª—ñ–≤ API –¥–ª—è –æ–±—Ä–æ–±–∫–∏');
    return;
  }

  console.log(`üì¶ –ó–Ω–∞–π–¥–µ–Ω–æ ${modules.length} –º–æ–¥—É–ª—å(—ñ): ${modules.join(', ')}`);
  console.log('');

  let successCount = 0;

  modules.forEach((moduleName) => {
    const modulePath = path.join(GENERATED_API_DIR, moduleName);
    try {
      createBarrelForModule(moduleName, modulePath);
      successCount++;
      console.log('');
    } catch (error) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –º–æ–¥—É–ª—ñ ${moduleName}:`, error.message);
    }
  });

  console.log('=====================================');
  console.log(`üéâ –ó–ê–í–ï–†–®–ï–ù–û! –°—Ç–≤–æ—Ä–µ–Ω–æ ${successCount}/${modules.length} barrel —Ñ–∞–π–ª—ñ–≤`);

  if (successCount > 0) {
    console.log('');
    console.log('üí° –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —á–∏—Å—Ç—ñ —ñ–º–ø–æ—Ä—Ç–∏:');
    console.log('   import { useStage1SearchClients } from "@/shared/api/generated/stage1";');
    console.log('   import { ClientResponse } from "@/shared/api/generated/stage1";');
    console.log('   import { clientSearchSchema } from "@/shared/api/generated/stage1";');
  }
};

// üèÉ‚Äç‚ôÇÔ∏è –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main();
}

module.exports = { main, createBarrelForModule, analyzeModuleFiles };
