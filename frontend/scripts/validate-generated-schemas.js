#!/usr/bin/env node

/**
 * @fileoverview –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö Zod —Å—Ö–µ–º
 */

const fs = require('fs');
const path = require('path');

const GENERATED_PATH = path.join(__dirname, '../shared/api/generated');
const DOMAINS = ['auth', 'branch', 'client', 'order', 'pricing', 'receipt', 'test'];

function validateDomainSchemas(domain) {
  const domainPath = path.join(GENERATED_PATH, domain);
  const zodPath = path.join(domainPath, 'zod', 'aksiApi.ts');

  if (!fs.existsSync(zodPath)) {
    console.log(`‚è≠Ô∏è  ${domain}: Zod —Å—Ö–µ–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ`);
    return false;
  }

  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É —Ñ–∞–π–ª—É
    const content = fs.readFileSync(zodPath, 'utf8');

    // –ë–∞–∑–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    if (!content.includes('z as zod') && !content.includes('import { z }')) {
      throw new Error('–í—ñ–¥—Å—É—Ç–Ω—ñ–π —ñ–º–ø–æ—Ä—Ç Zod');
    }

    if (!content.includes('export const')) {
      throw new Error('–í—ñ–¥—Å—É—Ç–Ω—ñ –µ–∫—Å–ø–æ—Ä—Ç–∏ —Å—Ö–µ–º');
    }

    // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ö–µ–º (–ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ –ø–∞—Ç—Ç–µ—Ä–Ω–∏)
    const zodSchemas = (content.match(/export const \w+.*zod\./g) || []).length;
    const zSchemas = (content.match(/export const \w+.*z\./g) || []).length;
    const schemaCount = Math.max(zodSchemas, zSchemas);

    console.log(`‚úÖ ${domain}: ${schemaCount} Zod —Å—Ö–µ–º`);
    return true;
  } catch (error) {
    console.error(`‚ùå ${domain}: –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó - ${error.message}`);
    return false;
  }
}

function validateMainIndex() {
  const indexPath = path.join(GENERATED_PATH, 'index.ts');

  if (!fs.existsSync(indexPath)) {
    console.error('‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π –≥–æ–ª–æ–≤–Ω–∏–π index.ts —Ñ–∞–π–ª');
    return false;
  }

  console.log('‚úÖ –ì–æ–ª–æ–≤–Ω–∏–π index.ts —Ñ–∞–π–ª —ñ—Å–Ω—É—î');
  return true;
}

function main() {
  console.log('üîç –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö —Å—Ö–µ–º...');

  let allValid = true;

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–µ–Ω –¥–æ–º–µ–Ω
  DOMAINS.forEach((domain) => {
    const isValid = validateDomainSchemas(domain);
    allValid = allValid && isValid;
  });

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–æ–ª–æ–≤–Ω–∏–π index
  const indexValid = validateMainIndex();
  allValid = allValid && indexValid;

  if (allValid) {
    console.log('üéâ –í—Å—ñ —Å—Ö–µ–º–∏ –≤–∞–ª—ñ–¥–Ω—ñ!');
  } else {
    console.error('‚ùå –ó–Ω–∞–π–¥–µ–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –≤ —Å—Ö–µ–º–∞—Ö');
  }

  process.exit(allValid ? 0 : 1);
}

if (require.main === module) {
  main();
}

module.exports = { validateDomainSchemas, validateMainIndex };
