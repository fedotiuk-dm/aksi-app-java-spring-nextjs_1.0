/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * AKSI Dry Cleaning Order System API
 * API for dry cleaning order management system with Domain-Driven Design architecture. The system includes 13 domains: Auth, User, Customer, Branch, Employee, Order, OrderItem, Service, Garment, Pricing, Payment, Notification, and Analytics.
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';

/**
 * Update an existing price modifier (admin only)
 * @summary Update price modifier
 */
export const updatePriceModifierParams = zod.object({
  "code": zod.string().describe('Price modifier code')
})

export const updatePriceModifierBody = zod.object({
  "code": zod.string().describe('Unique modifier code'),
  "name": zod.string().describe('Modifier name'),
  "description": zod.string().optional().describe('Modifier description'),
  "type": zod.enum(['PERCENTAGE', 'FIXED', 'FORMULA', 'MULTIPLIER', 'DISCOUNT']),
  "value": zod.number().describe('Modifier value: - For PERCENTAGE: basis points (e.g., 1550 = 15.5%) - For FIXED: amount in kopiykas per item '),
  "categoryRestrictions": zod.array(zod.enum(['CLOTHING', 'LAUNDRY', 'IRONING', 'LEATHER', 'PADDING', 'FUR', 'DYEING', 'ADDITIONAL_SERVICES', 'SHEEPSKIN', 'OTHER'])).optional().describe('Category codes where modifier is applicable'),
  "active": zod.boolean().describe('Is modifier active'),
  "sortOrder": zod.number().optional().describe('Sort order for display')
})

export const updatePriceModifierResponse = zod.object({
  "code": zod.string().describe('Unique modifier code'),
  "name": zod.string().describe('Modifier name'),
  "description": zod.string().optional().describe('Modifier description'),
  "type": zod.enum(['PERCENTAGE', 'FIXED', 'FORMULA', 'MULTIPLIER', 'DISCOUNT']),
  "value": zod.number().describe('Modifier value: - For PERCENTAGE: basis points (e.g., 1550 = 15.5%) - For FIXED: amount in kopiykas per item '),
  "categoryRestrictions": zod.array(zod.enum(['CLOTHING', 'LAUNDRY', 'IRONING', 'LEATHER', 'PADDING', 'FUR', 'DYEING', 'ADDITIONAL_SERVICES', 'SHEEPSKIN', 'OTHER'])).optional().describe('Category codes where modifier is applicable'),
  "active": zod.boolean().describe('Is modifier active'),
  "sortOrder": zod.number().optional().describe('Sort order for display')
})


/**
 * Delete a price modifier (admin only)
 * @summary Delete price modifier
 */
export const deletePriceModifierParams = zod.object({
  "code": zod.string().describe('Price modifier code')
})


/**
 * Update an existing discount (admin only)
 * @summary Update discount
 */
export const updateDiscountParams = zod.object({
  "code": zod.string().describe('Discount code')
})

export const updateDiscountBodyPercentageMin = 0;

export const updateDiscountBodyPercentageMax = 100;


export const updateDiscountBody = zod.object({
  "code": zod.string().describe('Unique discount code'),
  "name": zod.string().describe('Discount name'),
  "description": zod.string().optional().describe('Discount description'),
  "percentage": zod.number().min(updateDiscountBodyPercentageMin).max(updateDiscountBodyPercentageMax).describe('Discount percentage'),
  "excludedCategories": zod.array(zod.enum(['CLOTHING', 'LAUNDRY', 'IRONING', 'LEATHER', 'PADDING', 'FUR', 'DYEING', 'ADDITIONAL_SERVICES', 'SHEEPSKIN', 'OTHER'])).optional().describe('Category codes excluded from discount'),
  "active": zod.boolean().describe('Is discount active'),
  "sortOrder": zod.number().optional().describe('Sort order for display')
})

export const updateDiscountResponsePercentageMin = 0;

export const updateDiscountResponsePercentageMax = 100;


export const updateDiscountResponse = zod.object({
  "code": zod.string().describe('Unique discount code'),
  "name": zod.string().describe('Discount name'),
  "description": zod.string().optional().describe('Discount description'),
  "percentage": zod.number().min(updateDiscountResponsePercentageMin).max(updateDiscountResponsePercentageMax).describe('Discount percentage'),
  "excludedCategories": zod.array(zod.enum(['CLOTHING', 'LAUNDRY', 'IRONING', 'LEATHER', 'PADDING', 'FUR', 'DYEING', 'ADDITIONAL_SERVICES', 'SHEEPSKIN', 'OTHER'])).optional().describe('Category codes excluded from discount'),
  "active": zod.boolean().describe('Is discount active'),
  "sortOrder": zod.number().optional().describe('Sort order for display')
})


/**
 * Delete a discount (admin only)
 * @summary Delete discount
 */
export const deleteDiscountParams = zod.object({
  "code": zod.string().describe('Discount code')
})


/**
 * Calculate price for one or more items with modifiers
 * @summary Calculate price for items
 */
export const calculatePriceBodyItemsMax = 2147483647;
export const calculatePriceBodyGlobalModifiersDiscountPercentageMin = 0;

export const calculatePriceBodyGlobalModifiersDiscountPercentageMax = 100;


export const calculatePriceBody = zod.object({
  "items": zod.array(zod.object({
  "priceListItemId": zod.uuid().describe('Price list item ID'),
  "quantity": zod.number().min(1).describe('Quantity (in units)'),
  "characteristics": zod.object({
  "material": zod.string().optional().describe('Material type'),
  "color": zod.string().optional().describe('Item color'),
  "filler": zod.string().optional().describe('Filler type (for padded items)'),
  "fillerCondition": zod.enum(['NORMAL', 'COMPRESSED']).optional(),
  "wearLevel": zod.enum(['10', '30', '50', '75']).optional()
}).optional(),
  "modifierCodes": zod.array(zod.string()).optional().describe('Modifier codes to apply')
})).min(1).max(calculatePriceBodyItemsMax).describe('Items to calculate price for'),
  "globalModifiers": zod.object({
  "urgencyType": zod.enum(['NORMAL', 'EXPRESS_48H', 'EXPRESS_24H']).optional().describe('Urgency type: * `NORMAL` - Standard processing (0%) * `EXPRESS_48H` - Express 48 hours (+50%) * `EXPRESS_24H` - Express 24 hours (+100%) '),
  "discountType": zod.enum(['NONE', 'EVERCARD', 'SOCIAL_MEDIA', 'MILITARY', 'OTHER']).optional().describe('Discount type: * `NONE` - No discount (0%) * `EVERCARD` - Evercard discount (10%) * `SOCIAL_MEDIA` - Social media discount (5%) * `MILITARY` - Military discount (10%) * `OTHER` - Other discount (requires discountPercentage) '),
  "discountPercentage": zod.number().min(calculatePriceBodyGlobalModifiersDiscountPercentageMin).max(calculatePriceBodyGlobalModifiersDiscountPercentageMax).optional().describe('Discount percentage (required for OTHER type)')
}).optional()
})

export const calculatePriceResponse = zod.object({
  "items": zod.array(zod.object({
  "priceListItemId": zod.uuid(),
  "itemName": zod.string().describe('Item name from price list'),
  "categoryCode": zod.enum(['CLOTHING', 'LAUNDRY', 'IRONING', 'LEATHER', 'PADDING', 'FUR', 'DYEING', 'ADDITIONAL_SERVICES', 'SHEEPSKIN', 'OTHER']).optional(),
  "quantity": zod.number(),
  "basePrice": zod.number().describe('Base price per unit in kopiykas'),
  "calculations": zod.object({
  "baseAmount": zod.number().describe('Base amount (base price √ó quantity) in kopiykas'),
  "modifiers": zod.array(zod.object({
  "code": zod.string().describe('Modifier code'),
  "name": zod.string().describe('Modifier name'),
  "type": zod.enum(['PERCENTAGE', 'FIXED', 'FORMULA', 'MULTIPLIER', 'DISCOUNT']),
  "value": zod.number().describe('Modifier value (percentage in basis points *100 or fixed amount in kopiykas)'),
  "amount": zod.number().describe('Calculated amount in kopiykas')
})).describe('Applied modifiers with amounts'),
  "modifiersTotal": zod.number().optional().describe('Total modifiers amount in kopiykas'),
  "subtotal": zod.number().describe('Subtotal (base + modifiers) in kopiykas'),
  "urgencyModifier": zod.object({
  "code": zod.string().describe('Modifier code'),
  "name": zod.string().describe('Modifier name'),
  "type": zod.enum(['PERCENTAGE', 'FIXED', 'FORMULA', 'MULTIPLIER', 'DISCOUNT']),
  "value": zod.number().describe('Modifier value (percentage in basis points *100 or fixed amount in kopiykas)'),
  "amount": zod.number().describe('Calculated amount in kopiykas')
}),
  "discountModifier": zod.object({
  "code": zod.string().describe('Modifier code'),
  "name": zod.string().describe('Modifier name'),
  "type": zod.enum(['PERCENTAGE', 'FIXED', 'FORMULA', 'MULTIPLIER', 'DISCOUNT']),
  "value": zod.number().describe('Modifier value (percentage in basis points *100 or fixed amount in kopiykas)'),
  "amount": zod.number().describe('Calculated amount in kopiykas')
}),
  "discountEligible": zod.boolean().optional().describe('Whether item is eligible for discount'),
  "finalAmount": zod.number().describe('Final amount after all calculations in kopiykas')
}),
  "total": zod.number().describe('Total price for this item in kopiykas')
})).describe('Calculated prices for each item'),
  "totals": zod.object({
  "itemsSubtotal": zod.number().describe('Sum of all items subtotals in kopiykas'),
  "urgencyAmount": zod.number().describe('Total urgency surcharge in kopiykas'),
  "urgencyPercentage": zod.number().optional().describe('Applied urgency percentage'),
  "discountAmount": zod.number().describe('Total discount amount in kopiykas'),
  "discountPercentage": zod.number().optional().describe('Applied discount percentage'),
  "discountApplicableAmount": zod.number().describe('Amount eligible for discount in kopiykas'),
  "total": zod.number().describe('Final total amount in kopiykas'),
  "expectedCompletionDate": zod.iso.datetime({}).optional().describe('Expected completion date based on items and urgency'),
  "expectedCompletionNote": zod.string().optional().describe('Optional note (e.g., \"–ø—ñ—Å–ª—è 14:00\")')
}),
  "warnings": zod.array(zod.string()).optional().describe('Calculation warnings (e.g., discount not applicable)')
})


/**
 * Create a new price modifier (admin only)
 * @summary Create a new price modifier
 */
export const createPriceModifierBody = zod.object({
  "code": zod.string().describe('Unique modifier code'),
  "name": zod.string().describe('Modifier name'),
  "description": zod.string().optional().describe('Modifier description'),
  "type": zod.enum(['PERCENTAGE', 'FIXED', 'FORMULA', 'MULTIPLIER', 'DISCOUNT']),
  "value": zod.number().describe('Modifier value: - For PERCENTAGE: basis points (e.g., 1550 = 15.5%) - For FIXED: amount in kopiykas per item '),
  "categoryRestrictions": zod.array(zod.enum(['CLOTHING', 'LAUNDRY', 'IRONING', 'LEATHER', 'PADDING', 'FUR', 'DYEING', 'ADDITIONAL_SERVICES', 'SHEEPSKIN', 'OTHER'])).optional().describe('Category codes where modifier is applicable'),
  "active": zod.boolean().describe('Is modifier active'),
  "sortOrder": zod.number().optional().describe('Sort order for display')
})


/**
 * Create a new discount (admin only)
 * @summary Create a new discount
 */
export const createDiscountBodyPercentageMin = 0;

export const createDiscountBodyPercentageMax = 100;


export const createDiscountBody = zod.object({
  "code": zod.string().describe('Unique discount code'),
  "name": zod.string().describe('Discount name'),
  "description": zod.string().optional().describe('Discount description'),
  "percentage": zod.number().min(createDiscountBodyPercentageMin).max(createDiscountBodyPercentageMax).describe('Discount percentage'),
  "excludedCategories": zod.array(zod.enum(['CLOTHING', 'LAUNDRY', 'IRONING', 'LEATHER', 'PADDING', 'FUR', 'DYEING', 'ADDITIONAL_SERVICES', 'SHEEPSKIN', 'OTHER'])).optional().describe('Category codes excluded from discount'),
  "active": zod.boolean().describe('Is discount active'),
  "sortOrder": zod.number().optional().describe('Sort order for display')
})


/**
 * Get list of all available price modifiers
 * @summary List available price modifiers
 */
export const listPriceModifiersQuerySortOrderDefault = "ASC";export const listPriceModifiersQueryActiveDefault = true;

export const listPriceModifiersQueryParams = zod.object({
  "categoryCode": zod.enum(['CLOTHING', 'LAUNDRY', 'IRONING', 'LEATHER', 'PADDING', 'FUR', 'DYEING', 'ADDITIONAL_SERVICES', 'SHEEPSKIN', 'OTHER']).optional().describe('Filter by category code'),
  "sortBy": zod.string().optional().describe('Field to sort by (domain-specific). If not provided, server default is used'),
  "sortOrder": zod.enum(['ASC', 'DESC']).default(listPriceModifiersQuerySortOrderDefault).describe('Sort direction'),
  "active": zod.boolean().default(listPriceModifiersQueryActiveDefault).describe('Filter by active status')
})

export const listPriceModifiersResponse = zod.object({
  "modifiers": zod.array(zod.object({
  "code": zod.string().describe('Unique modifier code'),
  "name": zod.string().describe('Modifier name'),
  "description": zod.string().optional().describe('Modifier description'),
  "type": zod.enum(['PERCENTAGE', 'FIXED', 'FORMULA', 'MULTIPLIER', 'DISCOUNT']),
  "value": zod.number().describe('Modifier value: - For PERCENTAGE: basis points (e.g., 1550 = 15.5%) - For FIXED: amount in kopiykas per item '),
  "categoryRestrictions": zod.array(zod.enum(['CLOTHING', 'LAUNDRY', 'IRONING', 'LEATHER', 'PADDING', 'FUR', 'DYEING', 'ADDITIONAL_SERVICES', 'SHEEPSKIN', 'OTHER'])).optional().describe('Category codes where modifier is applicable'),
  "active": zod.boolean().describe('Is modifier active'),
  "sortOrder": zod.number().optional().describe('Sort order for display')
})).describe('List of price modifiers'),
  "generalModifiers": zod.array(zod.object({
  "code": zod.string().describe('Unique modifier code'),
  "name": zod.string().describe('Modifier name'),
  "description": zod.string().optional().describe('Modifier description'),
  "type": zod.enum(['PERCENTAGE', 'FIXED', 'FORMULA', 'MULTIPLIER', 'DISCOUNT']),
  "value": zod.number().describe('Modifier value: - For PERCENTAGE: basis points (e.g., 1550 = 15.5%) - For FIXED: amount in kopiykas per item '),
  "categoryRestrictions": zod.array(zod.enum(['CLOTHING', 'LAUNDRY', 'IRONING', 'LEATHER', 'PADDING', 'FUR', 'DYEING', 'ADDITIONAL_SERVICES', 'SHEEPSKIN', 'OTHER'])).optional().describe('Category codes where modifier is applicable'),
  "active": zod.boolean().describe('Is modifier active'),
  "sortOrder": zod.number().optional().describe('Sort order for display')
})).optional().describe('General modifiers (applicable to all categories)'),
  "textileModifiers": zod.array(zod.object({
  "code": zod.string().describe('Unique modifier code'),
  "name": zod.string().describe('Modifier name'),
  "description": zod.string().optional().describe('Modifier description'),
  "type": zod.enum(['PERCENTAGE', 'FIXED', 'FORMULA', 'MULTIPLIER', 'DISCOUNT']),
  "value": zod.number().describe('Modifier value: - For PERCENTAGE: basis points (e.g., 1550 = 15.5%) - For FIXED: amount in kopiykas per item '),
  "categoryRestrictions": zod.array(zod.enum(['CLOTHING', 'LAUNDRY', 'IRONING', 'LEATHER', 'PADDING', 'FUR', 'DYEING', 'ADDITIONAL_SERVICES', 'SHEEPSKIN', 'OTHER'])).optional().describe('Category codes where modifier is applicable'),
  "active": zod.boolean().describe('Is modifier active'),
  "sortOrder": zod.number().optional().describe('Sort order for display')
})).optional().describe('Textile-specific modifiers'),
  "leatherModifiers": zod.array(zod.object({
  "code": zod.string().describe('Unique modifier code'),
  "name": zod.string().describe('Modifier name'),
  "description": zod.string().optional().describe('Modifier description'),
  "type": zod.enum(['PERCENTAGE', 'FIXED', 'FORMULA', 'MULTIPLIER', 'DISCOUNT']),
  "value": zod.number().describe('Modifier value: - For PERCENTAGE: basis points (e.g., 1550 = 15.5%) - For FIXED: amount in kopiykas per item '),
  "categoryRestrictions": zod.array(zod.enum(['CLOTHING', 'LAUNDRY', 'IRONING', 'LEATHER', 'PADDING', 'FUR', 'DYEING', 'ADDITIONAL_SERVICES', 'SHEEPSKIN', 'OTHER'])).optional().describe('Category codes where modifier is applicable'),
  "active": zod.boolean().describe('Is modifier active'),
  "sortOrder": zod.number().optional().describe('Sort order for display')
})).optional().describe('Leather-specific modifiers')
})


/**
 * Get list of all available discount types
 * @summary List available discounts
 */
export const listDiscountsQueryActiveDefault = true;export const listDiscountsQuerySortOrderDefault = "ASC";

export const listDiscountsQueryParams = zod.object({
  "active": zod.boolean().default(listDiscountsQueryActiveDefault).describe('Filter by active status'),
  "sortBy": zod.string().optional().describe('Field to sort by (domain-specific). If not provided, server default is used'),
  "sortOrder": zod.enum(['ASC', 'DESC']).default(listDiscountsQuerySortOrderDefault).describe('Sort direction')
})

export const listDiscountsResponseDiscountsItemPercentageMin = 0;

export const listDiscountsResponseDiscountsItemPercentageMax = 100;


export const listDiscountsResponse = zod.object({
  "discounts": zod.array(zod.object({
  "code": zod.string().describe('Unique discount code'),
  "name": zod.string().describe('Discount name'),
  "description": zod.string().optional().describe('Discount description'),
  "percentage": zod.number().min(listDiscountsResponseDiscountsItemPercentageMin).max(listDiscountsResponseDiscountsItemPercentageMax).describe('Discount percentage'),
  "excludedCategories": zod.array(zod.enum(['CLOTHING', 'LAUNDRY', 'IRONING', 'LEATHER', 'PADDING', 'FUR', 'DYEING', 'ADDITIONAL_SERVICES', 'SHEEPSKIN', 'OTHER'])).optional().describe('Category codes excluded from discount'),
  "active": zod.boolean().describe('Is discount active'),
  "sortOrder": zod.number().optional().describe('Sort order for display')
})).describe('List of available discounts')
})
