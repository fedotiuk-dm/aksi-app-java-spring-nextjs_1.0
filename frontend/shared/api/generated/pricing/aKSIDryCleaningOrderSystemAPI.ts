/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * AKSI Dry Cleaning Order System API
 * API for dry cleaning order management system with Domain-Driven Design architecture. The system includes 13 domains: Auth, User, Customer, Branch, Employee, Order, OrderItem, Service, Garment, Pricing, Payment, Notification, and Analytics.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  Discount,
  DiscountsResponse,
  ErrorResponse,
  ListDiscountsParams,
  ListPriceModifiersParams,
  PriceCalculationRequest,
  PriceCalculationResponse,
  PriceModifier,
  PriceModifiersResponse
} from './aKSIDryCleaningOrderSystemAPI.schemas';

import orvalFetcher from '../../../../lib/api/orval-fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Update an existing price modifier (admin only)
 * @summary Update price modifier
 */
export const updatePriceModifier = (
    code: string,
    priceModifier: PriceModifier,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<PriceModifier>(
      {url: `/api/pricing/admin/modifiers/${code}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: priceModifier
    },
      options);
    }
  


export const getUpdatePriceModifierMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePriceModifier>>, TError,{code: string;data: PriceModifier}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof updatePriceModifier>>, TError,{code: string;data: PriceModifier}, TContext> => {

const mutationKey = ['updatePriceModifier'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePriceModifier>>, {code: string;data: PriceModifier}> = (props) => {
          const {code,data} = props ?? {};

          return  updatePriceModifier(code,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePriceModifierMutationResult = NonNullable<Awaited<ReturnType<typeof updatePriceModifier>>>
    export type UpdatePriceModifierMutationBody = PriceModifier
    export type UpdatePriceModifierMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Update price modifier
 */
export const useUpdatePriceModifier = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePriceModifier>>, TError,{code: string;data: PriceModifier}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updatePriceModifier>>,
        TError,
        {code: string;data: PriceModifier},
        TContext
      > => {

      const mutationOptions = getUpdatePriceModifierMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Delete a price modifier (admin only)
 * @summary Delete price modifier
 */
export const deletePriceModifier = (
    code: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<null>(
      {url: `/api/pricing/admin/modifiers/${code}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeletePriceModifierMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePriceModifier>>, TError,{code: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof deletePriceModifier>>, TError,{code: string}, TContext> => {

const mutationKey = ['deletePriceModifier'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePriceModifier>>, {code: string}> = (props) => {
          const {code} = props ?? {};

          return  deletePriceModifier(code,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePriceModifierMutationResult = NonNullable<Awaited<ReturnType<typeof deletePriceModifier>>>
    
    export type DeletePriceModifierMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Delete price modifier
 */
export const useDeletePriceModifier = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePriceModifier>>, TError,{code: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deletePriceModifier>>,
        TError,
        {code: string},
        TContext
      > => {

      const mutationOptions = getDeletePriceModifierMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Update an existing discount (admin only)
 * @summary Update discount
 */
export const updateDiscount = (
    code: string,
    discount: Discount,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<Discount>(
      {url: `/api/pricing/admin/discounts/${code}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: discount
    },
      options);
    }
  


export const getUpdateDiscountMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateDiscount>>, TError,{code: string;data: Discount}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof updateDiscount>>, TError,{code: string;data: Discount}, TContext> => {

const mutationKey = ['updateDiscount'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateDiscount>>, {code: string;data: Discount}> = (props) => {
          const {code,data} = props ?? {};

          return  updateDiscount(code,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateDiscountMutationResult = NonNullable<Awaited<ReturnType<typeof updateDiscount>>>
    export type UpdateDiscountMutationBody = Discount
    export type UpdateDiscountMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Update discount
 */
export const useUpdateDiscount = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateDiscount>>, TError,{code: string;data: Discount}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateDiscount>>,
        TError,
        {code: string;data: Discount},
        TContext
      > => {

      const mutationOptions = getUpdateDiscountMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Delete a discount (admin only)
 * @summary Delete discount
 */
export const deleteDiscount = (
    code: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<null>(
      {url: `/api/pricing/admin/discounts/${code}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDiscountMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDiscount>>, TError,{code: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDiscount>>, TError,{code: string}, TContext> => {

const mutationKey = ['deleteDiscount'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDiscount>>, {code: string}> = (props) => {
          const {code} = props ?? {};

          return  deleteDiscount(code,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDiscountMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDiscount>>>
    
    export type DeleteDiscountMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Delete discount
 */
export const useDeleteDiscount = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDiscount>>, TError,{code: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteDiscount>>,
        TError,
        {code: string},
        TContext
      > => {

      const mutationOptions = getDeleteDiscountMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Calculate price for one or more items with modifiers
 * @summary Calculate price for items
 */
export const calculatePrice = (
    priceCalculationRequest: PriceCalculationRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<PriceCalculationResponse>(
      {url: `/api/pricing/calculate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: priceCalculationRequest, signal
    },
      options);
    }
  


export const getCalculatePriceMutationOptions = <TError = ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof calculatePrice>>, TError,{data: PriceCalculationRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof calculatePrice>>, TError,{data: PriceCalculationRequest}, TContext> => {

const mutationKey = ['calculatePrice'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof calculatePrice>>, {data: PriceCalculationRequest}> = (props) => {
          const {data} = props ?? {};

          return  calculatePrice(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CalculatePriceMutationResult = NonNullable<Awaited<ReturnType<typeof calculatePrice>>>
    export type CalculatePriceMutationBody = PriceCalculationRequest
    export type CalculatePriceMutationError = ErrorResponse | ErrorResponse

    /**
 * @summary Calculate price for items
 */
export const useCalculatePrice = <TError = ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof calculatePrice>>, TError,{data: PriceCalculationRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof calculatePrice>>,
        TError,
        {data: PriceCalculationRequest},
        TContext
      > => {

      const mutationOptions = getCalculatePriceMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Create a new price modifier (admin only)
 * @summary Create a new price modifier
 */
export const createPriceModifier = (
    priceModifier: PriceModifier,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<PriceModifier>(
      {url: `/api/pricing/admin/modifiers`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: priceModifier, signal
    },
      options);
    }
  


export const getCreatePriceModifierMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPriceModifier>>, TError,{data: PriceModifier}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof createPriceModifier>>, TError,{data: PriceModifier}, TContext> => {

const mutationKey = ['createPriceModifier'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createPriceModifier>>, {data: PriceModifier}> = (props) => {
          const {data} = props ?? {};

          return  createPriceModifier(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreatePriceModifierMutationResult = NonNullable<Awaited<ReturnType<typeof createPriceModifier>>>
    export type CreatePriceModifierMutationBody = PriceModifier
    export type CreatePriceModifierMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Create a new price modifier
 */
export const useCreatePriceModifier = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPriceModifier>>, TError,{data: PriceModifier}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createPriceModifier>>,
        TError,
        {data: PriceModifier},
        TContext
      > => {

      const mutationOptions = getCreatePriceModifierMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Create a new discount (admin only)
 * @summary Create a new discount
 */
export const createDiscount = (
    discount: Discount,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Discount>(
      {url: `/api/pricing/admin/discounts`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: discount, signal
    },
      options);
    }
  


export const getCreateDiscountMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createDiscount>>, TError,{data: Discount}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof createDiscount>>, TError,{data: Discount}, TContext> => {

const mutationKey = ['createDiscount'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createDiscount>>, {data: Discount}> = (props) => {
          const {data} = props ?? {};

          return  createDiscount(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateDiscountMutationResult = NonNullable<Awaited<ReturnType<typeof createDiscount>>>
    export type CreateDiscountMutationBody = Discount
    export type CreateDiscountMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Create a new discount
 */
export const useCreateDiscount = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createDiscount>>, TError,{data: Discount}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createDiscount>>,
        TError,
        {data: Discount},
        TContext
      > => {

      const mutationOptions = getCreateDiscountMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Get list of all available price modifiers
 * @summary List available price modifiers
 */
export const listPriceModifiers = (
    params?: ListPriceModifiersParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<PriceModifiersResponse>(
      {url: `/api/pricing/modifiers`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getListPriceModifiersQueryKey = (params?: ListPriceModifiersParams,) => {
    return [`/api/pricing/modifiers`, ...(params ? [params]: [])] as const;
    }

    
export const getListPriceModifiersQueryOptions = <TData = Awaited<ReturnType<typeof listPriceModifiers>>, TError = ErrorResponse>(params?: ListPriceModifiersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listPriceModifiers>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListPriceModifiersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listPriceModifiers>>> = ({ signal }) => listPriceModifiers(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listPriceModifiers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListPriceModifiersQueryResult = NonNullable<Awaited<ReturnType<typeof listPriceModifiers>>>
export type ListPriceModifiersQueryError = ErrorResponse


export function useListPriceModifiers<TData = Awaited<ReturnType<typeof listPriceModifiers>>, TError = ErrorResponse>(
 params: undefined |  ListPriceModifiersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listPriceModifiers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listPriceModifiers>>,
          TError,
          Awaited<ReturnType<typeof listPriceModifiers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListPriceModifiers<TData = Awaited<ReturnType<typeof listPriceModifiers>>, TError = ErrorResponse>(
 params?: ListPriceModifiersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listPriceModifiers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listPriceModifiers>>,
          TError,
          Awaited<ReturnType<typeof listPriceModifiers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListPriceModifiers<TData = Awaited<ReturnType<typeof listPriceModifiers>>, TError = ErrorResponse>(
 params?: ListPriceModifiersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listPriceModifiers>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List available price modifiers
 */

export function useListPriceModifiers<TData = Awaited<ReturnType<typeof listPriceModifiers>>, TError = ErrorResponse>(
 params?: ListPriceModifiersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listPriceModifiers>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListPriceModifiersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get list of all available discount types
 * @summary List available discounts
 */
export const listDiscounts = (
    params?: ListDiscountsParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<DiscountsResponse>(
      {url: `/api/pricing/discounts`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getListDiscountsQueryKey = (params?: ListDiscountsParams,) => {
    return [`/api/pricing/discounts`, ...(params ? [params]: [])] as const;
    }

    
export const getListDiscountsQueryOptions = <TData = Awaited<ReturnType<typeof listDiscounts>>, TError = ErrorResponse>(params?: ListDiscountsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listDiscounts>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListDiscountsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listDiscounts>>> = ({ signal }) => listDiscounts(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listDiscounts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListDiscountsQueryResult = NonNullable<Awaited<ReturnType<typeof listDiscounts>>>
export type ListDiscountsQueryError = ErrorResponse


export function useListDiscounts<TData = Awaited<ReturnType<typeof listDiscounts>>, TError = ErrorResponse>(
 params: undefined |  ListDiscountsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listDiscounts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listDiscounts>>,
          TError,
          Awaited<ReturnType<typeof listDiscounts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListDiscounts<TData = Awaited<ReturnType<typeof listDiscounts>>, TError = ErrorResponse>(
 params?: ListDiscountsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listDiscounts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listDiscounts>>,
          TError,
          Awaited<ReturnType<typeof listDiscounts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListDiscounts<TData = Awaited<ReturnType<typeof listDiscounts>>, TError = ErrorResponse>(
 params?: ListDiscountsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listDiscounts>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List available discounts
 */

export function useListDiscounts<TData = Awaited<ReturnType<typeof listDiscounts>>, TError = ErrorResponse>(
 params?: ListDiscountsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listDiscounts>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListDiscountsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




