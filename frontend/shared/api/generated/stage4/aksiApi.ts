/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AKSI API
 * API –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–ª—ñ–Ω—ñ–Ω–≥–æ–≤–æ—é –∫–æ–º–ø–∞–Ω—ñ—î—é AKSI
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CustomerSignatureRequest,
  ErrorResponse,
  LegalAcceptanceDTO,
  OrderCompletionDTO,
  OrderConfirmationDTO,
  OrderFinalizationRequest,
  ReceiptConfigurationDTO,
  ReceiptGenerationRequest,
  Stage4CloseSession200,
  Stage4FinalizeOrder200,
  Stage4GeneratePdfReceipt200,
  Stage4GenerateReceipt200,
  Stage4GetCurrentState200,
  Stage4GetOrderSummary200,
  Stage4GetSessionContext200,
  Stage4InitializeStage200,
  Stage4SaveSignature200,
  Stage4UpdateLegalAcceptance200,
  Stage4UpdateOrderCompletion200,
  Stage4UpdateOrderConfirmation200,
  Stage4UpdateReceiptConfiguration200,
  Stage4ValidateComplete200,
  Stage4ValidateLegalAcceptance200,
  Stage4ValidateOrderCompletion200,
  Stage4ValidateOrderConfirmation200,
  Stage4ValidateReceiptConfiguration200
} from './aksiApi.schemas';

import orvalFetcher from '../../../../lib/api/orval-fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 */
export const stage4ValidateReceiptConfiguration = (
    receiptConfigurationDTO: ReceiptConfigurationDTO,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Stage4ValidateReceiptConfiguration200>(
      {url: `/v1/order-wizard/stage4/validate/receipt-configuration`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: receiptConfigurationDTO, signal
    },
      options);
    }
  


export const getStage4ValidateReceiptConfigurationMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stage4ValidateReceiptConfiguration>>, TError,{data: ReceiptConfigurationDTO}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof stage4ValidateReceiptConfiguration>>, TError,{data: ReceiptConfigurationDTO}, TContext> => {

const mutationKey = ['stage4ValidateReceiptConfiguration'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof stage4ValidateReceiptConfiguration>>, {data: ReceiptConfigurationDTO}> = (props) => {
          const {data} = props ?? {};

          return  stage4ValidateReceiptConfiguration(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type Stage4ValidateReceiptConfigurationMutationResult = NonNullable<Awaited<ReturnType<typeof stage4ValidateReceiptConfiguration>>>
    export type Stage4ValidateReceiptConfigurationMutationBody = ReceiptConfigurationDTO
    export type Stage4ValidateReceiptConfigurationMutationError = ErrorResponse

    /**
 * @summary –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 */
export const useStage4ValidateReceiptConfiguration = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stage4ValidateReceiptConfiguration>>, TError,{data: ReceiptConfigurationDTO}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof stage4ValidateReceiptConfiguration>>,
        TError,
        {data: ReceiptConfigurationDTO},
        TContext
      > => {

      const mutationOptions = getStage4ValidateReceiptConfigurationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const stage4ValidateOrderConfirmation = (
    orderConfirmationDTO: OrderConfirmationDTO,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Stage4ValidateOrderConfirmation200>(
      {url: `/v1/order-wizard/stage4/validate/order-confirmation`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderConfirmationDTO, signal
    },
      options);
    }
  


export const getStage4ValidateOrderConfirmationMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stage4ValidateOrderConfirmation>>, TError,{data: OrderConfirmationDTO}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof stage4ValidateOrderConfirmation>>, TError,{data: OrderConfirmationDTO}, TContext> => {

const mutationKey = ['stage4ValidateOrderConfirmation'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof stage4ValidateOrderConfirmation>>, {data: OrderConfirmationDTO}> = (props) => {
          const {data} = props ?? {};

          return  stage4ValidateOrderConfirmation(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type Stage4ValidateOrderConfirmationMutationResult = NonNullable<Awaited<ReturnType<typeof stage4ValidateOrderConfirmation>>>
    export type Stage4ValidateOrderConfirmationMutationBody = OrderConfirmationDTO
    export type Stage4ValidateOrderConfirmationMutationError = ErrorResponse

    /**
 * @summary –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const useStage4ValidateOrderConfirmation = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stage4ValidateOrderConfirmation>>, TError,{data: OrderConfirmationDTO}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof stage4ValidateOrderConfirmation>>,
        TError,
        {data: OrderConfirmationDTO},
        TContext
      > => {

      const mutationOptions = getStage4ValidateOrderConfirmationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const stage4ValidateOrderCompletion = (
    orderCompletionDTO: OrderCompletionDTO,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Stage4ValidateOrderCompletion200>(
      {url: `/v1/order-wizard/stage4/validate/order-completion`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCompletionDTO, signal
    },
      options);
    }
  


export const getStage4ValidateOrderCompletionMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stage4ValidateOrderCompletion>>, TError,{data: OrderCompletionDTO}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof stage4ValidateOrderCompletion>>, TError,{data: OrderCompletionDTO}, TContext> => {

const mutationKey = ['stage4ValidateOrderCompletion'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof stage4ValidateOrderCompletion>>, {data: OrderCompletionDTO}> = (props) => {
          const {data} = props ?? {};

          return  stage4ValidateOrderCompletion(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type Stage4ValidateOrderCompletionMutationResult = NonNullable<Awaited<ReturnType<typeof stage4ValidateOrderCompletion>>>
    export type Stage4ValidateOrderCompletionMutationBody = OrderCompletionDTO
    export type Stage4ValidateOrderCompletionMutationError = ErrorResponse

    /**
 * @summary –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const useStage4ValidateOrderCompletion = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stage4ValidateOrderCompletion>>, TError,{data: OrderCompletionDTO}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof stage4ValidateOrderCompletion>>,
        TError,
        {data: OrderCompletionDTO},
        TContext
      > => {

      const mutationOptions = getStage4ValidateOrderCompletionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary –í–∞–ª—ñ–¥–∞—Ü—ñ—è —é—Ä–∏–¥–∏—á–Ω–æ–≥–æ –ø—Ä–∏–π–Ω—è—Ç—Ç—è
 */
export const stage4ValidateLegalAcceptance = (
    legalAcceptanceDTO: LegalAcceptanceDTO,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Stage4ValidateLegalAcceptance200>(
      {url: `/v1/order-wizard/stage4/validate/legal-acceptance`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: legalAcceptanceDTO, signal
    },
      options);
    }
  


export const getStage4ValidateLegalAcceptanceMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stage4ValidateLegalAcceptance>>, TError,{data: LegalAcceptanceDTO}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof stage4ValidateLegalAcceptance>>, TError,{data: LegalAcceptanceDTO}, TContext> => {

const mutationKey = ['stage4ValidateLegalAcceptance'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof stage4ValidateLegalAcceptance>>, {data: LegalAcceptanceDTO}> = (props) => {
          const {data} = props ?? {};

          return  stage4ValidateLegalAcceptance(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type Stage4ValidateLegalAcceptanceMutationResult = NonNullable<Awaited<ReturnType<typeof stage4ValidateLegalAcceptance>>>
    export type Stage4ValidateLegalAcceptanceMutationBody = LegalAcceptanceDTO
    export type Stage4ValidateLegalAcceptanceMutationError = ErrorResponse

    /**
 * @summary –í–∞–ª—ñ–¥–∞—Ü—ñ—è —é—Ä–∏–¥–∏—á–Ω–æ–≥–æ –ø—Ä–∏–π–Ω—è—Ç—Ç—è
 */
export const useStage4ValidateLegalAcceptance = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stage4ValidateLegalAcceptance>>, TError,{data: LegalAcceptanceDTO}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof stage4ValidateLegalAcceptance>>,
        TError,
        {data: LegalAcceptanceDTO},
        TContext
      > => {

      const mutationOptions = getStage4ValidateLegalAcceptanceMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å—É –∫–ª—ñ—î–Ω—Ç–∞
 */
export const stage4SaveSignature = (
    customerSignatureRequest: CustomerSignatureRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Stage4SaveSignature200>(
      {url: `/v1/order-wizard/stage4/signature/save`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: customerSignatureRequest, signal
    },
      options);
    }
  


export const getStage4SaveSignatureMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stage4SaveSignature>>, TError,{data: CustomerSignatureRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof stage4SaveSignature>>, TError,{data: CustomerSignatureRequest}, TContext> => {

const mutationKey = ['stage4SaveSignature'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof stage4SaveSignature>>, {data: CustomerSignatureRequest}> = (props) => {
          const {data} = props ?? {};

          return  stage4SaveSignature(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type Stage4SaveSignatureMutationResult = NonNullable<Awaited<ReturnType<typeof stage4SaveSignature>>>
    export type Stage4SaveSignatureMutationBody = CustomerSignatureRequest
    export type Stage4SaveSignatureMutationError = ErrorResponse

    /**
 * @summary –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å—É –∫–ª—ñ—î–Ω—Ç–∞
 */
export const useStage4SaveSignature = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stage4SaveSignature>>, TError,{data: CustomerSignatureRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof stage4SaveSignature>>,
        TError,
        {data: CustomerSignatureRequest},
        TContext
      > => {

      const mutationOptions = getStage4SaveSignatureMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 */
export const stage4UpdateReceiptConfiguration = (
    sessionId: string,
    receiptConfigurationDTO: ReceiptConfigurationDTO,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Stage4UpdateReceiptConfiguration200>(
      {url: `/v1/order-wizard/stage4/session/${sessionId}/receipt-configuration`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: receiptConfigurationDTO, signal
    },
      options);
    }
  


export const getStage4UpdateReceiptConfigurationMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stage4UpdateReceiptConfiguration>>, TError,{sessionId: string;data: ReceiptConfigurationDTO}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof stage4UpdateReceiptConfiguration>>, TError,{sessionId: string;data: ReceiptConfigurationDTO}, TContext> => {

const mutationKey = ['stage4UpdateReceiptConfiguration'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof stage4UpdateReceiptConfiguration>>, {sessionId: string;data: ReceiptConfigurationDTO}> = (props) => {
          const {sessionId,data} = props ?? {};

          return  stage4UpdateReceiptConfiguration(sessionId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type Stage4UpdateReceiptConfigurationMutationResult = NonNullable<Awaited<ReturnType<typeof stage4UpdateReceiptConfiguration>>>
    export type Stage4UpdateReceiptConfigurationMutationBody = ReceiptConfigurationDTO
    export type Stage4UpdateReceiptConfigurationMutationError = ErrorResponse

    /**
 * @summary –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 */
export const useStage4UpdateReceiptConfiguration = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stage4UpdateReceiptConfiguration>>, TError,{sessionId: string;data: ReceiptConfigurationDTO}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof stage4UpdateReceiptConfiguration>>,
        TError,
        {sessionId: string;data: ReceiptConfigurationDTO},
        TContext
      > => {

      const mutationOptions = getStage4UpdateReceiptConfigurationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const stage4UpdateOrderConfirmation = (
    sessionId: string,
    orderConfirmationDTO: OrderConfirmationDTO,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Stage4UpdateOrderConfirmation200>(
      {url: `/v1/order-wizard/stage4/session/${sessionId}/order-confirmation`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderConfirmationDTO, signal
    },
      options);
    }
  


export const getStage4UpdateOrderConfirmationMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stage4UpdateOrderConfirmation>>, TError,{sessionId: string;data: OrderConfirmationDTO}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof stage4UpdateOrderConfirmation>>, TError,{sessionId: string;data: OrderConfirmationDTO}, TContext> => {

const mutationKey = ['stage4UpdateOrderConfirmation'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof stage4UpdateOrderConfirmation>>, {sessionId: string;data: OrderConfirmationDTO}> = (props) => {
          const {sessionId,data} = props ?? {};

          return  stage4UpdateOrderConfirmation(sessionId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type Stage4UpdateOrderConfirmationMutationResult = NonNullable<Awaited<ReturnType<typeof stage4UpdateOrderConfirmation>>>
    export type Stage4UpdateOrderConfirmationMutationBody = OrderConfirmationDTO
    export type Stage4UpdateOrderConfirmationMutationError = ErrorResponse

    /**
 * @summary –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const useStage4UpdateOrderConfirmation = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stage4UpdateOrderConfirmation>>, TError,{sessionId: string;data: OrderConfirmationDTO}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof stage4UpdateOrderConfirmation>>,
        TError,
        {sessionId: string;data: OrderConfirmationDTO},
        TContext
      > => {

      const mutationOptions = getStage4UpdateOrderConfirmationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const stage4UpdateOrderCompletion = (
    sessionId: string,
    orderCompletionDTO: OrderCompletionDTO,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Stage4UpdateOrderCompletion200>(
      {url: `/v1/order-wizard/stage4/session/${sessionId}/order-completion`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCompletionDTO, signal
    },
      options);
    }
  


export const getStage4UpdateOrderCompletionMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stage4UpdateOrderCompletion>>, TError,{sessionId: string;data: OrderCompletionDTO}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof stage4UpdateOrderCompletion>>, TError,{sessionId: string;data: OrderCompletionDTO}, TContext> => {

const mutationKey = ['stage4UpdateOrderCompletion'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof stage4UpdateOrderCompletion>>, {sessionId: string;data: OrderCompletionDTO}> = (props) => {
          const {sessionId,data} = props ?? {};

          return  stage4UpdateOrderCompletion(sessionId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type Stage4UpdateOrderCompletionMutationResult = NonNullable<Awaited<ReturnType<typeof stage4UpdateOrderCompletion>>>
    export type Stage4UpdateOrderCompletionMutationBody = OrderCompletionDTO
    export type Stage4UpdateOrderCompletionMutationError = ErrorResponse

    /**
 * @summary –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const useStage4UpdateOrderCompletion = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stage4UpdateOrderCompletion>>, TError,{sessionId: string;data: OrderCompletionDTO}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof stage4UpdateOrderCompletion>>,
        TError,
        {sessionId: string;data: OrderCompletionDTO},
        TContext
      > => {

      const mutationOptions = getStage4UpdateOrderCompletionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary –û–Ω–æ–≤–ª–µ–Ω–Ω—è —é—Ä–∏–¥–∏—á–Ω–æ–≥–æ –ø—Ä–∏–π–Ω—è—Ç—Ç—è
 */
export const stage4UpdateLegalAcceptance = (
    sessionId: string,
    legalAcceptanceDTO: LegalAcceptanceDTO,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Stage4UpdateLegalAcceptance200>(
      {url: `/v1/order-wizard/stage4/session/${sessionId}/legal-acceptance`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: legalAcceptanceDTO, signal
    },
      options);
    }
  


export const getStage4UpdateLegalAcceptanceMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stage4UpdateLegalAcceptance>>, TError,{sessionId: string;data: LegalAcceptanceDTO}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof stage4UpdateLegalAcceptance>>, TError,{sessionId: string;data: LegalAcceptanceDTO}, TContext> => {

const mutationKey = ['stage4UpdateLegalAcceptance'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof stage4UpdateLegalAcceptance>>, {sessionId: string;data: LegalAcceptanceDTO}> = (props) => {
          const {sessionId,data} = props ?? {};

          return  stage4UpdateLegalAcceptance(sessionId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type Stage4UpdateLegalAcceptanceMutationResult = NonNullable<Awaited<ReturnType<typeof stage4UpdateLegalAcceptance>>>
    export type Stage4UpdateLegalAcceptanceMutationBody = LegalAcceptanceDTO
    export type Stage4UpdateLegalAcceptanceMutationError = ErrorResponse

    /**
 * @summary –û–Ω–æ–≤–ª–µ–Ω–Ω—è —é—Ä–∏–¥–∏—á–Ω–æ–≥–æ –ø—Ä–∏–π–Ω—è—Ç—Ç—è
 */
export const useStage4UpdateLegalAcceptance = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stage4UpdateLegalAcceptance>>, TError,{sessionId: string;data: LegalAcceptanceDTO}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof stage4UpdateLegalAcceptance>>,
        TError,
        {sessionId: string;data: LegalAcceptanceDTO},
        TContext
      > => {

      const mutationOptions = getStage4UpdateLegalAcceptanceMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary –ó–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ—ó
 */
export const stage4CloseSession = (
    sessionId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Stage4CloseSession200>(
      {url: `/v1/order-wizard/stage4/session/${sessionId}/close`, method: 'POST', signal
    },
      options);
    }
  


export const getStage4CloseSessionMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stage4CloseSession>>, TError,{sessionId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof stage4CloseSession>>, TError,{sessionId: string}, TContext> => {

const mutationKey = ['stage4CloseSession'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof stage4CloseSession>>, {sessionId: string}> = (props) => {
          const {sessionId} = props ?? {};

          return  stage4CloseSession(sessionId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type Stage4CloseSessionMutationResult = NonNullable<Awaited<ReturnType<typeof stage4CloseSession>>>
    
    export type Stage4CloseSessionMutationError = ErrorResponse

    /**
 * @summary –ó–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ—ó
 */
export const useStage4CloseSession = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stage4CloseSession>>, TError,{sessionId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof stage4CloseSession>>,
        TError,
        {sessionId: string},
        TContext
      > => {

      const mutationOptions = getStage4CloseSessionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 */
export const stage4GenerateReceipt = (
    receiptGenerationRequest: ReceiptGenerationRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Stage4GenerateReceipt200>(
      {url: `/v1/order-wizard/stage4/receipt/generate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: receiptGenerationRequest, signal
    },
      options);
    }
  


export const getStage4GenerateReceiptMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stage4GenerateReceipt>>, TError,{data: ReceiptGenerationRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof stage4GenerateReceipt>>, TError,{data: ReceiptGenerationRequest}, TContext> => {

const mutationKey = ['stage4GenerateReceipt'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof stage4GenerateReceipt>>, {data: ReceiptGenerationRequest}> = (props) => {
          const {data} = props ?? {};

          return  stage4GenerateReceipt(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type Stage4GenerateReceiptMutationResult = NonNullable<Awaited<ReturnType<typeof stage4GenerateReceipt>>>
    export type Stage4GenerateReceiptMutationBody = ReceiptGenerationRequest
    export type Stage4GenerateReceiptMutationError = ErrorResponse

    /**
 * @summary –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 */
export const useStage4GenerateReceipt = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stage4GenerateReceipt>>, TError,{data: ReceiptGenerationRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof stage4GenerateReceipt>>,
        TError,
        {data: ReceiptGenerationRequest},
        TContext
      > => {

      const mutationOptions = getStage4GenerateReceiptMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è PDF –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 */
export const stage4GeneratePdfReceipt = (
    receiptGenerationRequest: ReceiptGenerationRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Stage4GeneratePdfReceipt200>(
      {url: `/v1/order-wizard/stage4/receipt/generate-pdf`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: receiptGenerationRequest, signal
    },
      options);
    }
  


export const getStage4GeneratePdfReceiptMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stage4GeneratePdfReceipt>>, TError,{data: ReceiptGenerationRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof stage4GeneratePdfReceipt>>, TError,{data: ReceiptGenerationRequest}, TContext> => {

const mutationKey = ['stage4GeneratePdfReceipt'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof stage4GeneratePdfReceipt>>, {data: ReceiptGenerationRequest}> = (props) => {
          const {data} = props ?? {};

          return  stage4GeneratePdfReceipt(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type Stage4GeneratePdfReceiptMutationResult = NonNullable<Awaited<ReturnType<typeof stage4GeneratePdfReceipt>>>
    export type Stage4GeneratePdfReceiptMutationBody = ReceiptGenerationRequest
    export type Stage4GeneratePdfReceiptMutationError = ErrorResponse

    /**
 * @summary –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è PDF –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 */
export const useStage4GeneratePdfReceipt = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stage4GeneratePdfReceipt>>, TError,{data: ReceiptGenerationRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof stage4GeneratePdfReceipt>>,
        TError,
        {data: ReceiptGenerationRequest},
        TContext
      > => {

      const mutationOptions = getStage4GeneratePdfReceiptMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Stage4 –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const stage4InitializeStage = (
    orderId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Stage4InitializeStage200>(
      {url: `/v1/order-wizard/stage4/initialize/${orderId}`, method: 'POST', signal
    },
      options);
    }
  


export const getStage4InitializeStageMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stage4InitializeStage>>, TError,{orderId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof stage4InitializeStage>>, TError,{orderId: string}, TContext> => {

const mutationKey = ['stage4InitializeStage'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof stage4InitializeStage>>, {orderId: string}> = (props) => {
          const {orderId} = props ?? {};

          return  stage4InitializeStage(orderId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type Stage4InitializeStageMutationResult = NonNullable<Awaited<ReturnType<typeof stage4InitializeStage>>>
    
    export type Stage4InitializeStageMutationError = ErrorResponse

    /**
 * @summary –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Stage4 –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const useStage4InitializeStage = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stage4InitializeStage>>, TError,{orderId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof stage4InitializeStage>>,
        TError,
        {orderId: string},
        TContext
      > => {

      const mutationOptions = getStage4InitializeStageMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary –§—ñ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const stage4FinalizeOrder = (
    orderFinalizationRequest: OrderFinalizationRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Stage4FinalizeOrder200>(
      {url: `/v1/order-wizard/stage4/finalize`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderFinalizationRequest, signal
    },
      options);
    }
  


export const getStage4FinalizeOrderMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stage4FinalizeOrder>>, TError,{data: OrderFinalizationRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof stage4FinalizeOrder>>, TError,{data: OrderFinalizationRequest}, TContext> => {

const mutationKey = ['stage4FinalizeOrder'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof stage4FinalizeOrder>>, {data: OrderFinalizationRequest}> = (props) => {
          const {data} = props ?? {};

          return  stage4FinalizeOrder(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type Stage4FinalizeOrderMutationResult = NonNullable<Awaited<ReturnType<typeof stage4FinalizeOrder>>>
    export type Stage4FinalizeOrderMutationBody = OrderFinalizationRequest
    export type Stage4FinalizeOrderMutationError = ErrorResponse

    /**
 * @summary –§—ñ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const useStage4FinalizeOrder = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stage4FinalizeOrder>>, TError,{data: OrderFinalizationRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof stage4FinalizeOrder>>,
        TError,
        {data: OrderFinalizationRequest},
        TContext
      > => {

      const mutationOptions = getStage4FinalizeOrderMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary –ü–æ–≤–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è Stage4
 */
export const stage4ValidateComplete = (
    sessionId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Stage4ValidateComplete200>(
      {url: `/v1/order-wizard/stage4/validate/complete/${sessionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getStage4ValidateCompleteQueryKey = (sessionId: string,) => {
    return [`/v1/order-wizard/stage4/validate/complete/${sessionId}`] as const;
    }

    
export const getStage4ValidateCompleteQueryOptions = <TData = Awaited<ReturnType<typeof stage4ValidateComplete>>, TError = ErrorResponse>(sessionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stage4ValidateComplete>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getStage4ValidateCompleteQueryKey(sessionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof stage4ValidateComplete>>> = ({ signal }) => stage4ValidateComplete(sessionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(sessionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof stage4ValidateComplete>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type Stage4ValidateCompleteQueryResult = NonNullable<Awaited<ReturnType<typeof stage4ValidateComplete>>>
export type Stage4ValidateCompleteQueryError = ErrorResponse


export function useStage4ValidateComplete<TData = Awaited<ReturnType<typeof stage4ValidateComplete>>, TError = ErrorResponse>(
 sessionId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof stage4ValidateComplete>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof stage4ValidateComplete>>,
          TError,
          Awaited<ReturnType<typeof stage4ValidateComplete>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useStage4ValidateComplete<TData = Awaited<ReturnType<typeof stage4ValidateComplete>>, TError = ErrorResponse>(
 sessionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stage4ValidateComplete>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof stage4ValidateComplete>>,
          TError,
          Awaited<ReturnType<typeof stage4ValidateComplete>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useStage4ValidateComplete<TData = Awaited<ReturnType<typeof stage4ValidateComplete>>, TError = ErrorResponse>(
 sessionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stage4ValidateComplete>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–≤–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è Stage4
 */

export function useStage4ValidateComplete<TData = Awaited<ReturnType<typeof stage4ValidateComplete>>, TError = ErrorResponse>(
 sessionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stage4ValidateComplete>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getStage4ValidateCompleteQueryOptions(sessionId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Å–µ—Å—ñ—ó
 */
export const stage4GetSessionContext = (
    sessionId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Stage4GetSessionContext200>(
      {url: `/v1/order-wizard/stage4/session/${sessionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getStage4GetSessionContextQueryKey = (sessionId: string,) => {
    return [`/v1/order-wizard/stage4/session/${sessionId}`] as const;
    }

    
export const getStage4GetSessionContextQueryOptions = <TData = Awaited<ReturnType<typeof stage4GetSessionContext>>, TError = ErrorResponse>(sessionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stage4GetSessionContext>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getStage4GetSessionContextQueryKey(sessionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof stage4GetSessionContext>>> = ({ signal }) => stage4GetSessionContext(sessionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(sessionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof stage4GetSessionContext>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type Stage4GetSessionContextQueryResult = NonNullable<Awaited<ReturnType<typeof stage4GetSessionContext>>>
export type Stage4GetSessionContextQueryError = ErrorResponse


export function useStage4GetSessionContext<TData = Awaited<ReturnType<typeof stage4GetSessionContext>>, TError = ErrorResponse>(
 sessionId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof stage4GetSessionContext>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof stage4GetSessionContext>>,
          TError,
          Awaited<ReturnType<typeof stage4GetSessionContext>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useStage4GetSessionContext<TData = Awaited<ReturnType<typeof stage4GetSessionContext>>, TError = ErrorResponse>(
 sessionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stage4GetSessionContext>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof stage4GetSessionContext>>,
          TError,
          Awaited<ReturnType<typeof stage4GetSessionContext>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useStage4GetSessionContext<TData = Awaited<ReturnType<typeof stage4GetSessionContext>>, TError = ErrorResponse>(
 sessionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stage4GetSessionContext>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Å–µ—Å—ñ—ó
 */

export function useStage4GetSessionContext<TData = Awaited<ReturnType<typeof stage4GetSessionContext>>, TError = ErrorResponse>(
 sessionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stage4GetSessionContext>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getStage4GetSessionContextQueryOptions(sessionId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É Stage4
 */
export const stage4GetCurrentState = (
    sessionId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Stage4GetCurrentState200>(
      {url: `/v1/order-wizard/stage4/session/${sessionId}/state`, method: 'GET', signal
    },
      options);
    }
  

export const getStage4GetCurrentStateQueryKey = (sessionId: string,) => {
    return [`/v1/order-wizard/stage4/session/${sessionId}/state`] as const;
    }

    
export const getStage4GetCurrentStateQueryOptions = <TData = Awaited<ReturnType<typeof stage4GetCurrentState>>, TError = ErrorResponse>(sessionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stage4GetCurrentState>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getStage4GetCurrentStateQueryKey(sessionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof stage4GetCurrentState>>> = ({ signal }) => stage4GetCurrentState(sessionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(sessionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof stage4GetCurrentState>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type Stage4GetCurrentStateQueryResult = NonNullable<Awaited<ReturnType<typeof stage4GetCurrentState>>>
export type Stage4GetCurrentStateQueryError = ErrorResponse


export function useStage4GetCurrentState<TData = Awaited<ReturnType<typeof stage4GetCurrentState>>, TError = ErrorResponse>(
 sessionId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof stage4GetCurrentState>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof stage4GetCurrentState>>,
          TError,
          Awaited<ReturnType<typeof stage4GetCurrentState>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useStage4GetCurrentState<TData = Awaited<ReturnType<typeof stage4GetCurrentState>>, TError = ErrorResponse>(
 sessionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stage4GetCurrentState>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof stage4GetCurrentState>>,
          TError,
          Awaited<ReturnType<typeof stage4GetCurrentState>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useStage4GetCurrentState<TData = Awaited<ReturnType<typeof stage4GetCurrentState>>, TError = ErrorResponse>(
 sessionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stage4GetCurrentState>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É Stage4
 */

export function useStage4GetCurrentState<TData = Awaited<ReturnType<typeof stage4GetCurrentState>>, TError = ErrorResponse>(
 sessionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stage4GetCurrentState>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getStage4GetCurrentStateQueryOptions(sessionId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—ñ–¥—Å—É–º–∫—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const stage4GetOrderSummary = (
    orderId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Stage4GetOrderSummary200>(
      {url: `/v1/order-wizard/stage4/order/${orderId}/summary`, method: 'GET', signal
    },
      options);
    }
  

export const getStage4GetOrderSummaryQueryKey = (orderId: string,) => {
    return [`/v1/order-wizard/stage4/order/${orderId}/summary`] as const;
    }

    
export const getStage4GetOrderSummaryQueryOptions = <TData = Awaited<ReturnType<typeof stage4GetOrderSummary>>, TError = ErrorResponse>(orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stage4GetOrderSummary>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getStage4GetOrderSummaryQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof stage4GetOrderSummary>>> = ({ signal }) => stage4GetOrderSummary(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof stage4GetOrderSummary>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type Stage4GetOrderSummaryQueryResult = NonNullable<Awaited<ReturnType<typeof stage4GetOrderSummary>>>
export type Stage4GetOrderSummaryQueryError = ErrorResponse


export function useStage4GetOrderSummary<TData = Awaited<ReturnType<typeof stage4GetOrderSummary>>, TError = ErrorResponse>(
 orderId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof stage4GetOrderSummary>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof stage4GetOrderSummary>>,
          TError,
          Awaited<ReturnType<typeof stage4GetOrderSummary>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useStage4GetOrderSummary<TData = Awaited<ReturnType<typeof stage4GetOrderSummary>>, TError = ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stage4GetOrderSummary>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof stage4GetOrderSummary>>,
          TError,
          Awaited<ReturnType<typeof stage4GetOrderSummary>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useStage4GetOrderSummary<TData = Awaited<ReturnType<typeof stage4GetOrderSummary>>, TError = ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stage4GetOrderSummary>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—ñ–¥—Å—É–º–∫—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */

export function useStage4GetOrderSummary<TData = Awaited<ReturnType<typeof stage4GetOrderSummary>>, TError = ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stage4GetOrderSummary>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getStage4GetOrderSummaryQueryOptions(orderId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




