/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * AKSI Dry Cleaning Order System API
 * API for dry cleaning order management system with Domain-Driven Design architecture. The system includes 13 domains: Auth, User, Customer, Branch, Employee, Order, OrderItem, Service, Garment, Pricing, Payment, Notification, and Analytics.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ActivateCategory200,
  CategoryInfo,
  CreatePriceListItemRequest,
  DeactivateCategory200,
  ErrorResponse,
  ListPriceListItemsParams,
  PriceListItemInfo,
  PriceListItemsResponse,
  UpdatePriceListItemRequest
} from './aKSIDryCleaningOrderSystemAPI.schemas';

import orvalFetcher from '../../../../lib/api/orval-fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Get detailed price list item information
 * @summary Get price list item details
 */
export const getPriceListItemById = (
    priceListItemId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<PriceListItemInfo>(
      {url: `/api/price-list/${priceListItemId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceListItemByIdQueryKey = (priceListItemId?: string,) => {
    return [`/api/price-list/${priceListItemId}`] as const;
    }

    
export const getGetPriceListItemByIdQueryOptions = <TData = Awaited<ReturnType<typeof getPriceListItemById>>, TError = ErrorResponse | ErrorResponse>(priceListItemId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceListItemById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceListItemByIdQueryKey(priceListItemId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceListItemById>>> = ({ signal }) => getPriceListItemById(priceListItemId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(priceListItemId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceListItemById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPriceListItemByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceListItemById>>>
export type GetPriceListItemByIdQueryError = ErrorResponse | ErrorResponse


export function useGetPriceListItemById<TData = Awaited<ReturnType<typeof getPriceListItemById>>, TError = ErrorResponse | ErrorResponse>(
 priceListItemId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceListItemById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceListItemById>>,
          TError,
          Awaited<ReturnType<typeof getPriceListItemById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPriceListItemById<TData = Awaited<ReturnType<typeof getPriceListItemById>>, TError = ErrorResponse | ErrorResponse>(
 priceListItemId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceListItemById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceListItemById>>,
          TError,
          Awaited<ReturnType<typeof getPriceListItemById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPriceListItemById<TData = Awaited<ReturnType<typeof getPriceListItemById>>, TError = ErrorResponse | ErrorResponse>(
 priceListItemId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceListItemById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get price list item details
 */

export function useGetPriceListItemById<TData = Awaited<ReturnType<typeof getPriceListItemById>>, TError = ErrorResponse | ErrorResponse>(
 priceListItemId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceListItemById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPriceListItemByIdQueryOptions(priceListItemId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Update an existing price list item (admin only)
 * @summary Update price list item
 */
export const updatePriceListItem = (
    priceListItemId: string,
    updatePriceListItemRequest: UpdatePriceListItemRequest,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<PriceListItemInfo>(
      {url: `/api/price-list/${priceListItemId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updatePriceListItemRequest
    },
      options);
    }
  


export const getUpdatePriceListItemMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePriceListItem>>, TError,{priceListItemId: string;data: UpdatePriceListItemRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof updatePriceListItem>>, TError,{priceListItemId: string;data: UpdatePriceListItemRequest}, TContext> => {

const mutationKey = ['updatePriceListItem'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePriceListItem>>, {priceListItemId: string;data: UpdatePriceListItemRequest}> = (props) => {
          const {priceListItemId,data} = props ?? {};

          return  updatePriceListItem(priceListItemId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePriceListItemMutationResult = NonNullable<Awaited<ReturnType<typeof updatePriceListItem>>>
    export type UpdatePriceListItemMutationBody = UpdatePriceListItemRequest
    export type UpdatePriceListItemMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Update price list item
 */
export const useUpdatePriceListItem = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePriceListItem>>, TError,{priceListItemId: string;data: UpdatePriceListItemRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updatePriceListItem>>,
        TError,
        {priceListItemId: string;data: UpdatePriceListItemRequest},
        TContext
      > => {

      const mutationOptions = getUpdatePriceListItemMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Delete a price list item (admin only)
 * @summary Delete price list item
 */
export const deletePriceListItem = (
    priceListItemId: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<null>(
      {url: `/api/price-list/${priceListItemId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeletePriceListItemMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePriceListItem>>, TError,{priceListItemId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof deletePriceListItem>>, TError,{priceListItemId: string}, TContext> => {

const mutationKey = ['deletePriceListItem'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePriceListItem>>, {priceListItemId: string}> = (props) => {
          const {priceListItemId} = props ?? {};

          return  deletePriceListItem(priceListItemId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePriceListItemMutationResult = NonNullable<Awaited<ReturnType<typeof deletePriceListItem>>>
    
    export type DeletePriceListItemMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Delete price list item
 */
export const useDeletePriceListItem = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePriceListItem>>, TError,{priceListItemId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deletePriceListItem>>,
        TError,
        {priceListItemId: string},
        TContext
      > => {

      const mutationOptions = getDeletePriceListItemMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const deactivateCategory = (
    categoryCode: 'CLOTHING' | 'LAUNDRY' | 'IRONING' | 'LEATHER' | 'PADDING' | 'FUR' | 'DYEING' | 'ADDITIONAL_SERVICES',
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<DeactivateCategory200>(
      {url: `/api/price-list/categories/${categoryCode}/deactivate`, method: 'PUT'
    },
      options);
    }
  


export const getDeactivateCategoryMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deactivateCategory>>, TError,{categoryCode: 'CLOTHING' | 'LAUNDRY' | 'IRONING' | 'LEATHER' | 'PADDING' | 'FUR' | 'DYEING' | 'ADDITIONAL_SERVICES'}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof deactivateCategory>>, TError,{categoryCode: 'CLOTHING' | 'LAUNDRY' | 'IRONING' | 'LEATHER' | 'PADDING' | 'FUR' | 'DYEING' | 'ADDITIONAL_SERVICES'}, TContext> => {

const mutationKey = ['deactivateCategory'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deactivateCategory>>, {categoryCode: 'CLOTHING' | 'LAUNDRY' | 'IRONING' | 'LEATHER' | 'PADDING' | 'FUR' | 'DYEING' | 'ADDITIONAL_SERVICES'}> = (props) => {
          const {categoryCode} = props ?? {};

          return  deactivateCategory(categoryCode,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeactivateCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof deactivateCategory>>>
    
    export type DeactivateCategoryMutationError = unknown

    export const useDeactivateCategory = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deactivateCategory>>, TError,{categoryCode: 'CLOTHING' | 'LAUNDRY' | 'IRONING' | 'LEATHER' | 'PADDING' | 'FUR' | 'DYEING' | 'ADDITIONAL_SERVICES'}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deactivateCategory>>,
        TError,
        {categoryCode: 'CLOTHING' | 'LAUNDRY' | 'IRONING' | 'LEATHER' | 'PADDING' | 'FUR' | 'DYEING' | 'ADDITIONAL_SERVICES'},
        TContext
      > => {

      const mutationOptions = getDeactivateCategoryMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const activateCategory = (
    categoryCode: 'CLOTHING' | 'LAUNDRY' | 'IRONING' | 'LEATHER' | 'PADDING' | 'FUR' | 'DYEING' | 'ADDITIONAL_SERVICES',
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<ActivateCategory200>(
      {url: `/api/price-list/categories/${categoryCode}/activate`, method: 'PUT'
    },
      options);
    }
  


export const getActivateCategoryMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof activateCategory>>, TError,{categoryCode: 'CLOTHING' | 'LAUNDRY' | 'IRONING' | 'LEATHER' | 'PADDING' | 'FUR' | 'DYEING' | 'ADDITIONAL_SERVICES'}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof activateCategory>>, TError,{categoryCode: 'CLOTHING' | 'LAUNDRY' | 'IRONING' | 'LEATHER' | 'PADDING' | 'FUR' | 'DYEING' | 'ADDITIONAL_SERVICES'}, TContext> => {

const mutationKey = ['activateCategory'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof activateCategory>>, {categoryCode: 'CLOTHING' | 'LAUNDRY' | 'IRONING' | 'LEATHER' | 'PADDING' | 'FUR' | 'DYEING' | 'ADDITIONAL_SERVICES'}> = (props) => {
          const {categoryCode} = props ?? {};

          return  activateCategory(categoryCode,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ActivateCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof activateCategory>>>
    
    export type ActivateCategoryMutationError = unknown

    export const useActivateCategory = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof activateCategory>>, TError,{categoryCode: 'CLOTHING' | 'LAUNDRY' | 'IRONING' | 'LEATHER' | 'PADDING' | 'FUR' | 'DYEING' | 'ADDITIONAL_SERVICES'}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof activateCategory>>,
        TError,
        {categoryCode: 'CLOTHING' | 'LAUNDRY' | 'IRONING' | 'LEATHER' | 'PADDING' | 'FUR' | 'DYEING' | 'ADDITIONAL_SERVICES'},
        TContext
      > => {

      const mutationOptions = getActivateCategoryMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Get list of price list items
 * @summary List price list items
 */
export const listPriceListItems = (
    params?: ListPriceListItemsParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<PriceListItemsResponse>(
      {url: `/api/price-list`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getListPriceListItemsQueryKey = (params?: ListPriceListItemsParams,) => {
    return [`/api/price-list`, ...(params ? [params]: [])] as const;
    }

    
export const getListPriceListItemsQueryOptions = <TData = Awaited<ReturnType<typeof listPriceListItems>>, TError = ErrorResponse>(params?: ListPriceListItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listPriceListItems>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListPriceListItemsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listPriceListItems>>> = ({ signal }) => listPriceListItems(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listPriceListItems>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListPriceListItemsQueryResult = NonNullable<Awaited<ReturnType<typeof listPriceListItems>>>
export type ListPriceListItemsQueryError = ErrorResponse


export function useListPriceListItems<TData = Awaited<ReturnType<typeof listPriceListItems>>, TError = ErrorResponse>(
 params: undefined |  ListPriceListItemsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listPriceListItems>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listPriceListItems>>,
          TError,
          Awaited<ReturnType<typeof listPriceListItems>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListPriceListItems<TData = Awaited<ReturnType<typeof listPriceListItems>>, TError = ErrorResponse>(
 params?: ListPriceListItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listPriceListItems>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listPriceListItems>>,
          TError,
          Awaited<ReturnType<typeof listPriceListItems>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListPriceListItems<TData = Awaited<ReturnType<typeof listPriceListItems>>, TError = ErrorResponse>(
 params?: ListPriceListItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listPriceListItems>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List price list items
 */

export function useListPriceListItems<TData = Awaited<ReturnType<typeof listPriceListItems>>, TError = ErrorResponse>(
 params?: ListPriceListItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listPriceListItems>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListPriceListItemsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Create a new price list item (admin only)
 * @summary Create new price list item
 */
export const createPriceListItem = (
    createPriceListItemRequest: CreatePriceListItemRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<PriceListItemInfo>(
      {url: `/api/price-list`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createPriceListItemRequest, signal
    },
      options);
    }
  


export const getCreatePriceListItemMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPriceListItem>>, TError,{data: CreatePriceListItemRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof createPriceListItem>>, TError,{data: CreatePriceListItemRequest}, TContext> => {

const mutationKey = ['createPriceListItem'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createPriceListItem>>, {data: CreatePriceListItemRequest}> = (props) => {
          const {data} = props ?? {};

          return  createPriceListItem(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreatePriceListItemMutationResult = NonNullable<Awaited<ReturnType<typeof createPriceListItem>>>
    export type CreatePriceListItemMutationBody = CreatePriceListItemRequest
    export type CreatePriceListItemMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Create new price list item
 */
export const useCreatePriceListItem = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPriceListItem>>, TError,{data: CreatePriceListItemRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createPriceListItem>>,
        TError,
        {data: CreatePriceListItemRequest},
        TContext
      > => {

      const mutationOptions = getCreatePriceListItemMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getAllCategories = (
    
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<CategoryInfo[]>(
      {url: `/api/price-list/categories`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAllCategoriesQueryKey = () => {
    return [`/api/price-list/categories`] as const;
    }

    
export const getGetAllCategoriesQueryOptions = <TData = Awaited<ReturnType<typeof getAllCategories>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCategories>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllCategoriesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllCategories>>> = ({ signal }) => getAllCategories(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllCategories>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllCategories>>>
export type GetAllCategoriesQueryError = unknown


export function useGetAllCategories<TData = Awaited<ReturnType<typeof getAllCategories>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCategories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllCategories>>,
          TError,
          Awaited<ReturnType<typeof getAllCategories>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllCategories<TData = Awaited<ReturnType<typeof getAllCategories>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCategories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllCategories>>,
          TError,
          Awaited<ReturnType<typeof getAllCategories>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllCategories<TData = Awaited<ReturnType<typeof getAllCategories>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCategories>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllCategories<TData = Awaited<ReturnType<typeof getAllCategories>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCategories>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllCategoriesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




