/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AKSI Dry Cleaning Order System API
 * API –¥–ª—è –æ–¥–Ω–æ—Å—Ç–æ—Ä—ñ–Ω–∫–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å —Ö—ñ–º—á–∏—Å—Ç–∫–∏ –∑ DDD –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–æ—é
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateDigitalSignatureRequest,
  DigitalSignatureResponse,
  DocumentPageResponse,
  DocumentResponse,
  ErrorResponse,
  GeneratePdfRequest,
  GenerateQRCodeRequest,
  GenerateReceiptRequest,
  GetDigitalSignatureImageParams,
  GetDocumentsParams,
  GetQrCodeByIdParams,
  GetReceiptPdfParams,
  GetReceiptsParams,
  QRCodeResponse,
  ReceiptPageResponse,
  ReceiptResponse,
  SignatureValidationResponse,
  UpdateDocumentStatusRequest,
  UpdateReceiptRequest,
  ValidationErrorResponse
} from './aKSIDryCleaningOrderSystemAPI.schemas';

import orvalFetcher from '../../../../lib/api/orval-fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—é
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—é –∑–∞ ID
 */
export const getReceiptById = (
    id: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<ReceiptResponse>(
      {url: `/api/receipts/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetReceiptByIdQueryKey = (id: string,) => {
    return [`/api/receipts/${id}`] as const;
    }

    
export const getGetReceiptByIdQueryOptions = <TData = Awaited<ReturnType<typeof getReceiptById>>, TError = ErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceiptById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetReceiptByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReceiptById>>> = ({ signal }) => getReceiptById(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getReceiptById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetReceiptByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getReceiptById>>>
export type GetReceiptByIdQueryError = ErrorResponse


export function useGetReceiptById<TData = Awaited<ReturnType<typeof getReceiptById>>, TError = ErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceiptById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReceiptById>>,
          TError,
          Awaited<ReturnType<typeof getReceiptById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetReceiptById<TData = Awaited<ReturnType<typeof getReceiptById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceiptById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReceiptById>>,
          TError,
          Awaited<ReturnType<typeof getReceiptById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetReceiptById<TData = Awaited<ReturnType<typeof getReceiptById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceiptById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—é –∑–∞ ID
 */

export function useGetReceiptById<TData = Awaited<ReturnType<typeof getReceiptById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceiptById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetReceiptByIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –û–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó (—è–∫—â–æ —â–µ –Ω–µ —Ä–æ–∑–¥—Ä—É–∫–æ–≤–∞–Ω–∞)
 * @summary –û–Ω–æ–≤–∏—Ç–∏ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—é
 */
export const updateReceipt = (
    id: string,
    updateReceiptRequest: UpdateReceiptRequest,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<ReceiptResponse>(
      {url: `/api/receipts/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateReceiptRequest
    },
      options);
    }
  


export const getUpdateReceiptMutationOptions = <TError = ValidationErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateReceipt>>, TError,{id: string;data: UpdateReceiptRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof updateReceipt>>, TError,{id: string;data: UpdateReceiptRequest}, TContext> => {

const mutationKey = ['updateReceipt'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateReceipt>>, {id: string;data: UpdateReceiptRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updateReceipt(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateReceiptMutationResult = NonNullable<Awaited<ReturnType<typeof updateReceipt>>>
    export type UpdateReceiptMutationBody = UpdateReceiptRequest
    export type UpdateReceiptMutationError = ValidationErrorResponse | ErrorResponse

    /**
 * @summary –û–Ω–æ–≤–∏—Ç–∏ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—é
 */
export const useUpdateReceipt = <TError = ValidationErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateReceipt>>, TError,{id: string;data: UpdateReceiptRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateReceipt>>,
        TError,
        {id: string;data: UpdateReceiptRequest},
        TContext
      > => {

      const mutationOptions = getUpdateReceiptMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –∫–≤–∏—Ç–∞–Ω—Ü—ñ–π –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–≤–∏—Ç–∞–Ω—Ü—ñ–π
 */
export const getReceipts = (
    params?: GetReceiptsParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<ReceiptPageResponse>(
      {url: `/api/receipts`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetReceiptsQueryKey = (params?: GetReceiptsParams,) => {
    return [`/api/receipts`, ...(params ? [params]: [])] as const;
    }

    
export const getGetReceiptsQueryOptions = <TData = Awaited<ReturnType<typeof getReceipts>>, TError = unknown>(params?: GetReceiptsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceipts>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetReceiptsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReceipts>>> = ({ signal }) => getReceipts(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getReceipts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetReceiptsQueryResult = NonNullable<Awaited<ReturnType<typeof getReceipts>>>
export type GetReceiptsQueryError = unknown


export function useGetReceipts<TData = Awaited<ReturnType<typeof getReceipts>>, TError = unknown>(
 params: undefined |  GetReceiptsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceipts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReceipts>>,
          TError,
          Awaited<ReturnType<typeof getReceipts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetReceipts<TData = Awaited<ReturnType<typeof getReceipts>>, TError = unknown>(
 params?: GetReceiptsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceipts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReceipts>>,
          TError,
          Awaited<ReturnType<typeof getReceipts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetReceipts<TData = Awaited<ReturnType<typeof getReceipts>>, TError = unknown>(
 params?: GetReceiptsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceipts>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–≤–∏—Ç–∞–Ω—Ü—ñ–π
 */

export function useGetReceipts<TData = Awaited<ReturnType<typeof getReceipts>>, TError = unknown>(
 params?: GetReceiptsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceipts>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetReceiptsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ì–µ–Ω–µ—Ä—É—î –Ω–æ–≤—É –∫–≤–∏—Ç–∞–Ω—Ü—ñ—é –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * @summary –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—é
 */
export const createReceipt = (
    generateReceiptRequest: GenerateReceiptRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<ReceiptResponse>(
      {url: `/api/receipts`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: generateReceiptRequest, signal
    },
      options);
    }
  


export const getCreateReceiptMutationOptions = <TError = ValidationErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createReceipt>>, TError,{data: GenerateReceiptRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof createReceipt>>, TError,{data: GenerateReceiptRequest}, TContext> => {

const mutationKey = ['createReceipt'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createReceipt>>, {data: GenerateReceiptRequest}> = (props) => {
          const {data} = props ?? {};

          return  createReceipt(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateReceiptMutationResult = NonNullable<Awaited<ReturnType<typeof createReceipt>>>
    export type CreateReceiptMutationBody = GenerateReceiptRequest
    export type CreateReceiptMutationError = ValidationErrorResponse | ErrorResponse

    /**
 * @summary –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—é
 */
export const useCreateReceipt = <TError = ValidationErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createReceipt>>, TError,{data: GenerateReceiptRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createReceipt>>,
        TError,
        {data: GenerateReceiptRequest},
        TContext
      > => {

      const mutationOptions = getCreateReceiptMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–∑–Ω–∞—á–∞—î –∫–≤–∏—Ç–∞–Ω—Ü—ñ—é —è–∫ —Ä–æ–∑–¥—Ä—É–∫–æ–≤–∞–Ω—É
 * @summary –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ —Ä–æ–∑–¥—Ä—É–∫–æ–≤–∞–Ω—É
 */
export const printReceipt = (
    id: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<ReceiptResponse>(
      {url: `/api/receipts/${id}/print`, method: 'POST', signal
    },
      options);
    }
  


export const getPrintReceiptMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof printReceipt>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof printReceipt>>, TError,{id: string}, TContext> => {

const mutationKey = ['printReceipt'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof printReceipt>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  printReceipt(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PrintReceiptMutationResult = NonNullable<Awaited<ReturnType<typeof printReceipt>>>
    
    export type PrintReceiptMutationError = ErrorResponse

    /**
 * @summary –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ —Ä–æ–∑–¥—Ä—É–∫–æ–≤–∞–Ω—É
 */
export const usePrintReceipt = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof printReceipt>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof printReceipt>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getPrintReceiptMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î PDF –≤–µ—Ä—Å—ñ—é –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ PDF –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 */
export const getReceiptPdf = (
    id: string,
    params?: GetReceiptPdfParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Blob>(
      {url: `/api/receipts/${id}/pdf`, method: 'GET',
        params,
        responseType: 'blob', signal
    },
      options);
    }
  

export const getGetReceiptPdfQueryKey = (id: string,
    params?: GetReceiptPdfParams,) => {
    return [`/api/receipts/${id}/pdf`, ...(params ? [params]: [])] as const;
    }

    
export const getGetReceiptPdfQueryOptions = <TData = Awaited<ReturnType<typeof getReceiptPdf>>, TError = ErrorResponse>(id: string,
    params?: GetReceiptPdfParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceiptPdf>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetReceiptPdfQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReceiptPdf>>> = ({ signal }) => getReceiptPdf(id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getReceiptPdf>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetReceiptPdfQueryResult = NonNullable<Awaited<ReturnType<typeof getReceiptPdf>>>
export type GetReceiptPdfQueryError = ErrorResponse


export function useGetReceiptPdf<TData = Awaited<ReturnType<typeof getReceiptPdf>>, TError = ErrorResponse>(
 id: string,
    params: undefined |  GetReceiptPdfParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceiptPdf>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReceiptPdf>>,
          TError,
          Awaited<ReturnType<typeof getReceiptPdf>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetReceiptPdf<TData = Awaited<ReturnType<typeof getReceiptPdf>>, TError = ErrorResponse>(
 id: string,
    params?: GetReceiptPdfParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceiptPdf>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReceiptPdf>>,
          TError,
          Awaited<ReturnType<typeof getReceiptPdf>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetReceiptPdf<TData = Awaited<ReturnType<typeof getReceiptPdf>>, TError = ErrorResponse>(
 id: string,
    params?: GetReceiptPdfParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceiptPdf>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ PDF –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 */

export function useGetReceiptPdf<TData = Awaited<ReturnType<typeof getReceiptPdf>>, TError = ErrorResponse>(
 id: string,
    params?: GetReceiptPdfParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceiptPdf>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetReceiptPdfQueryOptions(id,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ì–µ–Ω–µ—Ä—É—î PDF –≤–µ—Ä—Å—ñ—é –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó (—è–∫—â–æ —â–µ –Ω–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞)
 * @summary –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ PDF –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 */
export const generateReceiptPdf = (
    id: string,
    generatePdfRequest: GeneratePdfRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<DocumentResponse>(
      {url: `/api/receipts/${id}/pdf`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: generatePdfRequest, signal
    },
      options);
    }
  


export const getGenerateReceiptPdfMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof generateReceiptPdf>>, TError,{id: string;data: GeneratePdfRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof generateReceiptPdf>>, TError,{id: string;data: GeneratePdfRequest}, TContext> => {

const mutationKey = ['generateReceiptPdf'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof generateReceiptPdf>>, {id: string;data: GeneratePdfRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  generateReceiptPdf(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GenerateReceiptPdfMutationResult = NonNullable<Awaited<ReturnType<typeof generateReceiptPdf>>>
    export type GenerateReceiptPdfMutationBody = GeneratePdfRequest
    export type GenerateReceiptPdfMutationError = ErrorResponse

    /**
 * @summary –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ PDF –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 */
export const useGenerateReceiptPdf = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof generateReceiptPdf>>, TError,{id: string;data: GeneratePdfRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof generateReceiptPdf>>,
        TError,
        {id: string;data: GeneratePdfRequest},
        TContext
      > => {

      const mutationOptions = getGenerateReceiptPdfMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ì–µ–Ω–µ—Ä—É—î QR-–∫–æ–¥ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 * @summary –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ QR-–∫–æ–¥
 */
export const generateQrCode = (
    generateQRCodeRequest: GenerateQRCodeRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<QRCodeResponse>(
      {url: `/api/qr-codes/generate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: generateQRCodeRequest, signal
    },
      options);
    }
  


export const getGenerateQrCodeMutationOptions = <TError = ValidationErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof generateQrCode>>, TError,{data: GenerateQRCodeRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof generateQrCode>>, TError,{data: GenerateQRCodeRequest}, TContext> => {

const mutationKey = ['generateQrCode'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof generateQrCode>>, {data: GenerateQRCodeRequest}> = (props) => {
          const {data} = props ?? {};

          return  generateQrCode(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GenerateQrCodeMutationResult = NonNullable<Awaited<ReturnType<typeof generateQrCode>>>
    export type GenerateQrCodeMutationBody = GenerateQRCodeRequest
    export type GenerateQrCodeMutationError = ValidationErrorResponse

    /**
 * @summary –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ QR-–∫–æ–¥
 */
export const useGenerateQrCode = <TError = ValidationErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof generateQrCode>>, TError,{data: GenerateQRCodeRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof generateQrCode>>,
        TError,
        {data: GenerateQRCodeRequest},
        TContext
      > => {

      const mutationOptions = getGenerateQrCodeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ó–±–µ—Ä—ñ–≥–∞—î —Ü–∏—Ñ—Ä–æ–≤–∏–π –ø—ñ–¥–ø–∏—Å –∫–ª—ñ—î–Ω—Ç–∞ –∞–±–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
 * @summary –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ü–∏—Ñ—Ä–æ–≤–∏–π –ø—ñ–¥–ø–∏—Å
 */
export const createDigitalSignature = (
    createDigitalSignatureRequest: CreateDigitalSignatureRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<DigitalSignatureResponse>(
      {url: `/api/digital-signatures`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createDigitalSignatureRequest, signal
    },
      options);
    }
  


export const getCreateDigitalSignatureMutationOptions = <TError = ValidationErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createDigitalSignature>>, TError,{data: CreateDigitalSignatureRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof createDigitalSignature>>, TError,{data: CreateDigitalSignatureRequest}, TContext> => {

const mutationKey = ['createDigitalSignature'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createDigitalSignature>>, {data: CreateDigitalSignatureRequest}> = (props) => {
          const {data} = props ?? {};

          return  createDigitalSignature(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateDigitalSignatureMutationResult = NonNullable<Awaited<ReturnType<typeof createDigitalSignature>>>
    export type CreateDigitalSignatureMutationBody = CreateDigitalSignatureRequest
    export type CreateDigitalSignatureMutationError = ValidationErrorResponse

    /**
 * @summary –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ü–∏—Ñ—Ä–æ–≤–∏–π –ø—ñ–¥–ø–∏—Å
 */
export const useCreateDigitalSignature = <TError = ValidationErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createDigitalSignature>>, TError,{data: CreateDigitalSignatureRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createDigitalSignature>>,
        TError,
        {data: CreateDigitalSignatureRequest},
        TContext
      > => {

      const mutationOptions = getCreateDigitalSignatureMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –ø—ñ–¥–ø–∏—Å—É
 * @summary –í–∞–ª—ñ–¥—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å
 */
export const validateDigitalSignature = (
    id: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<SignatureValidationResponse>(
      {url: `/api/digital-signatures/${id}/validate`, method: 'POST', signal
    },
      options);
    }
  


export const getValidateDigitalSignatureMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof validateDigitalSignature>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof validateDigitalSignature>>, TError,{id: string}, TContext> => {

const mutationKey = ['validateDigitalSignature'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof validateDigitalSignature>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  validateDigitalSignature(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ValidateDigitalSignatureMutationResult = NonNullable<Awaited<ReturnType<typeof validateDigitalSignature>>>
    
    export type ValidateDigitalSignatureMutationError = ErrorResponse

    /**
 * @summary –í–∞–ª—ñ–¥—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å
 */
export const useValidateDigitalSignature = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof validateDigitalSignature>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof validateDigitalSignature>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getValidateDigitalSignatureMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @summary –ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
export const updateDocumentStatus = (
    id: string,
    updateDocumentStatusRequest: UpdateDocumentStatusRequest,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<DocumentResponse>(
      {url: `/api/documents/${id}/status`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateDocumentStatusRequest
    },
      options);
    }
  


export const getUpdateDocumentStatusMutationOptions = <TError = ValidationErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateDocumentStatus>>, TError,{id: string;data: UpdateDocumentStatusRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof updateDocumentStatus>>, TError,{id: string;data: UpdateDocumentStatusRequest}, TContext> => {

const mutationKey = ['updateDocumentStatus'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateDocumentStatus>>, {id: string;data: UpdateDocumentStatusRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updateDocumentStatus(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateDocumentStatusMutationResult = NonNullable<Awaited<ReturnType<typeof updateDocumentStatus>>>
    export type UpdateDocumentStatusMutationBody = UpdateDocumentStatusRequest
    export type UpdateDocumentStatusMutationError = ValidationErrorResponse | ErrorResponse

    /**
 * @summary –ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
export const useUpdateDocumentStatus = <TError = ValidationErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateDocumentStatus>>, TError,{id: string;data: UpdateDocumentStatusRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateDocumentStatus>>,
        TError,
        {id: string;data: UpdateDocumentStatusRequest},
        TContext
      > => {

      const mutationOptions = getUpdateDocumentStatusMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –∫–≤–∏—Ç–∞–Ω—Ü—ñ—é –∑–∞ –Ω–æ–º–µ—Ä–æ–º
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—é –∑–∞ –Ω–æ–º–µ—Ä–æ–º
 */
export const getReceiptByNumber = (
    receiptNumber: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<ReceiptResponse>(
      {url: `/api/receipts/number/${receiptNumber}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetReceiptByNumberQueryKey = (receiptNumber: string,) => {
    return [`/api/receipts/number/${receiptNumber}`] as const;
    }

    
export const getGetReceiptByNumberQueryOptions = <TData = Awaited<ReturnType<typeof getReceiptByNumber>>, TError = ErrorResponse>(receiptNumber: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceiptByNumber>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetReceiptByNumberQueryKey(receiptNumber);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReceiptByNumber>>> = ({ signal }) => getReceiptByNumber(receiptNumber, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(receiptNumber), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getReceiptByNumber>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetReceiptByNumberQueryResult = NonNullable<Awaited<ReturnType<typeof getReceiptByNumber>>>
export type GetReceiptByNumberQueryError = ErrorResponse


export function useGetReceiptByNumber<TData = Awaited<ReturnType<typeof getReceiptByNumber>>, TError = ErrorResponse>(
 receiptNumber: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceiptByNumber>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReceiptByNumber>>,
          TError,
          Awaited<ReturnType<typeof getReceiptByNumber>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetReceiptByNumber<TData = Awaited<ReturnType<typeof getReceiptByNumber>>, TError = ErrorResponse>(
 receiptNumber: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceiptByNumber>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReceiptByNumber>>,
          TError,
          Awaited<ReturnType<typeof getReceiptByNumber>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetReceiptByNumber<TData = Awaited<ReturnType<typeof getReceiptByNumber>>, TError = ErrorResponse>(
 receiptNumber: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceiptByNumber>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—é –∑–∞ –Ω–æ–º–µ—Ä–æ–º
 */

export function useGetReceiptByNumber<TData = Awaited<ReturnType<typeof getReceiptByNumber>>, TError = ErrorResponse>(
 receiptNumber: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceiptByNumber>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetReceiptByNumberQueryOptions(receiptNumber,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è QR-–∫–æ–¥—É
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ QR-–∫–æ–¥
 */
export const getQrCodeById = (
    id: string,
    params?: GetQrCodeByIdParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Blob>(
      {url: `/api/qr-codes/${id}`, method: 'GET',
        params,
        responseType: 'blob', signal
    },
      options);
    }
  

export const getGetQrCodeByIdQueryKey = (id: string,
    params?: GetQrCodeByIdParams,) => {
    return [`/api/qr-codes/${id}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetQrCodeByIdQueryOptions = <TData = Awaited<ReturnType<typeof getQrCodeById>>, TError = ErrorResponse>(id: string,
    params?: GetQrCodeByIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getQrCodeById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetQrCodeByIdQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getQrCodeById>>> = ({ signal }) => getQrCodeById(id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getQrCodeById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetQrCodeByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getQrCodeById>>>
export type GetQrCodeByIdQueryError = ErrorResponse


export function useGetQrCodeById<TData = Awaited<ReturnType<typeof getQrCodeById>>, TError = ErrorResponse>(
 id: string,
    params: undefined |  GetQrCodeByIdParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getQrCodeById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getQrCodeById>>,
          TError,
          Awaited<ReturnType<typeof getQrCodeById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetQrCodeById<TData = Awaited<ReturnType<typeof getQrCodeById>>, TError = ErrorResponse>(
 id: string,
    params?: GetQrCodeByIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getQrCodeById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getQrCodeById>>,
          TError,
          Awaited<ReturnType<typeof getQrCodeById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetQrCodeById<TData = Awaited<ReturnType<typeof getQrCodeById>>, TError = ErrorResponse>(
 id: string,
    params?: GetQrCodeByIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getQrCodeById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ QR-–∫–æ–¥
 */

export function useGetQrCodeById<TData = Awaited<ReturnType<typeof getQrCodeById>>, TError = ErrorResponse>(
 id: string,
    params?: GetQrCodeByIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getQrCodeById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetQrCodeByIdQueryOptions(id,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
 */
export const getDocuments = (
    params?: GetDocumentsParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<DocumentPageResponse>(
      {url: `/api/documents`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDocumentsQueryKey = (params?: GetDocumentsParams,) => {
    return [`/api/documents`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDocumentsQueryOptions = <TData = Awaited<ReturnType<typeof getDocuments>>, TError = unknown>(params?: GetDocumentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocuments>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDocumentsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDocuments>>> = ({ signal }) => getDocuments(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDocuments>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDocumentsQueryResult = NonNullable<Awaited<ReturnType<typeof getDocuments>>>
export type GetDocumentsQueryError = unknown


export function useGetDocuments<TData = Awaited<ReturnType<typeof getDocuments>>, TError = unknown>(
 params: undefined |  GetDocumentsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocuments>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDocuments>>,
          TError,
          Awaited<ReturnType<typeof getDocuments>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDocuments<TData = Awaited<ReturnType<typeof getDocuments>>, TError = unknown>(
 params?: GetDocumentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocuments>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDocuments>>,
          TError,
          Awaited<ReturnType<typeof getDocuments>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDocuments<TData = Awaited<ReturnType<typeof getDocuments>>, TError = unknown>(
 params?: GetDocumentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocuments>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
 */

export function useGetDocuments<TData = Awaited<ReturnType<typeof getDocuments>>, TError = unknown>(
 params?: GetDocumentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocuments>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetDocumentsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–æ–∫—É–º–µ–Ω—Ç
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞ ID
 */
export const getDocumentById = (
    id: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<DocumentResponse>(
      {url: `/api/documents/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDocumentByIdQueryKey = (id: string,) => {
    return [`/api/documents/${id}`] as const;
    }

    
export const getGetDocumentByIdQueryOptions = <TData = Awaited<ReturnType<typeof getDocumentById>>, TError = ErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDocumentByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDocumentById>>> = ({ signal }) => getDocumentById(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDocumentById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDocumentByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDocumentById>>>
export type GetDocumentByIdQueryError = ErrorResponse


export function useGetDocumentById<TData = Awaited<ReturnType<typeof getDocumentById>>, TError = ErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDocumentById>>,
          TError,
          Awaited<ReturnType<typeof getDocumentById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDocumentById<TData = Awaited<ReturnType<typeof getDocumentById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDocumentById>>,
          TError,
          Awaited<ReturnType<typeof getDocumentById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDocumentById<TData = Awaited<ReturnType<typeof getDocumentById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞ ID
 */

export function useGetDocumentById<TData = Awaited<ReturnType<typeof getDocumentById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetDocumentByIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –í–∏–¥–∞–ª—è—î –¥–æ–∫—É–º–µ–Ω—Ç (–º'—è–∫–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è)
 * @summary –í–∏–¥–∞–ª–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç
 */
export const deleteDocument = (
    id: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<void>(
      {url: `/api/documents/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDocumentMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDocument>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDocument>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteDocument'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDocument>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteDocument(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDocumentMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDocument>>>
    
    export type DeleteDocumentMutationError = ErrorResponse

    /**
 * @summary –í–∏–¥–∞–ª–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç
 */
export const useDeleteDocument = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDocument>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteDocument>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteDocumentMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
 * @summary –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç
 */
export const downloadDocument = (
    id: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Blob>(
      {url: `/api/documents/${id}/download`, method: 'GET',
        responseType: 'blob', signal
    },
      options);
    }
  

export const getDownloadDocumentQueryKey = (id: string,) => {
    return [`/api/documents/${id}/download`] as const;
    }

    
export const getDownloadDocumentQueryOptions = <TData = Awaited<ReturnType<typeof downloadDocument>>, TError = ErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadDocument>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDownloadDocumentQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof downloadDocument>>> = ({ signal }) => downloadDocument(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof downloadDocument>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DownloadDocumentQueryResult = NonNullable<Awaited<ReturnType<typeof downloadDocument>>>
export type DownloadDocumentQueryError = ErrorResponse


export function useDownloadDocument<TData = Awaited<ReturnType<typeof downloadDocument>>, TError = ErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadDocument>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof downloadDocument>>,
          TError,
          Awaited<ReturnType<typeof downloadDocument>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDownloadDocument<TData = Awaited<ReturnType<typeof downloadDocument>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadDocument>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof downloadDocument>>,
          TError,
          Awaited<ReturnType<typeof downloadDocument>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDownloadDocument<TData = Awaited<ReturnType<typeof downloadDocument>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadDocument>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç
 */

export function useDownloadDocument<TData = Awaited<ReturnType<typeof downloadDocument>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadDocument>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDownloadDocumentQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ü–∏—Ñ—Ä–æ–≤–∏–π –ø—ñ–¥–ø–∏—Å
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Ü–∏—Ñ—Ä–æ–≤–∏–π –ø—ñ–¥–ø–∏—Å
 */
export const getDigitalSignatureById = (
    id: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<DigitalSignatureResponse>(
      {url: `/api/digital-signatures/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDigitalSignatureByIdQueryKey = (id: string,) => {
    return [`/api/digital-signatures/${id}`] as const;
    }

    
export const getGetDigitalSignatureByIdQueryOptions = <TData = Awaited<ReturnType<typeof getDigitalSignatureById>>, TError = ErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDigitalSignatureById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDigitalSignatureByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDigitalSignatureById>>> = ({ signal }) => getDigitalSignatureById(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDigitalSignatureById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDigitalSignatureByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDigitalSignatureById>>>
export type GetDigitalSignatureByIdQueryError = ErrorResponse


export function useGetDigitalSignatureById<TData = Awaited<ReturnType<typeof getDigitalSignatureById>>, TError = ErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDigitalSignatureById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDigitalSignatureById>>,
          TError,
          Awaited<ReturnType<typeof getDigitalSignatureById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDigitalSignatureById<TData = Awaited<ReturnType<typeof getDigitalSignatureById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDigitalSignatureById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDigitalSignatureById>>,
          TError,
          Awaited<ReturnType<typeof getDigitalSignatureById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDigitalSignatureById<TData = Awaited<ReturnType<typeof getDigitalSignatureById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDigitalSignatureById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Ü–∏—Ñ—Ä–æ–≤–∏–π –ø—ñ–¥–ø–∏—Å
 */

export function useGetDigitalSignatureById<TData = Awaited<ReturnType<typeof getDigitalSignatureById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDigitalSignatureById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetDigitalSignatureByIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –ø—ñ–¥–ø–∏—Å—É
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å—É
 */
export const getDigitalSignatureImage = (
    id: string,
    params?: GetDigitalSignatureImageParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Blob>(
      {url: `/api/digital-signatures/${id}/image`, method: 'GET',
        params,
        responseType: 'blob', signal
    },
      options);
    }
  

export const getGetDigitalSignatureImageQueryKey = (id: string,
    params?: GetDigitalSignatureImageParams,) => {
    return [`/api/digital-signatures/${id}/image`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDigitalSignatureImageQueryOptions = <TData = Awaited<ReturnType<typeof getDigitalSignatureImage>>, TError = ErrorResponse>(id: string,
    params?: GetDigitalSignatureImageParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDigitalSignatureImage>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDigitalSignatureImageQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDigitalSignatureImage>>> = ({ signal }) => getDigitalSignatureImage(id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDigitalSignatureImage>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDigitalSignatureImageQueryResult = NonNullable<Awaited<ReturnType<typeof getDigitalSignatureImage>>>
export type GetDigitalSignatureImageQueryError = ErrorResponse


export function useGetDigitalSignatureImage<TData = Awaited<ReturnType<typeof getDigitalSignatureImage>>, TError = ErrorResponse>(
 id: string,
    params: undefined |  GetDigitalSignatureImageParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDigitalSignatureImage>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDigitalSignatureImage>>,
          TError,
          Awaited<ReturnType<typeof getDigitalSignatureImage>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDigitalSignatureImage<TData = Awaited<ReturnType<typeof getDigitalSignatureImage>>, TError = ErrorResponse>(
 id: string,
    params?: GetDigitalSignatureImageParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDigitalSignatureImage>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDigitalSignatureImage>>,
          TError,
          Awaited<ReturnType<typeof getDigitalSignatureImage>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDigitalSignatureImage<TData = Awaited<ReturnType<typeof getDigitalSignatureImage>>, TError = ErrorResponse>(
 id: string,
    params?: GetDigitalSignatureImageParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDigitalSignatureImage>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å—É
 */

export function useGetDigitalSignatureImage<TData = Awaited<ReturnType<typeof getDigitalSignatureImage>>, TError = ErrorResponse>(
 id: string,
    params?: GetDigitalSignatureImageParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDigitalSignatureImage>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetDigitalSignatureImageQueryOptions(id,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




