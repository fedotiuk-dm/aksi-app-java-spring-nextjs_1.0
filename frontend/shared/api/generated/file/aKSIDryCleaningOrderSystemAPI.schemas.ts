/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * AKSI Dry Cleaning Order System API
 * API for dry cleaning order management system with Domain-Driven Design architecture. The system includes 13 domains: Auth, User, Customer, Branch, Employee, Order, OrderItem, Service, Garment, Pricing, Payment, Notification, and Analytics.
 * OpenAPI spec version: 1.0.0
 */
export interface BranchAssignment {
  /** Branch ID */
  branchId: string;
  /** Branch name */
  branchName: string;
  /** Is this the primary branch */
  isPrimary: boolean;
}

export type UserDetailRolesItem = typeof UserDetailRolesItem[keyof typeof UserDetailRolesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserDetailRolesItem = {
  OPERATOR: 'OPERATOR',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN',
  CLEANER: 'CLEANER',
  DRIVER: 'DRIVER',
} as const;

export interface UserDetail {
  /** User ID */
  id: string;
  /** Username */
  username: string;
  /** First name */
  firstName: string;
  /** Last name */
  lastName: string;
  /** Email address */
  email: string;
  /**
   * @minItems 1
   * @maxItems 2147483647
   */
  roles: UserDetailRolesItem[];
  /** Is user active */
  active: boolean;
  /** Creation timestamp */
  createdAt: string;
  /** Last login timestamp */
  lastLoginAt?: string;
  /**
   * Phone number
   * @pattern ^\+?[0-9]{10,15}$
   */
  phone?: string;
  /** Assigned branches */
  branches: BranchAssignment[];
  /** Last update timestamp */
  updatedAt: string;
  /** ID of user who created this user */
  createdBy?: string;
  /** ID of user who last updated this user */
  updatedBy?: string;
  /**
   * Number of failed login attempts
   * @minimum 0
   */
  failedLoginAttempts?: number;
  /** When account was locked due to failed attempts */
  accountLockTime?: string;
  /** Last failed login attempt timestamp */
  lastFailedLoginAt?: string;
}

export interface ErrorResponse {
  timestamp: string;
  status: number;
  error: string;
  message: string;
  path: string;
  errors?: JsonNullableListErrorDetail;
}

export interface JsonNullableListErrorDetail {
  present?: boolean;
}

export type UpdateRolesRequestRolesItem = typeof UpdateRolesRequestRolesItem[keyof typeof UpdateRolesRequestRolesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateRolesRequestRolesItem = {
  OPERATOR: 'OPERATOR',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN',
  CLEANER: 'CLEANER',
  DRIVER: 'DRIVER',
} as const;

export interface UpdateRolesRequest {
  /**
   * New set of roles
   * @minItems 1
   * @maxItems 2147483647
   */
  roles: UpdateRolesRequestRolesItem[];
}

export interface ChangePasswordRequest {
  /** Current password (required if changing own password) */
  currentPassword?: string;
  /**
   * New password (min 6 chars for dev, 12 for prod)
   * @minLength 6
   * @maxLength 100
   */
  newPassword: string;
}

export interface UserBranchesResponse {
  branches: BranchAssignment[];
}

export interface UpdateBranchesRequest {
  /** Branch IDs to assign */
  branchIds: string[];
  /** Primary branch ID (must be in branchIds if provided) */
  primaryBranchId?: string;
}

export type PriceModifierDtoType = typeof PriceModifierDtoType[keyof typeof PriceModifierDtoType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PriceModifierDtoType = {
  PERCENTAGE: 'PERCENTAGE',
  FIXED: 'FIXED',
  FORMULA: 'FORMULA',
  MULTIPLIER: 'MULTIPLIER',
  DISCOUNT: 'DISCOUNT',
} as const;

export type PriceModifierDtoCategoryRestrictionsItem = typeof PriceModifierDtoCategoryRestrictionsItem[keyof typeof PriceModifierDtoCategoryRestrictionsItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PriceModifierDtoCategoryRestrictionsItem = {
  CLOTHING: 'CLOTHING',
  LAUNDRY: 'LAUNDRY',
  IRONING: 'IRONING',
  LEATHER: 'LEATHER',
  PADDING: 'PADDING',
  FUR: 'FUR',
  DYEING: 'DYEING',
  ADDITIONAL_SERVICES: 'ADDITIONAL_SERVICES',
  SHEEPSKIN: 'SHEEPSKIN',
  OTHER: 'OTHER',
} as const;

export interface PriceModifierDto {
  /** Unique modifier code */
  code: string;
  /** Modifier name */
  name: string;
  /** Modifier description */
  description?: string;
  type: PriceModifierDtoType;
  /** Modifier value: - For PERCENTAGE: basis points (e.g., 1550 = 15.5%) - For FIXED: amount in kopiykas per item  */
  value: number;
  /** Category codes where modifier is applicable */
  categoryRestrictions?: PriceModifierDtoCategoryRestrictionsItem[];
  /** Is modifier active */
  active: boolean;
  /** Sort order for display */
  sortOrder?: number;
}

export type DiscountDtoExcludedCategoriesItem = typeof DiscountDtoExcludedCategoriesItem[keyof typeof DiscountDtoExcludedCategoriesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DiscountDtoExcludedCategoriesItem = {
  CLOTHING: 'CLOTHING',
  LAUNDRY: 'LAUNDRY',
  IRONING: 'IRONING',
  LEATHER: 'LEATHER',
  PADDING: 'PADDING',
  FUR: 'FUR',
  DYEING: 'DYEING',
  ADDITIONAL_SERVICES: 'ADDITIONAL_SERVICES',
  SHEEPSKIN: 'SHEEPSKIN',
  OTHER: 'OTHER',
} as const;

export interface DiscountDto {
  /** Unique discount code */
  code: string;
  /** Discount name */
  name: string;
  /** Discount description */
  description?: string;
  /**
   * Discount percentage
   * @minimum 0
   * @maximum 100
   */
  percentage: number;
  /** Category codes excluded from discount */
  excludedCategories?: DiscountDtoExcludedCategoriesItem[];
  /** Is discount active */
  active: boolean;
  /** Sort order for display */
  sortOrder?: number;
}

/**
 * Service category code
 */
export type PriceListItemInfoCategoryCode = typeof PriceListItemInfoCategoryCode[keyof typeof PriceListItemInfoCategoryCode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PriceListItemInfoCategoryCode = {
  CLOTHING: 'CLOTHING',
  LAUNDRY: 'LAUNDRY',
  IRONING: 'IRONING',
  LEATHER: 'LEATHER',
  PADDING: 'PADDING',
  FUR: 'FUR',
  DYEING: 'DYEING',
  ADDITIONAL_SERVICES: 'ADDITIONAL_SERVICES',
  SHEEPSKIN: 'SHEEPSKIN',
  OTHER: 'OTHER',
} as const;

/**
 * Unit of measure
 */
export type PriceListItemInfoUnitOfMeasure = typeof PriceListItemInfoUnitOfMeasure[keyof typeof PriceListItemInfoUnitOfMeasure];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PriceListItemInfoUnitOfMeasure = {
  PIECE: 'PIECE',
  KILOGRAM: 'KILOGRAM',
  PAIR: 'PAIR',
  SQUARE_METER: 'SQUARE_METER',
} as const;

export interface PriceListItemInfo {
  /** Price list item ID */
  id: string;
  /** Service category code */
  categoryCode: PriceListItemInfoCategoryCode;
  /** Catalog number */
  catalogNumber: number;
  /** Item name */
  name: string;
  /** Unit of measure */
  unitOfMeasure: PriceListItemInfoUnitOfMeasure;
  /**
   * Base price in kopiykas (1 kopiykas = 0.01 UAH)
   * @minimum 0
   * @maximum 999999999
   */
  basePrice: number;
  /**
   * Price for black dyeing in kopiykas (1 kopiykas = 0.01 UAH)
   * @minimum 0
   * @maximum 999999999
   */
  priceBlack?: number;
  /**
   * Price for color dyeing in kopiykas (1 kopiykas = 0.01 UAH)
   * @minimum 0
   * @maximum 999999999
   */
  priceColor?: number;
  /** Is item active */
  active: boolean;
  /** Processing time in days */
  processingTimeDays?: number;
  /** Is express service available */
  expressAvailable?: boolean;
  /** Express processing time in hours */
  expressTimeHours?: number;
  /**
   * Express service price in kopiykas
   * @minimum 0
   * @maximum 999999999
   */
  expressPrice?: number;
  /** Sort order for display */
  sortOrder?: number;
  /** Service/item description */
  description?: string;
  /** Ukrainian name */
  nameUa?: string;
}

export interface UpdatePriceListItemRequest {
  /** Item name */
  name?: string;
  /**
   * Base price in kopiykas
   * @minimum 0
   * @maximum 999999999
   */
  basePrice?: number;
  /**
   * Price for black dyeing
   * @minimum 0
   * @maximum 999999999
   */
  priceBlack?: number;
  /**
   * Price for color dyeing
   * @minimum 0
   * @maximum 999999999
   */
  priceColor?: number;
  /** Is item active */
  active?: boolean;
  /** Processing time in days */
  processingTimeDays?: number;
  /** Is express service available */
  expressAvailable?: boolean;
  /** Express processing time in hours */
  expressTimeHours?: number;
  /**
   * Express service price
   * @minimum 0
   * @maximum 999999999
   */
  expressPrice?: number;
  /** Sort order for display */
  sortOrder?: number;
  /** Service/item description */
  description?: string;
  /** Ukrainian name */
  nameUa?: string;
}

export type ItemCharacteristicsFillerCondition = typeof ItemCharacteristicsFillerCondition[keyof typeof ItemCharacteristicsFillerCondition];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemCharacteristicsFillerCondition = {
  NORMAL: 'NORMAL',
  COMPRESSED: 'COMPRESSED',
} as const;

export type ItemCharacteristicsWearLevel = typeof ItemCharacteristicsWearLevel[keyof typeof ItemCharacteristicsWearLevel];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemCharacteristicsWearLevel = {
  NUMBER_10: '10',
  NUMBER_30: '30',
  NUMBER_50: '50',
  NUMBER_75: '75',
} as const;

export interface ItemCharacteristics {
  /** Material type */
  material?: string;
  /** Item color */
  color?: string;
  /** Filler type (for padded items) */
  filler?: string;
  fillerCondition?: ItemCharacteristicsFillerCondition;
  wearLevel?: ItemCharacteristicsWearLevel;
}

export type ItemDefectType = typeof ItemDefectType[keyof typeof ItemDefectType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemDefectType = {
  WORN: 'WORN',
  TORN: 'TORN',
  MISSING_ACCESSORIES: 'MISSING_ACCESSORIES',
  DAMAGED_ACCESSORIES: 'DAMAGED_ACCESSORIES',
  OTHER: 'OTHER',
} as const;

export interface ItemDefect {
  type: ItemDefectType;
  /** Additional description */
  description?: string;
}

export type ItemModifierType = typeof ItemModifierType[keyof typeof ItemModifierType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemModifierType = {
  PERCENTAGE: 'PERCENTAGE',
  FIXED: 'FIXED',
  FORMULA: 'FORMULA',
  MULTIPLIER: 'MULTIPLIER',
  DISCOUNT: 'DISCOUNT',
} as const;

export interface ItemModifier {
  /** Modifier code */
  code: string;
  /** Modifier name */
  name: string;
  type: ItemModifierType;
  /** Modifier value (percentage or fixed amount) */
  value: number;
}

export type ItemPhotoInfoType = typeof ItemPhotoInfoType[keyof typeof ItemPhotoInfoType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemPhotoInfoType = {
  GENERAL: 'GENERAL',
  DEFECT: 'DEFECT',
  STAIN: 'STAIN',
  LABEL: 'LABEL',
} as const;

export interface ItemPhotoInfo {
  /** Photo ID */
  id: string;
  /** Photo URL */
  url: string;
  type: ItemPhotoInfoType;
  /** Photo description */
  description?: string;
  /** Upload time */
  uploadedAt: string;
  /** Uploaded by user ID */
  uploadedBy?: string;
}

export type ItemRiskType = typeof ItemRiskType[keyof typeof ItemRiskType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemRiskType = {
  COLOR_CHANGE: 'COLOR_CHANGE',
  DEFORMATION: 'DEFORMATION',
  NO_WARRANTY: 'NO_WARRANTY',
} as const;

export interface ItemRisk {
  type: ItemRiskType;
  /** Risk description */
  description?: string;
}

export type ItemStainType = typeof ItemStainType[keyof typeof ItemStainType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemStainType = {
  GREASE: 'GREASE',
  BLOOD: 'BLOOD',
  PROTEIN: 'PROTEIN',
  WINE: 'WINE',
  COFFEE: 'COFFEE',
  GRASS: 'GRASS',
  INK: 'INK',
  COSMETICS: 'COSMETICS',
  OTHER: 'OTHER',
} as const;

export interface ItemStain {
  type: ItemStainType;
  /** Additional description */
  description?: string;
}

export interface ModifierDetail {
  code: string;
  name: string;
  /** Modifier amount in kopiykas */
  amount: number;
}

export interface OrderItemInfo {
  /** Order item ID */
  id: string;
  /** Price list item ID */
  priceListItemId: string;
  /** Price list item details */
  priceListItem: PriceListItemSummary;
  /** Quantity (in units) */
  quantity: number;
  /** Item characteristics */
  characteristics: ItemCharacteristics;
  /** Item stains */
  stains?: ItemStain[];
  /** Item defects */
  defects?: ItemDefect[];
  /** Item risks */
  risks?: ItemRisk[];
  /** Item photos */
  photos?: ItemPhotoInfo[];
  /** Applied modifiers */
  modifiers?: ItemModifier[];
  /** Item pricing details */
  pricing: OrderItemPricingInfo;
}

export interface OrderItemPricingInfo {
  /** Base price in kopiykas */
  basePrice: number;
  /** Applied modifier details */
  modifierDetails?: ModifierDetail[];
  /** Total modifiers amount */
  modifiersTotalAmount: number;
  /** Subtotal (base + modifiers) */
  subtotal: number;
  /** Urgency surcharge */
  urgencyAmount: number;
  /** Discount amount */
  discountAmount: number;
  /** Total price */
  total: number;
}

export type PriceListItemSummaryCategoryCode = typeof PriceListItemSummaryCategoryCode[keyof typeof PriceListItemSummaryCategoryCode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PriceListItemSummaryCategoryCode = {
  CLOTHING: 'CLOTHING',
  LAUNDRY: 'LAUNDRY',
  IRONING: 'IRONING',
  LEATHER: 'LEATHER',
  PADDING: 'PADDING',
  FUR: 'FUR',
  DYEING: 'DYEING',
  ADDITIONAL_SERVICES: 'ADDITIONAL_SERVICES',
  SHEEPSKIN: 'SHEEPSKIN',
  OTHER: 'OTHER',
} as const;

export type PriceListItemSummaryUnitOfMeasure = typeof PriceListItemSummaryUnitOfMeasure[keyof typeof PriceListItemSummaryUnitOfMeasure];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PriceListItemSummaryUnitOfMeasure = {
  PIECE: 'PIECE',
  KILOGRAM: 'KILOGRAM',
  PAIR: 'PAIR',
  SQUARE_METER: 'SQUARE_METER',
} as const;

export interface PriceListItemSummary {
  id: string;
  name: string;
  categoryCode: PriceListItemSummaryCategoryCode;
  unitOfMeasure: PriceListItemSummaryUnitOfMeasure;
  /** Base price in kopiykas */
  basePrice: number;
}

export interface UpdateItemCharacteristicsRequest {
  characteristics?: ItemCharacteristics;
  stains?: ItemStain[];
  defects?: ItemDefect[];
  risks?: ItemRisk[];
}

export type CustomerInfoContactPreferencesItem = typeof CustomerInfoContactPreferencesItem[keyof typeof CustomerInfoContactPreferencesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomerInfoContactPreferencesItem = {
  PHONE: 'PHONE',
  SMS: 'SMS',
  VIBER: 'VIBER',
} as const;

/**
 * How customer learned about the service
 */
export type CustomerInfoInfoSource = typeof CustomerInfoInfoSource[keyof typeof CustomerInfoInfoSource];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomerInfoInfoSource = {
  INSTAGRAM: 'INSTAGRAM',
  GOOGLE: 'GOOGLE',
  RECOMMENDATION: 'RECOMMENDATION',
  OTHER: 'OTHER',
} as const;

export interface CustomerInfo {
  /** Customer ID */
  id: string;
  /** First name */
  firstName: string;
  /** Last name */
  lastName: string;
  /**
   * Primary phone number (must be unique for active customers)
   * @minLength 10
   * @maxLength 20
   * @pattern ^\+?[0-9\s\-\(\)]+$
   */
  phonePrimary: string;
  /**
   * Email address (must be unique for active customers)
   * @minLength 0
   * @maxLength 255
   */
  email?: string;
  /** Address */
  address?: string;
  /** Preferred contact methods */
  contactPreferences?: CustomerInfoContactPreferencesItem[];
  /** How customer learned about the service */
  infoSource?: CustomerInfoInfoSource;
  /** Other info source details */
  infoSourceOther?: string;
  /** Internal notes about customer */
  notes?: string;
  /** Discount card number (unique) */
  discountCardNumber?: string;
  /** Whether customer is active */
  active: boolean;
  /** Registration date (UTC) */
  createdAt: string;
  /** Last update timestamp (UTC) */
  updatedAt?: string;
  /** Version for optimistic locking */
  version?: number;
}

export type UpdateCustomerRequestContactPreferencesItem = typeof UpdateCustomerRequestContactPreferencesItem[keyof typeof UpdateCustomerRequestContactPreferencesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateCustomerRequestContactPreferencesItem = {
  PHONE: 'PHONE',
  SMS: 'SMS',
  VIBER: 'VIBER',
} as const;

/**
 * How customer learned about the service
 */
export type UpdateCustomerRequestInfoSource = typeof UpdateCustomerRequestInfoSource[keyof typeof UpdateCustomerRequestInfoSource];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateCustomerRequestInfoSource = {
  INSTAGRAM: 'INSTAGRAM',
  GOOGLE: 'GOOGLE',
  RECOMMENDATION: 'RECOMMENDATION',
  OTHER: 'OTHER',
} as const;

export interface UpdateCustomerRequest {
  /**
   * First name
   * @minLength 1
   * @maxLength 100
   */
  firstName?: string;
  /**
   * Last name
   * @minLength 1
   * @maxLength 100
   */
  lastName?: string;
  /**
   * Primary phone number (must be unique for active customers)
   * @minLength 10
   * @maxLength 20
   * @pattern ^\+?[0-9\s\-\(\)]+$
   */
  phonePrimary?: string;
  /**
   * Email address (must be unique for active customers)
   * @minLength 0
   * @maxLength 255
   */
  email?: string;
  /**
   * Address
   * @minLength 0
   * @maxLength 500
   */
  address?: string;
  /** Preferred contact methods */
  contactPreferences?: UpdateCustomerRequestContactPreferencesItem[];
  /** How customer learned about the service */
  infoSource?: UpdateCustomerRequestInfoSource;
  /**
   * Other info source details
   * @minLength 0
   * @maxLength 200
   */
  infoSourceOther?: string;
  /**
   * Internal notes about customer
   * @minLength 0
   * @maxLength 1000
   */
  notes?: string;
  /**
   * Discount card number (must be unique)
   * @minLength 0
   * @maxLength 20
   */
  discountCardNumber?: string;
  /** Whether customer is active */
  active?: boolean;
}

/**
 * Urgency type
 */
export type CartGlobalModifiersUrgencyType = typeof CartGlobalModifiersUrgencyType[keyof typeof CartGlobalModifiersUrgencyType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CartGlobalModifiersUrgencyType = {
  NORMAL: 'NORMAL',
  EXPRESS_48H: 'EXPRESS_48H',
  EXPRESS_24H: 'EXPRESS_24H',
} as const;

/**
 * Discount type
 */
export type CartGlobalModifiersDiscountType = typeof CartGlobalModifiersDiscountType[keyof typeof CartGlobalModifiersDiscountType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CartGlobalModifiersDiscountType = {
  NONE: 'NONE',
  EVERCARD: 'EVERCARD',
  SOCIAL_MEDIA: 'SOCIAL_MEDIA',
  MILITARY: 'MILITARY',
  OTHER: 'OTHER',
} as const;

export interface CartGlobalModifiers {
  /** Urgency type */
  urgencyType?: CartGlobalModifiersUrgencyType;
  /** Discount type */
  discountType?: CartGlobalModifiersDiscountType;
  /**
   * Discount percentage (for OTHER type)
   * @minimum 0
   * @maximum 100
   */
  discountPercentage?: number;
  /** Expected completion date */
  expectedCompletionDate?: string;
  /** Optional note for expected completion (e.g., "–ø—ñ—Å–ª—è 14:00") */
  expectedCompletionNote?: string;
}

export interface CartInfo {
  /** Cart ID */
  id: string;
  /** Customer ID */
  customerId: string;
  /** Cart items */
  items: CartItemInfo[];
  globalModifiers?: CartGlobalModifiers;
  pricing: CartPricingInfo;
  /** Cart creation time */
  createdAt: string;
  /** Last update time */
  updatedAt?: string;
  /** Cart expiration time (TTL) */
  expiresAt: string;
}

export interface CartItemInfo {
  /** Cart item ID */
  id: string;
  /** Price list item ID */
  priceListItemId: string;
  priceListItem: PriceListItemSummary;
  /**
   * Quantity (in units)
   * @minimum 1
   */
  quantity: number;
  characteristics: ItemCharacteristics;
  /** Applied modifiers */
  modifiers?: ItemModifier[];
  pricing: CartItemPricingInfo;
}

export interface CartItemPricingInfo {
  /** Base price in kopiykas */
  basePrice: number;
  /** Applied modifier details */
  modifierDetails?: ModifierDetail[];
  /** Total modifiers amount in kopiykas */
  modifiersTotalAmount: number;
  /** Subtotal (base + modifiers) in kopiykas */
  subtotal: number;
  /** Urgency surcharge amount in kopiykas */
  urgencyAmount: number;
  /** Discount amount in kopiykas */
  discountAmount: number;
  /** Total price in kopiykas */
  total: number;
}

export interface CartPricingInfo {
  /** Sum of all items subtotals in kopiykas */
  itemsSubtotal: number;
  /** Total urgency amount in kopiykas */
  urgencyAmount: number;
  /** Total discount amount in kopiykas */
  discountAmount: number;
  /** Amount eligible for discount in kopiykas */
  discountApplicableAmount?: number;
  /** Final total in kopiykas */
  total: number;
}

export type UpdateCartModifiersRequestUrgencyType = typeof UpdateCartModifiersRequestUrgencyType[keyof typeof UpdateCartModifiersRequestUrgencyType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateCartModifiersRequestUrgencyType = {
  NORMAL: 'NORMAL',
  EXPRESS_48H: 'EXPRESS_48H',
  EXPRESS_24H: 'EXPRESS_24H',
} as const;

export type UpdateCartModifiersRequestDiscountType = typeof UpdateCartModifiersRequestDiscountType[keyof typeof UpdateCartModifiersRequestDiscountType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateCartModifiersRequestDiscountType = {
  NONE: 'NONE',
  EVERCARD: 'EVERCARD',
  SOCIAL_MEDIA: 'SOCIAL_MEDIA',
  MILITARY: 'MILITARY',
  OTHER: 'OTHER',
} as const;

export interface UpdateCartModifiersRequest {
  urgencyType?: UpdateCartModifiersRequestUrgencyType;
  discountType?: UpdateCartModifiersRequestDiscountType;
  /**
   * Discount percentage (required for OTHER type)
   * @minimum 0
   * @maximum 100
   */
  discountPercentage?: number;
  /** Expected completion date */
  expectedCompletionDate?: string;
}

export interface UpdateCartItemRequest {
  /**
   * New quantity in smallest unit (piece=1; kilogram=grams)
   * @minimum 1
   */
  quantity?: number;
  characteristics?: ItemCharacteristics;
  /** Updated modifier codes */
  modifierCodes?: string[];
}

export interface BranchInfo {
  /** Branch ID */
  id: string;
  /**
   * Branch name
   * @minLength 1
   * @maxLength 255
   */
  name: string;
  /** Branch address */
  address: string;
  /**
   * Branch phone number
   * @minLength 10
   * @maxLength 20
   * @pattern ^\+?[0-9\s\-\(\)]+$
   */
  phone: string;
  /**
   * Branch email
   * @minLength 0
   * @maxLength 255
   */
  email?: string;
  /** Working hours (e.g., "–ü–Ω-–ü—Ç 8:00-20:00, –°–± 9:00-18:00") */
  workingHours?: string;
  /** Is branch active */
  active: boolean;
  /** Branch description */
  description?: string;
  /** Sort order for display */
  sortOrder?: number;
  /** Creation timestamp (UTC) */
  createdAt?: string;
  /** Last update timestamp (UTC) */
  updatedAt?: string;
}

export interface UpdateBranchRequest {
  /**
   * Branch name
   * @minLength 1
   * @maxLength 255
   */
  name?: string;
  /**
   * Branch address
   * @minLength 1
   * @maxLength 500
   */
  address?: string;
  /**
   * Branch phone number
   * @minLength 10
   * @maxLength 20
   * @pattern ^\+?[0-9\s\-\(\)]+$
   */
  phone?: string;
  /**
   * Branch email
   * @minLength 0
   * @maxLength 255
   */
  email?: string;
  /**
   * Working hours
   * @minLength 0
   * @maxLength 255
   */
  workingHours?: string;
  /** Is branch active */
  active?: boolean;
  /**
   * Branch description
   * @minLength 0
   * @maxLength 1000
   */
  description?: string;
  /** Sort order for display */
  sortOrder?: number;
}

export type CreateUserRequestRolesItem = typeof CreateUserRequestRolesItem[keyof typeof CreateUserRequestRolesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUserRequestRolesItem = {
  OPERATOR: 'OPERATOR',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN',
  CLEANER: 'CLEANER',
  DRIVER: 'DRIVER',
} as const;

export interface CreateUserRequest {
  /**
   * Username (must be unique)
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9_]+$
   */
  username: string;
  /**
   * Password (min 6 chars for dev, 12 for prod)
   * @minLength 6
   * @maxLength 100
   */
  password: string;
  /**
   * First name (letters only)
   * @minLength 1
   * @maxLength 100
   * @pattern ^[a-zA-Z\u0400-\u04FF\s\-]+$
   */
  firstName: string;
  /**
   * Last name (letters only)
   * @minLength 1
   * @maxLength 100
   * @pattern ^[a-zA-Z\u0400-\u04FF\s\-]+$
   */
  lastName: string;
  /**
   * Email address (must be unique)
   * @minLength 0
   * @maxLength 255
   */
  email: string;
  /**
   * Phone number (optional, international format)
   * @pattern ^\+?[0-9]{10,15}$
   */
  phone?: string;
  /**
   * User roles (defaults to OPERATOR if not specified)
   * @minItems 1
   * @maxItems 10
   */
  roles?: CreateUserRequestRolesItem[];
  /**
   * Branch IDs to assign (optional)
   * @minItems 0
   * @maxItems 50
   */
  branchIds?: string[];
  /** Primary branch ID (must be in branchIds if provided) */
  primaryBranchId?: string;
  /** Account active status */
  active?: boolean;
  /** Email verification status */
  emailVerified?: boolean;
}

export interface ReceiptItem {
  /** Item position in order */
  position?: number;
  /** Item name */
  name: string;
  /** Catalog number */
  catalogNumber?: string;
  /** Quantity */
  quantity: number;
  /** Unit price in kopiykas */
  unitPrice: number;
  /** Total price in kopiykas */
  totalPrice: number;
  /** Applied modifiers */
  modifiers?: string[];
}

export type ReceiptOrderDataPaymentMethod = typeof ReceiptOrderDataPaymentMethod[keyof typeof ReceiptOrderDataPaymentMethod];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReceiptOrderDataPaymentMethod = {
  CASH: 'CASH',
  TERMINAL: 'TERMINAL',
  BANK_TRANSFER: 'BANK_TRANSFER',
} as const;

export interface ReceiptOrderData {
  /** Order number */
  orderNumber: string;
  /** Branch name */
  branchName: string;
  /** Branch address */
  branchAddress?: string;
  /** Branch phone */
  branchPhone?: string;
  /** Customer name */
  customerName: string;
  /** Customer phone */
  customerPhone?: string;
  /** Order items */
  items: ReceiptItem[];
  /** Subtotal in kopiykas */
  subtotal?: number;
  /** Discount amount in kopiykas */
  discount?: number;
  /** Total amount in kopiykas */
  totalAmount: number;
  /** Prepaid amount in kopiykas */
  prepaidAmount?: number;
  /** Due amount in kopiykas */
  dueAmount?: number;
  paymentMethod?: ReceiptOrderDataPaymentMethod;
  /** Order creation timestamp */
  createdAt: string;
  /** Expected completion date */
  completionDate?: string;
  /** Additional notes */
  notes?: string;
}

export interface ReceiptPreviewRequest {
  orderData: ReceiptOrderData;
  /** Template ID to use */
  templateId?: string;
  /** Locale for receipt generation */
  locale?: string;
}

export interface EmailReceiptResponse {
  /** Email sent successfully */
  success: boolean;
  /** Email sent timestamp */
  sentAt: string;
  /** Email address where receipt was sent */
  email?: string;
  /** Email message ID */
  messageId?: string;
}

export interface EmailReceiptRequest {
  /** Email address (if not specified, use customer's email) */
  email?: string;
  /** Email subject */
  subject?: string;
  /** Additional message */
  message?: string;
}

export type AppliedModifierType = typeof AppliedModifierType[keyof typeof AppliedModifierType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AppliedModifierType = {
  PERCENTAGE: 'PERCENTAGE',
  FIXED: 'FIXED',
  FORMULA: 'FORMULA',
  MULTIPLIER: 'MULTIPLIER',
  DISCOUNT: 'DISCOUNT',
} as const;

export interface AppliedModifier {
  /** Modifier code */
  code: string;
  /** Modifier name */
  name: string;
  type: AppliedModifierType;
  /** Modifier value (percentage in basis points *100 or fixed amount in kopiykas) */
  value: number;
  /** Calculated amount in kopiykas */
  amount: number;
}

export type CalculatedItemPriceCategoryCode = typeof CalculatedItemPriceCategoryCode[keyof typeof CalculatedItemPriceCategoryCode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CalculatedItemPriceCategoryCode = {
  CLOTHING: 'CLOTHING',
  LAUNDRY: 'LAUNDRY',
  IRONING: 'IRONING',
  LEATHER: 'LEATHER',
  PADDING: 'PADDING',
  FUR: 'FUR',
  DYEING: 'DYEING',
  ADDITIONAL_SERVICES: 'ADDITIONAL_SERVICES',
  SHEEPSKIN: 'SHEEPSKIN',
  OTHER: 'OTHER',
} as const;

export interface CalculatedItemPrice {
  priceListItemId: string;
  /** Item name from price list */
  itemName: string;
  categoryCode?: CalculatedItemPriceCategoryCode;
  quantity: number;
  /** Base price per unit in kopiykas */
  basePrice: number;
  calculations: ItemPriceCalculation;
  /** Total price for this item in kopiykas */
  total: number;
}

export interface CalculationTotals {
  /** Sum of all items subtotals in kopiykas */
  itemsSubtotal: number;
  /** Total urgency surcharge in kopiykas */
  urgencyAmount: number;
  /** Applied urgency percentage */
  urgencyPercentage?: number;
  /** Total discount amount in kopiykas */
  discountAmount: number;
  /** Applied discount percentage */
  discountPercentage?: number;
  /** Amount eligible for discount in kopiykas */
  discountApplicableAmount: number;
  /** Final total amount in kopiykas */
  total: number;
  /** Expected completion date based on items and urgency */
  expectedCompletionDate?: string;
  /** Optional note (e.g., "–ø—ñ—Å–ª—è 14:00") */
  expectedCompletionNote?: string;
}

export interface ItemPriceCalculation {
  /** Base amount (base price √ó quantity) in kopiykas */
  baseAmount: number;
  /** Applied modifiers with amounts */
  modifiers: AppliedModifier[];
  /** Total modifiers amount in kopiykas */
  modifiersTotal?: number;
  /** Subtotal (base + modifiers) in kopiykas */
  subtotal: number;
  urgencyModifier: AppliedModifier;
  discountModifier: AppliedModifier;
  /** Whether item is eligible for discount */
  discountEligible?: boolean;
  /** Final amount after all calculations in kopiykas */
  finalAmount: number;
}

export interface PriceCalculationResponse {
  /** Calculated prices for each item */
  items: CalculatedItemPrice[];
  totals: CalculationTotals;
  /** Calculation warnings (e.g., discount not applicable) */
  warnings?: string[];
}

/**
 * Urgency type: * `NORMAL` - Standard processing (0%) * `EXPRESS_48H` - Express 48 hours (+50%) * `EXPRESS_24H` - Express 24 hours (+100%) 
 */
export type GlobalPriceModifiersUrgencyType = typeof GlobalPriceModifiersUrgencyType[keyof typeof GlobalPriceModifiersUrgencyType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GlobalPriceModifiersUrgencyType = {
  NORMAL: 'NORMAL',
  EXPRESS_48H: 'EXPRESS_48H',
  EXPRESS_24H: 'EXPRESS_24H',
} as const;

/**
 * Discount type: * `NONE` - No discount (0%) * `EVERCARD` - Evercard discount (10%) * `SOCIAL_MEDIA` - Social media discount (5%) * `MILITARY` - Military discount (10%) * `OTHER` - Other discount (requires discountPercentage) 
 */
export type GlobalPriceModifiersDiscountType = typeof GlobalPriceModifiersDiscountType[keyof typeof GlobalPriceModifiersDiscountType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GlobalPriceModifiersDiscountType = {
  NONE: 'NONE',
  EVERCARD: 'EVERCARD',
  SOCIAL_MEDIA: 'SOCIAL_MEDIA',
  MILITARY: 'MILITARY',
  OTHER: 'OTHER',
} as const;

export interface GlobalPriceModifiers {
  /** Urgency type: * `NORMAL` - Standard processing (0%) * `EXPRESS_48H` - Express 48 hours (+50%) * `EXPRESS_24H` - Express 24 hours (+100%)  */
  urgencyType?: GlobalPriceModifiersUrgencyType;
  /** Discount type: * `NONE` - No discount (0%) * `EVERCARD` - Evercard discount (10%) * `SOCIAL_MEDIA` - Social media discount (5%) * `MILITARY` - Military discount (10%) * `OTHER` - Other discount (requires discountPercentage)  */
  discountType?: GlobalPriceModifiersDiscountType;
  /**
   * Discount percentage (required for OTHER type)
   * @minimum 0
   * @maximum 100
   */
  discountPercentage?: number;
}

export interface PriceCalculationItem {
  /** Price list item ID */
  priceListItemId: string;
  /**
   * Quantity (in units)
   * @minimum 1
   */
  quantity: number;
  characteristics?: ItemCharacteristics;
  /** Modifier codes to apply */
  modifierCodes?: string[];
}

export interface PriceCalculationRequest {
  /**
   * Items to calculate price for
   * @minItems 1
   * @maxItems 2147483647
   */
  items: PriceCalculationItem[];
  globalModifiers?: GlobalPriceModifiers;
}

/**
 * Service category code
 */
export type CreatePriceListItemRequestCategoryCode = typeof CreatePriceListItemRequestCategoryCode[keyof typeof CreatePriceListItemRequestCategoryCode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreatePriceListItemRequestCategoryCode = {
  CLOTHING: 'CLOTHING',
  LAUNDRY: 'LAUNDRY',
  IRONING: 'IRONING',
  LEATHER: 'LEATHER',
  PADDING: 'PADDING',
  FUR: 'FUR',
  DYEING: 'DYEING',
  ADDITIONAL_SERVICES: 'ADDITIONAL_SERVICES',
  SHEEPSKIN: 'SHEEPSKIN',
  OTHER: 'OTHER',
} as const;

/**
 * Unit of measure
 */
export type CreatePriceListItemRequestUnitOfMeasure = typeof CreatePriceListItemRequestUnitOfMeasure[keyof typeof CreatePriceListItemRequestUnitOfMeasure];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreatePriceListItemRequestUnitOfMeasure = {
  PIECE: 'PIECE',
  KILOGRAM: 'KILOGRAM',
  PAIR: 'PAIR',
  SQUARE_METER: 'SQUARE_METER',
} as const;

export interface CreatePriceListItemRequest {
  /** Service category code */
  categoryCode: CreatePriceListItemRequestCategoryCode;
  /** Catalog number */
  catalogNumber: number;
  /** Item name */
  name: string;
  /** Unit of measure */
  unitOfMeasure: CreatePriceListItemRequestUnitOfMeasure;
  /**
   * Base price in kopiykas
   * @minimum 0
   * @maximum 999999999
   */
  basePrice: number;
  /**
   * Price for black dyeing
   * @minimum 0
   * @maximum 999999999
   */
  priceBlack?: number;
  /**
   * Price for color dyeing
   * @minimum 0
   * @maximum 999999999
   */
  priceColor?: number;
  /** Is item active */
  active?: boolean;
  /** Processing time in days */
  processingTimeDays?: number;
  /** Is express service available */
  expressAvailable?: boolean;
  /** Express processing time in hours */
  expressTimeHours?: number;
  /**
   * Express service price
   * @minimum 0
   * @maximum 999999999
   */
  expressPrice?: number;
  /** Sort order for display */
  sortOrder?: number;
  /** Service/item description */
  description?: string;
  /** Ukrainian name */
  nameUa?: string;
}

export interface CustomerSummary {
  id: string;
  firstName: string;
  lastName: string;
  phone: string;
  email?: string;
}

export type OrderInfoStatus = typeof OrderInfoStatus[keyof typeof OrderInfoStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderInfoStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  IN_PROGRESS: 'IN_PROGRESS',
  READY: 'READY',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
} as const;

export interface OrderInfo {
  /** Order ID */
  id: string;
  /** Order number */
  orderNumber: string;
  /** Customer ID */
  customerId: string;
  customer: CustomerSummary;
  /** Branch ID */
  branchId: string;
  /** Unique label (QR code) */
  uniqueLabel?: string;
  status: OrderInfoStatus;
  items: OrderItemInfo[];
  pricing: OrderPricingInfo;
  payments?: PaymentInfo[];
  /** Order notes */
  notes?: string;
  /** Customer signature (base64) */
  customerSignature?: string;
  /** Creation time */
  createdAt: string;
  /** Created by user ID */
  createdBy?: string;
  /** Expected completion date */
  expectedCompletionDate: string;
  /** Actual completion date */
  actualCompletionDate?: string;
}

export interface OrderPricingInfo {
  /** Sum of all items subtotals */
  itemsSubtotal: number;
  /** Total urgency amount */
  urgencyAmount: number;
  /** Total discount amount */
  discountAmount: number;
  /** Amount eligible for discount */
  discountApplicableAmount?: number;
  /** Final total */
  total: number;
  /** Total paid amount */
  paidAmount: number;
  /** Balance due */
  balanceDue: number;
}

export type PaymentInfoMethod = typeof PaymentInfoMethod[keyof typeof PaymentInfoMethod];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentInfoMethod = {
  CASH: 'CASH',
  TERMINAL: 'TERMINAL',
  BANK_TRANSFER: 'BANK_TRANSFER',
} as const;

export interface PaymentInfo {
  id: string;
  /** Payment amount in kopiykas */
  amount: number;
  method: PaymentInfoMethod;
  paidAt: string;
  /** User ID who registered payment */
  paidBy?: string;
}

export interface CreateOrderRequest {
  /** Cart ID to create order from */
  cartId: string;
  /** Branch ID */
  branchId: string;
  /** Unique label (QR code) */
  uniqueLabel?: string;
  /** Order notes */
  notes?: string;
  /** Customer signature (base64) */
  customerSignature?: string;
  /** Terms and conditions accepted */
  termsAccepted?: boolean;
}

export interface SaveSignatureRequest {
  /** Customer signature in base64 format */
  signature: string;
}

export type AddPaymentRequestMethod = typeof AddPaymentRequestMethod[keyof typeof AddPaymentRequestMethod];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddPaymentRequestMethod = {
  CASH: 'CASH',
  TERMINAL: 'TERMINAL',
  BANK_TRANSFER: 'BANK_TRANSFER',
} as const;

export interface AddPaymentRequest {
  /**
   * Payment amount in kopiykas
   * @minimum 1
   */
  amount: number;
  method: AddPaymentRequestMethod;
}

export interface FileUploadResponse {
  /** Upload success status */
  success: boolean;
  /** Relative file path where file was stored */
  filePath: string;
  /** Full URL to access the file */
  fileUrl: string;
  /** Original filename from upload */
  originalFilename?: string;
  /** File size in bytes */
  fileSize?: number;
  /** Detected content type */
  contentType?: string;
  /** Upload timestamp */
  uploadedAt: string;
  /** User ID who uploaded the file */
  uploadedBy?: string;
}

export interface Base64FileUploadRequest {
  /** Base64 encoded file data (with or without data URL prefix) */
  base64Data: string;
  /**
   * Directory to store file in
   * @pattern ^[a-zA-Z0-9/_\-]+$
   */
  directory: string;
  /**
   * Filename without extension
   * @pattern ^[a-zA-Z0-9_\-]+$
   */
  filename: string;
}

export type CreateCustomerRequestContactPreferencesItem = typeof CreateCustomerRequestContactPreferencesItem[keyof typeof CreateCustomerRequestContactPreferencesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCustomerRequestContactPreferencesItem = {
  PHONE: 'PHONE',
  SMS: 'SMS',
  VIBER: 'VIBER',
} as const;

/**
 * How customer learned about the service
 */
export type CreateCustomerRequestInfoSource = typeof CreateCustomerRequestInfoSource[keyof typeof CreateCustomerRequestInfoSource];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCustomerRequestInfoSource = {
  INSTAGRAM: 'INSTAGRAM',
  GOOGLE: 'GOOGLE',
  RECOMMENDATION: 'RECOMMENDATION',
  OTHER: 'OTHER',
} as const;

export interface CreateCustomerRequest {
  /**
   * First name
   * @minLength 1
   * @maxLength 100
   */
  firstName: string;
  /**
   * Last name
   * @minLength 1
   * @maxLength 100
   */
  lastName: string;
  /**
   * Primary phone number (must be unique for active customers)
   * @minLength 10
   * @maxLength 20
   * @pattern ^\+?[0-9\s\-\(\)]+$
   */
  phonePrimary: string;
  /**
   * Email address (must be unique for active customers)
   * @minLength 0
   * @maxLength 255
   */
  email?: string;
  /**
   * Address
   * @minLength 0
   * @maxLength 500
   */
  address?: string;
  /** Preferred contact methods */
  contactPreferences?: CreateCustomerRequestContactPreferencesItem[];
  /** How customer learned about the service */
  infoSource?: CreateCustomerRequestInfoSource;
  /**
   * Other info source details (required if infoSource is OTHER)
   * @minLength 0
   * @maxLength 200
   */
  infoSourceOther?: string;
  /**
   * Internal notes about customer
   * @minLength 0
   * @maxLength 1000
   */
  notes?: string;
  /**
   * Discount card number (must be unique)
   * @minLength 0
   * @maxLength 20
   */
  discountCardNumber?: string;
}

export interface AddCartItemRequest {
  /** Price list item ID */
  priceListItemId: string;
  /**
   * Quantity in smallest unit (piece=1; kilogram=grams)
   * @minimum 1
   */
  quantity: number;
  characteristics?: ItemCharacteristics;
  /** Modifier codes to apply */
  modifierCodes?: string[];
}

export interface ActivateCustomerRequest {
  /** Customer ID to activate */
  customerId: string;
}

export interface CreateBranchRequest {
  /**
   * Branch name
   * @minLength 1
   * @maxLength 255
   */
  name: string;
  /**
   * Branch address
   * @minLength 1
   * @maxLength 500
   */
  address: string;
  /**
   * Branch phone number
   * @minLength 10
   * @maxLength 20
   * @pattern ^\+?[0-9\s\-\(\)]+$
   */
  phone: string;
  /**
   * Branch email
   * @minLength 0
   * @maxLength 255
   */
  email?: string;
  /**
   * Working hours
   * @minLength 0
   * @maxLength 255
   */
  workingHours?: string;
  /** Is branch active */
  active?: boolean;
  /**
   * Branch description
   * @minLength 0
   * @maxLength 1000
   */
  description?: string;
  /** Sort order for display */
  sortOrder?: number;
}

export interface JsonNullableInstant {
  present?: boolean;
}

export interface JsonNullableString {
  present?: boolean;
}

export interface JsonNullableUUID {
  present?: boolean;
}

export type LoginResponseRolesItem = typeof LoginResponseRolesItem[keyof typeof LoginResponseRolesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LoginResponseRolesItem = {
  OPERATOR: 'OPERATOR',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN',
  CLEANER: 'CLEANER',
  DRIVER: 'DRIVER',
} as const;

export interface LoginResponse {
  /** User ID */
  userId: string;
  /** Username */
  username: string;
  /** First name */
  firstName?: string;
  /** Last name */
  lastName?: string;
  /**
   * User roles
   * @minItems 1
   * @maxItems 2147483647
   */
  roles: LoginResponseRolesItem[];
  /** User permissions */
  permissions?: string[];
  /** Current branch ID */
  branchId?: JsonNullableUUID;
  /** Current branch name */
  branchName?: JsonNullableString;
  /** Whether branch selection is required */
  requiresBranchSelection: boolean;
  /** Whether user account is blocked due to failed attempts */
  isBlocked: boolean;
  /**
   * Number of login attempts remaining before lockout
   * @minimum 0
   */
  attemptsRemaining: number;
  /** When account lockout expires (if blocked) */
  lockoutExpiresAt?: JsonNullableInstant;
}

export interface LoginRequest {
  /**
   * Operator username
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9_]+$
   */
  username: string;
  /**
   * Password (min 6 chars for dev, 12 for prod)
   * @minLength 6
   * @maxLength 100
   */
  password: string;
  /** Remember session for 30 days */
  rememberMe?: boolean;
  /** Branch ID for login (optional, can be selected later) */
  branchId?: JsonNullableUUID;
}

export interface UpdateUserRequest {
  /**
   * First name
   * @minLength 1
   * @maxLength 100
   */
  firstName?: string;
  /**
   * Last name
   * @minLength 1
   * @maxLength 100
   */
  lastName?: string;
  /** Email address */
  email?: string;
  /**
   * Phone number
   * @pattern ^\+?[0-9]{10,15}$
   */
  phone?: string;
}

export type UpdateOrderStatusRequestStatus = typeof UpdateOrderStatusRequestStatus[keyof typeof UpdateOrderStatusRequestStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateOrderStatusRequestStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  IN_PROGRESS: 'IN_PROGRESS',
  READY: 'READY',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
} as const;

export interface UpdateOrderStatusRequest {
  status: UpdateOrderStatusRequestStatus;
  /** Status change notes */
  notes?: string;
}

export interface UserListResponse {
  data: UserSummary[];
  /** Total number of elements */
  totalElements: number;
  /** Total number of pages */
  totalPages: number;
  /** Page size */
  size: number;
  /** Page number (0-based) */
  number: number;
  /** Number of elements in current page */
  numberOfElements: number;
  /** Is first page */
  first: boolean;
  /** Is last page */
  last: boolean;
  /** Is empty */
  empty: boolean;
}

export type UserSummaryRolesItem = typeof UserSummaryRolesItem[keyof typeof UserSummaryRolesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserSummaryRolesItem = {
  OPERATOR: 'OPERATOR',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN',
  CLEANER: 'CLEANER',
  DRIVER: 'DRIVER',
} as const;

export interface UserSummary {
  /** User ID */
  id: string;
  /** Username */
  username: string;
  /** First name */
  firstName: string;
  /** Last name */
  lastName: string;
  /** Email address */
  email: string;
  /**
   * @minItems 1
   * @maxItems 2147483647
   */
  roles: UserSummaryRolesItem[];
  /** Is user active */
  active: boolean;
  /** Creation timestamp */
  createdAt: string;
  /** Last login timestamp */
  lastLoginAt?: string;
}

export interface ReceiptTemplate {
  /** Template ID */
  id: string;
  /** Template name */
  name: string;
  /** Template description */
  description: string;
  /** Is default template */
  isDefault: boolean;
  /** Supported locales */
  supportedLocales?: string[];
}

export interface PriceModifiersResponse {
  /** List of price modifiers */
  modifiers: PriceModifierDto[];
  /** General modifiers (applicable to all categories) */
  generalModifiers?: PriceModifierDto[];
  /** Textile-specific modifiers */
  textileModifiers?: PriceModifierDto[];
  /** Leather-specific modifiers */
  leatherModifiers?: PriceModifierDto[];
}

export interface DiscountsResponse {
  /** List of available discounts */
  discounts: DiscountDto[];
}

export interface PriceListItemsResponse {
  /** List of price list items */
  priceListItems: PriceListItemInfo[];
  /** Total number of items matching the filter */
  totalItems: number;
  /** Whether there are more items to load */
  hasMore: boolean;
}

export type CategoryInfoCode = typeof CategoryInfoCode[keyof typeof CategoryInfoCode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryInfoCode = {
  CLOTHING: 'CLOTHING',
  LAUNDRY: 'LAUNDRY',
  IRONING: 'IRONING',
  LEATHER: 'LEATHER',
  PADDING: 'PADDING',
  FUR: 'FUR',
  DYEING: 'DYEING',
  ADDITIONAL_SERVICES: 'ADDITIONAL_SERVICES',
  SHEEPSKIN: 'SHEEPSKIN',
  OTHER: 'OTHER',
} as const;

export interface CategoryInfo {
  code?: CategoryInfoCode;
  name?: string;
  totalItems?: number;
  activeItems?: number;
  hasActiveItems?: boolean;
}

export interface OrderListResponse {
  data: OrderInfo[];
  /** Total number of elements */
  totalElements: number;
  /** Total number of pages */
  totalPages: number;
  /** Page size */
  size: number;
  /** Page number (0-based) */
  number: number;
  /** Number of elements in current page */
  numberOfElements: number;
  /** Is first page */
  first: boolean;
  /** Is last page */
  last: boolean;
  /** Is empty */
  empty: boolean;
}

export interface FileInfo {
  /** Relative file path */
  filePath: string;
  /** Full URL to access the file */
  fileUrl: string;
  /** Whether file exists */
  exists: boolean;
  /** File size in bytes */
  fileSize: number;
  /** Detected content type */
  contentType?: string;
  /** Whether file is readable */
  readable?: boolean;
  /** Last modification timestamp */
  lastModified: string;
}

export interface Base64FileResponse {
  /** File path that was read */
  filePath: string;
  /** Base64 encoded file content */
  base64Data: string;
  /** MIME type of the file */
  contentType: string;
  /** Original file size in bytes */
  fileSize: number;
}

export interface CustomerListResponse {
  data: CustomerInfo[];
  /** Total number of elements */
  totalElements: number;
  /** Total number of pages */
  totalPages: number;
  /** Page size */
  size: number;
  /** Page number (0-based) */
  number: number;
  /** Number of elements in current page */
  numberOfElements: number;
  /** Is first page */
  first: boolean;
  /** Is last page */
  last: boolean;
  /** Is empty */
  empty: boolean;
}

export interface BranchListResponse {
  data: BranchInfo[];
  /** Total number of elements */
  totalElements: number;
  /** Total number of pages */
  totalPages: number;
  /** Page size */
  size: number;
  /** Page number (0-based) */
  number: number;
  /** Number of elements in current page */
  numberOfElements: number;
  /** Is first page */
  first: boolean;
  /** Is last page */
  last: boolean;
  /** Is empty */
  empty: boolean;
}

export interface SessionDetail {
  /** Session ID */
  sessionId: string;
  /** Session creation time */
  createdAt: string;
  /** Last access time */
  lastAccessedAt: string;
  /** Session expiration time */
  expiresAt: string;
  /** IP address */
  ipAddress: string;
  /** Browser user agent */
  userAgent?: string;
  /** Approximate location based on IP */
  location?: JsonNullableString;
  /** Device type (mobile, tablet, desktop) */
  deviceType?: JsonNullableString;
  /** Is this the current session */
  isCurrentSession: boolean;
}

export interface UserSessionsResponse {
  /** List of user sessions */
  sessions: SessionDetail[];
  /** Total number of sessions */
  totalCount: number;
  /** Current session ID */
  currentSessionId: string;
}

export type SessionInfoRolesItem = typeof SessionInfoRolesItem[keyof typeof SessionInfoRolesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SessionInfoRolesItem = {
  OPERATOR: 'OPERATOR',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN',
  CLEANER: 'CLEANER',
  DRIVER: 'DRIVER',
} as const;

export interface SessionInfo {
  /** Session ID */
  sessionId: string;
  /** User ID */
  userId: string;
  /** Username */
  username: string;
  roles?: SessionInfoRolesItem[];
  /** Current branch ID */
  branchId?: JsonNullableUUID;
  /** Current branch name */
  branchName?: JsonNullableString;
  /** Session creation time */
  createdAt: string;
  /** Last access time */
  lastAccessedAt: string;
  /** Session expiration time */
  expiresAt?: string;
  /** IP address */
  ipAddress?: string;
  /** Browser user agent */
  userAgent?: string;
}

export interface ServerTimeResponse {
  /** Current server time in ISO 8601 format (UTC) */
  timestamp: string;
  /** Current server time as Unix epoch milliseconds */
  epochMillis: number;
  /** Server timezone identifier */
  timezone: string;
  /** UTC offset for server timezone */
  utcOffset: string;
  /** Current server date (YYYY-MM-DD) */
  date?: string;
  /** Current server time (HH:mm:ss) */
  time?: string;
}

export interface PasswordPolicyInfo {
  /** Minimum password length */
  minLength: number;
  /** Require uppercase letters */
  requireUppercase: boolean;
  /** Require lowercase letters */
  requireLowercase: boolean;
  /** Require numbers */
  requireNumbers: boolean;
  /** Require special characters */
  requireSpecialChars: boolean;
  /** Allowed special characters */
  allowedSpecialChars?: string;
}

export interface RateLimitingPolicy {
  /** Max failed attempts per user */
  maxAttemptsPerUser: number;
  /** Max failed attempts per IP */
  maxAttemptsPerIp: number;
  /** Lockout duration in minutes */
  lockoutDurationMinutes: number;
  /** Is rate limiting enabled */
  enabled: boolean;
}

export interface SecurityPolicyResponse {
  rateLimiting: RateLimitingPolicy;
  passwordPolicy: PasswordPolicyInfo;
  sessionPolicy: SessionPolicyInfo;
}

export interface SessionPolicyInfo {
  /** Default session timeout in minutes */
  defaultTimeoutMinutes: number;
  /** Max concurrent sessions per user */
  maxConcurrentSessions: number;
  /** Remember me timeout in days */
  rememberMeTimeoutDays: number;
  /** Is session fixation protection enabled */
  sessionFixationProtection?: boolean;
}

export interface BlockedIp {
  /** Blocked IP address */
  ipAddress: string;
  /** Number of failed attempts */
  failedAttempts: number;
  /** Last failed attempt time */
  lastAttemptAt: string;
  /** When block expires */
  blockedUntil: string;
  /** Approximate location */
  location?: JsonNullableString;
  /** Last username attempted from this IP */
  lastUsername?: JsonNullableString;
}

export interface BlockedUser {
  /** Blocked username */
  username: string;
  /** Number of failed attempts */
  failedAttempts: number;
  /** Last failed attempt time */
  lastAttemptAt: string;
  /** When block expires */
  blockedUntil: string;
  /** IP of last attempt */
  lastAttemptIp?: string;
}

export interface LoginAttempt {
  /** Attempt timestamp */
  timestamp: string;
  /** Username attempted */
  username: string;
  /** IP address */
  ipAddress: string;
  /** User agent */
  userAgent?: JsonNullableString;
  /** Approximate location */
  location?: JsonNullableString;
  /** Whether attempt was successful */
  success: boolean;
  /** Reason for failure */
  failureReason?: JsonNullableString;
}

export interface SecurityAttemptsResponse {
  overview: SecurityOverview;
  /**
   * Recent login attempts (last 50)
   * @minItems 0
   * @maxItems 50
   */
  recentAttempts: LoginAttempt[];
  /** Currently blocked users */
  blockedUsers: BlockedUser[];
  /** Currently blocked IP addresses */
  blockedIps: BlockedIp[];
}

export interface SecurityOverview {
  /** Total failed attempts today */
  totalFailedAttemptsToday: number;
  /** Currently blocked users count */
  totalBlockedUsers: number;
  /** Currently blocked IPs count */
  totalBlockedIps: number;
  /** Time of highest attempt rate today */
  peakAttemptTime: string;
  /** Average failed attempts per hour */
  averageAttemptsPerHour?: number;
}

export interface SessionTerminationResponse {
  /** Number of sessions terminated */
  terminatedCount: number;
  /** Success message */
  message: string;
}

export type UploadFileParams = {
/**
 * Directory to upload file to
 */
directory: string;
/**
 * Optional custom filename (without extension)
 */
filename?: string;
};

export type UploadFileBody = {
  /** File to upload */
  file: Blob;
};

