/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * AKSI Dry Cleaning Order System API
 * API for dry cleaning order management system with Domain-Driven Design architecture. The system includes 13 domains: Auth, User, Customer, Branch, Employee, Order, OrderItem, Service, Garment, Pricing, Payment, Notification, and Analytics.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  Base64FileResponse,
  Base64FileUploadRequest,
  ErrorResponse,
  FileInfo,
  FileUploadResponse,
  UploadFileBody,
  UploadFileParams
} from './aKSIDryCleaningOrderSystemAPI.schemas';

import orvalFetcher from '../../../../lib/api/orval-fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Upload file to specified directory with optional filename
 * @summary Upload file
 */
export const uploadFile = (
    uploadFileBody: UploadFileBody,
    params: UploadFileParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      const formData = new FormData();
formData.append(`file`, uploadFileBody.file)

      return orvalFetcher<FileUploadResponse>(
      {url: `/api/files/upload`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData,
        params, signal
    },
      options);
    }
  


export const getUploadFileMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadFile>>, TError,{data: UploadFileBody;params: UploadFileParams}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof uploadFile>>, TError,{data: UploadFileBody;params: UploadFileParams}, TContext> => {

const mutationKey = ['uploadFile'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof uploadFile>>, {data: UploadFileBody;params: UploadFileParams}> = (props) => {
          const {data,params} = props ?? {};

          return  uploadFile(data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UploadFileMutationResult = NonNullable<Awaited<ReturnType<typeof uploadFile>>>
    export type UploadFileMutationBody = UploadFileBody
    export type UploadFileMutationError = ErrorResponse

    /**
 * @summary Upload file
 */
export const useUploadFile = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadFile>>, TError,{data: UploadFileBody;params: UploadFileParams}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof uploadFile>>,
        TError,
        {data: UploadFileBody;params: UploadFileParams},
        TContext
      > => {

      const mutationOptions = getUploadFileMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Upload base64 encoded file data
 * @summary Upload base64 file
 */
export const uploadBase64File = (
    base64FileUploadRequest: Base64FileUploadRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<FileUploadResponse>(
      {url: `/api/files/upload/base64`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: base64FileUploadRequest, signal
    },
      options);
    }
  


export const getUploadBase64FileMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadBase64File>>, TError,{data: Base64FileUploadRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof uploadBase64File>>, TError,{data: Base64FileUploadRequest}, TContext> => {

const mutationKey = ['uploadBase64File'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof uploadBase64File>>, {data: Base64FileUploadRequest}> = (props) => {
          const {data} = props ?? {};

          return  uploadBase64File(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UploadBase64FileMutationResult = NonNullable<Awaited<ReturnType<typeof uploadBase64File>>>
    export type UploadBase64FileMutationBody = Base64FileUploadRequest
    export type UploadBase64FileMutationError = ErrorResponse

    /**
 * @summary Upload base64 file
 */
export const useUploadBase64File = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadBase64File>>, TError,{data: Base64FileUploadRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof uploadBase64File>>,
        TError,
        {data: Base64FileUploadRequest},
        TContext
      > => {

      const mutationOptions = getUploadBase64FileMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Serve uploaded files with proper content type and security checks
 * @summary Serve uploaded file
 */
export const serveFile = (
    filePath: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Blob>(
      {url: `/api/files/${filePath}`, method: 'GET',
        responseType: 'blob', signal
    },
      options);
    }
  

export const getServeFileQueryKey = (filePath?: string,) => {
    return [`/api/files/${filePath}`] as const;
    }

    
export const getServeFileQueryOptions = <TData = Awaited<ReturnType<typeof serveFile>>, TError = ErrorResponse | ErrorResponse>(filePath: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof serveFile>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getServeFileQueryKey(filePath);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof serveFile>>> = ({ signal }) => serveFile(filePath, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(filePath), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof serveFile>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ServeFileQueryResult = NonNullable<Awaited<ReturnType<typeof serveFile>>>
export type ServeFileQueryError = ErrorResponse | ErrorResponse


export function useServeFile<TData = Awaited<ReturnType<typeof serveFile>>, TError = ErrorResponse | ErrorResponse>(
 filePath: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof serveFile>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof serveFile>>,
          TError,
          Awaited<ReturnType<typeof serveFile>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useServeFile<TData = Awaited<ReturnType<typeof serveFile>>, TError = ErrorResponse | ErrorResponse>(
 filePath: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof serveFile>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof serveFile>>,
          TError,
          Awaited<ReturnType<typeof serveFile>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useServeFile<TData = Awaited<ReturnType<typeof serveFile>>, TError = ErrorResponse | ErrorResponse>(
 filePath: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof serveFile>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Serve uploaded file
 */

export function useServeFile<TData = Awaited<ReturnType<typeof serveFile>>, TError = ErrorResponse | ErrorResponse>(
 filePath: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof serveFile>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getServeFileQueryOptions(filePath,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get detailed information about uploaded file
 * @summary Get file information
 */
export const getFileInfo = (
    filePath: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<FileInfo>(
      {url: `/api/files/${filePath}/info`, method: 'GET', signal
    },
      options);
    }
  

export const getGetFileInfoQueryKey = (filePath?: string,) => {
    return [`/api/files/${filePath}/info`] as const;
    }

    
export const getGetFileInfoQueryOptions = <TData = Awaited<ReturnType<typeof getFileInfo>>, TError = ErrorResponse>(filePath: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFileInfo>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFileInfoQueryKey(filePath);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFileInfo>>> = ({ signal }) => getFileInfo(filePath, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(filePath), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFileInfo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetFileInfoQueryResult = NonNullable<Awaited<ReturnType<typeof getFileInfo>>>
export type GetFileInfoQueryError = ErrorResponse


export function useGetFileInfo<TData = Awaited<ReturnType<typeof getFileInfo>>, TError = ErrorResponse>(
 filePath: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFileInfo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFileInfo>>,
          TError,
          Awaited<ReturnType<typeof getFileInfo>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetFileInfo<TData = Awaited<ReturnType<typeof getFileInfo>>, TError = ErrorResponse>(
 filePath: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFileInfo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFileInfo>>,
          TError,
          Awaited<ReturnType<typeof getFileInfo>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetFileInfo<TData = Awaited<ReturnType<typeof getFileInfo>>, TError = ErrorResponse>(
 filePath: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFileInfo>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get file information
 */

export function useGetFileInfo<TData = Awaited<ReturnType<typeof getFileInfo>>, TError = ErrorResponse>(
 filePath: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFileInfo>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetFileInfoQueryOptions(filePath,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Read file content and return as base64 encoded string
 * @summary Get file content as base64
 */
export const getFileAsBase64 = (
    filePath: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Base64FileResponse>(
      {url: `/api/files/${filePath}/base64`, method: 'GET', signal
    },
      options);
    }
  

export const getGetFileAsBase64QueryKey = (filePath?: string,) => {
    return [`/api/files/${filePath}/base64`] as const;
    }

    
export const getGetFileAsBase64QueryOptions = <TData = Awaited<ReturnType<typeof getFileAsBase64>>, TError = ErrorResponse | ErrorResponse>(filePath: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFileAsBase64>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFileAsBase64QueryKey(filePath);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFileAsBase64>>> = ({ signal }) => getFileAsBase64(filePath, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(filePath), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFileAsBase64>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetFileAsBase64QueryResult = NonNullable<Awaited<ReturnType<typeof getFileAsBase64>>>
export type GetFileAsBase64QueryError = ErrorResponse | ErrorResponse


export function useGetFileAsBase64<TData = Awaited<ReturnType<typeof getFileAsBase64>>, TError = ErrorResponse | ErrorResponse>(
 filePath: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFileAsBase64>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFileAsBase64>>,
          TError,
          Awaited<ReturnType<typeof getFileAsBase64>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetFileAsBase64<TData = Awaited<ReturnType<typeof getFileAsBase64>>, TError = ErrorResponse | ErrorResponse>(
 filePath: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFileAsBase64>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFileAsBase64>>,
          TError,
          Awaited<ReturnType<typeof getFileAsBase64>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetFileAsBase64<TData = Awaited<ReturnType<typeof getFileAsBase64>>, TError = ErrorResponse | ErrorResponse>(
 filePath: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFileAsBase64>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get file content as base64
 */

export function useGetFileAsBase64<TData = Awaited<ReturnType<typeof getFileAsBase64>>, TError = ErrorResponse | ErrorResponse>(
 filePath: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFileAsBase64>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetFileAsBase64QueryOptions(filePath,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




