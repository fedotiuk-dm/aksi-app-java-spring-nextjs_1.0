/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * AKSI Dry Cleaning Order System API
 * API for dry cleaning order management system with Domain-Driven Design architecture. The system includes 13 domains: Auth, User, Customer, Branch, Employee, Order, OrderItem, Service, Garment, Pricing, Payment, Notification, and Analytics.
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';

/**
 * Upload file to specified directory with optional filename
 * @summary Upload file
 */
export const uploadFileQueryParams = zod.object({
  "directory": zod.string().describe('Directory to upload file to'),
  "filename": zod.string().optional().describe('Optional custom filename (without extension)')
})

export const uploadFileBody = zod.object({
  "file": zod.instanceof(File).describe('File to upload')
})

export const uploadFileResponse = zod.object({
  "success": zod.boolean().describe('Upload success status'),
  "filePath": zod.string().describe('Relative file path where file was stored'),
  "fileUrl": zod.string().describe('Full URL to access the file'),
  "originalFilename": zod.string().optional().describe('Original filename from upload'),
  "fileSize": zod.number().optional().describe('File size in bytes'),
  "contentType": zod.string().optional().describe('Detected content type'),
  "uploadedAt": zod.iso.datetime({}).describe('Upload timestamp'),
  "uploadedBy": zod.string().optional().describe('User ID who uploaded the file')
})


/**
 * Upload base64 encoded file data
 * @summary Upload base64 file
 */
export const uploadBase64FileBodyDirectoryRegExp = new RegExp('^[a-zA-Z0-9/_\\-]+$');
export const uploadBase64FileBodyFilenameRegExp = new RegExp('^[a-zA-Z0-9_\\-]+$');


export const uploadBase64FileBody = zod.object({
  "base64Data": zod.string().describe('Base64 encoded file data (with or without data URL prefix)'),
  "directory": zod.string().regex(uploadBase64FileBodyDirectoryRegExp).describe('Directory to store file in'),
  "filename": zod.string().regex(uploadBase64FileBodyFilenameRegExp).describe('Filename without extension')
})

export const uploadBase64FileResponse = zod.object({
  "success": zod.boolean().describe('Upload success status'),
  "filePath": zod.string().describe('Relative file path where file was stored'),
  "fileUrl": zod.string().describe('Full URL to access the file'),
  "originalFilename": zod.string().optional().describe('Original filename from upload'),
  "fileSize": zod.number().optional().describe('File size in bytes'),
  "contentType": zod.string().optional().describe('Detected content type'),
  "uploadedAt": zod.iso.datetime({}).describe('Upload timestamp'),
  "uploadedBy": zod.string().optional().describe('User ID who uploaded the file')
})


/**
 * Serve uploaded files with proper content type and security checks
 * @summary Serve uploaded file
 */
export const serveFilePathFilePathRegExp = new RegExp('^[a-zA-Z0-9/_\\-\\.]+$');


export const serveFileParams = zod.object({
  "filePath": zod.string().regex(serveFilePathFilePathRegExp).describe('File path relative to upload directory (supports nested paths)')
})

export const serveFileResponse = zod.instanceof(File)


/**
 * Get detailed information about uploaded file
 * @summary Get file information
 */
export const getFileInfoPathFilePathRegExp = new RegExp('^[a-zA-Z0-9/_\\-\\.]+$');


export const getFileInfoParams = zod.object({
  "filePath": zod.string().regex(getFileInfoPathFilePathRegExp).describe('File path relative to upload directory')
})

export const getFileInfoResponse = zod.object({
  "filePath": zod.string().describe('Relative file path'),
  "fileUrl": zod.string().describe('Full URL to access the file'),
  "exists": zod.boolean().describe('Whether file exists'),
  "fileSize": zod.number().describe('File size in bytes'),
  "contentType": zod.string().optional().describe('Detected content type'),
  "readable": zod.boolean().optional().describe('Whether file is readable'),
  "lastModified": zod.iso.datetime({}).describe('Last modification timestamp')
})


/**
 * Read file content and return as base64 encoded string
 * @summary Get file content as base64
 */
export const getFileAsBase64PathFilePathRegExp = new RegExp('^[a-zA-Z0-9/_\\-\\.]+$');


export const getFileAsBase64Params = zod.object({
  "filePath": zod.string().regex(getFileAsBase64PathFilePathRegExp).describe('File path relative to upload directory')
})

export const getFileAsBase64Response = zod.object({
  "filePath": zod.string().describe('File path that was read'),
  "base64Data": zod.string().describe('Base64 encoded file content'),
  "contentType": zod.string().describe('MIME type of the file'),
  "fileSize": zod.number().describe('Original file size in bytes')
})
