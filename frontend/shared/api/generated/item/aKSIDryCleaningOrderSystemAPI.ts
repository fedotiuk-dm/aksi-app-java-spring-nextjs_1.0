/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AKSI Dry Cleaning Order System API
 * API –¥–ª—è –æ–¥–Ω–æ—Å—Ç–æ—Ä—ñ–Ω–∫–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å —Ö—ñ–º—á–∏—Å—Ç–∫–∏ –∑ DDD –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–æ—é
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CalculateOrderSummaryRequest,
  CreatePriceListItemRequest,
  CreatePriceModifierRequest,
  CreateServiceCategoryRequest,
  DownloadPhotoFileParams,
  ErrorResponse,
  GetCategoryItemsParams,
  GetPriceListParams,
  GetPriceModifiersParams,
  GetServiceCategoriesParams,
  ItemCalculationRequest,
  ItemCalculationResponse,
  ItemPricePreviewResponse,
  OrderSummaryResponse,
  PhotoResponse,
  PriceListItemResponse,
  PriceListPageResponse,
  PriceModifierResponse,
  SearchPriceListItemsParams,
  ServiceCategoryResponse,
  UpdatePhotoMetadataRequest,
  UpdatePriceListItemRequest,
  UpdatePriceModifierRequest,
  UpdateServiceCategoryRequest,
  UploadItemPhotoBody,
  UploadItemPhotoParams,
  ValidationErrorResponse
} from './aKSIDryCleaningOrderSystemAPI.schemas';

import orvalFetcher from '../../../../lib/api/orval-fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑–∞ ID
 */
export const getServiceCategoryById = (
    id: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<ServiceCategoryResponse>(
      {url: `/api/service-categories/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetServiceCategoryByIdQueryKey = (id: string,) => {
    return [`/api/service-categories/${id}`] as const;
    }

    
export const getGetServiceCategoryByIdQueryOptions = <TData = Awaited<ReturnType<typeof getServiceCategoryById>>, TError = ErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceCategoryById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServiceCategoryByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServiceCategoryById>>> = ({ signal }) => getServiceCategoryById(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServiceCategoryById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetServiceCategoryByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getServiceCategoryById>>>
export type GetServiceCategoryByIdQueryError = ErrorResponse


export function useGetServiceCategoryById<TData = Awaited<ReturnType<typeof getServiceCategoryById>>, TError = ErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceCategoryById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServiceCategoryById>>,
          TError,
          Awaited<ReturnType<typeof getServiceCategoryById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetServiceCategoryById<TData = Awaited<ReturnType<typeof getServiceCategoryById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceCategoryById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServiceCategoryById>>,
          TError,
          Awaited<ReturnType<typeof getServiceCategoryById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetServiceCategoryById<TData = Awaited<ReturnType<typeof getServiceCategoryById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceCategoryById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑–∞ ID
 */

export function useGetServiceCategoryById<TData = Awaited<ReturnType<typeof getServiceCategoryById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceCategoryById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetServiceCategoryByIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary –û–Ω–æ–≤–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
 */
export const updateServiceCategory = (
    id: string,
    updateServiceCategoryRequest: UpdateServiceCategoryRequest,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<ServiceCategoryResponse>(
      {url: `/api/service-categories/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateServiceCategoryRequest
    },
      options);
    }
  


export const getUpdateServiceCategoryMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateServiceCategory>>, TError,{id: string;data: UpdateServiceCategoryRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof updateServiceCategory>>, TError,{id: string;data: UpdateServiceCategoryRequest}, TContext> => {

const mutationKey = ['updateServiceCategory'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateServiceCategory>>, {id: string;data: UpdateServiceCategoryRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updateServiceCategory(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateServiceCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof updateServiceCategory>>>
    export type UpdateServiceCategoryMutationBody = UpdateServiceCategoryRequest
    export type UpdateServiceCategoryMutationError = ErrorResponse

    /**
 * @summary –û–Ω–æ–≤–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
 */
export const useUpdateServiceCategory = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateServiceCategory>>, TError,{id: string;data: UpdateServiceCategoryRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateServiceCategory>>,
        TError,
        {id: string;data: UpdateServiceCategoryRequest},
        TContext
      > => {

      const mutationOptions = getUpdateServiceCategoryMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
 */
export const deleteServiceCategory = (
    id: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<void>(
      {url: `/api/service-categories/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteServiceCategoryMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteServiceCategory>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteServiceCategory>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteServiceCategory'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteServiceCategory>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteServiceCategory(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteServiceCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof deleteServiceCategory>>>
    
    export type DeleteServiceCategoryMutationError = ErrorResponse

    /**
 * @summary –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
 */
export const useDeleteServiceCategory = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteServiceCategory>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteServiceCategory>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteServiceCategoryMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞ ID
 */
export const getPriceModifierById = (
    id: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<PriceModifierResponse>(
      {url: `/api/price-modifiers/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceModifierByIdQueryKey = (id: string,) => {
    return [`/api/price-modifiers/${id}`] as const;
    }

    
export const getGetPriceModifierByIdQueryOptions = <TData = Awaited<ReturnType<typeof getPriceModifierById>>, TError = ErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceModifierById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceModifierByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceModifierById>>> = ({ signal }) => getPriceModifierById(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceModifierById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPriceModifierByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceModifierById>>>
export type GetPriceModifierByIdQueryError = ErrorResponse


export function useGetPriceModifierById<TData = Awaited<ReturnType<typeof getPriceModifierById>>, TError = ErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceModifierById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceModifierById>>,
          TError,
          Awaited<ReturnType<typeof getPriceModifierById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPriceModifierById<TData = Awaited<ReturnType<typeof getPriceModifierById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceModifierById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceModifierById>>,
          TError,
          Awaited<ReturnType<typeof getPriceModifierById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPriceModifierById<TData = Awaited<ReturnType<typeof getPriceModifierById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceModifierById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞ ID
 */

export function useGetPriceModifierById<TData = Awaited<ReturnType<typeof getPriceModifierById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceModifierById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPriceModifierByIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary –û–Ω–æ–≤–∏—Ç–∏ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä
 */
export const updatePriceModifier = (
    id: string,
    updatePriceModifierRequest: UpdatePriceModifierRequest,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<PriceModifierResponse>(
      {url: `/api/price-modifiers/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updatePriceModifierRequest
    },
      options);
    }
  


export const getUpdatePriceModifierMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePriceModifier>>, TError,{id: string;data: UpdatePriceModifierRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof updatePriceModifier>>, TError,{id: string;data: UpdatePriceModifierRequest}, TContext> => {

const mutationKey = ['updatePriceModifier'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePriceModifier>>, {id: string;data: UpdatePriceModifierRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updatePriceModifier(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePriceModifierMutationResult = NonNullable<Awaited<ReturnType<typeof updatePriceModifier>>>
    export type UpdatePriceModifierMutationBody = UpdatePriceModifierRequest
    export type UpdatePriceModifierMutationError = ErrorResponse

    /**
 * @summary –û–Ω–æ–≤–∏—Ç–∏ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä
 */
export const useUpdatePriceModifier = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePriceModifier>>, TError,{id: string;data: UpdatePriceModifierRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updatePriceModifier>>,
        TError,
        {id: string;data: UpdatePriceModifierRequest},
        TContext
      > => {

      const mutationOptions = getUpdatePriceModifierMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary –í–∏–¥–∞–ª–∏—Ç–∏ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä
 */
export const deletePriceModifier = (
    id: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<void>(
      {url: `/api/price-modifiers/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeletePriceModifierMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePriceModifier>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof deletePriceModifier>>, TError,{id: string}, TContext> => {

const mutationKey = ['deletePriceModifier'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePriceModifier>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deletePriceModifier(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePriceModifierMutationResult = NonNullable<Awaited<ReturnType<typeof deletePriceModifier>>>
    
    export type DeletePriceModifierMutationError = ErrorResponse

    /**
 * @summary –í–∏–¥–∞–ª–∏—Ç–∏ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä
 */
export const useDeletePriceModifier = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePriceModifier>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deletePriceModifier>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeletePriceModifierMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ –∑–∞ ID
 */
export const getPriceListItem = (
    id: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<PriceListItemResponse>(
      {url: `/api/price-list/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceListItemQueryKey = (id: string,) => {
    return [`/api/price-list/${id}`] as const;
    }

    
export const getGetPriceListItemQueryOptions = <TData = Awaited<ReturnType<typeof getPriceListItem>>, TError = ErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceListItem>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceListItemQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceListItem>>> = ({ signal }) => getPriceListItem(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceListItem>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPriceListItemQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceListItem>>>
export type GetPriceListItemQueryError = ErrorResponse


export function useGetPriceListItem<TData = Awaited<ReturnType<typeof getPriceListItem>>, TError = ErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceListItem>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceListItem>>,
          TError,
          Awaited<ReturnType<typeof getPriceListItem>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPriceListItem<TData = Awaited<ReturnType<typeof getPriceListItem>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceListItem>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceListItem>>,
          TError,
          Awaited<ReturnType<typeof getPriceListItem>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPriceListItem<TData = Awaited<ReturnType<typeof getPriceListItem>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceListItem>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ –∑–∞ ID
 */

export function useGetPriceListItem<TData = Awaited<ReturnType<typeof getPriceListItem>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceListItem>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPriceListItemQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
 */
export const updatePriceListItem = (
    id: string,
    updatePriceListItemRequest: UpdatePriceListItemRequest,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<PriceListItemResponse>(
      {url: `/api/price-list/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updatePriceListItemRequest
    },
      options);
    }
  


export const getUpdatePriceListItemMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePriceListItem>>, TError,{id: string;data: UpdatePriceListItemRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof updatePriceListItem>>, TError,{id: string;data: UpdatePriceListItemRequest}, TContext> => {

const mutationKey = ['updatePriceListItem'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePriceListItem>>, {id: string;data: UpdatePriceListItemRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updatePriceListItem(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePriceListItemMutationResult = NonNullable<Awaited<ReturnType<typeof updatePriceListItem>>>
    export type UpdatePriceListItemMutationBody = UpdatePriceListItemRequest
    export type UpdatePriceListItemMutationError = ErrorResponse

    /**
 * @summary –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
 */
export const useUpdatePriceListItem = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePriceListItem>>, TError,{id: string;data: UpdatePriceListItemRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updatePriceListItem>>,
        TError,
        {id: string;data: UpdatePriceListItemRequest},
        TContext
      > => {

      const mutationOptions = getUpdatePriceListItemMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –∑ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
 */
export const deletePriceListItem = (
    id: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<void>(
      {url: `/api/price-list/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeletePriceListItemMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePriceListItem>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof deletePriceListItem>>, TError,{id: string}, TContext> => {

const mutationKey = ['deletePriceListItem'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePriceListItem>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deletePriceListItem(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePriceListItemMutationResult = NonNullable<Awaited<ReturnType<typeof deletePriceListItem>>>
    
    export type DeletePriceListItemMutationError = ErrorResponse

    /**
 * @summary –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –∑ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
 */
export const useDeletePriceListItem = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePriceListItem>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deletePriceListItem>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeletePriceListItemMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –∑–∞ ID
 */
export const getPhotoById = (
    photoId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<PhotoResponse>(
      {url: `/api/photos/${photoId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPhotoByIdQueryKey = (photoId: string,) => {
    return [`/api/photos/${photoId}`] as const;
    }

    
export const getGetPhotoByIdQueryOptions = <TData = Awaited<ReturnType<typeof getPhotoById>>, TError = ErrorResponse>(photoId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhotoById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPhotoByIdQueryKey(photoId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPhotoById>>> = ({ signal }) => getPhotoById(photoId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(photoId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPhotoById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPhotoByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getPhotoById>>>
export type GetPhotoByIdQueryError = ErrorResponse


export function useGetPhotoById<TData = Awaited<ReturnType<typeof getPhotoById>>, TError = ErrorResponse>(
 photoId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhotoById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPhotoById>>,
          TError,
          Awaited<ReturnType<typeof getPhotoById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPhotoById<TData = Awaited<ReturnType<typeof getPhotoById>>, TError = ErrorResponse>(
 photoId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhotoById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPhotoById>>,
          TError,
          Awaited<ReturnType<typeof getPhotoById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPhotoById<TData = Awaited<ReturnType<typeof getPhotoById>>, TError = ErrorResponse>(
 photoId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhotoById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –∑–∞ ID
 */

export function useGetPhotoById<TData = Awaited<ReturnType<typeof getPhotoById>>, TError = ErrorResponse>(
 photoId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPhotoById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPhotoByIdQueryOptions(photoId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary –û–Ω–æ–≤–∏—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó
 */
export const updatePhotoMetadata = (
    photoId: string,
    updatePhotoMetadataRequest: UpdatePhotoMetadataRequest,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<PhotoResponse>(
      {url: `/api/photos/${photoId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updatePhotoMetadataRequest
    },
      options);
    }
  


export const getUpdatePhotoMetadataMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePhotoMetadata>>, TError,{photoId: string;data: UpdatePhotoMetadataRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof updatePhotoMetadata>>, TError,{photoId: string;data: UpdatePhotoMetadataRequest}, TContext> => {

const mutationKey = ['updatePhotoMetadata'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePhotoMetadata>>, {photoId: string;data: UpdatePhotoMetadataRequest}> = (props) => {
          const {photoId,data} = props ?? {};

          return  updatePhotoMetadata(photoId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePhotoMetadataMutationResult = NonNullable<Awaited<ReturnType<typeof updatePhotoMetadata>>>
    export type UpdatePhotoMetadataMutationBody = UpdatePhotoMetadataRequest
    export type UpdatePhotoMetadataMutationError = ErrorResponse

    /**
 * @summary –û–Ω–æ–≤–∏—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó
 */
export const useUpdatePhotoMetadata = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePhotoMetadata>>, TError,{photoId: string;data: UpdatePhotoMetadataRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updatePhotoMetadata>>,
        TError,
        {photoId: string;data: UpdatePhotoMetadataRequest},
        TContext
      > => {

      const mutationOptions = getUpdatePhotoMetadataMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary –í–∏–¥–∞–ª–∏—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é
 */
export const deletePhoto = (
    photoId: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<void>(
      {url: `/api/photos/${photoId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeletePhotoMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePhoto>>, TError,{photoId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof deletePhoto>>, TError,{photoId: string}, TContext> => {

const mutationKey = ['deletePhoto'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePhoto>>, {photoId: string}> = (props) => {
          const {photoId} = props ?? {};

          return  deletePhoto(photoId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePhotoMutationResult = NonNullable<Awaited<ReturnType<typeof deletePhoto>>>
    
    export type DeletePhotoMutationError = ErrorResponse

    /**
 * @summary –í–∏–¥–∞–ª–∏—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é
 */
export const useDeletePhoto = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePhoto>>, TError,{photoId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deletePhoto>>,
        TError,
        {photoId: string},
        TContext
      > => {

      const mutationOptions = getDeletePhotoMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø–æ—Å–ª—É–≥
 */
export const getServiceCategories = (
    params?: GetServiceCategoriesParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<ServiceCategoryResponse[]>(
      {url: `/api/service-categories`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetServiceCategoriesQueryKey = (params?: GetServiceCategoriesParams,) => {
    return [`/api/service-categories`, ...(params ? [params]: [])] as const;
    }

    
export const getGetServiceCategoriesQueryOptions = <TData = Awaited<ReturnType<typeof getServiceCategories>>, TError = unknown>(params?: GetServiceCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceCategories>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServiceCategoriesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServiceCategories>>> = ({ signal }) => getServiceCategories(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServiceCategories>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetServiceCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getServiceCategories>>>
export type GetServiceCategoriesQueryError = unknown


export function useGetServiceCategories<TData = Awaited<ReturnType<typeof getServiceCategories>>, TError = unknown>(
 params: undefined |  GetServiceCategoriesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceCategories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServiceCategories>>,
          TError,
          Awaited<ReturnType<typeof getServiceCategories>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetServiceCategories<TData = Awaited<ReturnType<typeof getServiceCategories>>, TError = unknown>(
 params?: GetServiceCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceCategories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServiceCategories>>,
          TError,
          Awaited<ReturnType<typeof getServiceCategories>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetServiceCategories<TData = Awaited<ReturnType<typeof getServiceCategories>>, TError = unknown>(
 params?: GetServiceCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceCategories>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø–æ—Å–ª—É–≥
 */

export function useGetServiceCategories<TData = Awaited<ReturnType<typeof getServiceCategories>>, TError = unknown>(
 params?: GetServiceCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceCategories>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetServiceCategoriesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
 */
export const createServiceCategory = (
    createServiceCategoryRequest: CreateServiceCategoryRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<ServiceCategoryResponse>(
      {url: `/api/service-categories`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createServiceCategoryRequest, signal
    },
      options);
    }
  


export const getCreateServiceCategoryMutationOptions = <TError = ValidationErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createServiceCategory>>, TError,{data: CreateServiceCategoryRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof createServiceCategory>>, TError,{data: CreateServiceCategoryRequest}, TContext> => {

const mutationKey = ['createServiceCategory'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createServiceCategory>>, {data: CreateServiceCategoryRequest}> = (props) => {
          const {data} = props ?? {};

          return  createServiceCategory(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateServiceCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof createServiceCategory>>>
    export type CreateServiceCategoryMutationBody = CreateServiceCategoryRequest
    export type CreateServiceCategoryMutationError = ValidationErrorResponse

    /**
 * @summary –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
 */
export const useCreateServiceCategory = <TError = ValidationErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createServiceCategory>>, TError,{data: CreateServiceCategoryRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createServiceCategory>>,
        TError,
        {data: CreateServiceCategoryRequest},
        TContext
      > => {

      const mutationOptions = getCreateServiceCategoryMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä—ñ–≤
 */
export const getPriceModifiers = (
    params?: GetPriceModifiersParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<PriceModifierResponse[]>(
      {url: `/api/price-modifiers`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetPriceModifiersQueryKey = (params?: GetPriceModifiersParams,) => {
    return [`/api/price-modifiers`, ...(params ? [params]: [])] as const;
    }

    
export const getGetPriceModifiersQueryOptions = <TData = Awaited<ReturnType<typeof getPriceModifiers>>, TError = unknown>(params?: GetPriceModifiersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceModifiers>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceModifiersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceModifiers>>> = ({ signal }) => getPriceModifiers(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceModifiers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPriceModifiersQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceModifiers>>>
export type GetPriceModifiersQueryError = unknown


export function useGetPriceModifiers<TData = Awaited<ReturnType<typeof getPriceModifiers>>, TError = unknown>(
 params: undefined |  GetPriceModifiersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceModifiers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceModifiers>>,
          TError,
          Awaited<ReturnType<typeof getPriceModifiers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPriceModifiers<TData = Awaited<ReturnType<typeof getPriceModifiers>>, TError = unknown>(
 params?: GetPriceModifiersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceModifiers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceModifiers>>,
          TError,
          Awaited<ReturnType<typeof getPriceModifiers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPriceModifiers<TData = Awaited<ReturnType<typeof getPriceModifiers>>, TError = unknown>(
 params?: GetPriceModifiersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceModifiers>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä—ñ–≤
 */

export function useGetPriceModifiers<TData = Awaited<ReturnType<typeof getPriceModifiers>>, TError = unknown>(
 params?: GetPriceModifiersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceModifiers>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPriceModifiersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä
 */
export const createPriceModifier = (
    createPriceModifierRequest: CreatePriceModifierRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<PriceModifierResponse>(
      {url: `/api/price-modifiers`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createPriceModifierRequest, signal
    },
      options);
    }
  


export const getCreatePriceModifierMutationOptions = <TError = ValidationErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPriceModifier>>, TError,{data: CreatePriceModifierRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof createPriceModifier>>, TError,{data: CreatePriceModifierRequest}, TContext> => {

const mutationKey = ['createPriceModifier'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createPriceModifier>>, {data: CreatePriceModifierRequest}> = (props) => {
          const {data} = props ?? {};

          return  createPriceModifier(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreatePriceModifierMutationResult = NonNullable<Awaited<ReturnType<typeof createPriceModifier>>>
    export type CreatePriceModifierMutationBody = CreatePriceModifierRequest
    export type CreatePriceModifierMutationError = ValidationErrorResponse

    /**
 * @summary –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä
 */
export const useCreatePriceModifier = <TError = ValidationErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPriceModifier>>, TError,{data: CreatePriceModifierRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createPriceModifier>>,
        TError,
        {data: CreatePriceModifierRequest},
        TContext
      > => {

      const mutationOptions = getCreatePriceModifierMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
 */
export const getPriceList = (
    params?: GetPriceListParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<PriceListPageResponse>(
      {url: `/api/price-list`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetPriceListQueryKey = (params?: GetPriceListParams,) => {
    return [`/api/price-list`, ...(params ? [params]: [])] as const;
    }

    
export const getGetPriceListQueryOptions = <TData = Awaited<ReturnType<typeof getPriceList>>, TError = unknown>(params?: GetPriceListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceList>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceList>>> = ({ signal }) => getPriceList(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPriceListQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceList>>>
export type GetPriceListQueryError = unknown


export function useGetPriceList<TData = Awaited<ReturnType<typeof getPriceList>>, TError = unknown>(
 params: undefined |  GetPriceListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceList>>,
          TError,
          Awaited<ReturnType<typeof getPriceList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPriceList<TData = Awaited<ReturnType<typeof getPriceList>>, TError = unknown>(
 params?: GetPriceListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceList>>,
          TError,
          Awaited<ReturnType<typeof getPriceList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPriceList<TData = Awaited<ReturnType<typeof getPriceList>>, TError = unknown>(
 params?: GetPriceListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceList>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
 */

export function useGetPriceList<TData = Awaited<ReturnType<typeof getPriceList>>, TError = unknown>(
 params?: GetPriceListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceList>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPriceListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary –î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
 */
export const createPriceListItem = (
    createPriceListItemRequest: CreatePriceListItemRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<PriceListItemResponse>(
      {url: `/api/price-list`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createPriceListItemRequest, signal
    },
      options);
    }
  


export const getCreatePriceListItemMutationOptions = <TError = ValidationErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPriceListItem>>, TError,{data: CreatePriceListItemRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof createPriceListItem>>, TError,{data: CreatePriceListItemRequest}, TContext> => {

const mutationKey = ['createPriceListItem'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createPriceListItem>>, {data: CreatePriceListItemRequest}> = (props) => {
          const {data} = props ?? {};

          return  createPriceListItem(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreatePriceListItemMutationResult = NonNullable<Awaited<ReturnType<typeof createPriceListItem>>>
    export type CreatePriceListItemMutationBody = CreatePriceListItemRequest
    export type CreatePriceListItemMutationError = ValidationErrorResponse

    /**
 * @summary –î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
 */
export const useCreatePriceListItem = <TError = ValidationErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPriceListItem>>, TError,{data: CreatePriceListItemRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createPriceListItem>>,
        TError,
        {data: CreatePriceListItemRequest},
        TContext
      > => {

      const mutationOptions = getCreatePriceListItemMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó –ø—Ä–µ–¥–º–µ—Ç–∞
 */
export const getItemPhotos = (
    itemId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<PhotoResponse[]>(
      {url: `/api/items/${itemId}/photos`, method: 'GET', signal
    },
      options);
    }
  

export const getGetItemPhotosQueryKey = (itemId: string,) => {
    return [`/api/items/${itemId}/photos`] as const;
    }

    
export const getGetItemPhotosQueryOptions = <TData = Awaited<ReturnType<typeof getItemPhotos>>, TError = ErrorResponse>(itemId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemPhotos>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetItemPhotosQueryKey(itemId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getItemPhotos>>> = ({ signal }) => getItemPhotos(itemId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(itemId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getItemPhotos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetItemPhotosQueryResult = NonNullable<Awaited<ReturnType<typeof getItemPhotos>>>
export type GetItemPhotosQueryError = ErrorResponse


export function useGetItemPhotos<TData = Awaited<ReturnType<typeof getItemPhotos>>, TError = ErrorResponse>(
 itemId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemPhotos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getItemPhotos>>,
          TError,
          Awaited<ReturnType<typeof getItemPhotos>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetItemPhotos<TData = Awaited<ReturnType<typeof getItemPhotos>>, TError = ErrorResponse>(
 itemId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemPhotos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getItemPhotos>>,
          TError,
          Awaited<ReturnType<typeof getItemPhotos>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetItemPhotos<TData = Awaited<ReturnType<typeof getItemPhotos>>, TError = ErrorResponse>(
 itemId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemPhotos>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó –ø—Ä–µ–¥–º–µ—Ç–∞
 */

export function useGetItemPhotos<TData = Awaited<ReturnType<typeof getItemPhotos>>, TError = ErrorResponse>(
 itemId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getItemPhotos>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetItemPhotosQueryOptions(itemId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –ø—Ä–µ–¥–º–µ—Ç–∞
 */
export const uploadItemPhoto = (
    itemId: string,
    uploadItemPhotoBody: UploadItemPhotoBody,
    params: UploadItemPhotoParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      const formData = new FormData();
formData.append(`file`, uploadItemPhotoBody.file)

      return orvalFetcher<PhotoResponse>(
      {url: `/api/items/${itemId}/photos`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData,
        params, signal
    },
      options);
    }
  


export const getUploadItemPhotoMutationOptions = <TError = ValidationErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadItemPhoto>>, TError,{itemId: string;data: UploadItemPhotoBody;params: UploadItemPhotoParams}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof uploadItemPhoto>>, TError,{itemId: string;data: UploadItemPhotoBody;params: UploadItemPhotoParams}, TContext> => {

const mutationKey = ['uploadItemPhoto'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof uploadItemPhoto>>, {itemId: string;data: UploadItemPhotoBody;params: UploadItemPhotoParams}> = (props) => {
          const {itemId,data,params} = props ?? {};

          return  uploadItemPhoto(itemId,data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UploadItemPhotoMutationResult = NonNullable<Awaited<ReturnType<typeof uploadItemPhoto>>>
    export type UploadItemPhotoMutationBody = UploadItemPhotoBody
    export type UploadItemPhotoMutationError = ValidationErrorResponse | ErrorResponse

    /**
 * @summary –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –ø—Ä–µ–¥–º–µ—Ç–∞
 */
export const useUploadItemPhoto = <TError = ValidationErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadItemPhoto>>, TError,{itemId: string;data: UploadItemPhotoBody;params: UploadItemPhotoParams}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof uploadItemPhoto>>,
        TError,
        {itemId: string;data: UploadItemPhotoBody;params: UploadItemPhotoParams},
        TContext
      > => {

      const mutationOptions = getUploadItemPhotoMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const calculateOrderSummary = (
    calculateOrderSummaryRequest: CalculateOrderSummaryRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<OrderSummaryResponse>(
      {url: `/api/calculate/order-summary`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: calculateOrderSummaryRequest, signal
    },
      options);
    }
  


export const getCalculateOrderSummaryMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof calculateOrderSummary>>, TError,{data: CalculateOrderSummaryRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof calculateOrderSummary>>, TError,{data: CalculateOrderSummaryRequest}, TContext> => {

const mutationKey = ['calculateOrderSummary'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof calculateOrderSummary>>, {data: CalculateOrderSummaryRequest}> = (props) => {
          const {data} = props ?? {};

          return  calculateOrderSummary(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CalculateOrderSummaryMutationResult = NonNullable<Awaited<ReturnType<typeof calculateOrderSummary>>>
    export type CalculateOrderSummaryMutationBody = CalculateOrderSummaryRequest
    export type CalculateOrderSummaryMutationError = unknown

    /**
 * @summary –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const useCalculateOrderSummary = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof calculateOrderSummary>>, TError,{data: CalculateOrderSummaryRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof calculateOrderSummary>>,
        TError,
        {data: CalculateOrderSummaryRequest},
        TContext
      > => {

      const mutationOptions = getCalculateOrderSummaryMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞ –∑ —É—Å—ñ–º–∞ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞–º–∏
 */
export const calculateItemPrice = (
    itemCalculationRequest: ItemCalculationRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<ItemCalculationResponse>(
      {url: `/api/calculate/item`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: itemCalculationRequest, signal
    },
      options);
    }
  


export const getCalculateItemPriceMutationOptions = <TError = ValidationErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof calculateItemPrice>>, TError,{data: ItemCalculationRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof calculateItemPrice>>, TError,{data: ItemCalculationRequest}, TContext> => {

const mutationKey = ['calculateItemPrice'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof calculateItemPrice>>, {data: ItemCalculationRequest}> = (props) => {
          const {data} = props ?? {};

          return  calculateItemPrice(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CalculateItemPriceMutationResult = NonNullable<Awaited<ReturnType<typeof calculateItemPrice>>>
    export type CalculateItemPriceMutationBody = ItemCalculationRequest
    export type CalculateItemPriceMutationError = ValidationErrorResponse | ErrorResponse

    /**
 * @summary –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞ –∑ —É—Å—ñ–º–∞ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞–º–∏
 */
export const useCalculateItemPrice = <TError = ValidationErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof calculateItemPrice>>, TError,{data: ItemCalculationRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof calculateItemPrice>>,
        TError,
        {data: ItemCalculationRequest},
        TContext
      > => {

      const mutationOptions = getCalculateItemPriceMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –®–≤–∏–¥–∫–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
 * @summary –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
 */
export const previewItemPrice = (
    itemCalculationRequest: ItemCalculationRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<ItemPricePreviewResponse>(
      {url: `/api/calculate/item/preview`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: itemCalculationRequest, signal
    },
      options);
    }
  


export const getPreviewItemPriceMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof previewItemPrice>>, TError,{data: ItemCalculationRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof previewItemPrice>>, TError,{data: ItemCalculationRequest}, TContext> => {

const mutationKey = ['previewItemPrice'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof previewItemPrice>>, {data: ItemCalculationRequest}> = (props) => {
          const {data} = props ?? {};

          return  previewItemPrice(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PreviewItemPriceMutationResult = NonNullable<Awaited<ReturnType<typeof previewItemPrice>>>
    export type PreviewItemPriceMutationBody = ItemCalculationRequest
    export type PreviewItemPriceMutationError = unknown

    /**
 * @summary –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
 */
export const usePreviewItemPrice = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof previewItemPrice>>, TError,{data: ItemCalculationRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof previewItemPrice>>,
        TError,
        {data: ItemCalculationRequest},
        TContext
      > => {

      const mutationOptions = getPreviewItemPriceMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
 */
export const getCategoryItems = (
    id: string,
    params?: GetCategoryItemsParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<PriceListItemResponse[]>(
      {url: `/api/service-categories/${id}/items`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetCategoryItemsQueryKey = (id: string,
    params?: GetCategoryItemsParams,) => {
    return [`/api/service-categories/${id}/items`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCategoryItemsQueryOptions = <TData = Awaited<ReturnType<typeof getCategoryItems>>, TError = unknown>(id: string,
    params?: GetCategoryItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryItems>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCategoryItemsQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategoryItems>>> = ({ signal }) => getCategoryItems(id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCategoryItems>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCategoryItemsQueryResult = NonNullable<Awaited<ReturnType<typeof getCategoryItems>>>
export type GetCategoryItemsQueryError = unknown


export function useGetCategoryItems<TData = Awaited<ReturnType<typeof getCategoryItems>>, TError = unknown>(
 id: string,
    params: undefined |  GetCategoryItemsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryItems>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoryItems>>,
          TError,
          Awaited<ReturnType<typeof getCategoryItems>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCategoryItems<TData = Awaited<ReturnType<typeof getCategoryItems>>, TError = unknown>(
 id: string,
    params?: GetCategoryItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryItems>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoryItems>>,
          TError,
          Awaited<ReturnType<typeof getCategoryItems>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCategoryItems<TData = Awaited<ReturnType<typeof getCategoryItems>>, TError = unknown>(
 id: string,
    params?: GetCategoryItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryItems>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
 */

export function useGetCategoryItems<TData = Awaited<ReturnType<typeof getCategoryItems>>, TError = unknown>(
 id: string,
    params?: GetCategoryItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoryItems>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCategoryItemsQueryOptions(id,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞ –∫–æ–¥–æ–º
 */
export const getPriceModifierByCode = (
    code: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<PriceModifierResponse>(
      {url: `/api/price-modifiers/by-code/${code}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriceModifierByCodeQueryKey = (code: string,) => {
    return [`/api/price-modifiers/by-code/${code}`] as const;
    }

    
export const getGetPriceModifierByCodeQueryOptions = <TData = Awaited<ReturnType<typeof getPriceModifierByCode>>, TError = ErrorResponse>(code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceModifierByCode>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceModifierByCodeQueryKey(code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceModifierByCode>>> = ({ signal }) => getPriceModifierByCode(code, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceModifierByCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPriceModifierByCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceModifierByCode>>>
export type GetPriceModifierByCodeQueryError = ErrorResponse


export function useGetPriceModifierByCode<TData = Awaited<ReturnType<typeof getPriceModifierByCode>>, TError = ErrorResponse>(
 code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceModifierByCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceModifierByCode>>,
          TError,
          Awaited<ReturnType<typeof getPriceModifierByCode>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPriceModifierByCode<TData = Awaited<ReturnType<typeof getPriceModifierByCode>>, TError = ErrorResponse>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceModifierByCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceModifierByCode>>,
          TError,
          Awaited<ReturnType<typeof getPriceModifierByCode>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPriceModifierByCode<TData = Awaited<ReturnType<typeof getPriceModifierByCode>>, TError = ErrorResponse>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceModifierByCode>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞ –∫–æ–¥–æ–º
 */

export function useGetPriceModifierByCode<TData = Awaited<ReturnType<typeof getPriceModifierByCode>>, TError = ErrorResponse>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceModifierByCode>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPriceModifierByCodeQueryOptions(code,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary –ü–æ—à—É–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –≤–∏–±–æ—Ä—É
 */
export const searchPriceListItems = (
    params: SearchPriceListItemsParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<PriceListItemResponse[]>(
      {url: `/api/price-list/search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSearchPriceListItemsQueryKey = (params: SearchPriceListItemsParams,) => {
    return [`/api/price-list/search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchPriceListItemsQueryOptions = <TData = Awaited<ReturnType<typeof searchPriceListItems>>, TError = unknown>(params: SearchPriceListItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchPriceListItems>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchPriceListItemsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchPriceListItems>>> = ({ signal }) => searchPriceListItems(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchPriceListItems>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchPriceListItemsQueryResult = NonNullable<Awaited<ReturnType<typeof searchPriceListItems>>>
export type SearchPriceListItemsQueryError = unknown


export function useSearchPriceListItems<TData = Awaited<ReturnType<typeof searchPriceListItems>>, TError = unknown>(
 params: SearchPriceListItemsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchPriceListItems>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchPriceListItems>>,
          TError,
          Awaited<ReturnType<typeof searchPriceListItems>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchPriceListItems<TData = Awaited<ReturnType<typeof searchPriceListItems>>, TError = unknown>(
 params: SearchPriceListItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchPriceListItems>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchPriceListItems>>,
          TError,
          Awaited<ReturnType<typeof searchPriceListItems>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchPriceListItems<TData = Awaited<ReturnType<typeof searchPriceListItems>>, TError = unknown>(
 params: SearchPriceListItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchPriceListItems>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ—à—É–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –≤–∏–±–æ—Ä—É
 */

export function useSearchPriceListItems<TData = Awaited<ReturnType<typeof searchPriceListItems>>, TError = unknown>(
 params: SearchPriceListItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchPriceListItems>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchPriceListItemsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó
 */
export const downloadPhotoFile = (
    photoId: string,
    params?: DownloadPhotoFileParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Blob>(
      {url: `/api/photos/${photoId}/file`, method: 'GET',
        params,
        responseType: 'blob', signal
    },
      options);
    }
  

export const getDownloadPhotoFileQueryKey = (photoId: string,
    params?: DownloadPhotoFileParams,) => {
    return [`/api/photos/${photoId}/file`, ...(params ? [params]: [])] as const;
    }

    
export const getDownloadPhotoFileQueryOptions = <TData = Awaited<ReturnType<typeof downloadPhotoFile>>, TError = ErrorResponse>(photoId: string,
    params?: DownloadPhotoFileParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadPhotoFile>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDownloadPhotoFileQueryKey(photoId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof downloadPhotoFile>>> = ({ signal }) => downloadPhotoFile(photoId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(photoId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof downloadPhotoFile>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DownloadPhotoFileQueryResult = NonNullable<Awaited<ReturnType<typeof downloadPhotoFile>>>
export type DownloadPhotoFileQueryError = ErrorResponse


export function useDownloadPhotoFile<TData = Awaited<ReturnType<typeof downloadPhotoFile>>, TError = ErrorResponse>(
 photoId: string,
    params: undefined |  DownloadPhotoFileParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadPhotoFile>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof downloadPhotoFile>>,
          TError,
          Awaited<ReturnType<typeof downloadPhotoFile>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDownloadPhotoFile<TData = Awaited<ReturnType<typeof downloadPhotoFile>>, TError = ErrorResponse>(
 photoId: string,
    params?: DownloadPhotoFileParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadPhotoFile>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof downloadPhotoFile>>,
          TError,
          Awaited<ReturnType<typeof downloadPhotoFile>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDownloadPhotoFile<TData = Awaited<ReturnType<typeof downloadPhotoFile>>, TError = ErrorResponse>(
 photoId: string,
    params?: DownloadPhotoFileParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadPhotoFile>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó
 */

export function useDownloadPhotoFile<TData = Awaited<ReturnType<typeof downloadPhotoFile>>, TError = ErrorResponse>(
 photoId: string,
    params?: DownloadPhotoFileParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadPhotoFile>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDownloadPhotoFileQueryOptions(photoId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




