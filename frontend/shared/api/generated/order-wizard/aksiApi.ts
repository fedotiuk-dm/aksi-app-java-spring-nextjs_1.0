/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * AKSI API
 * API –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–ª—ñ–Ω—ñ–Ω–≥–æ–≤–æ—é –∫–æ–º–ø–∞–Ω—ñ—î—é AKSI
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CancelWizard200,
  CompleteWizard200,
  CreateOrderRequest,
  ErrorResponse,
  ExecuteAction200,
  ExecuteActionBody,
  GetActiveWizards200,
  GetAllAvailableActions200,
  GetAvailableActions200,
  OrderWizardDataResponse,
  OrderWizardSessionResponse
} from './aksiApi.schemas';

import orvalFetcher from '../../../../lib/api/orval-fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const completeWizard = (
    wizardId: string,
    createOrderRequest: CreateOrderRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<CompleteWizard200>(
      {url: `/api/order-wizard/${wizardId}/complete`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createOrderRequest, signal
    },
      options);
    }
  


export const getCompleteWizardMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof completeWizard>>, TError,{wizardId: string;data: CreateOrderRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof completeWizard>>, TError,{wizardId: string;data: CreateOrderRequest}, TContext> => {

const mutationKey = ['completeWizard'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof completeWizard>>, {wizardId: string;data: CreateOrderRequest}> = (props) => {
          const {wizardId,data} = props ?? {};

          return  completeWizard(wizardId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CompleteWizardMutationResult = NonNullable<Awaited<ReturnType<typeof completeWizard>>>
    export type CompleteWizardMutationBody = CreateOrderRequest
    export type CompleteWizardMutationError = ErrorResponse

    export const useCompleteWizard = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof completeWizard>>, TError,{wizardId: string;data: CreateOrderRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof completeWizard>>,
        TError,
        {wizardId: string;data: CreateOrderRequest},
        TContext
      > => {

      const mutationOptions = getCompleteWizardMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –í–∏–∫–æ–Ω—É—î –ø–µ–≤–Ω—É –¥—ñ—é –≤ wizard –Ω–∞ –æ—Å–Ω–æ–≤—ñ OrderWizardAction enum
 * @summary –í–∏–∫–æ–Ω–∞—Ç–∏ –¥—ñ—é –≤ Order Wizard
 */
export const executeAction = (
    wizardId: string,
    actionName: string,
    executeActionBody: ExecuteActionBody,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<ExecuteAction200>(
      {url: `/api/order-wizard/${wizardId}/action/${actionName}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: executeActionBody, signal
    },
      options);
    }
  


export const getExecuteActionMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof executeAction>>, TError,{wizardId: string;actionName: string;data: ExecuteActionBody}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof executeAction>>, TError,{wizardId: string;actionName: string;data: ExecuteActionBody}, TContext> => {

const mutationKey = ['executeAction'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof executeAction>>, {wizardId: string;actionName: string;data: ExecuteActionBody}> = (props) => {
          const {wizardId,actionName,data} = props ?? {};

          return  executeAction(wizardId,actionName,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ExecuteActionMutationResult = NonNullable<Awaited<ReturnType<typeof executeAction>>>
    export type ExecuteActionMutationBody = ExecuteActionBody
    export type ExecuteActionMutationError = ErrorResponse

    /**
 * @summary –í–∏–∫–æ–Ω–∞—Ç–∏ –¥—ñ—é –≤ Order Wizard
 */
export const useExecuteAction = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof executeAction>>, TError,{wizardId: string;actionName: string;data: ExecuteActionBody}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof executeAction>>,
        TError,
        {wizardId: string;actionName: string;data: ExecuteActionBody},
        TContext
      > => {

      const mutationOptions = getExecuteActionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É —Å–µ—Å—ñ—é Order Wizard –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * @summary –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π Order Wizard
 */
export const createWizard = (
    
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<OrderWizardSessionResponse>(
      {url: `/api/order-wizard/create`, method: 'POST', signal
    },
      options);
    }
  


export const getCreateWizardMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createWizard>>, TError,void, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof createWizard>>, TError,void, TContext> => {

const mutationKey = ['createWizard'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createWizard>>, void> = () => {
          

          return  createWizard(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateWizardMutationResult = NonNullable<Awaited<ReturnType<typeof createWizard>>>
    
    export type CreateWizardMutationError = ErrorResponse

    /**
 * @summary –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π Order Wizard
 */
export const useCreateWizard = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createWizard>>, TError,void, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createWizard>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getCreateWizardMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω wizard —Ç–∞ –≤—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞–Ω Order Wizard
 */
export const getWizardState = (
    wizardId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<OrderWizardDataResponse>(
      {url: `/api/order-wizard/${wizardId}/state`, method: 'GET', signal
    },
      options);
    }
  

export const getGetWizardStateQueryKey = (wizardId: string,) => {
    return [`/api/order-wizard/${wizardId}/state`] as const;
    }

    
export const getGetWizardStateInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getWizardState>>>, TError = ErrorResponse>(wizardId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWizardState>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWizardStateQueryKey(wizardId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWizardState>>> = ({ signal }) => getWizardState(wizardId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(wizardId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWizardState>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWizardStateInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getWizardState>>>
export type GetWizardStateInfiniteQueryError = ErrorResponse


export function useGetWizardStateInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getWizardState>>>, TError = ErrorResponse>(
 wizardId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWizardState>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWizardState>>,
          TError,
          Awaited<ReturnType<typeof getWizardState>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWizardStateInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getWizardState>>>, TError = ErrorResponse>(
 wizardId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWizardState>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWizardState>>,
          TError,
          Awaited<ReturnType<typeof getWizardState>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWizardStateInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getWizardState>>>, TError = ErrorResponse>(
 wizardId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWizardState>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞–Ω Order Wizard
 */

export function useGetWizardStateInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getWizardState>>>, TError = ErrorResponse>(
 wizardId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWizardState>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWizardStateInfiniteQueryOptions(wizardId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetWizardStateQueryOptions = <TData = Awaited<ReturnType<typeof getWizardState>>, TError = ErrorResponse>(wizardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWizardState>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWizardStateQueryKey(wizardId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWizardState>>> = ({ signal }) => getWizardState(wizardId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(wizardId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWizardState>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWizardStateQueryResult = NonNullable<Awaited<ReturnType<typeof getWizardState>>>
export type GetWizardStateQueryError = ErrorResponse


export function useGetWizardState<TData = Awaited<ReturnType<typeof getWizardState>>, TError = ErrorResponse>(
 wizardId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWizardState>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWizardState>>,
          TError,
          Awaited<ReturnType<typeof getWizardState>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWizardState<TData = Awaited<ReturnType<typeof getWizardState>>, TError = ErrorResponse>(
 wizardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWizardState>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWizardState>>,
          TError,
          Awaited<ReturnType<typeof getWizardState>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWizardState<TData = Awaited<ReturnType<typeof getWizardState>>, TError = ErrorResponse>(
 wizardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWizardState>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞–Ω Order Wizard
 */

export function useGetWizardState<TData = Awaited<ReturnType<typeof getWizardState>>, TError = ErrorResponse>(
 wizardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWizardState>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWizardStateQueryOptions(wizardId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥—ñ–π –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É wizard
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó –¥–ª—è Order Wizard
 */
export const getAvailableActions = (
    wizardId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<GetAvailableActions200>(
      {url: `/api/order-wizard/${wizardId}/actions`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAvailableActionsQueryKey = (wizardId: string,) => {
    return [`/api/order-wizard/${wizardId}/actions`] as const;
    }

    
export const getGetAvailableActionsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAvailableActions>>>, TError = ErrorResponse>(wizardId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAvailableActions>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAvailableActionsQueryKey(wizardId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAvailableActions>>> = ({ signal }) => getAvailableActions(wizardId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(wizardId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAvailableActions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAvailableActionsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAvailableActions>>>
export type GetAvailableActionsInfiniteQueryError = ErrorResponse


export function useGetAvailableActionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAvailableActions>>>, TError = ErrorResponse>(
 wizardId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAvailableActions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAvailableActions>>,
          TError,
          Awaited<ReturnType<typeof getAvailableActions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAvailableActionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAvailableActions>>>, TError = ErrorResponse>(
 wizardId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAvailableActions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAvailableActions>>,
          TError,
          Awaited<ReturnType<typeof getAvailableActions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAvailableActionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAvailableActions>>>, TError = ErrorResponse>(
 wizardId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAvailableActions>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó –¥–ª—è Order Wizard
 */

export function useGetAvailableActionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAvailableActions>>>, TError = ErrorResponse>(
 wizardId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAvailableActions>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAvailableActionsInfiniteQueryOptions(wizardId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAvailableActionsQueryOptions = <TData = Awaited<ReturnType<typeof getAvailableActions>>, TError = ErrorResponse>(wizardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableActions>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAvailableActionsQueryKey(wizardId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAvailableActions>>> = ({ signal }) => getAvailableActions(wizardId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(wizardId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAvailableActions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAvailableActionsQueryResult = NonNullable<Awaited<ReturnType<typeof getAvailableActions>>>
export type GetAvailableActionsQueryError = ErrorResponse


export function useGetAvailableActions<TData = Awaited<ReturnType<typeof getAvailableActions>>, TError = ErrorResponse>(
 wizardId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableActions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAvailableActions>>,
          TError,
          Awaited<ReturnType<typeof getAvailableActions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAvailableActions<TData = Awaited<ReturnType<typeof getAvailableActions>>, TError = ErrorResponse>(
 wizardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableActions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAvailableActions>>,
          TError,
          Awaited<ReturnType<typeof getAvailableActions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAvailableActions<TData = Awaited<ReturnType<typeof getAvailableActions>>, TError = ErrorResponse>(
 wizardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableActions>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó –¥–ª—è Order Wizard
 */

export function useGetAvailableActions<TData = Awaited<ReturnType<typeof getAvailableActions>>, TError = ErrorResponse>(
 wizardId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableActions>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAvailableActionsQueryOptions(wizardId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –¥—ñ–π, —è–∫—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ –≤ wizard
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ –¥—ñ—ó Order Wizard
 */
export const getAllAvailableActions = (
    
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<GetAllAvailableActions200>(
      {url: `/api/order-wizard/available-actions`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAllAvailableActionsQueryKey = () => {
    return [`/api/order-wizard/available-actions`] as const;
    }

    
export const getGetAllAvailableActionsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAllAvailableActions>>>, TError = ErrorResponse>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllAvailableActions>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllAvailableActionsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllAvailableActions>>> = ({ signal }) => getAllAvailableActions(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllAvailableActions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllAvailableActionsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAllAvailableActions>>>
export type GetAllAvailableActionsInfiniteQueryError = ErrorResponse


export function useGetAllAvailableActionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllAvailableActions>>>, TError = ErrorResponse>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllAvailableActions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllAvailableActions>>,
          TError,
          Awaited<ReturnType<typeof getAllAvailableActions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllAvailableActionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllAvailableActions>>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllAvailableActions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllAvailableActions>>,
          TError,
          Awaited<ReturnType<typeof getAllAvailableActions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllAvailableActionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllAvailableActions>>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllAvailableActions>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ –¥—ñ—ó Order Wizard
 */

export function useGetAllAvailableActionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllAvailableActions>>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllAvailableActions>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllAvailableActionsInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAllAvailableActionsQueryOptions = <TData = Awaited<ReturnType<typeof getAllAvailableActions>>, TError = ErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAvailableActions>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllAvailableActionsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllAvailableActions>>> = ({ signal }) => getAllAvailableActions(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllAvailableActions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllAvailableActionsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllAvailableActions>>>
export type GetAllAvailableActionsQueryError = ErrorResponse


export function useGetAllAvailableActions<TData = Awaited<ReturnType<typeof getAllAvailableActions>>, TError = ErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAvailableActions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllAvailableActions>>,
          TError,
          Awaited<ReturnType<typeof getAllAvailableActions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllAvailableActions<TData = Awaited<ReturnType<typeof getAllAvailableActions>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAvailableActions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllAvailableActions>>,
          TError,
          Awaited<ReturnType<typeof getAllAvailableActions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllAvailableActions<TData = Awaited<ReturnType<typeof getAllAvailableActions>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAvailableActions>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ –¥—ñ—ó Order Wizard
 */

export function useGetAllAvailableActions<TData = Awaited<ReturnType<typeof getAllAvailableActions>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAvailableActions>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllAvailableActionsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getActiveWizards = (
    
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<GetActiveWizards200>(
      {url: `/api/order-wizard/active`, method: 'GET', signal
    },
      options);
    }
  

export const getGetActiveWizardsQueryKey = () => {
    return [`/api/order-wizard/active`] as const;
    }

    
export const getGetActiveWizardsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getActiveWizards>>>, TError = ErrorResponse>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getActiveWizards>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetActiveWizardsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getActiveWizards>>> = ({ signal }) => getActiveWizards(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getActiveWizards>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetActiveWizardsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getActiveWizards>>>
export type GetActiveWizardsInfiniteQueryError = ErrorResponse


export function useGetActiveWizardsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getActiveWizards>>>, TError = ErrorResponse>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getActiveWizards>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getActiveWizards>>,
          TError,
          Awaited<ReturnType<typeof getActiveWizards>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetActiveWizardsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getActiveWizards>>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getActiveWizards>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getActiveWizards>>,
          TError,
          Awaited<ReturnType<typeof getActiveWizards>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetActiveWizardsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getActiveWizards>>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getActiveWizards>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetActiveWizardsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getActiveWizards>>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getActiveWizards>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetActiveWizardsInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetActiveWizardsQueryOptions = <TData = Awaited<ReturnType<typeof getActiveWizards>>, TError = ErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getActiveWizards>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetActiveWizardsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getActiveWizards>>> = ({ signal }) => getActiveWizards(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getActiveWizards>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetActiveWizardsQueryResult = NonNullable<Awaited<ReturnType<typeof getActiveWizards>>>
export type GetActiveWizardsQueryError = ErrorResponse


export function useGetActiveWizards<TData = Awaited<ReturnType<typeof getActiveWizards>>, TError = ErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getActiveWizards>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getActiveWizards>>,
          TError,
          Awaited<ReturnType<typeof getActiveWizards>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetActiveWizards<TData = Awaited<ReturnType<typeof getActiveWizards>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getActiveWizards>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getActiveWizards>>,
          TError,
          Awaited<ReturnType<typeof getActiveWizards>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetActiveWizards<TData = Awaited<ReturnType<typeof getActiveWizards>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getActiveWizards>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetActiveWizards<TData = Awaited<ReturnType<typeof getActiveWizards>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getActiveWizards>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetActiveWizardsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const cancelWizard = (
    wizardId: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<CancelWizard200>(
      {url: `/api/order-wizard/${wizardId}`, method: 'DELETE'
    },
      options);
    }
  


export const getCancelWizardMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cancelWizard>>, TError,{wizardId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof cancelWizard>>, TError,{wizardId: string}, TContext> => {

const mutationKey = ['cancelWizard'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cancelWizard>>, {wizardId: string}> = (props) => {
          const {wizardId} = props ?? {};

          return  cancelWizard(wizardId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CancelWizardMutationResult = NonNullable<Awaited<ReturnType<typeof cancelWizard>>>
    
    export type CancelWizardMutationError = ErrorResponse

    export const useCancelWizard = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cancelWizard>>, TError,{wizardId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof cancelWizard>>,
        TError,
        {wizardId: string},
        TContext
      > => {

      const mutationOptions = getCancelWizardMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
