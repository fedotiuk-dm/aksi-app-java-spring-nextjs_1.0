/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * AKSI Dry Cleaning Order System API
 * API for dry cleaning order management system with Domain-Driven Design architecture. The system includes 13 domains: Auth, User, Customer, Branch, Employee, Order, OrderItem, Service, Garment, Pricing, Payment, Notification, and Analytics.
 * OpenAPI spec version: 1.0.0
 */
export interface BranchAssignment {
  /** Branch ID */
  branchId: string;
  /** Branch name */
  branchName: string;
  /** Is this the primary branch */
  isPrimary: boolean;
}

export type UserDetailRolesItem = typeof UserDetailRolesItem[keyof typeof UserDetailRolesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserDetailRolesItem = {
  OPERATOR: 'OPERATOR',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN',
  CLEANER: 'CLEANER',
  DRIVER: 'DRIVER',
  ACCOUNTANT: 'ACCOUNTANT',
} as const;

export interface UserDetail {
  /** User ID */
  id: string;
  /** Username */
  username: string;
  /** First name */
  firstName: string;
  /** Last name */
  lastName: string;
  /** Email address */
  email: string;
  /**
   * @minItems 1
   * @maxItems 2147483647
   */
  roles: UserDetailRolesItem[];
  /** Is user active */
  active: boolean;
  /** Primary branch ID */
  primaryBranchId?: string;
  /** Primary branch name */
  primaryBranchName?: string;
  /** Creation timestamp */
  createdAt: string;
  /** Last login timestamp */
  lastLoginAt?: string;
  /**
   * Phone number
   * @pattern ^\+?[0-9]{10,15}$
   */
  phone?: string;
  /** Calculated permissions based on roles */
  permissions: string[];
  /** Assigned branches */
  branches: BranchAssignment[];
  /** Last update timestamp */
  updatedAt: string;
  /** ID of user who created this user */
  createdBy?: string;
  /** ID of user who last updated this user */
  updatedBy?: string;
}

export interface ErrorResponse {
  /** Error timestamp */
  timestamp: string;
  /** HTTP status code */
  status: number;
  /** Error name */
  error: string;
  /** Error message */
  message: string;
  /** Request path */
  path: string;
  errors?: JsonNullableListErrorDetail;
}

export interface JsonNullableListErrorDetail {
  present?: boolean;
}

export type UpdateRolesRequestRolesItem = typeof UpdateRolesRequestRolesItem[keyof typeof UpdateRolesRequestRolesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateRolesRequestRolesItem = {
  OPERATOR: 'OPERATOR',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN',
  CLEANER: 'CLEANER',
  DRIVER: 'DRIVER',
  ACCOUNTANT: 'ACCOUNTANT',
} as const;

export interface UpdateRolesRequest {
  /**
   * New set of roles
   * @minItems 1
   * @maxItems 2147483647
   */
  roles: UpdateRolesRequestRolesItem[];
}

export interface ChangePasswordRequest {
  /** Current password (required if changing own password) */
  currentPassword?: string;
  /**
   * New password
   * @minLength 8
   * @maxLength 100
   */
  newPassword: string;
}

export interface UserBranchesResponse {
  branches: BranchAssignment[];
}

export interface UpdateBranchesRequest {
  /** Branch IDs to assign */
  branchIds: string[];
  /** Primary branch ID (must be in branchIds if provided) */
  primaryBranchId?: string;
}

export type CreateUserRequestRolesItem = typeof CreateUserRequestRolesItem[keyof typeof CreateUserRequestRolesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUserRequestRolesItem = {
  OPERATOR: 'OPERATOR',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN',
  CLEANER: 'CLEANER',
  DRIVER: 'DRIVER',
  ACCOUNTANT: 'ACCOUNTANT',
} as const;

export interface CreateUserRequest {
  /**
   * Username
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9_]+$
   */
  username: string;
  /**
   * Password
   * @minLength 8
   * @maxLength 100
   */
  password: string;
  /**
   * First name
   * @minLength 1
   * @maxLength 100
   */
  firstName: string;
  /**
   * Last name
   * @minLength 1
   * @maxLength 100
   */
  lastName: string;
  /** Email address */
  email: string;
  /**
   * Phone number
   * @pattern ^\+?[0-9]{10,15}$
   */
  phone?: string;
  /**
   * User roles
   * @minItems 1
   * @maxItems 2147483647
   */
  roles: CreateUserRequestRolesItem[];
  /** Branch IDs to assign */
  branchIds?: string[];
  /** Primary branch ID (must be in branchIds if provided) */
  primaryBranchId?: string;
}

export type ServiceInfoCategory = typeof ServiceInfoCategory[keyof typeof ServiceInfoCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceInfoCategory = {
  CLOTHING: 'CLOTHING',
  LAUNDRY: 'LAUNDRY',
  IRONING: 'IRONING',
  LEATHER: 'LEATHER',
  PADDING: 'PADDING',
  FUR: 'FUR',
  DYEING: 'DYEING',
  ADDITIONAL_SERVICES: 'ADDITIONAL_SERVICES',
} as const;

export type ServiceInfoAllowedProcessingTimesItem = typeof ServiceInfoAllowedProcessingTimesItem[keyof typeof ServiceInfoAllowedProcessingTimesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceInfoAllowedProcessingTimesItem = {
  EXPRESS_1H: 'EXPRESS_1H',
  EXPRESS_4H: 'EXPRESS_4H',
  SAME_DAY: 'SAME_DAY',
  NEXT_DAY: 'NEXT_DAY',
  STANDARD_2D: 'STANDARD_2D',
  STANDARD_3D: 'STANDARD_3D',
  EXTENDED: 'EXTENDED',
} as const;

export interface ServiceInfo {
  /** Service ID */
  id: string;
  /** Service code */
  code: string;
  /** Service name */
  name: string;
  /** Ukrainian name */
  nameUa?: string;
  /** Service description */
  description?: string;
  category: ServiceInfoCategory;
  /** Category code from price list */
  categoryCode?: string;
  /** Icon identifier */
  icon?: string;
  /**
   * Display color
   * @pattern ^#[0-9A-Fa-f]{6}$
   */
  color?: string;
  /** Is service active */
  active: boolean;
  /** Display sort order */
  sortOrder: number;
  /** Available processing times */
  allowedProcessingTimes?: ServiceInfoAllowedProcessingTimesItem[];
  /** Requires special handling */
  requiresSpecialHandling?: boolean;
  /** Service tags */
  tags?: string[];
}

export type CreateServiceInfoRequestCategory = typeof CreateServiceInfoRequestCategory[keyof typeof CreateServiceInfoRequestCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateServiceInfoRequestCategory = {
  CLOTHING: 'CLOTHING',
  LAUNDRY: 'LAUNDRY',
  IRONING: 'IRONING',
  LEATHER: 'LEATHER',
  PADDING: 'PADDING',
  FUR: 'FUR',
  DYEING: 'DYEING',
  ADDITIONAL_SERVICES: 'ADDITIONAL_SERVICES',
} as const;

export type CreateServiceInfoRequestAllowedProcessingTimesItem = typeof CreateServiceInfoRequestAllowedProcessingTimesItem[keyof typeof CreateServiceInfoRequestAllowedProcessingTimesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateServiceInfoRequestAllowedProcessingTimesItem = {
  EXPRESS_1H: 'EXPRESS_1H',
  EXPRESS_4H: 'EXPRESS_4H',
  SAME_DAY: 'SAME_DAY',
  NEXT_DAY: 'NEXT_DAY',
  STANDARD_2D: 'STANDARD_2D',
  STANDARD_3D: 'STANDARD_3D',
  EXTENDED: 'EXTENDED',
} as const;

export interface CreateServiceInfoRequest {
  /**
   * Service code
   * @minLength 2
   * @maxLength 50
   * @pattern ^[A-Z_]+$
   */
  code: string;
  /**
   * Service name
   * @minLength 2
   * @maxLength 100
   */
  name: string;
  /**
   * Ukrainian name
   * @minLength 2
   * @maxLength 100
   */
  nameUa: string;
  /**
   * Service description
   * @minLength 0
   * @maxLength 500
   */
  description?: string;
  category: CreateServiceInfoRequestCategory;
  /** Icon identifier */
  icon?: string;
  /**
   * Display color
   * @pattern ^#[0-9A-Fa-f]{6}$
   */
  color?: string;
  /** Display sort order */
  sortOrder?: number;
  allowedProcessingTimes?: CreateServiceInfoRequestAllowedProcessingTimesItem[];
  requiresSpecialHandling?: boolean;
  tags?: string[];
}

export type ItemInfoCategory = typeof ItemInfoCategory[keyof typeof ItemInfoCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemInfoCategory = {
  CLOTHING: 'CLOTHING',
  FOOTWEAR: 'FOOTWEAR',
  ACCESSORIES: 'ACCESSORIES',
  HOME_TEXTILES: 'HOME_TEXTILES',
  LEATHER_GOODS: 'LEATHER_GOODS',
  FUR: 'FUR',
  WEDDING: 'WEDDING',
  SPECIAL: 'SPECIAL',
} as const;

export interface ItemInfo {
  /** Item ID */
  id: string;
  /** Item code */
  code: string;
  /** Item name */
  name: string;
  /** Ukrainian name */
  nameUa?: string;
  /** Plural form */
  pluralName?: string;
  /** Ukrainian plural form */
  pluralNameUa?: string;
  /** Item description */
  description?: string;
  category: ItemInfoCategory;
  /** Catalog number from price list */
  catalogNumber?: number;
  /** Service category code from price list */
  serviceCategoryCode?: string;
  /** Unit of measure */
  unitOfMeasure?: string;
  /**
   * Base price in kopiykas (1 kopiykas = 0.01 UAH)
   * @minimum 0
   * @maximum 999999999
   */
  basePrice?: number;
  /**
   * Price for black dyeing in kopiykas (1 kopiykas = 0.01 UAH)
   * @minimum 0
   * @maximum 999999999
   */
  priceBlack?: number;
  /**
   * Price for color dyeing in kopiykas (1 kopiykas = 0.01 UAH)
   * @minimum 0
   * @maximum 999999999
   */
  priceColor?: number;
  /** Icon identifier */
  icon?: string;
  /** Is item active */
  active: boolean;
  /** Display sort order */
  sortOrder: number;
  /** Available attributes (material, color, etc.) */
  attributes?: string[];
  /** Item tags */
  tags?: string[];
}

export type ServiceItemInfoProcessingTime = typeof ServiceItemInfoProcessingTime[keyof typeof ServiceItemInfoProcessingTime];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceItemInfoProcessingTime = {
  EXPRESS_1H: 'EXPRESS_1H',
  EXPRESS_4H: 'EXPRESS_4H',
  SAME_DAY: 'SAME_DAY',
  NEXT_DAY: 'NEXT_DAY',
  STANDARD_2D: 'STANDARD_2D',
  STANDARD_3D: 'STANDARD_3D',
  EXTENDED: 'EXTENDED',
} as const;

export interface ServiceItemInfo {
  /** Service-item combination ID */
  id: string;
  /** Service ID */
  serviceId: string;
  /** Item ID */
  itemId: string;
  service: ServiceInfo;
  item: ItemInfo;
  /**
   * Base price in kopiykas (1 kopiykas = 0.01 UAH)
   * @minimum 0
   * @maximum 999999999
   */
  basePrice: number;
  /**
   * Branch-specific price in kopiykas (1 kopiykas = 0.01 UAH)
   * @minimum 0
   * @maximum 999999999
   */
  branchPrice?: number;
  processingTime: ServiceItemInfoProcessingTime;
  /** Express service available */
  expressAvailable?: boolean;
  /** Express price multiplier */
  expressMultiplier?: number;
  /**
   * Price for black dyeing in kopiykas (1 kopiykas = 0.01 UAH)
   * @minimum 0
   * @maximum 999999999
   */
  priceBlack?: number;
  /**
   * Price for color dyeing in kopiykas (1 kopiykas = 0.01 UAH)
   * @minimum 0
   * @maximum 999999999
   */
  priceColor?: number;
  /** Is combination active */
  active: boolean;
  /** Minimum order quantity */
  minQuantity?: number;
  /** Maximum order quantity */
  maxQuantity?: number;
  /** Special handling instructions */
  specialInstructions?: string;
  /** Popularity score for sorting */
  popularityScore?: number;
}

export type CreateServiceItemInfoRequestProcessingTime = typeof CreateServiceItemInfoRequestProcessingTime[keyof typeof CreateServiceItemInfoRequestProcessingTime];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateServiceItemInfoRequestProcessingTime = {
  EXPRESS_1H: 'EXPRESS_1H',
  EXPRESS_4H: 'EXPRESS_4H',
  SAME_DAY: 'SAME_DAY',
  NEXT_DAY: 'NEXT_DAY',
  STANDARD_2D: 'STANDARD_2D',
  STANDARD_3D: 'STANDARD_3D',
  EXTENDED: 'EXTENDED',
} as const;

export interface CreateServiceItemInfoRequest {
  /** Service ID */
  serviceId: string;
  /** Item ID */
  itemId: string;
  /**
   * Base price in kopiykas (1 kopiykas = 0.01 UAH)
   * @minimum 0
   * @maximum 999999999
   */
  basePrice: number;
  processingTime: CreateServiceItemInfoRequestProcessingTime;
  expressAvailable?: boolean;
  /** @minimum 1 */
  expressMultiplier?: number;
  /** @minimum 1 */
  minQuantity?: number;
  /** @minimum 1 */
  maxQuantity?: number;
  /**
   * @minLength 0
   * @maxLength 500
   */
  specialInstructions?: string;
}

export type CreateItemInfoRequestCategory = typeof CreateItemInfoRequestCategory[keyof typeof CreateItemInfoRequestCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateItemInfoRequestCategory = {
  CLOTHING: 'CLOTHING',
  FOOTWEAR: 'FOOTWEAR',
  ACCESSORIES: 'ACCESSORIES',
  HOME_TEXTILES: 'HOME_TEXTILES',
  LEATHER_GOODS: 'LEATHER_GOODS',
  FUR: 'FUR',
  WEDDING: 'WEDDING',
  SPECIAL: 'SPECIAL',
} as const;

export interface CreateItemInfoRequest {
  /**
   * Item code
   * @minLength 2
   * @maxLength 50
   * @pattern ^[A-Z_]+$
   */
  code: string;
  /**
   * Item name
   * @minLength 2
   * @maxLength 100
   */
  name: string;
  /**
   * Ukrainian name
   * @minLength 2
   * @maxLength 100
   */
  nameUa: string;
  /**
   * Plural form
   * @minLength 2
   * @maxLength 100
   */
  pluralName?: string;
  /**
   * Ukrainian plural form
   * @minLength 2
   * @maxLength 100
   */
  pluralNameUa?: string;
  /**
   * Item description
   * @minLength 0
   * @maxLength 500
   */
  description?: string;
  category: CreateItemInfoRequestCategory;
  /** Icon identifier */
  icon?: string;
  /** Display sort order */
  sortOrder?: number;
  attributes?: string[];
  tags?: string[];
}

export interface JsonNullableString {
  present?: boolean;
}

export interface JsonNullableUUID {
  present?: boolean;
}

export interface LoginResponse {
  /** User ID */
  userId: string;
  /** Username */
  username: string;
  /** First name */
  firstName?: string;
  /** Last name */
  lastName?: string;
  /**
   * User roles
   * @minItems 1
   * @maxItems 2147483647
   */
  roles: string[];
  /** User permissions */
  permissions?: string[];
  /** Current branch ID */
  branchId?: JsonNullableUUID;
  /** Current branch name */
  branchName?: JsonNullableString;
  /** Whether branch selection is required */
  requiresBranchSelection: boolean;
}

export interface LoginRequest {
  /**
   * Operator username
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9_]+$
   */
  username: string;
  /**
   * Password
   * @minLength 8
   * @maxLength 100
   */
  password: string;
  /** Remember session for 30 days */
  rememberMe?: boolean;
  /** Branch ID for login (optional, can be selected later) */
  branchId?: JsonNullableUUID;
}

export interface UpdateUserRequest {
  /**
   * First name
   * @minLength 1
   * @maxLength 100
   */
  firstName?: string;
  /**
   * Last name
   * @minLength 1
   * @maxLength 100
   */
  lastName?: string;
  /** Email address */
  email?: string;
  /**
   * Phone number
   * @pattern ^\+?[0-9]{10,15}$
   */
  phone?: string;
}

export type UpdateServiceInfoRequestAllowedProcessingTimesItem = typeof UpdateServiceInfoRequestAllowedProcessingTimesItem[keyof typeof UpdateServiceInfoRequestAllowedProcessingTimesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateServiceInfoRequestAllowedProcessingTimesItem = {
  EXPRESS_1H: 'EXPRESS_1H',
  EXPRESS_4H: 'EXPRESS_4H',
  SAME_DAY: 'SAME_DAY',
  NEXT_DAY: 'NEXT_DAY',
  STANDARD_2D: 'STANDARD_2D',
  STANDARD_3D: 'STANDARD_3D',
  EXTENDED: 'EXTENDED',
} as const;

export interface UpdateServiceInfoRequest {
  /**
   * @minLength 2
   * @maxLength 100
   */
  name?: string;
  /**
   * @minLength 2
   * @maxLength 100
   */
  nameUa?: string;
  /**
   * @minLength 0
   * @maxLength 500
   */
  description?: string;
  icon?: string;
  /** @pattern ^#[0-9A-Fa-f]{6}$ */
  color?: string;
  active?: boolean;
  sortOrder?: number;
  allowedProcessingTimes?: UpdateServiceInfoRequestAllowedProcessingTimesItem[];
  requiresSpecialHandling?: boolean;
  tags?: string[];
}

export type UpdateServiceItemInfoRequestProcessingTime = typeof UpdateServiceItemInfoRequestProcessingTime[keyof typeof UpdateServiceItemInfoRequestProcessingTime];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateServiceItemInfoRequestProcessingTime = {
  EXPRESS_1H: 'EXPRESS_1H',
  EXPRESS_4H: 'EXPRESS_4H',
  SAME_DAY: 'SAME_DAY',
  NEXT_DAY: 'NEXT_DAY',
  STANDARD_2D: 'STANDARD_2D',
  STANDARD_3D: 'STANDARD_3D',
  EXTENDED: 'EXTENDED',
} as const;

export interface UpdateServiceItemInfoRequest {
  /** @minimum 0 */
  basePrice?: number;
  processingTime?: UpdateServiceItemInfoRequestProcessingTime;
  expressAvailable?: boolean;
  /** @minimum 1 */
  expressMultiplier?: number;
  active?: boolean;
  /** @minimum 1 */
  minQuantity?: number;
  /** @minimum 1 */
  maxQuantity?: number;
  /**
   * @minLength 0
   * @maxLength 500
   */
  specialInstructions?: string;
  /** @minimum 0 */
  popularityScore?: number;
}

export interface UpdateItemInfoRequest {
  /**
   * @minLength 2
   * @maxLength 100
   */
  name?: string;
  /**
   * @minLength 2
   * @maxLength 100
   */
  nameUa?: string;
  /**
   * @minLength 2
   * @maxLength 100
   */
  pluralName?: string;
  /**
   * @minLength 2
   * @maxLength 100
   */
  pluralNameUa?: string;
  /**
   * @minLength 0
   * @maxLength 500
   */
  description?: string;
  icon?: string;
  active?: boolean;
  sortOrder?: number;
  attributes?: string[];
  tags?: string[];
}

export interface UserListResponse {
  data: UserSummary[];
  /** Total number of elements */
  totalElements: number;
  /** Total number of pages */
  totalPages: number;
  /** Page size */
  size: number;
  /** Current page number (0-based) */
  number: number;
  /** Number of elements in current page */
  numberOfElements: number;
  /** Is first page */
  first: boolean;
  /** Is last page */
  last: boolean;
  /** Is page empty */
  empty: boolean;
}

export type UserSummaryRolesItem = typeof UserSummaryRolesItem[keyof typeof UserSummaryRolesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserSummaryRolesItem = {
  OPERATOR: 'OPERATOR',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN',
  CLEANER: 'CLEANER',
  DRIVER: 'DRIVER',
  ACCOUNTANT: 'ACCOUNTANT',
} as const;

export interface UserSummary {
  /** User ID */
  id: string;
  /** Username */
  username: string;
  /** First name */
  firstName: string;
  /** Last name */
  lastName: string;
  /** Email address */
  email: string;
  /**
   * @minItems 1
   * @maxItems 2147483647
   */
  roles: UserSummaryRolesItem[];
  /** Is user active */
  active: boolean;
  /** Primary branch ID */
  primaryBranchId?: string;
  /** Primary branch name */
  primaryBranchName?: string;
  /** Creation timestamp */
  createdAt: string;
  /** Last login timestamp */
  lastLoginAt?: string;
}

export interface ListServicesResponse {
  services: ServiceInfo[];
}

export interface ListServiceItemsResponse {
  serviceItems: ServiceItemInfo[];
  /**
   * Total number of service items available
   * @minimum 0
   */
  totalCount: number;
}

/**
 * Service category code
 */
export type PriceListItemInfoCategoryCode = typeof PriceListItemInfoCategoryCode[keyof typeof PriceListItemInfoCategoryCode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PriceListItemInfoCategoryCode = {
  CLOTHING: 'CLOTHING',
  LAUNDRY: 'LAUNDRY',
  IRONING: 'IRONING',
  LEATHER: 'LEATHER',
  PADDING: 'PADDING',
  FUR: 'FUR',
  DYEING: 'DYEING',
  ADDITIONAL_SERVICES: 'ADDITIONAL_SERVICES',
} as const;

/**
 * Unit of measure
 */
export type PriceListItemInfoUnitOfMeasure = typeof PriceListItemInfoUnitOfMeasure[keyof typeof PriceListItemInfoUnitOfMeasure];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PriceListItemInfoUnitOfMeasure = {
  PIECE: 'PIECE',
  KILOGRAM: 'KILOGRAM',
  PAIR: 'PAIR',
  SQUARE_METER: 'SQUARE_METER',
} as const;

export interface PriceListItemInfo {
  /** Price list item ID */
  id: string;
  /** Service category code */
  categoryCode: PriceListItemInfoCategoryCode;
  /** Catalog number */
  catalogNumber: number;
  /** Item name */
  name: string;
  /** Unit of measure */
  unitOfMeasure: PriceListItemInfoUnitOfMeasure;
  /**
   * Base price in kopiykas (1 kopiykas = 0.01 UAH)
   * @minimum 0
   * @maximum 999999999
   */
  basePrice: number;
  /**
   * Price for black dyeing in kopiykas (1 kopiykas = 0.01 UAH)
   * @minimum 0
   * @maximum 999999999
   */
  priceBlack?: number;
  /**
   * Price for color dyeing in kopiykas (1 kopiykas = 0.01 UAH)
   * @minimum 0
   * @maximum 999999999
   */
  priceColor?: number;
  /** Is item active */
  active: boolean;
}

export interface PriceListItemsResponse {
  priceListItems: PriceListItemInfo[];
  /**
   * Total number of price list items available
   * @minimum 0
   */
  totalCount: number;
}

export interface ListItemsResponse {
  items: ItemInfo[];
  /**
   * Total number of items available
   * @minimum 0
   */
  totalCount: number;
}

export interface SessionInfo {
  /** Session ID */
  sessionId: string;
  /** User ID */
  userId: string;
  /** Username */
  username: string;
  roles?: string[];
  /** Current branch ID */
  branchId?: JsonNullableUUID;
  /** Current branch name */
  branchName?: JsonNullableString;
  /** Session creation time */
  createdAt: string;
  /** Last access time */
  lastAccessedAt: string;
  /** Session expiration time */
  expiresAt?: string;
  /** IP address */
  ipAddress?: string;
  /** Browser user agent */
  userAgent?: string;
}

