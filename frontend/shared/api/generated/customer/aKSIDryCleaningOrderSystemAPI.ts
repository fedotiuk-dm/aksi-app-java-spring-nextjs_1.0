/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * AKSI Dry Cleaning Order System API
 * API for dry cleaning order management system with Domain-Driven Design architecture. The system includes 13 domains: Auth, User, Customer, Branch, Employee, Order, OrderItem, Service, Garment, Pricing, Payment, Notification, and Analytics.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateCustomerRequest,
  CustomerInfo,
  CustomersResponse,
  ErrorResponse,
  ListCustomersParams,
  UpdateCustomerRequest
} from './aKSIDryCleaningOrderSystemAPI.schemas';

import orvalFetcher from '../../../../lib/api/orval-fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Get customer details by ID
 * @summary Get customer
 */
export const getCustomer = (
    customerId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<CustomerInfo>(
      {url: `/api/customers/${customerId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCustomerQueryKey = (customerId?: string,) => {
    return [`/api/customers/${customerId}`] as const;
    }

    
export const getGetCustomerQueryOptions = <TData = Awaited<ReturnType<typeof getCustomer>>, TError = ErrorResponse | ErrorResponse>(customerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomer>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCustomerQueryKey(customerId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCustomer>>> = ({ signal }) => getCustomer(customerId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCustomer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCustomerQueryResult = NonNullable<Awaited<ReturnType<typeof getCustomer>>>
export type GetCustomerQueryError = ErrorResponse | ErrorResponse


export function useGetCustomer<TData = Awaited<ReturnType<typeof getCustomer>>, TError = ErrorResponse | ErrorResponse>(
 customerId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomer>>,
          TError,
          Awaited<ReturnType<typeof getCustomer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCustomer<TData = Awaited<ReturnType<typeof getCustomer>>, TError = ErrorResponse | ErrorResponse>(
 customerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomer>>,
          TError,
          Awaited<ReturnType<typeof getCustomer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCustomer<TData = Awaited<ReturnType<typeof getCustomer>>, TError = ErrorResponse | ErrorResponse>(
 customerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomer>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get customer
 */

export function useGetCustomer<TData = Awaited<ReturnType<typeof getCustomer>>, TError = ErrorResponse | ErrorResponse>(
 customerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomer>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCustomerQueryOptions(customerId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Update customer information
 * @summary Update customer
 */
export const updateCustomer = (
    customerId: string,
    updateCustomerRequest: UpdateCustomerRequest,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<CustomerInfo>(
      {url: `/api/customers/${customerId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateCustomerRequest
    },
      options);
    }
  


export const getUpdateCustomerMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCustomer>>, TError,{customerId: string;data: UpdateCustomerRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof updateCustomer>>, TError,{customerId: string;data: UpdateCustomerRequest}, TContext> => {

const mutationKey = ['updateCustomer'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCustomer>>, {customerId: string;data: UpdateCustomerRequest}> = (props) => {
          const {customerId,data} = props ?? {};

          return  updateCustomer(customerId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCustomerMutationResult = NonNullable<Awaited<ReturnType<typeof updateCustomer>>>
    export type UpdateCustomerMutationBody = UpdateCustomerRequest
    export type UpdateCustomerMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Update customer
 */
export const useUpdateCustomer = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCustomer>>, TError,{customerId: string;data: UpdateCustomerRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateCustomer>>,
        TError,
        {customerId: string;data: UpdateCustomerRequest},
        TContext
      > => {

      const mutationOptions = getUpdateCustomerMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Search and list customers with optional filters
 * @summary List customers
 */
export const listCustomers = (
    params?: ListCustomersParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<CustomersResponse>(
      {url: `/api/customers`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getListCustomersQueryKey = (params?: ListCustomersParams,) => {
    return [`/api/customers`, ...(params ? [params]: [])] as const;
    }

    
export const getListCustomersQueryOptions = <TData = Awaited<ReturnType<typeof listCustomers>>, TError = ErrorResponse>(params?: ListCustomersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listCustomers>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListCustomersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listCustomers>>> = ({ signal }) => listCustomers(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listCustomers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListCustomersQueryResult = NonNullable<Awaited<ReturnType<typeof listCustomers>>>
export type ListCustomersQueryError = ErrorResponse


export function useListCustomers<TData = Awaited<ReturnType<typeof listCustomers>>, TError = ErrorResponse>(
 params: undefined |  ListCustomersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listCustomers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listCustomers>>,
          TError,
          Awaited<ReturnType<typeof listCustomers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListCustomers<TData = Awaited<ReturnType<typeof listCustomers>>, TError = ErrorResponse>(
 params?: ListCustomersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listCustomers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listCustomers>>,
          TError,
          Awaited<ReturnType<typeof listCustomers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListCustomers<TData = Awaited<ReturnType<typeof listCustomers>>, TError = ErrorResponse>(
 params?: ListCustomersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listCustomers>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List customers
 */

export function useListCustomers<TData = Awaited<ReturnType<typeof listCustomers>>, TError = ErrorResponse>(
 params?: ListCustomersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listCustomers>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListCustomersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Create a new customer
 * @summary Create customer
 */
export const createCustomer = (
    createCustomerRequest: CreateCustomerRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<CustomerInfo>(
      {url: `/api/customers`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCustomerRequest, signal
    },
      options);
    }
  


export const getCreateCustomerMutationOptions = <TError = ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCustomer>>, TError,{data: CreateCustomerRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof createCustomer>>, TError,{data: CreateCustomerRequest}, TContext> => {

const mutationKey = ['createCustomer'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createCustomer>>, {data: CreateCustomerRequest}> = (props) => {
          const {data} = props ?? {};

          return  createCustomer(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateCustomerMutationResult = NonNullable<Awaited<ReturnType<typeof createCustomer>>>
    export type CreateCustomerMutationBody = CreateCustomerRequest
    export type CreateCustomerMutationError = ErrorResponse | ErrorResponse

    /**
 * @summary Create customer
 */
export const useCreateCustomer = <TError = ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCustomer>>, TError,{data: CreateCustomerRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createCustomer>>,
        TError,
        {data: CreateCustomerRequest},
        TContext
      > => {

      const mutationOptions = getCreateCustomerMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Check if customer exists by ID
 * @summary Check if customer exists
 */
export const checkCustomerExists = (
    customerId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<null>(
      {url: `/api/customers/${customerId}/exists`, method: 'HEAD', signal
    },
      options);
    }
  


export const getCheckCustomerExistsMutationOptions = <TError = ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof checkCustomerExists>>, TError,{customerId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof checkCustomerExists>>, TError,{customerId: string}, TContext> => {

const mutationKey = ['checkCustomerExists'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof checkCustomerExists>>, {customerId: string}> = (props) => {
          const {customerId} = props ?? {};

          return  checkCustomerExists(customerId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CheckCustomerExistsMutationResult = NonNullable<Awaited<ReturnType<typeof checkCustomerExists>>>
    
    export type CheckCustomerExistsMutationError = ErrorResponse | ErrorResponse

    /**
 * @summary Check if customer exists
 */
export const useCheckCustomerExists = <TError = ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof checkCustomerExists>>, TError,{customerId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof checkCustomerExists>>,
        TError,
        {customerId: string},
        TContext
      > => {

      const mutationOptions = getCheckCustomerExistsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
