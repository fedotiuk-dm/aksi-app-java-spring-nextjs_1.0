/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * AKSI Dry Cleaning Order System API
 * API for dry cleaning order management system with Domain-Driven Design architecture. The system includes 13 domains: Auth, User, Customer, Branch, Employee, Order, OrderItem, Service, Garment, Pricing, Payment, Notification, and Analytics.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  EmailReceiptRequest,
  EmailReceiptResponse,
  ErrorResponse,
  GenerateOrderReceiptParams,
  ReceiptPreviewRequest,
  ReceiptTemplate
} from './aKSIDryCleaningOrderSystemAPI.schemas';

import orvalFetcher from '../../../../lib/api/orval-fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Generate PDF receipt preview from provided data (without creating order)
 * @summary Generate receipt preview
 */
export const generateReceiptPreview = (
    receiptPreviewRequest: ReceiptPreviewRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Blob>(
      {url: `/api/receipts/preview`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: receiptPreviewRequest,
        responseType: 'blob', signal
    },
      options);
    }
  


export const getGenerateReceiptPreviewMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof generateReceiptPreview>>, TError,{data: ReceiptPreviewRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof generateReceiptPreview>>, TError,{data: ReceiptPreviewRequest}, TContext> => {

const mutationKey = ['generateReceiptPreview'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof generateReceiptPreview>>, {data: ReceiptPreviewRequest}> = (props) => {
          const {data} = props ?? {};

          return  generateReceiptPreview(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GenerateReceiptPreviewMutationResult = NonNullable<Awaited<ReturnType<typeof generateReceiptPreview>>>
    export type GenerateReceiptPreviewMutationBody = ReceiptPreviewRequest
    export type GenerateReceiptPreviewMutationError = ErrorResponse

    /**
 * @summary Generate receipt preview
 */
export const useGenerateReceiptPreview = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof generateReceiptPreview>>, TError,{data: ReceiptPreviewRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof generateReceiptPreview>>,
        TError,
        {data: ReceiptPreviewRequest},
        TContext
      > => {

      const mutationOptions = getGenerateReceiptPreviewMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Generate and email receipt to customer
 * @summary Email receipt to customer
 */
export const emailOrderReceipt = (
    orderId: string,
    emailReceiptRequest: EmailReceiptRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<EmailReceiptResponse>(
      {url: `/api/receipts/order/${orderId}/email`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: emailReceiptRequest, signal
    },
      options);
    }
  


export const getEmailOrderReceiptMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof emailOrderReceipt>>, TError,{orderId: string;data: EmailReceiptRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof emailOrderReceipt>>, TError,{orderId: string;data: EmailReceiptRequest}, TContext> => {

const mutationKey = ['emailOrderReceipt'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof emailOrderReceipt>>, {orderId: string;data: EmailReceiptRequest}> = (props) => {
          const {orderId,data} = props ?? {};

          return  emailOrderReceipt(orderId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EmailOrderReceiptMutationResult = NonNullable<Awaited<ReturnType<typeof emailOrderReceipt>>>
    export type EmailOrderReceiptMutationBody = EmailReceiptRequest
    export type EmailOrderReceiptMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Email receipt to customer
 */
export const useEmailOrderReceipt = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof emailOrderReceipt>>, TError,{orderId: string;data: EmailReceiptRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof emailOrderReceipt>>,
        TError,
        {orderId: string;data: EmailReceiptRequest},
        TContext
      > => {

      const mutationOptions = getEmailOrderReceiptMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Get list of available receipt templates
 * @summary Get available receipt templates
 */
export const getReceiptTemplates = (
    
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<ReceiptTemplate[]>(
      {url: `/api/receipts/templates`, method: 'GET', signal
    },
      options);
    }
  

export const getGetReceiptTemplatesQueryKey = () => {
    return [`/api/receipts/templates`] as const;
    }

    
export const getGetReceiptTemplatesQueryOptions = <TData = Awaited<ReturnType<typeof getReceiptTemplates>>, TError = ErrorResponse | ErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceiptTemplates>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetReceiptTemplatesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReceiptTemplates>>> = ({ signal }) => getReceiptTemplates(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getReceiptTemplates>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetReceiptTemplatesQueryResult = NonNullable<Awaited<ReturnType<typeof getReceiptTemplates>>>
export type GetReceiptTemplatesQueryError = ErrorResponse | ErrorResponse


export function useGetReceiptTemplates<TData = Awaited<ReturnType<typeof getReceiptTemplates>>, TError = ErrorResponse | ErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceiptTemplates>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReceiptTemplates>>,
          TError,
          Awaited<ReturnType<typeof getReceiptTemplates>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetReceiptTemplates<TData = Awaited<ReturnType<typeof getReceiptTemplates>>, TError = ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceiptTemplates>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReceiptTemplates>>,
          TError,
          Awaited<ReturnType<typeof getReceiptTemplates>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetReceiptTemplates<TData = Awaited<ReturnType<typeof getReceiptTemplates>>, TError = ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceiptTemplates>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get available receipt templates
 */

export function useGetReceiptTemplates<TData = Awaited<ReturnType<typeof getReceiptTemplates>>, TError = ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceiptTemplates>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetReceiptTemplatesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Generate PDF receipt for existing order
 * @summary Generate receipt for order
 */
export const generateOrderReceipt = (
    orderId: string,
    params?: GenerateOrderReceiptParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Blob>(
      {url: `/api/receipts/order/${orderId}`, method: 'GET',
        params,
        responseType: 'blob', signal
    },
      options);
    }
  

export const getGenerateOrderReceiptQueryKey = (orderId?: string,
    params?: GenerateOrderReceiptParams,) => {
    return [`/api/receipts/order/${orderId}`, ...(params ? [params]: [])] as const;
    }

    
export const getGenerateOrderReceiptQueryOptions = <TData = Awaited<ReturnType<typeof generateOrderReceipt>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(orderId: string,
    params?: GenerateOrderReceiptParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof generateOrderReceipt>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGenerateOrderReceiptQueryKey(orderId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof generateOrderReceipt>>> = ({ signal }) => generateOrderReceipt(orderId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof generateOrderReceipt>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GenerateOrderReceiptQueryResult = NonNullable<Awaited<ReturnType<typeof generateOrderReceipt>>>
export type GenerateOrderReceiptQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useGenerateOrderReceipt<TData = Awaited<ReturnType<typeof generateOrderReceipt>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 orderId: string,
    params: undefined |  GenerateOrderReceiptParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof generateOrderReceipt>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof generateOrderReceipt>>,
          TError,
          Awaited<ReturnType<typeof generateOrderReceipt>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGenerateOrderReceipt<TData = Awaited<ReturnType<typeof generateOrderReceipt>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 orderId: string,
    params?: GenerateOrderReceiptParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof generateOrderReceipt>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof generateOrderReceipt>>,
          TError,
          Awaited<ReturnType<typeof generateOrderReceipt>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGenerateOrderReceipt<TData = Awaited<ReturnType<typeof generateOrderReceipt>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 orderId: string,
    params?: GenerateOrderReceiptParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof generateOrderReceipt>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Generate receipt for order
 */

export function useGenerateOrderReceipt<TData = Awaited<ReturnType<typeof generateOrderReceipt>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 orderId: string,
    params?: GenerateOrderReceiptParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof generateOrderReceipt>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGenerateOrderReceiptQueryOptions(orderId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




