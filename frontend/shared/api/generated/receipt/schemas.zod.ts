/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * AKSI Dry Cleaning Order System API
 * API for dry cleaning order management system with Domain-Driven Design architecture. The system includes 13 domains: Auth, User, Customer, Branch, Employee, Order, OrderItem, Service, Garment, Pricing, Payment, Notification, and Analytics.
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';

/**
 * Generate PDF receipt preview from provided data (without creating order)
 * @summary Generate receipt preview
 */
export const generateReceiptPreviewBody = zod.object({
  "orderData": zod.object({
  "orderNumber": zod.string().describe('Order number'),
  "branchName": zod.string().describe('Branch name'),
  "branchAddress": zod.string().optional().describe('Branch address'),
  "branchPhone": zod.string().optional().describe('Branch phone'),
  "customerName": zod.string().describe('Customer name'),
  "customerPhone": zod.string().optional().describe('Customer phone'),
  "items": zod.array(zod.object({
  "position": zod.number().optional().describe('Item position in order'),
  "name": zod.string().describe('Item name'),
  "catalogNumber": zod.string().optional().describe('Catalog number'),
  "quantity": zod.number().describe('Quantity'),
  "unitPrice": zod.number().describe('Unit price in kopiykas'),
  "totalPrice": zod.number().describe('Total price in kopiykas'),
  "modifiers": zod.array(zod.string()).optional().describe('Applied modifiers')
})).describe('Order items'),
  "subtotal": zod.number().optional().describe('Subtotal in kopiykas'),
  "discount": zod.number().optional().describe('Discount amount in kopiykas'),
  "totalAmount": zod.number().describe('Total amount in kopiykas'),
  "prepaidAmount": zod.number().optional().describe('Prepaid amount in kopiykas'),
  "dueAmount": zod.number().optional().describe('Due amount in kopiykas'),
  "paymentMethod": zod.enum(['CASH', 'TERMINAL', 'BANK_TRANSFER']).optional(),
  "createdAt": zod.iso.datetime({}).describe('Order creation timestamp'),
  "completionDate": zod.iso.datetime({}).optional().describe('Expected completion date'),
  "notes": zod.string().optional().describe('Additional notes')
}),
  "templateId": zod.string().optional().describe('Template ID to use'),
  "locale": zod.string().optional().describe('Locale for receipt generation')
})

export const generateReceiptPreviewResponse = zod.instanceof(File)


/**
 * Generate and email receipt to customer
 * @summary Email receipt to customer
 */
export const emailOrderReceiptParams = zod.object({
  "orderId": zod.uuid().describe('Order ID')
})

export const emailOrderReceiptBody = zod.object({
  "email": zod.string().optional().describe('Email address (if not specified, use customer\'s email)'),
  "subject": zod.string().optional().describe('Email subject'),
  "message": zod.string().optional().describe('Additional message')
})

export const emailOrderReceiptResponse = zod.object({
  "success": zod.boolean().describe('Email sent successfully'),
  "sentAt": zod.iso.datetime({}).describe('Email sent timestamp'),
  "email": zod.string().optional().describe('Email address where receipt was sent'),
  "messageId": zod.string().optional().describe('Email message ID')
})


/**
 * Get list of available receipt templates
 * @summary Get available receipt templates
 */
export const getReceiptTemplatesResponseItem = zod.object({
  "id": zod.string().describe('Template ID'),
  "name": zod.string().describe('Template name'),
  "description": zod.string().describe('Template description'),
  "isDefault": zod.boolean().describe('Is default template'),
  "supportedLocales": zod.array(zod.string()).optional().describe('Supported locales')
})
export const getReceiptTemplatesResponse = zod.array(getReceiptTemplatesResponseItem)


/**
 * Generate PDF receipt for existing order
 * @summary Generate receipt for order
 */
export const generateOrderReceiptParams = zod.object({
  "orderId": zod.uuid().describe('Order ID to generate receipt for')
})

export const generateOrderReceiptQueryLocaleDefault = "uk";

export const generateOrderReceiptQueryParams = zod.object({
  "locale": zod.string().default(generateOrderReceiptQueryLocaleDefault).describe('Locale for receipt generation (e.g. uk, en)')
})

export const generateOrderReceiptResponse = zod.instanceof(File)
