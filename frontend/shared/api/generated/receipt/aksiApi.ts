/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * AKSI API
 * API –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–ª—ñ–Ω—ñ–Ω–≥–æ–≤–æ—é –∫–æ–º–ø–∞–Ω—ñ—î—é AKSI
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  DownloadPdfReceipt200,
  EmailReceiptRequest,
  EmailReceiptResponse,
  ErrorResponse,
  PdfReceiptResponse,
  ReceiptDTO,
  ReceiptGenerationRequest
} from './aksiApi.schemas';

import orvalFetcher from '../../../../lib/api/orval-fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * –ì–µ–Ω–µ—Ä—É—î PDF-–∫–≤–∏—Ç–∞–Ω—Ü—ñ—é –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –≤–∫–∞–∑–∞–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 * @summary –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ PDF-–∫–≤–∏—Ç–∞–Ω—Ü—ñ—é
 */
export const generatePdfReceipt = (
    receiptGenerationRequest: ReceiptGenerationRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<PdfReceiptResponse>(
      {url: `/receipts/pdf`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: receiptGenerationRequest, signal
    },
      options);
    }
  


export const getGeneratePdfReceiptMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof generatePdfReceipt>>, TError,{data: ReceiptGenerationRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof generatePdfReceipt>>, TError,{data: ReceiptGenerationRequest}, TContext> => {

const mutationKey = ['generatePdfReceipt'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof generatePdfReceipt>>, {data: ReceiptGenerationRequest}> = (props) => {
          const {data} = props ?? {};

          return  generatePdfReceipt(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GeneratePdfReceiptMutationResult = NonNullable<Awaited<ReturnType<typeof generatePdfReceipt>>>
    export type GeneratePdfReceiptMutationBody = ReceiptGenerationRequest
    export type GeneratePdfReceiptMutationError = ErrorResponse

    /**
 * @summary –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ PDF-–∫–≤–∏—Ç–∞–Ω—Ü—ñ—é
 */
export const useGeneratePdfReceipt = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof generatePdfReceipt>>, TError,{data: ReceiptGenerationRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof generatePdfReceipt>>,
        TError,
        {data: ReceiptGenerationRequest},
        TContext
      > => {

      const mutationOptions = getGeneratePdfReceiptMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î PDF-–∫–≤–∏—Ç–∞–Ω—Ü—ñ—é –Ω–∞ –≤–∫–∞–∑–∞–Ω–∏–π email
 * @summary –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—é –Ω–∞ email
 */
export const sendReceiptByEmail = (
    emailReceiptRequest: EmailReceiptRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<EmailReceiptResponse>(
      {url: `/receipts/email`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: emailReceiptRequest, signal
    },
      options);
    }
  


export const getSendReceiptByEmailMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendReceiptByEmail>>, TError,{data: EmailReceiptRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof sendReceiptByEmail>>, TError,{data: EmailReceiptRequest}, TContext> => {

const mutationKey = ['sendReceiptByEmail'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sendReceiptByEmail>>, {data: EmailReceiptRequest}> = (props) => {
          const {data} = props ?? {};

          return  sendReceiptByEmail(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SendReceiptByEmailMutationResult = NonNullable<Awaited<ReturnType<typeof sendReceiptByEmail>>>
    export type SendReceiptByEmailMutationBody = EmailReceiptRequest
    export type SendReceiptByEmailMutationError = ErrorResponse

    /**
 * @summary –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—é –Ω–∞ email
 */
export const useSendReceiptByEmail = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendReceiptByEmail>>, TError,{data: EmailReceiptRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof sendReceiptByEmail>>,
        TError,
        {data: EmailReceiptRequest},
        TContext
      > => {

      const mutationOptions = getSendReceiptByEmailMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó –∑–∞ ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 */
export const getReceiptData = (
    orderId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<ReceiptDTO>(
      {url: `/receipts/${orderId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetReceiptDataQueryKey = (orderId: string,) => {
    return [`/receipts/${orderId}`] as const;
    }

    
export const getGetReceiptDataInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getReceiptData>>>, TError = ErrorResponse>(orderId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getReceiptData>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetReceiptDataQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReceiptData>>> = ({ signal }) => getReceiptData(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getReceiptData>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetReceiptDataInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getReceiptData>>>
export type GetReceiptDataInfiniteQueryError = ErrorResponse


export function useGetReceiptDataInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getReceiptData>>>, TError = ErrorResponse>(
 orderId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getReceiptData>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReceiptData>>,
          TError,
          Awaited<ReturnType<typeof getReceiptData>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetReceiptDataInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getReceiptData>>>, TError = ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getReceiptData>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReceiptData>>,
          TError,
          Awaited<ReturnType<typeof getReceiptData>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetReceiptDataInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getReceiptData>>>, TError = ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getReceiptData>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 */

export function useGetReceiptDataInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getReceiptData>>>, TError = ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getReceiptData>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetReceiptDataInfiniteQueryOptions(orderId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetReceiptDataQueryOptions = <TData = Awaited<ReturnType<typeof getReceiptData>>, TError = ErrorResponse>(orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceiptData>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetReceiptDataQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReceiptData>>> = ({ signal }) => getReceiptData(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getReceiptData>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetReceiptDataQueryResult = NonNullable<Awaited<ReturnType<typeof getReceiptData>>>
export type GetReceiptDataQueryError = ErrorResponse


export function useGetReceiptData<TData = Awaited<ReturnType<typeof getReceiptData>>, TError = ErrorResponse>(
 orderId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceiptData>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReceiptData>>,
          TError,
          Awaited<ReturnType<typeof getReceiptData>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetReceiptData<TData = Awaited<ReturnType<typeof getReceiptData>>, TError = ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceiptData>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReceiptData>>,
          TError,
          Awaited<ReturnType<typeof getReceiptData>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetReceiptData<TData = Awaited<ReturnType<typeof getReceiptData>>, TError = ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceiptData>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 */

export function useGetReceiptData<TData = Awaited<ReturnType<typeof getReceiptData>>, TError = ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceiptData>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetReceiptDataQueryOptions(orderId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î PDF-–∫–≤–∏—Ç–∞–Ω—Ü—ñ—é –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —è–∫ —Ñ–∞–π–ª
 * @summary –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PDF-–∫–≤–∏—Ç–∞–Ω—Ü—ñ—é
 */
export const downloadPdfReceipt = (
    orderId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<DownloadPdfReceipt200>(
      {url: `/receipts/pdf/download/${orderId}`, method: 'GET', signal
    },
      options);
    }
  

export const getDownloadPdfReceiptQueryKey = (orderId: string,) => {
    return [`/receipts/pdf/download/${orderId}`] as const;
    }

    
export const getDownloadPdfReceiptInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof downloadPdfReceipt>>>, TError = ErrorResponse>(orderId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof downloadPdfReceipt>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDownloadPdfReceiptQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof downloadPdfReceipt>>> = ({ signal }) => downloadPdfReceipt(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof downloadPdfReceipt>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DownloadPdfReceiptInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof downloadPdfReceipt>>>
export type DownloadPdfReceiptInfiniteQueryError = ErrorResponse


export function useDownloadPdfReceiptInfinite<TData = InfiniteData<Awaited<ReturnType<typeof downloadPdfReceipt>>>, TError = ErrorResponse>(
 orderId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof downloadPdfReceipt>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof downloadPdfReceipt>>,
          TError,
          Awaited<ReturnType<typeof downloadPdfReceipt>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDownloadPdfReceiptInfinite<TData = InfiniteData<Awaited<ReturnType<typeof downloadPdfReceipt>>>, TError = ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof downloadPdfReceipt>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof downloadPdfReceipt>>,
          TError,
          Awaited<ReturnType<typeof downloadPdfReceipt>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDownloadPdfReceiptInfinite<TData = InfiniteData<Awaited<ReturnType<typeof downloadPdfReceipt>>>, TError = ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof downloadPdfReceipt>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PDF-–∫–≤–∏—Ç–∞–Ω—Ü—ñ—é
 */

export function useDownloadPdfReceiptInfinite<TData = InfiniteData<Awaited<ReturnType<typeof downloadPdfReceipt>>>, TError = ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof downloadPdfReceipt>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDownloadPdfReceiptInfiniteQueryOptions(orderId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getDownloadPdfReceiptQueryOptions = <TData = Awaited<ReturnType<typeof downloadPdfReceipt>>, TError = ErrorResponse>(orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadPdfReceipt>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDownloadPdfReceiptQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof downloadPdfReceipt>>> = ({ signal }) => downloadPdfReceipt(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof downloadPdfReceipt>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DownloadPdfReceiptQueryResult = NonNullable<Awaited<ReturnType<typeof downloadPdfReceipt>>>
export type DownloadPdfReceiptQueryError = ErrorResponse


export function useDownloadPdfReceipt<TData = Awaited<ReturnType<typeof downloadPdfReceipt>>, TError = ErrorResponse>(
 orderId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadPdfReceipt>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof downloadPdfReceipt>>,
          TError,
          Awaited<ReturnType<typeof downloadPdfReceipt>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDownloadPdfReceipt<TData = Awaited<ReturnType<typeof downloadPdfReceipt>>, TError = ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadPdfReceipt>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof downloadPdfReceipt>>,
          TError,
          Awaited<ReturnType<typeof downloadPdfReceipt>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDownloadPdfReceipt<TData = Awaited<ReturnType<typeof downloadPdfReceipt>>, TError = ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadPdfReceipt>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PDF-–∫–≤–∏—Ç–∞–Ω—Ü—ñ—é
 */

export function useDownloadPdfReceipt<TData = Awaited<ReturnType<typeof downloadPdfReceipt>>, TError = ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadPdfReceipt>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDownloadPdfReceiptQueryOptions(orderId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




