/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * AKSI Dry Cleaning Order System API
 * API for dry cleaning order management system with Domain-Driven Design architecture. The system includes 13 domains: Auth, User, Customer, Branch, Employee, Order, OrderItem, Service, Garment, Pricing, Payment, Notification, and Analytics.
 * OpenAPI spec version: 1.0.0
 */
export interface BranchAssignment {
  /** Branch ID */
  branchId: string;
  /** Branch name */
  branchName: string;
  /** Is this the primary branch */
  isPrimary: boolean;
}

export type UserDetailRolesItem = typeof UserDetailRolesItem[keyof typeof UserDetailRolesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserDetailRolesItem = {
  OPERATOR: 'OPERATOR',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN',
  CLEANER: 'CLEANER',
  DRIVER: 'DRIVER',
  ACCOUNTANT: 'ACCOUNTANT',
} as const;

export interface UserDetail {
  /** User ID */
  id: string;
  /** Username */
  username: string;
  /** First name */
  firstName: string;
  /** Last name */
  lastName: string;
  /** Email address */
  email: string;
  /**
   * @minItems 1
   * @maxItems 2147483647
   */
  roles: UserDetailRolesItem[];
  /** Is user active */
  active: boolean;
  /** Primary branch ID */
  primaryBranchId?: string;
  /** Primary branch name */
  primaryBranchName?: string;
  /** Creation timestamp */
  createdAt: string;
  /** Last login timestamp */
  lastLoginAt?: string;
  /**
   * Phone number
   * @pattern ^\+?[0-9]{10,15}$
   */
  phone?: string;
  /** Calculated permissions based on roles */
  permissions: string[];
  /** Assigned branches */
  branches: BranchAssignment[];
  /** Last update timestamp */
  updatedAt: string;
  /** ID of user who created this user */
  createdBy?: string;
  /** ID of user who last updated this user */
  updatedBy?: string;
}

export interface JsonNullableListListUsers400ResponseErrorsInner {
  present?: boolean;
}

export interface ListUsers400Response {
  /** Error timestamp */
  timestamp: string;
  /** HTTP status code */
  status: number;
  /** Error name */
  error: string;
  /** Error message */
  message: string;
  /** Request path */
  path: string;
  errors?: JsonNullableListListUsers400ResponseErrorsInner;
}

export type UpdateRolesRequestRolesItem = typeof UpdateRolesRequestRolesItem[keyof typeof UpdateRolesRequestRolesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateRolesRequestRolesItem = {
  OPERATOR: 'OPERATOR',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN',
  CLEANER: 'CLEANER',
  DRIVER: 'DRIVER',
  ACCOUNTANT: 'ACCOUNTANT',
} as const;

export interface UpdateRolesRequest {
  /**
   * New set of roles
   * @minItems 1
   * @maxItems 2147483647
   */
  roles: UpdateRolesRequestRolesItem[];
}

export interface ChangePasswordRequest {
  /** Current password (required if changing own password) */
  currentPassword?: string;
  /**
   * New password
   * @minLength 8
   * @maxLength 100
   */
  newPassword: string;
}

export interface GetUserBranches200Response {
  branches?: BranchAssignment[];
}

export interface UpdateBranchesRequest {
  /** Branch IDs to assign */
  branchIds: string[];
  /** Primary branch ID (must be in branchIds if provided) */
  primaryBranchId?: string;
}

export type CreateUserRequestRolesItem = typeof CreateUserRequestRolesItem[keyof typeof CreateUserRequestRolesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUserRequestRolesItem = {
  OPERATOR: 'OPERATOR',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN',
  CLEANER: 'CLEANER',
  DRIVER: 'DRIVER',
  ACCOUNTANT: 'ACCOUNTANT',
} as const;

export interface CreateUserRequest {
  /**
   * Username
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9_]+$
   */
  username: string;
  /**
   * Password
   * @minLength 8
   * @maxLength 100
   */
  password: string;
  /**
   * First name
   * @minLength 1
   * @maxLength 100
   */
  firstName: string;
  /**
   * Last name
   * @minLength 1
   * @maxLength 100
   */
  lastName: string;
  /** Email address */
  email: string;
  /**
   * Phone number
   * @pattern ^\+?[0-9]{10,15}$
   */
  phone?: string;
  /**
   * User roles
   * @minItems 1
   * @maxItems 2147483647
   */
  roles: CreateUserRequestRolesItem[];
  /** Branch IDs to assign */
  branchIds?: string[];
  /** Primary branch ID (must be in branchIds if provided) */
  primaryBranchId?: string;
}

export interface JsonNullableListLogin400ResponseErrorsInner {
  present?: boolean;
}

export interface Login400Response {
  /** Error timestamp */
  timestamp: string;
  /** HTTP status code */
  status: number;
  /** Error name */
  error: string;
  /** Error message */
  message: string;
  /** Request path */
  path: string;
  errors?: JsonNullableListLogin400ResponseErrorsInner;
}

export interface JsonNullableString {
  present?: boolean;
}

export interface JsonNullableUUID {
  present?: boolean;
}

export type LoginResponseRolesItem = typeof LoginResponseRolesItem[keyof typeof LoginResponseRolesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LoginResponseRolesItem = {
  OPERATOR: 'OPERATOR',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN',
  CLEANER: 'CLEANER',
  DRIVER: 'DRIVER',
  ACCOUNTANT: 'ACCOUNTANT',
} as const;

export interface LoginResponse {
  /** User ID */
  userId: string;
  /** Username */
  username: string;
  /** First name */
  firstName?: string;
  /** Last name */
  lastName?: string;
  /**
   * User roles
   * @minItems 1
   * @maxItems 2147483647
   */
  roles: LoginResponseRolesItem[];
  /** User permissions */
  permissions?: string[];
  /** Current branch ID */
  branchId?: JsonNullableUUID;
  /** Current branch name */
  branchName?: JsonNullableString;
  /** Whether branch selection is required */
  requiresBranchSelection: boolean;
}

export interface LoginRequest {
  /**
   * Operator username
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9_]+$
   */
  username: string;
  /**
   * Password
   * @minLength 8
   * @maxLength 100
   */
  password: string;
  /** Remember session for 30 days */
  rememberMe?: boolean;
  /** Branch ID for login (optional, can be selected later) */
  branchId?: JsonNullableUUID;
}

export interface UpdateUserRequest {
  /**
   * First name
   * @minLength 1
   * @maxLength 100
   */
  firstName?: string;
  /**
   * Last name
   * @minLength 1
   * @maxLength 100
   */
  lastName?: string;
  /** Email address */
  email?: string;
  /**
   * Phone number
   * @pattern ^\+?[0-9]{10,15}$
   */
  phone?: string;
}

export interface ListUsers200Response {
  data: UserSummary[];
  /** Total number of elements */
  totalElements: number;
  /** Total number of pages */
  totalPages: number;
  /** Page size */
  size: number;
  /** Current page number (0-based) */
  number: number;
  /** Number of elements in current page */
  numberOfElements: number;
  /** Is first page */
  first: boolean;
  /** Is last page */
  last: boolean;
  /** Is page empty */
  empty: boolean;
}

export type UserSummaryRolesItem = typeof UserSummaryRolesItem[keyof typeof UserSummaryRolesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserSummaryRolesItem = {
  OPERATOR: 'OPERATOR',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN',
  CLEANER: 'CLEANER',
  DRIVER: 'DRIVER',
  ACCOUNTANT: 'ACCOUNTANT',
} as const;

export interface UserSummary {
  /** User ID */
  id: string;
  /** Username */
  username: string;
  /** First name */
  firstName: string;
  /** Last name */
  lastName: string;
  /** Email address */
  email: string;
  /**
   * @minItems 1
   * @maxItems 2147483647
   */
  roles: UserSummaryRolesItem[];
  /** Is user active */
  active: boolean;
  /** Primary branch ID */
  primaryBranchId?: string;
  /** Primary branch name */
  primaryBranchName?: string;
  /** Creation timestamp */
  createdAt: string;
  /** Last login timestamp */
  lastLoginAt?: string;
}

export type SessionInfoRolesItem = typeof SessionInfoRolesItem[keyof typeof SessionInfoRolesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SessionInfoRolesItem = {
  OPERATOR: 'OPERATOR',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN',
  CLEANER: 'CLEANER',
  DRIVER: 'DRIVER',
  ACCOUNTANT: 'ACCOUNTANT',
} as const;

export interface SessionInfo {
  /** Session ID */
  sessionId: string;
  /** User ID */
  userId: string;
  /** Username */
  username: string;
  roles?: SessionInfoRolesItem[];
  /** Current branch ID */
  branchId?: JsonNullableUUID;
  /** Current branch name */
  branchName?: JsonNullableString;
  /** Session creation time */
  createdAt: string;
  /** Last access time */
  lastAccessedAt: string;
  /** Session expiration time */
  expiresAt?: string;
  /** IP address */
  ipAddress?: string;
  /** Browser user agent */
  userAgent?: string;
}

export type InvalidateAllSessionsParams = {
/**
 * User ID to invalidate sessions for
 */
userId: string;
};

