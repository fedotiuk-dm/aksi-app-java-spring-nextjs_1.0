/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * AKSI Dry Cleaning Order System API
 * API for dry cleaning order management system with Domain-Driven Design architecture. The system includes 13 domains: Auth, User, Customer, Branch, Employee, Order, OrderItem, Service, Garment, Pricing, Payment, Notification, and Analytics.
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';

/**
 * Authenticate operator and return session cookie
 * @summary Login to system
 */
export const loginBodyUsernameMin = 3;

export const loginBodyUsernameMax = 50;

export const loginBodyUsernameRegExp = new RegExp('^[a-zA-Z0-9_]+$');
export const loginBodyPasswordMin = 8;

export const loginBodyPasswordMax = 100;


export const loginBody = zod.object({
  "username": zod.string().min(loginBodyUsernameMin).max(loginBodyUsernameMax).regex(loginBodyUsernameRegExp).describe('Operator username'),
  "password": zod.string().min(loginBodyPasswordMin).max(loginBodyPasswordMax).describe('Password'),
  "rememberMe": zod.boolean().optional().describe('Remember session for 30 days'),
  "branchId": zod.object({
  "present": zod.boolean().optional()
}).optional()
})

export const loginResponseRolesMax = 2147483647;


export const loginResponse = zod.object({
  "userId": zod.uuid().describe('User ID'),
  "username": zod.string().describe('Username'),
  "firstName": zod.string().optional().describe('First name'),
  "lastName": zod.string().optional().describe('Last name'),
  "roles": zod.array(zod.enum(['OPERATOR', 'MANAGER', 'ADMIN', 'CLEANER', 'DRIVER', 'ACCOUNTANT'])).min(1).max(loginResponseRolesMax).describe('User roles'),
  "permissions": zod.array(zod.string()).optional().describe('User permissions'),
  "branchId": zod.object({
  "present": zod.boolean().optional()
}).optional(),
  "branchName": zod.object({
  "present": zod.boolean().optional()
}).optional(),
  "requiresBranchSelection": zod.boolean().describe('Whether branch selection is required')
})


/**
 * Information about current user and session
 * @summary Get current session info
 */
export const getCurrentSessionResponse = zod.object({
  "sessionId": zod.string().describe('Session ID'),
  "userId": zod.uuid().describe('User ID'),
  "username": zod.string().describe('Username'),
  "roles": zod.array(zod.enum(['OPERATOR', 'MANAGER', 'ADMIN', 'CLEANER', 'DRIVER', 'ACCOUNTANT'])).optional(),
  "branchId": zod.object({
  "present": zod.boolean().optional()
}).optional(),
  "branchName": zod.object({
  "present": zod.boolean().optional()
}).optional(),
  "createdAt": zod.iso.datetime({}).describe('Session creation time'),
  "lastAccessedAt": zod.iso.datetime({}).describe('Last access time'),
  "expiresAt": zod.iso.datetime({}).optional().describe('Session expiration time'),
  "ipAddress": zod.string().optional().describe('IP address'),
  "userAgent": zod.string().optional().describe('Browser user agent')
})


/**
 * Logout user from all devices (admin only)
 * @summary Terminate all sessions for user
 */
export const invalidateAllSessionsQueryParams = zod.object({
  "userId": zod.uuid().describe('User ID to invalidate sessions for')
})
