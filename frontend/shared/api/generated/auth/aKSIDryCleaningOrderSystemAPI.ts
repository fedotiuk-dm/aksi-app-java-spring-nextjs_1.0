/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * AKSI Dry Cleaning Order System API
 * API for dry cleaning order management system with Domain-Driven Design architecture. The system includes 13 domains: Auth, User, Customer, Branch, Employee, Order, OrderItem, Service, Garment, Pricing, Payment, Notification, and Analytics.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ErrorResponse,
  GetUserSessionsParams,
  InvalidateAllSessionsParams,
  JWKSet,
  LoginRequest,
  LoginResponse,
  ServerTimeResponse,
  SessionInfo,
  SessionTerminationResponse,
  UserSessionsResponse
} from './aKSIDryCleaningOrderSystemAPI.schemas';

import orvalFetcher from '../../../../lib/api/orval-fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Terminate current session
 * @summary Logout from system
 */
export const logout = (
    
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<null>(
      {url: `/api/auth/logout`, method: 'POST', signal
    },
      options);
    }
  


export const getLogoutMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof logout>>, TError,void, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof logout>>, TError,void, TContext> => {

const mutationKey = ['logout'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof logout>>, void> = () => {
          

          return  logout(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LogoutMutationResult = NonNullable<Awaited<ReturnType<typeof logout>>>
    
    export type LogoutMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Logout from system
 */
export const useLogout = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof logout>>, TError,void, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof logout>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getLogoutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Authenticate operator and return session cookie
 * @summary Login to system
 */
export const login = (
    loginRequest: LoginRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<LoginResponse>(
      {url: `/api/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginRequest, signal
    },
      options);
    }
  


export const getLoginMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,{data: LoginRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,{data: LoginRequest}, TContext> => {

const mutationKey = ['login'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof login>>, {data: LoginRequest}> = (props) => {
          const {data} = props ?? {};

          return  login(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>
    export type LoginMutationBody = LoginRequest
    export type LoginMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Login to system
 */
export const useLogin = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,{data: LoginRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof login>>,
        TError,
        {data: LoginRequest},
        TContext
      > => {

      const mutationOptions = getLoginMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * List all active sessions for current user or specified user (admin only)
 * @summary Get all user sessions
 */
export const getUserSessions = (
    params?: GetUserSessionsParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<UserSessionsResponse>(
      {url: `/api/auth/sessions`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetUserSessionsQueryKey = (params?: GetUserSessionsParams,) => {
    return [`/api/auth/sessions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserSessionsQueryOptions = <TData = Awaited<ReturnType<typeof getUserSessions>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(params?: GetUserSessionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSessions>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserSessionsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserSessions>>> = ({ signal }) => getUserSessions(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserSessions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserSessionsQueryResult = NonNullable<Awaited<ReturnType<typeof getUserSessions>>>
export type GetUserSessionsQueryError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse


export function useGetUserSessions<TData = Awaited<ReturnType<typeof getUserSessions>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 params: undefined |  GetUserSessionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSessions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserSessions>>,
          TError,
          Awaited<ReturnType<typeof getUserSessions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserSessions<TData = Awaited<ReturnType<typeof getUserSessions>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 params?: GetUserSessionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSessions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserSessions>>,
          TError,
          Awaited<ReturnType<typeof getUserSessions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserSessions<TData = Awaited<ReturnType<typeof getUserSessions>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 params?: GetUserSessionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSessions>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all user sessions
 */

export function useGetUserSessions<TData = Awaited<ReturnType<typeof getUserSessions>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 params?: GetUserSessionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSessions>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserSessionsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Logout user from all devices except current session
 * @summary Terminate all other sessions
 */
export const terminateOtherSessions = (
    
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<SessionTerminationResponse>(
      {url: `/api/auth/sessions`, method: 'DELETE'
    },
      options);
    }
  


export const getTerminateOtherSessionsMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof terminateOtherSessions>>, TError,void, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof terminateOtherSessions>>, TError,void, TContext> => {

const mutationKey = ['terminateOtherSessions'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof terminateOtherSessions>>, void> = () => {
          

          return  terminateOtherSessions(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TerminateOtherSessionsMutationResult = NonNullable<Awaited<ReturnType<typeof terminateOtherSessions>>>
    
    export type TerminateOtherSessionsMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Terminate all other sessions
 */
export const useTerminateOtherSessions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof terminateOtherSessions>>, TError,void, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof terminateOtherSessions>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getTerminateOtherSessionsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Information about current user and session
 * @summary Get current session info
 */
export const getCurrentSession = (
    
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<SessionInfo>(
      {url: `/api/auth/session`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCurrentSessionQueryKey = () => {
    return [`/api/auth/session`] as const;
    }

    
export const getGetCurrentSessionQueryOptions = <TData = Awaited<ReturnType<typeof getCurrentSession>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentSession>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCurrentSessionQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentSession>>> = ({ signal }) => getCurrentSession(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCurrentSession>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCurrentSessionQueryResult = NonNullable<Awaited<ReturnType<typeof getCurrentSession>>>
export type GetCurrentSessionQueryError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse


export function useGetCurrentSession<TData = Awaited<ReturnType<typeof getCurrentSession>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentSession>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentSession>>,
          TError,
          Awaited<ReturnType<typeof getCurrentSession>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCurrentSession<TData = Awaited<ReturnType<typeof getCurrentSession>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentSession>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentSession>>,
          TError,
          Awaited<ReturnType<typeof getCurrentSession>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCurrentSession<TData = Awaited<ReturnType<typeof getCurrentSession>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentSession>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get current session info
 */

export function useGetCurrentSession<TData = Awaited<ReturnType<typeof getCurrentSession>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentSession>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCurrentSessionQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Logout user from all devices (admin only)
 * @summary Terminate all sessions for user
 */
export const invalidateAllSessions = (
    params: InvalidateAllSessionsParams,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<null>(
      {url: `/api/auth/session`, method: 'DELETE',
        params
    },
      options);
    }
  


export const getInvalidateAllSessionsMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof invalidateAllSessions>>, TError,{params: InvalidateAllSessionsParams}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof invalidateAllSessions>>, TError,{params: InvalidateAllSessionsParams}, TContext> => {

const mutationKey = ['invalidateAllSessions'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof invalidateAllSessions>>, {params: InvalidateAllSessionsParams}> = (props) => {
          const {params} = props ?? {};

          return  invalidateAllSessions(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type InvalidateAllSessionsMutationResult = NonNullable<Awaited<ReturnType<typeof invalidateAllSessions>>>
    
    export type InvalidateAllSessionsMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Terminate all sessions for user
 */
export const useInvalidateAllSessions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof invalidateAllSessions>>, TError,{params: InvalidateAllSessionsParams}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof invalidateAllSessions>>,
        TError,
        {params: InvalidateAllSessionsParams},
        TContext
      > => {

      const mutationOptions = getInvalidateAllSessionsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Returns current server timestamp for time synchronization between frontend and backend. Used to avoid hydration issues and ensure consistent time across client and server. 
 * @summary Get current server time
 */
export const getServerTime = (
    
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<ServerTimeResponse>(
      {url: `/api/auth/server-time`, method: 'GET', signal
    },
      options);
    }
  

export const getGetServerTimeQueryKey = () => {
    return [`/api/auth/server-time`] as const;
    }

    
export const getGetServerTimeQueryOptions = <TData = Awaited<ReturnType<typeof getServerTime>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServerTime>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServerTimeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServerTime>>> = ({ signal }) => getServerTime(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServerTime>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetServerTimeQueryResult = NonNullable<Awaited<ReturnType<typeof getServerTime>>>
export type GetServerTimeQueryError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse


export function useGetServerTime<TData = Awaited<ReturnType<typeof getServerTime>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServerTime>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServerTime>>,
          TError,
          Awaited<ReturnType<typeof getServerTime>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetServerTime<TData = Awaited<ReturnType<typeof getServerTime>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServerTime>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServerTime>>,
          TError,
          Awaited<ReturnType<typeof getServerTime>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetServerTime<TData = Awaited<ReturnType<typeof getServerTime>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServerTime>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get current server time
 */

export function useGetServerTime<TData = Awaited<ReturnType<typeof getServerTime>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServerTime>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetServerTimeQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Returns JSON Web Key Set (JWKS) containing public keys for JWT verification. Used by external services to verify JWT tokens issued by this auth service. 
 * @summary Get JSON Web Keys
 */
export const getJwks = (
    
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<JWKSet>(
      {url: `/api/auth/jwks`, method: 'GET', signal
    },
      options);
    }
  

export const getGetJwksQueryKey = () => {
    return [`/api/auth/jwks`] as const;
    }

    
export const getGetJwksQueryOptions = <TData = Awaited<ReturnType<typeof getJwks>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getJwks>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetJwksQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getJwks>>> = ({ signal }) => getJwks(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getJwks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetJwksQueryResult = NonNullable<Awaited<ReturnType<typeof getJwks>>>
export type GetJwksQueryError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse


export function useGetJwks<TData = Awaited<ReturnType<typeof getJwks>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getJwks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getJwks>>,
          TError,
          Awaited<ReturnType<typeof getJwks>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetJwks<TData = Awaited<ReturnType<typeof getJwks>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getJwks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getJwks>>,
          TError,
          Awaited<ReturnType<typeof getJwks>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetJwks<TData = Awaited<ReturnType<typeof getJwks>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getJwks>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get JSON Web Keys
 */

export function useGetJwks<TData = Awaited<ReturnType<typeof getJwks>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getJwks>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetJwksQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Terminate a specific user session
 * @summary Terminate specific session
 */
export const terminateSession = (
    sessionId: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<null>(
      {url: `/api/auth/sessions/${sessionId}`, method: 'DELETE'
    },
      options);
    }
  


export const getTerminateSessionMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof terminateSession>>, TError,{sessionId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof terminateSession>>, TError,{sessionId: string}, TContext> => {

const mutationKey = ['terminateSession'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof terminateSession>>, {sessionId: string}> = (props) => {
          const {sessionId} = props ?? {};

          return  terminateSession(sessionId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TerminateSessionMutationResult = NonNullable<Awaited<ReturnType<typeof terminateSession>>>
    
    export type TerminateSessionMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Terminate specific session
 */
export const useTerminateSession = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof terminateSession>>, TError,{sessionId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof terminateSession>>,
        TError,
        {sessionId: string},
        TContext
      > => {

      const mutationOptions = getTerminateSessionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
