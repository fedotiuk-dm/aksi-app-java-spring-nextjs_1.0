/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AKSI API
 * API –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–ª—ñ–Ω—ñ–Ω–≥–æ–≤–æ—é –∫–æ–º–ø–∞–Ω—ñ—î—é AKSI
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';

/**
 * @summary –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø–ª—è–º
 */
export const substep3ProcessStainSelectionParams = zod.object({
  "sessionId": zod.coerce.string().uuid()
}).strict()

export const substep3ProcessStainSelectionQueryParams = zod.object({
  "selectedStains": zod.coerce.string().optional(),
  "otherStains": zod.coerce.string().optional()
}).strict()

export const substep3ProcessStainSelection200ResponseDataCurrentItemDescriptionMin = 0;

export const substep3ProcessStainSelection200ResponseDataCurrentItemDescriptionMax = 1000;
export const substep3ProcessStainSelection200ResponseDataCurrentItemSpecialInstructionsMin = 0;

export const substep3ProcessStainSelection200ResponseDataCurrentItemSpecialInstructionsMax = 500;
export const substep3ProcessStainSelection200ResponseDataCurrentItemDefectsNotesMin = 0;

export const substep3ProcessStainSelection200ResponseDataCurrentItemDefectsNotesMax = 1000;


export const substep3ProcessStainSelection200Response = zod.object({
  "currentState": zod.enum(['NOT_STARTED', 'SELECTING_STAINS', 'SELECTING_DEFECTS', 'ENTERING_NOTES', 'VALIDATING_DATA', 'COMPLETED', 'ERROR']).optional(),
  "data": zod.object({
  "currentItem": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "orderId": zod.coerce.string().uuid().optional(),
  "description": zod.coerce.string().min(substep3ProcessStainSelection200ResponseDataCurrentItemDescriptionMin).max(substep3ProcessStainSelection200ResponseDataCurrentItemDescriptionMax).optional(),
  "quantity": zod.coerce.number().min(1),
  "unitPrice": zod.coerce.number(),
  "totalPrice": zod.coerce.number().optional(),
  "category": zod.coerce.string().optional(),
  "color": zod.coerce.string().optional(),
  "material": zod.coerce.string().optional(),
  "unitOfMeasure": zod.coerce.string().optional(),
  "defects": zod.coerce.string().optional(),
  "specialInstructions": zod.coerce.string().min(substep3ProcessStainSelection200ResponseDataCurrentItemSpecialInstructionsMin).max(substep3ProcessStainSelection200ResponseDataCurrentItemSpecialInstructionsMax).optional(),
  "fillerType": zod.coerce.string().optional(),
  "fillerCompressed": zod.coerce.boolean().optional(),
  "wearDegree": zod.coerce.string().optional(),
  "stains": zod.coerce.string().optional(),
  "otherStains": zod.coerce.string().optional(),
  "defectsAndRisks": zod.coerce.string().optional(),
  "noGuaranteeReason": zod.coerce.string().optional(),
  "defectsNotes": zod.coerce.string().min(substep3ProcessStainSelection200ResponseDataCurrentItemDefectsNotesMin).max(substep3ProcessStainSelection200ResponseDataCurrentItemDefectsNotesMax).optional()
}).strict().optional(),
  "stainsSelectionCompleted": zod.coerce.boolean().optional(),
  "defectsSelectionCompleted": zod.coerce.boolean().optional(),
  "dataValid": zod.coerce.boolean().optional(),
  "noGuaranteeReasonRequired": zod.coerce.boolean().optional(),
  "noGuarantee": zod.coerce.boolean().optional()
}).strict().optional(),
  "errorMessage": zod.coerce.string().optional()
}).strict()

export const substep3ProcessStainSelection400Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3ProcessStainSelection401Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3ProcessStainSelection403Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3ProcessStainSelection404Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3ProcessStainSelection409Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * @summary –û–±—Ä–æ–±–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–∏–º—ñ—Ç–æ–∫ –ø—Ä–æ –¥–µ—Ñ–µ–∫—Ç–∏
 */
export const substep3ProcessDefectNotesParams = zod.object({
  "sessionId": zod.coerce.string().uuid()
}).strict()

export const substep3ProcessDefectNotesQueryParams = zod.object({
  "defectNotes": zod.coerce.string().optional()
}).strict()

export const substep3ProcessDefectNotes200ResponseDataCurrentItemDescriptionMin = 0;

export const substep3ProcessDefectNotes200ResponseDataCurrentItemDescriptionMax = 1000;
export const substep3ProcessDefectNotes200ResponseDataCurrentItemSpecialInstructionsMin = 0;

export const substep3ProcessDefectNotes200ResponseDataCurrentItemSpecialInstructionsMax = 500;
export const substep3ProcessDefectNotes200ResponseDataCurrentItemDefectsNotesMin = 0;

export const substep3ProcessDefectNotes200ResponseDataCurrentItemDefectsNotesMax = 1000;


export const substep3ProcessDefectNotes200Response = zod.object({
  "currentState": zod.enum(['NOT_STARTED', 'SELECTING_STAINS', 'SELECTING_DEFECTS', 'ENTERING_NOTES', 'VALIDATING_DATA', 'COMPLETED', 'ERROR']).optional(),
  "data": zod.object({
  "currentItem": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "orderId": zod.coerce.string().uuid().optional(),
  "description": zod.coerce.string().min(substep3ProcessDefectNotes200ResponseDataCurrentItemDescriptionMin).max(substep3ProcessDefectNotes200ResponseDataCurrentItemDescriptionMax).optional(),
  "quantity": zod.coerce.number().min(1),
  "unitPrice": zod.coerce.number(),
  "totalPrice": zod.coerce.number().optional(),
  "category": zod.coerce.string().optional(),
  "color": zod.coerce.string().optional(),
  "material": zod.coerce.string().optional(),
  "unitOfMeasure": zod.coerce.string().optional(),
  "defects": zod.coerce.string().optional(),
  "specialInstructions": zod.coerce.string().min(substep3ProcessDefectNotes200ResponseDataCurrentItemSpecialInstructionsMin).max(substep3ProcessDefectNotes200ResponseDataCurrentItemSpecialInstructionsMax).optional(),
  "fillerType": zod.coerce.string().optional(),
  "fillerCompressed": zod.coerce.boolean().optional(),
  "wearDegree": zod.coerce.string().optional(),
  "stains": zod.coerce.string().optional(),
  "otherStains": zod.coerce.string().optional(),
  "defectsAndRisks": zod.coerce.string().optional(),
  "noGuaranteeReason": zod.coerce.string().optional(),
  "defectsNotes": zod.coerce.string().min(substep3ProcessDefectNotes200ResponseDataCurrentItemDefectsNotesMin).max(substep3ProcessDefectNotes200ResponseDataCurrentItemDefectsNotesMax).optional()
}).strict().optional(),
  "stainsSelectionCompleted": zod.coerce.boolean().optional(),
  "defectsSelectionCompleted": zod.coerce.boolean().optional(),
  "dataValid": zod.coerce.boolean().optional(),
  "noGuaranteeReasonRequired": zod.coerce.boolean().optional(),
  "noGuarantee": zod.coerce.boolean().optional()
}).strict().optional(),
  "errorMessage": zod.coerce.string().optional()
}).strict()

export const substep3ProcessDefectNotes400Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3ProcessDefectNotes401Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3ProcessDefectNotes403Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3ProcessDefectNotes404Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3ProcessDefectNotes409Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * @summary –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥–µ—Ç–∞–ø—É 3
 */
export const substep3InitializeSubstepParams = zod.object({
  "sessionId": zod.coerce.string().uuid()
}).strict()

export const substep3InitializeSubstepBodyDescriptionMin = 0;

export const substep3InitializeSubstepBodyDescriptionMax = 1000;
export const substep3InitializeSubstepBodySpecialInstructionsMin = 0;

export const substep3InitializeSubstepBodySpecialInstructionsMax = 500;
export const substep3InitializeSubstepBodyDefectsNotesMin = 0;

export const substep3InitializeSubstepBodyDefectsNotesMax = 1000;


export const substep3InitializeSubstepBody = zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "orderId": zod.coerce.string().uuid().optional(),
  "description": zod.coerce.string().min(substep3InitializeSubstepBodyDescriptionMin).max(substep3InitializeSubstepBodyDescriptionMax).optional(),
  "quantity": zod.coerce.number().min(1),
  "unitPrice": zod.coerce.number(),
  "totalPrice": zod.coerce.number().optional(),
  "category": zod.coerce.string().optional(),
  "color": zod.coerce.string().optional(),
  "material": zod.coerce.string().optional(),
  "unitOfMeasure": zod.coerce.string().optional(),
  "defects": zod.coerce.string().optional(),
  "specialInstructions": zod.coerce.string().min(substep3InitializeSubstepBodySpecialInstructionsMin).max(substep3InitializeSubstepBodySpecialInstructionsMax).optional(),
  "fillerType": zod.coerce.string().optional(),
  "fillerCompressed": zod.coerce.boolean().optional(),
  "wearDegree": zod.coerce.string().optional(),
  "stains": zod.coerce.string().optional(),
  "otherStains": zod.coerce.string().optional(),
  "defectsAndRisks": zod.coerce.string().optional(),
  "noGuaranteeReason": zod.coerce.string().optional(),
  "defectsNotes": zod.coerce.string().min(substep3InitializeSubstepBodyDefectsNotesMin).max(substep3InitializeSubstepBodyDefectsNotesMax).optional()
}).strict()

export const substep3InitializeSubstep200ResponseDataCurrentItemDescriptionMin = 0;

export const substep3InitializeSubstep200ResponseDataCurrentItemDescriptionMax = 1000;
export const substep3InitializeSubstep200ResponseDataCurrentItemSpecialInstructionsMin = 0;

export const substep3InitializeSubstep200ResponseDataCurrentItemSpecialInstructionsMax = 500;
export const substep3InitializeSubstep200ResponseDataCurrentItemDefectsNotesMin = 0;

export const substep3InitializeSubstep200ResponseDataCurrentItemDefectsNotesMax = 1000;


export const substep3InitializeSubstep200Response = zod.object({
  "currentState": zod.enum(['NOT_STARTED', 'SELECTING_STAINS', 'SELECTING_DEFECTS', 'ENTERING_NOTES', 'VALIDATING_DATA', 'COMPLETED', 'ERROR']).optional(),
  "data": zod.object({
  "currentItem": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "orderId": zod.coerce.string().uuid().optional(),
  "description": zod.coerce.string().min(substep3InitializeSubstep200ResponseDataCurrentItemDescriptionMin).max(substep3InitializeSubstep200ResponseDataCurrentItemDescriptionMax).optional(),
  "quantity": zod.coerce.number().min(1),
  "unitPrice": zod.coerce.number(),
  "totalPrice": zod.coerce.number().optional(),
  "category": zod.coerce.string().optional(),
  "color": zod.coerce.string().optional(),
  "material": zod.coerce.string().optional(),
  "unitOfMeasure": zod.coerce.string().optional(),
  "defects": zod.coerce.string().optional(),
  "specialInstructions": zod.coerce.string().min(substep3InitializeSubstep200ResponseDataCurrentItemSpecialInstructionsMin).max(substep3InitializeSubstep200ResponseDataCurrentItemSpecialInstructionsMax).optional(),
  "fillerType": zod.coerce.string().optional(),
  "fillerCompressed": zod.coerce.boolean().optional(),
  "wearDegree": zod.coerce.string().optional(),
  "stains": zod.coerce.string().optional(),
  "otherStains": zod.coerce.string().optional(),
  "defectsAndRisks": zod.coerce.string().optional(),
  "noGuaranteeReason": zod.coerce.string().optional(),
  "defectsNotes": zod.coerce.string().min(substep3InitializeSubstep200ResponseDataCurrentItemDefectsNotesMin).max(substep3InitializeSubstep200ResponseDataCurrentItemDefectsNotesMax).optional()
}).strict().optional(),
  "stainsSelectionCompleted": zod.coerce.boolean().optional(),
  "defectsSelectionCompleted": zod.coerce.boolean().optional(),
  "dataValid": zod.coerce.boolean().optional(),
  "noGuaranteeReasonRequired": zod.coerce.boolean().optional(),
  "noGuarantee": zod.coerce.boolean().optional()
}).strict().optional(),
  "errorMessage": zod.coerce.string().optional()
}).strict()

export const substep3InitializeSubstep400Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3InitializeSubstep401Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3InitializeSubstep403Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3InitializeSubstep404Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3InitializeSubstep409Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * @summary –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å—Ç–∞–Ω—É
 */
export const substep3GoBackParams = zod.object({
  "sessionId": zod.coerce.string().uuid()
}).strict()

export const substep3GoBackQueryParams = zod.object({
  "targetState": zod.enum(['NOT_STARTED', 'SELECTING_STAINS', 'SELECTING_DEFECTS', 'ENTERING_NOTES', 'VALIDATING_DATA', 'COMPLETED', 'ERROR'])
}).strict()

export const substep3GoBack200ResponseDataCurrentItemDescriptionMin = 0;

export const substep3GoBack200ResponseDataCurrentItemDescriptionMax = 1000;
export const substep3GoBack200ResponseDataCurrentItemSpecialInstructionsMin = 0;

export const substep3GoBack200ResponseDataCurrentItemSpecialInstructionsMax = 500;
export const substep3GoBack200ResponseDataCurrentItemDefectsNotesMin = 0;

export const substep3GoBack200ResponseDataCurrentItemDefectsNotesMax = 1000;


export const substep3GoBack200Response = zod.object({
  "currentState": zod.enum(['NOT_STARTED', 'SELECTING_STAINS', 'SELECTING_DEFECTS', 'ENTERING_NOTES', 'VALIDATING_DATA', 'COMPLETED', 'ERROR']).optional(),
  "data": zod.object({
  "currentItem": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "orderId": zod.coerce.string().uuid().optional(),
  "description": zod.coerce.string().min(substep3GoBack200ResponseDataCurrentItemDescriptionMin).max(substep3GoBack200ResponseDataCurrentItemDescriptionMax).optional(),
  "quantity": zod.coerce.number().min(1),
  "unitPrice": zod.coerce.number(),
  "totalPrice": zod.coerce.number().optional(),
  "category": zod.coerce.string().optional(),
  "color": zod.coerce.string().optional(),
  "material": zod.coerce.string().optional(),
  "unitOfMeasure": zod.coerce.string().optional(),
  "defects": zod.coerce.string().optional(),
  "specialInstructions": zod.coerce.string().min(substep3GoBack200ResponseDataCurrentItemSpecialInstructionsMin).max(substep3GoBack200ResponseDataCurrentItemSpecialInstructionsMax).optional(),
  "fillerType": zod.coerce.string().optional(),
  "fillerCompressed": zod.coerce.boolean().optional(),
  "wearDegree": zod.coerce.string().optional(),
  "stains": zod.coerce.string().optional(),
  "otherStains": zod.coerce.string().optional(),
  "defectsAndRisks": zod.coerce.string().optional(),
  "noGuaranteeReason": zod.coerce.string().optional(),
  "defectsNotes": zod.coerce.string().min(substep3GoBack200ResponseDataCurrentItemDefectsNotesMin).max(substep3GoBack200ResponseDataCurrentItemDefectsNotesMax).optional()
}).strict().optional(),
  "stainsSelectionCompleted": zod.coerce.boolean().optional(),
  "defectsSelectionCompleted": zod.coerce.boolean().optional(),
  "dataValid": zod.coerce.boolean().optional(),
  "noGuaranteeReasonRequired": zod.coerce.boolean().optional(),
  "noGuarantee": zod.coerce.boolean().optional()
}).strict().optional(),
  "errorMessage": zod.coerce.string().optional()
}).strict()

export const substep3GoBack400Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3GoBack401Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3GoBack403Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3GoBack404Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3GoBack409Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * @summary –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥–µ—Ñ–µ–∫—Ç—ñ–≤ —Ç–∞ —Ä–∏–∑–∏–∫—ñ–≤
 */
export const substep3ProcessDefectSelectionParams = zod.object({
  "sessionId": zod.coerce.string().uuid()
}).strict()

export const substep3ProcessDefectSelectionQueryParams = zod.object({
  "selectedDefects": zod.coerce.string().optional(),
  "noGuaranteeReason": zod.coerce.string().optional()
}).strict()

export const substep3ProcessDefectSelection200ResponseDataCurrentItemDescriptionMin = 0;

export const substep3ProcessDefectSelection200ResponseDataCurrentItemDescriptionMax = 1000;
export const substep3ProcessDefectSelection200ResponseDataCurrentItemSpecialInstructionsMin = 0;

export const substep3ProcessDefectSelection200ResponseDataCurrentItemSpecialInstructionsMax = 500;
export const substep3ProcessDefectSelection200ResponseDataCurrentItemDefectsNotesMin = 0;

export const substep3ProcessDefectSelection200ResponseDataCurrentItemDefectsNotesMax = 1000;


export const substep3ProcessDefectSelection200Response = zod.object({
  "currentState": zod.enum(['NOT_STARTED', 'SELECTING_STAINS', 'SELECTING_DEFECTS', 'ENTERING_NOTES', 'VALIDATING_DATA', 'COMPLETED', 'ERROR']).optional(),
  "data": zod.object({
  "currentItem": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "orderId": zod.coerce.string().uuid().optional(),
  "description": zod.coerce.string().min(substep3ProcessDefectSelection200ResponseDataCurrentItemDescriptionMin).max(substep3ProcessDefectSelection200ResponseDataCurrentItemDescriptionMax).optional(),
  "quantity": zod.coerce.number().min(1),
  "unitPrice": zod.coerce.number(),
  "totalPrice": zod.coerce.number().optional(),
  "category": zod.coerce.string().optional(),
  "color": zod.coerce.string().optional(),
  "material": zod.coerce.string().optional(),
  "unitOfMeasure": zod.coerce.string().optional(),
  "defects": zod.coerce.string().optional(),
  "specialInstructions": zod.coerce.string().min(substep3ProcessDefectSelection200ResponseDataCurrentItemSpecialInstructionsMin).max(substep3ProcessDefectSelection200ResponseDataCurrentItemSpecialInstructionsMax).optional(),
  "fillerType": zod.coerce.string().optional(),
  "fillerCompressed": zod.coerce.boolean().optional(),
  "wearDegree": zod.coerce.string().optional(),
  "stains": zod.coerce.string().optional(),
  "otherStains": zod.coerce.string().optional(),
  "defectsAndRisks": zod.coerce.string().optional(),
  "noGuaranteeReason": zod.coerce.string().optional(),
  "defectsNotes": zod.coerce.string().min(substep3ProcessDefectSelection200ResponseDataCurrentItemDefectsNotesMin).max(substep3ProcessDefectSelection200ResponseDataCurrentItemDefectsNotesMax).optional()
}).strict().optional(),
  "stainsSelectionCompleted": zod.coerce.boolean().optional(),
  "defectsSelectionCompleted": zod.coerce.boolean().optional(),
  "dataValid": zod.coerce.boolean().optional(),
  "noGuaranteeReasonRequired": zod.coerce.boolean().optional(),
  "noGuarantee": zod.coerce.boolean().optional()
}).strict().optional(),
  "errorMessage": zod.coerce.string().optional()
}).strict()

export const substep3ProcessDefectSelection400Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3ProcessDefectSelection401Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3ProcessDefectSelection403Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3ProcessDefectSelection404Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3ProcessDefectSelection409Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * @summary –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—ñ–¥–µ—Ç–∞–ø—É 3
 */
export const substep3CompleteSubstepParams = zod.object({
  "sessionId": zod.coerce.string().uuid()
}).strict()

export const substep3CompleteSubstep200ResponseDataCurrentItemDescriptionMin = 0;

export const substep3CompleteSubstep200ResponseDataCurrentItemDescriptionMax = 1000;
export const substep3CompleteSubstep200ResponseDataCurrentItemSpecialInstructionsMin = 0;

export const substep3CompleteSubstep200ResponseDataCurrentItemSpecialInstructionsMax = 500;
export const substep3CompleteSubstep200ResponseDataCurrentItemDefectsNotesMin = 0;

export const substep3CompleteSubstep200ResponseDataCurrentItemDefectsNotesMax = 1000;


export const substep3CompleteSubstep200Response = zod.object({
  "currentState": zod.enum(['NOT_STARTED', 'SELECTING_STAINS', 'SELECTING_DEFECTS', 'ENTERING_NOTES', 'VALIDATING_DATA', 'COMPLETED', 'ERROR']).optional(),
  "data": zod.object({
  "currentItem": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "orderId": zod.coerce.string().uuid().optional(),
  "description": zod.coerce.string().min(substep3CompleteSubstep200ResponseDataCurrentItemDescriptionMin).max(substep3CompleteSubstep200ResponseDataCurrentItemDescriptionMax).optional(),
  "quantity": zod.coerce.number().min(1),
  "unitPrice": zod.coerce.number(),
  "totalPrice": zod.coerce.number().optional(),
  "category": zod.coerce.string().optional(),
  "color": zod.coerce.string().optional(),
  "material": zod.coerce.string().optional(),
  "unitOfMeasure": zod.coerce.string().optional(),
  "defects": zod.coerce.string().optional(),
  "specialInstructions": zod.coerce.string().min(substep3CompleteSubstep200ResponseDataCurrentItemSpecialInstructionsMin).max(substep3CompleteSubstep200ResponseDataCurrentItemSpecialInstructionsMax).optional(),
  "fillerType": zod.coerce.string().optional(),
  "fillerCompressed": zod.coerce.boolean().optional(),
  "wearDegree": zod.coerce.string().optional(),
  "stains": zod.coerce.string().optional(),
  "otherStains": zod.coerce.string().optional(),
  "defectsAndRisks": zod.coerce.string().optional(),
  "noGuaranteeReason": zod.coerce.string().optional(),
  "defectsNotes": zod.coerce.string().min(substep3CompleteSubstep200ResponseDataCurrentItemDefectsNotesMin).max(substep3CompleteSubstep200ResponseDataCurrentItemDefectsNotesMax).optional()
}).strict().optional(),
  "stainsSelectionCompleted": zod.coerce.boolean().optional(),
  "defectsSelectionCompleted": zod.coerce.boolean().optional(),
  "dataValid": zod.coerce.boolean().optional(),
  "noGuaranteeReasonRequired": zod.coerce.boolean().optional(),
  "noGuarantee": zod.coerce.boolean().optional()
}).strict().optional(),
  "errorMessage": zod.coerce.string().optional()
}).strict()

export const substep3CompleteSubstep400Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3CompleteSubstep401Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3CompleteSubstep403Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3CompleteSubstep404Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3CompleteSubstep409Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * @summary –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø–ª—è–º
 */
export const substep3GetAvailableStainTypes200ResponseItem = zod.coerce.string()
export const substep3GetAvailableStainTypes200Response = zod.array(substep3GetAvailableStainTypes200ResponseItem)

export const substep3GetAvailableStainTypes400Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3GetAvailableStainTypes401Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3GetAvailableStainTypes403Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3GetAvailableStainTypes404Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3GetAvailableStainTypes409Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * @summary –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –¥–µ—Ñ–µ–∫—Ç—ñ–≤
 */
export const substep3GetAvailableDefectTypes200ResponseItem = zod.coerce.string()
export const substep3GetAvailableDefectTypes200Response = zod.array(substep3GetAvailableDefectTypes200ResponseItem)

export const substep3GetAvailableDefectTypes400Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3GetAvailableDefectTypes401Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3GetAvailableDefectTypes403Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3GetAvailableDefectTypes404Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3GetAvailableDefectTypes409Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * @summary –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
 */
export const substep3GetContextParams = zod.object({
  "sessionId": zod.coerce.string().uuid()
}).strict()

export const substep3GetContext200ResponseDataCurrentItemDescriptionMin = 0;

export const substep3GetContext200ResponseDataCurrentItemDescriptionMax = 1000;
export const substep3GetContext200ResponseDataCurrentItemSpecialInstructionsMin = 0;

export const substep3GetContext200ResponseDataCurrentItemSpecialInstructionsMax = 500;
export const substep3GetContext200ResponseDataCurrentItemDefectsNotesMin = 0;

export const substep3GetContext200ResponseDataCurrentItemDefectsNotesMax = 1000;


export const substep3GetContext200Response = zod.object({
  "currentState": zod.enum(['NOT_STARTED', 'SELECTING_STAINS', 'SELECTING_DEFECTS', 'ENTERING_NOTES', 'VALIDATING_DATA', 'COMPLETED', 'ERROR']).optional(),
  "data": zod.object({
  "currentItem": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "orderId": zod.coerce.string().uuid().optional(),
  "description": zod.coerce.string().min(substep3GetContext200ResponseDataCurrentItemDescriptionMin).max(substep3GetContext200ResponseDataCurrentItemDescriptionMax).optional(),
  "quantity": zod.coerce.number().min(1),
  "unitPrice": zod.coerce.number(),
  "totalPrice": zod.coerce.number().optional(),
  "category": zod.coerce.string().optional(),
  "color": zod.coerce.string().optional(),
  "material": zod.coerce.string().optional(),
  "unitOfMeasure": zod.coerce.string().optional(),
  "defects": zod.coerce.string().optional(),
  "specialInstructions": zod.coerce.string().min(substep3GetContext200ResponseDataCurrentItemSpecialInstructionsMin).max(substep3GetContext200ResponseDataCurrentItemSpecialInstructionsMax).optional(),
  "fillerType": zod.coerce.string().optional(),
  "fillerCompressed": zod.coerce.boolean().optional(),
  "wearDegree": zod.coerce.string().optional(),
  "stains": zod.coerce.string().optional(),
  "otherStains": zod.coerce.string().optional(),
  "defectsAndRisks": zod.coerce.string().optional(),
  "noGuaranteeReason": zod.coerce.string().optional(),
  "defectsNotes": zod.coerce.string().min(substep3GetContext200ResponseDataCurrentItemDefectsNotesMin).max(substep3GetContext200ResponseDataCurrentItemDefectsNotesMax).optional()
}).strict().optional(),
  "stainsSelectionCompleted": zod.coerce.boolean().optional(),
  "defectsSelectionCompleted": zod.coerce.boolean().optional(),
  "dataValid": zod.coerce.boolean().optional(),
  "noGuaranteeReasonRequired": zod.coerce.boolean().optional(),
  "noGuarantee": zod.coerce.boolean().optional()
}).strict().optional(),
  "errorMessage": zod.coerce.string().optional()
}).strict()

export const substep3GetContext400Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3GetContext401Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3GetContext403Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3GetContext404Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const substep3GetContext409Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')
