/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * AKSI Dry Cleaning Order System API
 * API for dry cleaning order management system with Domain-Driven Design architecture. The system includes 13 domains: Auth, User, Customer, Branch, Employee, Order, OrderItem, Service, Garment, Pricing, Payment, Notification, and Analytics.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AddPaymentRequest,
  CreateOrderRequest,
  ErrorResponse,
  GetCustomerOrderHistoryParams,
  GetCustomerRecentOrdersParams,
  GetOrdersByStatusParams,
  GetOrdersDueForCompletionParams,
  GetOverdueOrdersParams,
  ItemPhotoInfo,
  ListOrdersParams,
  OrderInfo,
  OrderItemInfo,
  OrderListResponse,
  PaymentInfo,
  SaveSignatureRequest,
  UpdateItemCharacteristicsRequest,
  UpdateOrderStatusRequest,
  UploadItemPhotoBody,
  UploadItemPhotoParams
} from './aKSIDryCleaningOrderSystemAPI.schemas';

import orvalFetcher from '../../../../lib/api/orval-fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Update characteristics, stains, and defects of an order item
 * @summary Update item characteristics
 */
export const updateItemCharacteristics = (
    orderId: string,
    itemId: string,
    updateItemCharacteristicsRequest: UpdateItemCharacteristicsRequest,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<OrderItemInfo>(
      {url: `/api/orders/${orderId}/items/${itemId}/characteristics`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateItemCharacteristicsRequest
    },
      options);
    }
  


export const getUpdateItemCharacteristicsMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateItemCharacteristics>>, TError,{orderId: string;itemId: string;data: UpdateItemCharacteristicsRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof updateItemCharacteristics>>, TError,{orderId: string;itemId: string;data: UpdateItemCharacteristicsRequest}, TContext> => {

const mutationKey = ['updateItemCharacteristics'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateItemCharacteristics>>, {orderId: string;itemId: string;data: UpdateItemCharacteristicsRequest}> = (props) => {
          const {orderId,itemId,data} = props ?? {};

          return  updateItemCharacteristics(orderId,itemId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateItemCharacteristicsMutationResult = NonNullable<Awaited<ReturnType<typeof updateItemCharacteristics>>>
    export type UpdateItemCharacteristicsMutationBody = UpdateItemCharacteristicsRequest
    export type UpdateItemCharacteristicsMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Update item characteristics
 */
export const useUpdateItemCharacteristics = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateItemCharacteristics>>, TError,{orderId: string;itemId: string;data: UpdateItemCharacteristicsRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateItemCharacteristics>>,
        TError,
        {orderId: string;itemId: string;data: UpdateItemCharacteristicsRequest},
        TContext
      > => {

      const mutationOptions = getUpdateItemCharacteristicsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Get paginated list of orders
 * @summary List orders
 */
export const listOrders = (
    params?: ListOrdersParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<OrderListResponse>(
      {url: `/api/orders`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getListOrdersQueryKey = (params?: ListOrdersParams,) => {
    return [`/api/orders`, ...(params ? [params]: [])] as const;
    }

    
export const getListOrdersQueryOptions = <TData = Awaited<ReturnType<typeof listOrders>>, TError = ErrorResponse>(params?: ListOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listOrders>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListOrdersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listOrders>>> = ({ signal }) => listOrders(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listOrders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListOrdersQueryResult = NonNullable<Awaited<ReturnType<typeof listOrders>>>
export type ListOrdersQueryError = ErrorResponse


export function useListOrders<TData = Awaited<ReturnType<typeof listOrders>>, TError = ErrorResponse>(
 params: undefined |  ListOrdersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listOrders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listOrders>>,
          TError,
          Awaited<ReturnType<typeof listOrders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListOrders<TData = Awaited<ReturnType<typeof listOrders>>, TError = ErrorResponse>(
 params?: ListOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listOrders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listOrders>>,
          TError,
          Awaited<ReturnType<typeof listOrders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListOrders<TData = Awaited<ReturnType<typeof listOrders>>, TError = ErrorResponse>(
 params?: ListOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listOrders>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List orders
 */

export function useListOrders<TData = Awaited<ReturnType<typeof listOrders>>, TError = ErrorResponse>(
 params?: ListOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listOrders>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListOrdersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Create a new order from the current cart
 * @summary Create order from cart
 */
export const createOrder = (
    createOrderRequest: CreateOrderRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<OrderInfo>(
      {url: `/api/orders`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createOrderRequest, signal
    },
      options);
    }
  


export const getCreateOrderMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrder>>, TError,{data: CreateOrderRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof createOrder>>, TError,{data: CreateOrderRequest}, TContext> => {

const mutationKey = ['createOrder'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createOrder>>, {data: CreateOrderRequest}> = (props) => {
          const {data} = props ?? {};

          return  createOrder(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateOrderMutationResult = NonNullable<Awaited<ReturnType<typeof createOrder>>>
    export type CreateOrderMutationBody = CreateOrderRequest
    export type CreateOrderMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Create order from cart
 */
export const useCreateOrder = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrder>>, TError,{data: CreateOrderRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createOrder>>,
        TError,
        {data: CreateOrderRequest},
        TContext
      > => {

      const mutationOptions = getCreateOrderMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Save customer signature for order in base64 format
 * @summary Save customer signature
 */
export const saveCustomerSignature = (
    orderId: string,
    saveSignatureRequest: SaveSignatureRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<OrderInfo>(
      {url: `/api/orders/${orderId}/signature`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: saveSignatureRequest, signal
    },
      options);
    }
  


export const getSaveCustomerSignatureMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveCustomerSignature>>, TError,{orderId: string;data: SaveSignatureRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof saveCustomerSignature>>, TError,{orderId: string;data: SaveSignatureRequest}, TContext> => {

const mutationKey = ['saveCustomerSignature'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof saveCustomerSignature>>, {orderId: string;data: SaveSignatureRequest}> = (props) => {
          const {orderId,data} = props ?? {};

          return  saveCustomerSignature(orderId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SaveCustomerSignatureMutationResult = NonNullable<Awaited<ReturnType<typeof saveCustomerSignature>>>
    export type SaveCustomerSignatureMutationBody = SaveSignatureRequest
    export type SaveCustomerSignatureMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Save customer signature
 */
export const useSaveCustomerSignature = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveCustomerSignature>>, TError,{orderId: string;data: SaveSignatureRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof saveCustomerSignature>>,
        TError,
        {orderId: string;data: SaveSignatureRequest},
        TContext
      > => {

      const mutationOptions = getSaveCustomerSignatureMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Register a payment for an order
 * @summary Add payment to order
 */
export const addOrderPayment = (
    orderId: string,
    addPaymentRequest: AddPaymentRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<PaymentInfo>(
      {url: `/api/orders/${orderId}/payment`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: addPaymentRequest, signal
    },
      options);
    }
  


export const getAddOrderPaymentMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addOrderPayment>>, TError,{orderId: string;data: AddPaymentRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof addOrderPayment>>, TError,{orderId: string;data: AddPaymentRequest}, TContext> => {

const mutationKey = ['addOrderPayment'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addOrderPayment>>, {orderId: string;data: AddPaymentRequest}> = (props) => {
          const {orderId,data} = props ?? {};

          return  addOrderPayment(orderId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddOrderPaymentMutationResult = NonNullable<Awaited<ReturnType<typeof addOrderPayment>>>
    export type AddOrderPaymentMutationBody = AddPaymentRequest
    export type AddOrderPaymentMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Add payment to order
 */
export const useAddOrderPayment = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addOrderPayment>>, TError,{orderId: string;data: AddPaymentRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof addOrderPayment>>,
        TError,
        {orderId: string;data: AddPaymentRequest},
        TContext
      > => {

      const mutationOptions = getAddOrderPaymentMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Upload a photo for an order item
 * @summary Upload item photo
 */
export const uploadItemPhoto = (
    orderId: string,
    itemId: string,
    uploadItemPhotoBody: UploadItemPhotoBody,
    params?: UploadItemPhotoParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      const formData = new FormData();
formData.append(`file`, uploadItemPhotoBody.file)

      return orvalFetcher<ItemPhotoInfo>(
      {url: `/api/orders/${orderId}/items/${itemId}/photos`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData,
        params, signal
    },
      options);
    }
  


export const getUploadItemPhotoMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadItemPhoto>>, TError,{orderId: string;itemId: string;data: UploadItemPhotoBody;params?: UploadItemPhotoParams}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof uploadItemPhoto>>, TError,{orderId: string;itemId: string;data: UploadItemPhotoBody;params?: UploadItemPhotoParams}, TContext> => {

const mutationKey = ['uploadItemPhoto'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof uploadItemPhoto>>, {orderId: string;itemId: string;data: UploadItemPhotoBody;params?: UploadItemPhotoParams}> = (props) => {
          const {orderId,itemId,data,params} = props ?? {};

          return  uploadItemPhoto(orderId,itemId,data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UploadItemPhotoMutationResult = NonNullable<Awaited<ReturnType<typeof uploadItemPhoto>>>
    export type UploadItemPhotoMutationBody = UploadItemPhotoBody
    export type UploadItemPhotoMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Upload item photo
 */
export const useUploadItemPhoto = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadItemPhoto>>, TError,{orderId: string;itemId: string;data: UploadItemPhotoBody;params?: UploadItemPhotoParams}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof uploadItemPhoto>>,
        TError,
        {orderId: string;itemId: string;data: UploadItemPhotoBody;params?: UploadItemPhotoParams},
        TContext
      > => {

      const mutationOptions = getUploadItemPhotoMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Get detailed order information
 * @summary Get order details
 */
export const getOrderById = (
    orderId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<OrderInfo>(
      {url: `/api/orders/${orderId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderByIdQueryKey = (orderId?: string,) => {
    return [`/api/orders/${orderId}`] as const;
    }

    
export const getGetOrderByIdQueryOptions = <TData = Awaited<ReturnType<typeof getOrderById>>, TError = ErrorResponse | ErrorResponse>(orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderByIdQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderById>>> = ({ signal }) => getOrderById(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOrderByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderById>>>
export type GetOrderByIdQueryError = ErrorResponse | ErrorResponse


export function useGetOrderById<TData = Awaited<ReturnType<typeof getOrderById>>, TError = ErrorResponse | ErrorResponse>(
 orderId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderById>>,
          TError,
          Awaited<ReturnType<typeof getOrderById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrderById<TData = Awaited<ReturnType<typeof getOrderById>>, TError = ErrorResponse | ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderById>>,
          TError,
          Awaited<ReturnType<typeof getOrderById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrderById<TData = Awaited<ReturnType<typeof getOrderById>>, TError = ErrorResponse | ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get order details
 */

export function useGetOrderById<TData = Awaited<ReturnType<typeof getOrderById>>, TError = ErrorResponse | ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOrderByIdQueryOptions(orderId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Update the status of an order
 * @summary Update order status
 */
export const updateOrderStatus = (
    orderId: string,
    updateOrderStatusRequest: UpdateOrderStatusRequest,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<OrderInfo>(
      {url: `/api/orders/${orderId}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateOrderStatusRequest
    },
      options);
    }
  


export const getUpdateOrderStatusMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOrderStatus>>, TError,{orderId: string;data: UpdateOrderStatusRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof updateOrderStatus>>, TError,{orderId: string;data: UpdateOrderStatusRequest}, TContext> => {

const mutationKey = ['updateOrderStatus'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateOrderStatus>>, {orderId: string;data: UpdateOrderStatusRequest}> = (props) => {
          const {orderId,data} = props ?? {};

          return  updateOrderStatus(orderId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateOrderStatusMutationResult = NonNullable<Awaited<ReturnType<typeof updateOrderStatus>>>
    export type UpdateOrderStatusMutationBody = UpdateOrderStatusRequest
    export type UpdateOrderStatusMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Update order status
 */
export const useUpdateOrderStatus = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOrderStatus>>, TError,{orderId: string;data: UpdateOrderStatusRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateOrderStatus>>,
        TError,
        {orderId: string;data: UpdateOrderStatusRequest},
        TContext
      > => {

      const mutationOptions = getUpdateOrderStatusMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Get receipt PDF for an order
 * @summary Get order receipt
 */
export const getOrderReceipt = (
    orderId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Blob>(
      {url: `/api/orders/${orderId}/receipt`, method: 'GET',
        responseType: 'blob', signal
    },
      options);
    }
  

export const getGetOrderReceiptQueryKey = (orderId?: string,) => {
    return [`/api/orders/${orderId}/receipt`] as const;
    }

    
export const getGetOrderReceiptQueryOptions = <TData = Awaited<ReturnType<typeof getOrderReceipt>>, TError = ErrorResponse | ErrorResponse>(orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderReceipt>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderReceiptQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderReceipt>>> = ({ signal }) => getOrderReceipt(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderReceipt>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOrderReceiptQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderReceipt>>>
export type GetOrderReceiptQueryError = ErrorResponse | ErrorResponse


export function useGetOrderReceipt<TData = Awaited<ReturnType<typeof getOrderReceipt>>, TError = ErrorResponse | ErrorResponse>(
 orderId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderReceipt>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderReceipt>>,
          TError,
          Awaited<ReturnType<typeof getOrderReceipt>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrderReceipt<TData = Awaited<ReturnType<typeof getOrderReceipt>>, TError = ErrorResponse | ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderReceipt>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderReceipt>>,
          TError,
          Awaited<ReturnType<typeof getOrderReceipt>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrderReceipt<TData = Awaited<ReturnType<typeof getOrderReceipt>>, TError = ErrorResponse | ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderReceipt>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get order receipt
 */

export function useGetOrderReceipt<TData = Awaited<ReturnType<typeof getOrderReceipt>>, TError = ErrorResponse | ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderReceipt>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOrderReceiptQueryOptions(orderId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get payment history for a specific order
 * @summary Get order payments
 */
export const getOrderPayments = (
    orderId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<PaymentInfo[]>(
      {url: `/api/orders/${orderId}/payments`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderPaymentsQueryKey = (orderId?: string,) => {
    return [`/api/orders/${orderId}/payments`] as const;
    }

    
export const getGetOrderPaymentsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderPayments>>, TError = ErrorResponse | ErrorResponse>(orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderPayments>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderPaymentsQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderPayments>>> = ({ signal }) => getOrderPayments(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderPayments>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOrderPaymentsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderPayments>>>
export type GetOrderPaymentsQueryError = ErrorResponse | ErrorResponse


export function useGetOrderPayments<TData = Awaited<ReturnType<typeof getOrderPayments>>, TError = ErrorResponse | ErrorResponse>(
 orderId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderPayments>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderPayments>>,
          TError,
          Awaited<ReturnType<typeof getOrderPayments>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrderPayments<TData = Awaited<ReturnType<typeof getOrderPayments>>, TError = ErrorResponse | ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderPayments>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderPayments>>,
          TError,
          Awaited<ReturnType<typeof getOrderPayments>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrderPayments<TData = Awaited<ReturnType<typeof getOrderPayments>>, TError = ErrorResponse | ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderPayments>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get order payments
 */

export function useGetOrderPayments<TData = Awaited<ReturnType<typeof getOrderPayments>>, TError = ErrorResponse | ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderPayments>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOrderPaymentsQueryOptions(orderId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get all items for a specific order
 * @summary Get order items
 */
export const getOrderItems = (
    orderId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<OrderItemInfo[]>(
      {url: `/api/orders/${orderId}/items`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderItemsQueryKey = (orderId?: string,) => {
    return [`/api/orders/${orderId}/items`] as const;
    }

    
export const getGetOrderItemsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderItems>>, TError = ErrorResponse | ErrorResponse>(orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderItems>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderItemsQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderItems>>> = ({ signal }) => getOrderItems(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderItems>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOrderItemsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderItems>>>
export type GetOrderItemsQueryError = ErrorResponse | ErrorResponse


export function useGetOrderItems<TData = Awaited<ReturnType<typeof getOrderItems>>, TError = ErrorResponse | ErrorResponse>(
 orderId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderItems>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderItems>>,
          TError,
          Awaited<ReturnType<typeof getOrderItems>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrderItems<TData = Awaited<ReturnType<typeof getOrderItems>>, TError = ErrorResponse | ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderItems>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderItems>>,
          TError,
          Awaited<ReturnType<typeof getOrderItems>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrderItems<TData = Awaited<ReturnType<typeof getOrderItems>>, TError = ErrorResponse | ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderItems>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get order items
 */

export function useGetOrderItems<TData = Awaited<ReturnType<typeof getOrderItems>>, TError = ErrorResponse | ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderItems>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOrderItemsQueryOptions(orderId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get orders that are past their expected completion date
 * @summary Get overdue orders
 */
export const getOverdueOrders = (
    params?: GetOverdueOrdersParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<OrderListResponse>(
      {url: `/api/orders/overdue`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOverdueOrdersQueryKey = (params?: GetOverdueOrdersParams,) => {
    return [`/api/orders/overdue`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOverdueOrdersQueryOptions = <TData = Awaited<ReturnType<typeof getOverdueOrders>>, TError = ErrorResponse>(params?: GetOverdueOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverdueOrders>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOverdueOrdersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOverdueOrders>>> = ({ signal }) => getOverdueOrders(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOverdueOrders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOverdueOrdersQueryResult = NonNullable<Awaited<ReturnType<typeof getOverdueOrders>>>
export type GetOverdueOrdersQueryError = ErrorResponse


export function useGetOverdueOrders<TData = Awaited<ReturnType<typeof getOverdueOrders>>, TError = ErrorResponse>(
 params: undefined |  GetOverdueOrdersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverdueOrders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverdueOrders>>,
          TError,
          Awaited<ReturnType<typeof getOverdueOrders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOverdueOrders<TData = Awaited<ReturnType<typeof getOverdueOrders>>, TError = ErrorResponse>(
 params?: GetOverdueOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverdueOrders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOverdueOrders>>,
          TError,
          Awaited<ReturnType<typeof getOverdueOrders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOverdueOrders<TData = Awaited<ReturnType<typeof getOverdueOrders>>, TError = ErrorResponse>(
 params?: GetOverdueOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverdueOrders>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get overdue orders
 */

export function useGetOverdueOrders<TData = Awaited<ReturnType<typeof getOverdueOrders>>, TError = ErrorResponse>(
 params?: GetOverdueOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOverdueOrders>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOverdueOrdersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get orders that are due for completion within specified days
 * @summary Get orders due for completion
 */
export const getOrdersDueForCompletion = (
    params?: GetOrdersDueForCompletionParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<OrderListResponse>(
      {url: `/api/orders/due-for-completion`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrdersDueForCompletionQueryKey = (params?: GetOrdersDueForCompletionParams,) => {
    return [`/api/orders/due-for-completion`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrdersDueForCompletionQueryOptions = <TData = Awaited<ReturnType<typeof getOrdersDueForCompletion>>, TError = ErrorResponse>(params?: GetOrdersDueForCompletionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrdersDueForCompletion>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrdersDueForCompletionQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrdersDueForCompletion>>> = ({ signal }) => getOrdersDueForCompletion(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrdersDueForCompletion>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOrdersDueForCompletionQueryResult = NonNullable<Awaited<ReturnType<typeof getOrdersDueForCompletion>>>
export type GetOrdersDueForCompletionQueryError = ErrorResponse


export function useGetOrdersDueForCompletion<TData = Awaited<ReturnType<typeof getOrdersDueForCompletion>>, TError = ErrorResponse>(
 params: undefined |  GetOrdersDueForCompletionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrdersDueForCompletion>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrdersDueForCompletion>>,
          TError,
          Awaited<ReturnType<typeof getOrdersDueForCompletion>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrdersDueForCompletion<TData = Awaited<ReturnType<typeof getOrdersDueForCompletion>>, TError = ErrorResponse>(
 params?: GetOrdersDueForCompletionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrdersDueForCompletion>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrdersDueForCompletion>>,
          TError,
          Awaited<ReturnType<typeof getOrdersDueForCompletion>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrdersDueForCompletion<TData = Awaited<ReturnType<typeof getOrdersDueForCompletion>>, TError = ErrorResponse>(
 params?: GetOrdersDueForCompletionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrdersDueForCompletion>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get orders due for completion
 */

export function useGetOrdersDueForCompletion<TData = Awaited<ReturnType<typeof getOrdersDueForCompletion>>, TError = ErrorResponse>(
 params?: GetOrdersDueForCompletionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrdersDueForCompletion>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOrdersDueForCompletionQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get customer's most recent orders (limited list)
 * @summary Get customer recent orders
 */
export const getCustomerRecentOrders = (
    customerId: string,
    params?: GetCustomerRecentOrdersParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<OrderInfo[]>(
      {url: `/api/orders/customer/${customerId}/recent`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetCustomerRecentOrdersQueryKey = (customerId?: string,
    params?: GetCustomerRecentOrdersParams,) => {
    return [`/api/orders/customer/${customerId}/recent`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCustomerRecentOrdersQueryOptions = <TData = Awaited<ReturnType<typeof getCustomerRecentOrders>>, TError = ErrorResponse>(customerId: string,
    params?: GetCustomerRecentOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerRecentOrders>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCustomerRecentOrdersQueryKey(customerId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCustomerRecentOrders>>> = ({ signal }) => getCustomerRecentOrders(customerId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCustomerRecentOrders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCustomerRecentOrdersQueryResult = NonNullable<Awaited<ReturnType<typeof getCustomerRecentOrders>>>
export type GetCustomerRecentOrdersQueryError = ErrorResponse


export function useGetCustomerRecentOrders<TData = Awaited<ReturnType<typeof getCustomerRecentOrders>>, TError = ErrorResponse>(
 customerId: string,
    params: undefined |  GetCustomerRecentOrdersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerRecentOrders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomerRecentOrders>>,
          TError,
          Awaited<ReturnType<typeof getCustomerRecentOrders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCustomerRecentOrders<TData = Awaited<ReturnType<typeof getCustomerRecentOrders>>, TError = ErrorResponse>(
 customerId: string,
    params?: GetCustomerRecentOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerRecentOrders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomerRecentOrders>>,
          TError,
          Awaited<ReturnType<typeof getCustomerRecentOrders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCustomerRecentOrders<TData = Awaited<ReturnType<typeof getCustomerRecentOrders>>, TError = ErrorResponse>(
 customerId: string,
    params?: GetCustomerRecentOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerRecentOrders>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get customer recent orders
 */

export function useGetCustomerRecentOrders<TData = Awaited<ReturnType<typeof getCustomerRecentOrders>>, TError = ErrorResponse>(
 customerId: string,
    params?: GetCustomerRecentOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerRecentOrders>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCustomerRecentOrdersQueryOptions(customerId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get paginated order history for a specific customer
 * @summary Get customer order history
 */
export const getCustomerOrderHistory = (
    customerId: string,
    params?: GetCustomerOrderHistoryParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<OrderListResponse>(
      {url: `/api/orders/customer/${customerId}/history`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetCustomerOrderHistoryQueryKey = (customerId?: string,
    params?: GetCustomerOrderHistoryParams,) => {
    return [`/api/orders/customer/${customerId}/history`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCustomerOrderHistoryQueryOptions = <TData = Awaited<ReturnType<typeof getCustomerOrderHistory>>, TError = ErrorResponse>(customerId: string,
    params?: GetCustomerOrderHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerOrderHistory>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCustomerOrderHistoryQueryKey(customerId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCustomerOrderHistory>>> = ({ signal }) => getCustomerOrderHistory(customerId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCustomerOrderHistory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCustomerOrderHistoryQueryResult = NonNullable<Awaited<ReturnType<typeof getCustomerOrderHistory>>>
export type GetCustomerOrderHistoryQueryError = ErrorResponse


export function useGetCustomerOrderHistory<TData = Awaited<ReturnType<typeof getCustomerOrderHistory>>, TError = ErrorResponse>(
 customerId: string,
    params: undefined |  GetCustomerOrderHistoryParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerOrderHistory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomerOrderHistory>>,
          TError,
          Awaited<ReturnType<typeof getCustomerOrderHistory>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCustomerOrderHistory<TData = Awaited<ReturnType<typeof getCustomerOrderHistory>>, TError = ErrorResponse>(
 customerId: string,
    params?: GetCustomerOrderHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerOrderHistory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomerOrderHistory>>,
          TError,
          Awaited<ReturnType<typeof getCustomerOrderHistory>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCustomerOrderHistory<TData = Awaited<ReturnType<typeof getCustomerOrderHistory>>, TError = ErrorResponse>(
 customerId: string,
    params?: GetCustomerOrderHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerOrderHistory>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get customer order history
 */

export function useGetCustomerOrderHistory<TData = Awaited<ReturnType<typeof getCustomerOrderHistory>>, TError = ErrorResponse>(
 customerId: string,
    params?: GetCustomerOrderHistoryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomerOrderHistory>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCustomerOrderHistoryQueryOptions(customerId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get all orders with specific status (non-paginated)
 * @summary Get orders by status
 */
export const getOrdersByStatus = (
    params: GetOrdersByStatusParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<OrderInfo[]>(
      {url: `/api/orders/by-status`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetOrdersByStatusQueryKey = (params?: GetOrdersByStatusParams,) => {
    return [`/api/orders/by-status`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrdersByStatusQueryOptions = <TData = Awaited<ReturnType<typeof getOrdersByStatus>>, TError = ErrorResponse>(params: GetOrdersByStatusParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrdersByStatus>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrdersByStatusQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrdersByStatus>>> = ({ signal }) => getOrdersByStatus(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrdersByStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOrdersByStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getOrdersByStatus>>>
export type GetOrdersByStatusQueryError = ErrorResponse


export function useGetOrdersByStatus<TData = Awaited<ReturnType<typeof getOrdersByStatus>>, TError = ErrorResponse>(
 params: GetOrdersByStatusParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrdersByStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrdersByStatus>>,
          TError,
          Awaited<ReturnType<typeof getOrdersByStatus>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrdersByStatus<TData = Awaited<ReturnType<typeof getOrdersByStatus>>, TError = ErrorResponse>(
 params: GetOrdersByStatusParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrdersByStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrdersByStatus>>,
          TError,
          Awaited<ReturnType<typeof getOrdersByStatus>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrdersByStatus<TData = Awaited<ReturnType<typeof getOrdersByStatus>>, TError = ErrorResponse>(
 params: GetOrdersByStatusParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrdersByStatus>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get orders by status
 */

export function useGetOrdersByStatus<TData = Awaited<ReturnType<typeof getOrdersByStatus>>, TError = ErrorResponse>(
 params: GetOrdersByStatusParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrdersByStatus>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOrdersByStatusQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Delete a photo from an order item
 * @summary Delete item photo
 */
export const deleteItemPhoto = (
    orderId: string,
    itemId: string,
    photoId: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<null>(
      {url: `/api/orders/${orderId}/items/${itemId}/photos/${photoId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteItemPhotoMutationOptions = <TError = ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteItemPhoto>>, TError,{orderId: string;itemId: string;photoId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteItemPhoto>>, TError,{orderId: string;itemId: string;photoId: string}, TContext> => {

const mutationKey = ['deleteItemPhoto'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteItemPhoto>>, {orderId: string;itemId: string;photoId: string}> = (props) => {
          const {orderId,itemId,photoId} = props ?? {};

          return  deleteItemPhoto(orderId,itemId,photoId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteItemPhotoMutationResult = NonNullable<Awaited<ReturnType<typeof deleteItemPhoto>>>
    
    export type DeleteItemPhotoMutationError = ErrorResponse | ErrorResponse

    /**
 * @summary Delete item photo
 */
export const useDeleteItemPhoto = <TError = ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteItemPhoto>>, TError,{orderId: string;itemId: string;photoId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteItemPhoto>>,
        TError,
        {orderId: string;itemId: string;photoId: string},
        TContext
      > => {

      const mutationOptions = getDeleteItemPhotoMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
