/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * AKSI Dry Cleaning Order System API
 * API for dry cleaning order management system with Domain-Driven Design architecture. The system includes 13 domains: Auth, User, Customer, Branch, Employee, Order, OrderItem, Service, Garment, Pricing, Payment, Notification, and Analytics.
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';

/**
 * Update characteristics, stains, and defects of an order item
 * @summary Update item characteristics
 */
export const updateItemCharacteristicsParams = zod.object({
  "orderId": zod.uuid().describe('Order ID'),
  "itemId": zod.uuid().describe('Order item ID')
})

export const updateItemCharacteristicsBody = zod.object({
  "characteristics": zod.object({
  "material": zod.string().optional().describe('Material type'),
  "color": zod.string().optional().describe('Item color'),
  "filler": zod.string().optional().describe('Filler type (for padded items)'),
  "fillerCondition": zod.enum(['NORMAL', 'COMPRESSED']).optional().describe('Filler condition'),
  "wearLevel": zod.enum(['10', '30', '50', '75']).optional().describe('Wear level percentage')
}).optional(),
  "stains": zod.array(zod.object({
  "type": zod.enum(['GREASE', 'BLOOD', 'PROTEIN', 'WINE', 'COFFEE', 'GRASS', 'INK', 'COSMETICS', 'OTHER']).describe('Stain type'),
  "description": zod.string().optional().describe('Additional description')
})).optional(),
  "defects": zod.array(zod.object({
  "type": zod.enum(['WORN', 'TORN', 'MISSING_ACCESSORIES', 'DAMAGED_ACCESSORIES', 'OTHER']).describe('Defect type'),
  "description": zod.string().optional().describe('Additional description')
})).optional(),
  "risks": zod.array(zod.object({
  "type": zod.enum(['COLOR_CHANGE', 'DEFORMATION', 'NO_WARRANTY']).describe('Risk type'),
  "description": zod.string().optional().describe('Risk description')
})).optional()
})

export const updateItemCharacteristicsResponse = zod.object({
  "id": zod.uuid().describe('Order item ID'),
  "priceListItemId": zod.uuid().describe('Price list item ID'),
  "priceListItem": zod.object({
  "id": zod.uuid(),
  "name": zod.string(),
  "categoryCode": zod.string(),
  "unitOfMeasure": zod.enum(['PIECE', 'KILOGRAM', 'PAIR', 'SQUARE_METER']),
  "basePrice": zod.number().describe('Base price in kopiykas')
}),
  "quantity": zod.number().describe('Quantity (in units)'),
  "characteristics": zod.object({
  "material": zod.string().optional().describe('Material type'),
  "color": zod.string().optional().describe('Item color'),
  "filler": zod.string().optional().describe('Filler type (for padded items)'),
  "fillerCondition": zod.enum(['NORMAL', 'COMPRESSED']).optional().describe('Filler condition'),
  "wearLevel": zod.enum(['10', '30', '50', '75']).optional().describe('Wear level percentage')
}),
  "stains": zod.array(zod.object({
  "type": zod.enum(['GREASE', 'BLOOD', 'PROTEIN', 'WINE', 'COFFEE', 'GRASS', 'INK', 'COSMETICS', 'OTHER']).describe('Stain type'),
  "description": zod.string().optional().describe('Additional description')
})).optional().describe('Item stains'),
  "defects": zod.array(zod.object({
  "type": zod.enum(['WORN', 'TORN', 'MISSING_ACCESSORIES', 'DAMAGED_ACCESSORIES', 'OTHER']).describe('Defect type'),
  "description": zod.string().optional().describe('Additional description')
})).optional().describe('Item defects'),
  "risks": zod.array(zod.object({
  "type": zod.enum(['COLOR_CHANGE', 'DEFORMATION', 'NO_WARRANTY']).describe('Risk type'),
  "description": zod.string().optional().describe('Risk description')
})).optional().describe('Item risks'),
  "photos": zod.array(zod.object({
  "id": zod.uuid().describe('Photo ID'),
  "url": zod.string().describe('Photo URL'),
  "type": zod.enum(['GENERAL', 'DEFECT', 'STAIN', 'LABEL']),
  "description": zod.string().optional().describe('Photo description'),
  "uploadedAt": zod.iso.datetime({}).describe('Upload time'),
  "uploadedBy": zod.string().optional().describe('Uploaded by user ID')
})).optional().describe('Item photos'),
  "modifiers": zod.array(zod.object({
  "code": zod.string().describe('Modifier code'),
  "name": zod.string().describe('Modifier name'),
  "type": zod.enum(['PERCENTAGE', 'FIXED']).describe('Modifier type'),
  "value": zod.number().describe('Modifier value (percentage or fixed amount)')
})).optional().describe('Applied modifiers'),
  "pricing": zod.object({
  "basePrice": zod.number().describe('Base price in kopiykas'),
  "modifierDetails": zod.array(zod.object({
  "code": zod.string(),
  "name": zod.string(),
  "amount": zod.number().describe('Modifier amount in kopiykas')
})).optional().describe('Applied modifier details'),
  "modifiersTotalAmount": zod.number().describe('Total modifiers amount'),
  "subtotal": zod.number().describe('Subtotal (base + modifiers)'),
  "urgencyAmount": zod.number().describe('Urgency surcharge'),
  "discountAmount": zod.number().describe('Discount amount'),
  "total": zod.number().describe('Total price')
})
})


/**
 * Get paginated list of orders
 * @summary List orders
 */
export const listOrdersQueryPageDefault = 0;
export const listOrdersQueryPageMin = 0;
export const listOrdersQuerySizeDefault = 20;
export const listOrdersQuerySizeMax = 100;
export const listOrdersQuerySortByDefault = "createdAt";export const listOrdersQuerySortOrderDefault = "desc";

export const listOrdersQueryParams = zod.object({
  "page": zod.number().min(listOrdersQueryPageMin).optional().describe('Page number (0-based)'),
  "size": zod.number().min(1).max(listOrdersQuerySizeMax).default(listOrdersQuerySizeDefault).describe('Page size'),
  "sortBy": zod.string().default(listOrdersQuerySortByDefault).describe('Field to sort by'),
  "sortOrder": zod.string().default(listOrdersQuerySortOrderDefault).describe('Sort order'),
  "customerId": zod.uuid().optional().describe('Filter by customer ID'),
  "status": zod.enum(['PENDING', 'ACCEPTED', 'IN_PROGRESS', 'READY', 'COMPLETED', 'CANCELLED']).optional().describe('Filter by order status'),
  "branchId": zod.uuid().optional().describe('Filter by branch ID'),
  "dateFrom": zod.iso.datetime({}).optional().describe('Filter by creation date from'),
  "dateTo": zod.iso.datetime({}).optional().describe('Filter by creation date to')
})

export const listOrdersResponse = zod.object({
  "data": zod.array(zod.object({
  "id": zod.uuid().describe('Order ID'),
  "orderNumber": zod.string().describe('Order number'),
  "customerId": zod.uuid().describe('Customer ID'),
  "customer": zod.object({
  "id": zod.uuid(),
  "firstName": zod.string(),
  "lastName": zod.string(),
  "phone": zod.string(),
  "email": zod.string().optional()
}),
  "branchId": zod.uuid().describe('Branch ID'),
  "uniqueLabel": zod.string().optional().describe('Unique label (QR code)'),
  "status": zod.enum(['PENDING', 'ACCEPTED', 'IN_PROGRESS', 'READY', 'COMPLETED', 'CANCELLED']).describe('Order status'),
  "items": zod.array(zod.object({
  "id": zod.uuid().describe('Order item ID'),
  "priceListItemId": zod.uuid().describe('Price list item ID'),
  "priceListItem": zod.object({
  "id": zod.uuid(),
  "name": zod.string(),
  "categoryCode": zod.string(),
  "unitOfMeasure": zod.enum(['PIECE', 'KILOGRAM', 'PAIR', 'SQUARE_METER']),
  "basePrice": zod.number().describe('Base price in kopiykas')
}),
  "quantity": zod.number().describe('Quantity (in units)'),
  "characteristics": zod.object({
  "material": zod.string().optional().describe('Material type'),
  "color": zod.string().optional().describe('Item color'),
  "filler": zod.string().optional().describe('Filler type (for padded items)'),
  "fillerCondition": zod.enum(['NORMAL', 'COMPRESSED']).optional().describe('Filler condition'),
  "wearLevel": zod.enum(['10', '30', '50', '75']).optional().describe('Wear level percentage')
}),
  "stains": zod.array(zod.object({
  "type": zod.enum(['GREASE', 'BLOOD', 'PROTEIN', 'WINE', 'COFFEE', 'GRASS', 'INK', 'COSMETICS', 'OTHER']).describe('Stain type'),
  "description": zod.string().optional().describe('Additional description')
})).optional().describe('Item stains'),
  "defects": zod.array(zod.object({
  "type": zod.enum(['WORN', 'TORN', 'MISSING_ACCESSORIES', 'DAMAGED_ACCESSORIES', 'OTHER']).describe('Defect type'),
  "description": zod.string().optional().describe('Additional description')
})).optional().describe('Item defects'),
  "risks": zod.array(zod.object({
  "type": zod.enum(['COLOR_CHANGE', 'DEFORMATION', 'NO_WARRANTY']).describe('Risk type'),
  "description": zod.string().optional().describe('Risk description')
})).optional().describe('Item risks'),
  "photos": zod.array(zod.object({
  "id": zod.uuid().describe('Photo ID'),
  "url": zod.string().describe('Photo URL'),
  "type": zod.enum(['GENERAL', 'DEFECT', 'STAIN', 'LABEL']),
  "description": zod.string().optional().describe('Photo description'),
  "uploadedAt": zod.iso.datetime({}).describe('Upload time'),
  "uploadedBy": zod.string().optional().describe('Uploaded by user ID')
})).optional().describe('Item photos'),
  "modifiers": zod.array(zod.object({
  "code": zod.string().describe('Modifier code'),
  "name": zod.string().describe('Modifier name'),
  "type": zod.enum(['PERCENTAGE', 'FIXED']).describe('Modifier type'),
  "value": zod.number().describe('Modifier value (percentage or fixed amount)')
})).optional().describe('Applied modifiers'),
  "pricing": zod.object({
  "basePrice": zod.number().describe('Base price in kopiykas'),
  "modifierDetails": zod.array(zod.object({
  "code": zod.string(),
  "name": zod.string(),
  "amount": zod.number().describe('Modifier amount in kopiykas')
})).optional().describe('Applied modifier details'),
  "modifiersTotalAmount": zod.number().describe('Total modifiers amount'),
  "subtotal": zod.number().describe('Subtotal (base + modifiers)'),
  "urgencyAmount": zod.number().describe('Urgency surcharge'),
  "discountAmount": zod.number().describe('Discount amount'),
  "total": zod.number().describe('Total price')
})
})).describe('Order items'),
  "pricing": zod.object({
  "itemsSubtotal": zod.number().describe('Sum of all items subtotals'),
  "urgencyAmount": zod.number().describe('Total urgency amount'),
  "discountAmount": zod.number().describe('Total discount amount'),
  "discountApplicableAmount": zod.number().optional().describe('Amount eligible for discount'),
  "total": zod.number().describe('Final total'),
  "paidAmount": zod.number().describe('Total paid amount'),
  "balanceDue": zod.number().describe('Balance due')
}),
  "payments": zod.array(zod.object({
  "id": zod.uuid(),
  "amount": zod.number().describe('Payment amount in kopiykas'),
  "method": zod.enum(['CASH', 'TERMINAL', 'BANK_TRANSFER']),
  "paidAt": zod.iso.datetime({}),
  "paidBy": zod.string().optional().describe('User ID who registered payment')
})).optional().describe('Order payments'),
  "notes": zod.string().optional().describe('Order notes'),
  "customerSignature": zod.string().optional().describe('Customer signature (base64)'),
  "createdAt": zod.iso.datetime({}).describe('Creation time'),
  "createdBy": zod.string().optional().describe('Created by user ID'),
  "expectedCompletionDate": zod.iso.datetime({}).describe('Expected completion date'),
  "actualCompletionDate": zod.iso.datetime({}).optional().describe('Actual completion date')
})),
  "totalElements": zod.number().describe('Total number of elements'),
  "totalPages": zod.number().describe('Total number of pages'),
  "size": zod.number().describe('Page size'),
  "number": zod.number().describe('Page number (0-based)'),
  "numberOfElements": zod.number().describe('Number of elements in current page'),
  "first": zod.boolean().describe('Is first page'),
  "last": zod.boolean().describe('Is last page'),
  "empty": zod.boolean().describe('Is empty')
})


/**
 * Create a new order from the current cart
 * @summary Create order from cart
 */
export const createOrderBody = zod.object({
  "cartId": zod.uuid().describe('Cart ID to create order from'),
  "branchId": zod.uuid().describe('Branch ID'),
  "uniqueLabel": zod.string().optional().describe('Unique label (QR code)'),
  "notes": zod.string().optional().describe('Order notes'),
  "customerSignature": zod.string().optional().describe('Customer signature (base64)'),
  "termsAccepted": zod.boolean().optional().describe('Terms and conditions accepted')
})


/**
 * Save customer signature for order in base64 format
 * @summary Save customer signature
 */
export const saveCustomerSignatureParams = zod.object({
  "orderId": zod.uuid().describe('Order ID')
})

export const saveCustomerSignatureBody = zod.object({
  "signature": zod.string().describe('Customer signature in base64 format')
})

export const saveCustomerSignatureResponse = zod.object({
  "id": zod.uuid().describe('Order ID'),
  "orderNumber": zod.string().describe('Order number'),
  "customerId": zod.uuid().describe('Customer ID'),
  "customer": zod.object({
  "id": zod.uuid(),
  "firstName": zod.string(),
  "lastName": zod.string(),
  "phone": zod.string(),
  "email": zod.string().optional()
}),
  "branchId": zod.uuid().describe('Branch ID'),
  "uniqueLabel": zod.string().optional().describe('Unique label (QR code)'),
  "status": zod.enum(['PENDING', 'ACCEPTED', 'IN_PROGRESS', 'READY', 'COMPLETED', 'CANCELLED']).describe('Order status'),
  "items": zod.array(zod.object({
  "id": zod.uuid().describe('Order item ID'),
  "priceListItemId": zod.uuid().describe('Price list item ID'),
  "priceListItem": zod.object({
  "id": zod.uuid(),
  "name": zod.string(),
  "categoryCode": zod.string(),
  "unitOfMeasure": zod.enum(['PIECE', 'KILOGRAM', 'PAIR', 'SQUARE_METER']),
  "basePrice": zod.number().describe('Base price in kopiykas')
}),
  "quantity": zod.number().describe('Quantity (in units)'),
  "characteristics": zod.object({
  "material": zod.string().optional().describe('Material type'),
  "color": zod.string().optional().describe('Item color'),
  "filler": zod.string().optional().describe('Filler type (for padded items)'),
  "fillerCondition": zod.enum(['NORMAL', 'COMPRESSED']).optional().describe('Filler condition'),
  "wearLevel": zod.enum(['10', '30', '50', '75']).optional().describe('Wear level percentage')
}),
  "stains": zod.array(zod.object({
  "type": zod.enum(['GREASE', 'BLOOD', 'PROTEIN', 'WINE', 'COFFEE', 'GRASS', 'INK', 'COSMETICS', 'OTHER']).describe('Stain type'),
  "description": zod.string().optional().describe('Additional description')
})).optional().describe('Item stains'),
  "defects": zod.array(zod.object({
  "type": zod.enum(['WORN', 'TORN', 'MISSING_ACCESSORIES', 'DAMAGED_ACCESSORIES', 'OTHER']).describe('Defect type'),
  "description": zod.string().optional().describe('Additional description')
})).optional().describe('Item defects'),
  "risks": zod.array(zod.object({
  "type": zod.enum(['COLOR_CHANGE', 'DEFORMATION', 'NO_WARRANTY']).describe('Risk type'),
  "description": zod.string().optional().describe('Risk description')
})).optional().describe('Item risks'),
  "photos": zod.array(zod.object({
  "id": zod.uuid().describe('Photo ID'),
  "url": zod.string().describe('Photo URL'),
  "type": zod.enum(['GENERAL', 'DEFECT', 'STAIN', 'LABEL']),
  "description": zod.string().optional().describe('Photo description'),
  "uploadedAt": zod.iso.datetime({}).describe('Upload time'),
  "uploadedBy": zod.string().optional().describe('Uploaded by user ID')
})).optional().describe('Item photos'),
  "modifiers": zod.array(zod.object({
  "code": zod.string().describe('Modifier code'),
  "name": zod.string().describe('Modifier name'),
  "type": zod.enum(['PERCENTAGE', 'FIXED']).describe('Modifier type'),
  "value": zod.number().describe('Modifier value (percentage or fixed amount)')
})).optional().describe('Applied modifiers'),
  "pricing": zod.object({
  "basePrice": zod.number().describe('Base price in kopiykas'),
  "modifierDetails": zod.array(zod.object({
  "code": zod.string(),
  "name": zod.string(),
  "amount": zod.number().describe('Modifier amount in kopiykas')
})).optional().describe('Applied modifier details'),
  "modifiersTotalAmount": zod.number().describe('Total modifiers amount'),
  "subtotal": zod.number().describe('Subtotal (base + modifiers)'),
  "urgencyAmount": zod.number().describe('Urgency surcharge'),
  "discountAmount": zod.number().describe('Discount amount'),
  "total": zod.number().describe('Total price')
})
})).describe('Order items'),
  "pricing": zod.object({
  "itemsSubtotal": zod.number().describe('Sum of all items subtotals'),
  "urgencyAmount": zod.number().describe('Total urgency amount'),
  "discountAmount": zod.number().describe('Total discount amount'),
  "discountApplicableAmount": zod.number().optional().describe('Amount eligible for discount'),
  "total": zod.number().describe('Final total'),
  "paidAmount": zod.number().describe('Total paid amount'),
  "balanceDue": zod.number().describe('Balance due')
}),
  "payments": zod.array(zod.object({
  "id": zod.uuid(),
  "amount": zod.number().describe('Payment amount in kopiykas'),
  "method": zod.enum(['CASH', 'TERMINAL', 'BANK_TRANSFER']),
  "paidAt": zod.iso.datetime({}),
  "paidBy": zod.string().optional().describe('User ID who registered payment')
})).optional().describe('Order payments'),
  "notes": zod.string().optional().describe('Order notes'),
  "customerSignature": zod.string().optional().describe('Customer signature (base64)'),
  "createdAt": zod.iso.datetime({}).describe('Creation time'),
  "createdBy": zod.string().optional().describe('Created by user ID'),
  "expectedCompletionDate": zod.iso.datetime({}).describe('Expected completion date'),
  "actualCompletionDate": zod.iso.datetime({}).optional().describe('Actual completion date')
})


/**
 * Register a payment for an order
 * @summary Add payment to order
 */
export const addOrderPaymentParams = zod.object({
  "orderId": zod.uuid().describe('Order ID')
})

export const addOrderPaymentBody = zod.object({
  "amount": zod.number().min(1).describe('Payment amount in kopiykas'),
  "method": zod.enum(['CASH', 'TERMINAL', 'BANK_TRANSFER'])
})


/**
 * Upload a photo for an order item
 * @summary Upload item photo
 */
export const uploadItemPhotoParams = zod.object({
  "orderId": zod.uuid().describe('Order ID'),
  "itemId": zod.uuid().describe('Order item ID')
})

export const uploadItemPhotoQueryParams = zod.object({
  "photoType": zod.enum(['GENERAL', 'DEFECT', 'STAIN', 'LABEL']).optional(),
  "photoDescription": zod.string().optional().describe('Photo description')
})

export const uploadItemPhotoBody = zod.object({
  "file": zod.instanceof(File).describe('Photo file (max 5MB)')
})


/**
 * Get detailed order information
 * @summary Get order details
 */
export const getOrderByIdParams = zod.object({
  "orderId": zod.uuid().describe('Order ID')
})

export const getOrderByIdResponse = zod.object({
  "id": zod.uuid().describe('Order ID'),
  "orderNumber": zod.string().describe('Order number'),
  "customerId": zod.uuid().describe('Customer ID'),
  "customer": zod.object({
  "id": zod.uuid(),
  "firstName": zod.string(),
  "lastName": zod.string(),
  "phone": zod.string(),
  "email": zod.string().optional()
}),
  "branchId": zod.uuid().describe('Branch ID'),
  "uniqueLabel": zod.string().optional().describe('Unique label (QR code)'),
  "status": zod.enum(['PENDING', 'ACCEPTED', 'IN_PROGRESS', 'READY', 'COMPLETED', 'CANCELLED']).describe('Order status'),
  "items": zod.array(zod.object({
  "id": zod.uuid().describe('Order item ID'),
  "priceListItemId": zod.uuid().describe('Price list item ID'),
  "priceListItem": zod.object({
  "id": zod.uuid(),
  "name": zod.string(),
  "categoryCode": zod.string(),
  "unitOfMeasure": zod.enum(['PIECE', 'KILOGRAM', 'PAIR', 'SQUARE_METER']),
  "basePrice": zod.number().describe('Base price in kopiykas')
}),
  "quantity": zod.number().describe('Quantity (in units)'),
  "characteristics": zod.object({
  "material": zod.string().optional().describe('Material type'),
  "color": zod.string().optional().describe('Item color'),
  "filler": zod.string().optional().describe('Filler type (for padded items)'),
  "fillerCondition": zod.enum(['NORMAL', 'COMPRESSED']).optional().describe('Filler condition'),
  "wearLevel": zod.enum(['10', '30', '50', '75']).optional().describe('Wear level percentage')
}),
  "stains": zod.array(zod.object({
  "type": zod.enum(['GREASE', 'BLOOD', 'PROTEIN', 'WINE', 'COFFEE', 'GRASS', 'INK', 'COSMETICS', 'OTHER']).describe('Stain type'),
  "description": zod.string().optional().describe('Additional description')
})).optional().describe('Item stains'),
  "defects": zod.array(zod.object({
  "type": zod.enum(['WORN', 'TORN', 'MISSING_ACCESSORIES', 'DAMAGED_ACCESSORIES', 'OTHER']).describe('Defect type'),
  "description": zod.string().optional().describe('Additional description')
})).optional().describe('Item defects'),
  "risks": zod.array(zod.object({
  "type": zod.enum(['COLOR_CHANGE', 'DEFORMATION', 'NO_WARRANTY']).describe('Risk type'),
  "description": zod.string().optional().describe('Risk description')
})).optional().describe('Item risks'),
  "photos": zod.array(zod.object({
  "id": zod.uuid().describe('Photo ID'),
  "url": zod.string().describe('Photo URL'),
  "type": zod.enum(['GENERAL', 'DEFECT', 'STAIN', 'LABEL']),
  "description": zod.string().optional().describe('Photo description'),
  "uploadedAt": zod.iso.datetime({}).describe('Upload time'),
  "uploadedBy": zod.string().optional().describe('Uploaded by user ID')
})).optional().describe('Item photos'),
  "modifiers": zod.array(zod.object({
  "code": zod.string().describe('Modifier code'),
  "name": zod.string().describe('Modifier name'),
  "type": zod.enum(['PERCENTAGE', 'FIXED']).describe('Modifier type'),
  "value": zod.number().describe('Modifier value (percentage or fixed amount)')
})).optional().describe('Applied modifiers'),
  "pricing": zod.object({
  "basePrice": zod.number().describe('Base price in kopiykas'),
  "modifierDetails": zod.array(zod.object({
  "code": zod.string(),
  "name": zod.string(),
  "amount": zod.number().describe('Modifier amount in kopiykas')
})).optional().describe('Applied modifier details'),
  "modifiersTotalAmount": zod.number().describe('Total modifiers amount'),
  "subtotal": zod.number().describe('Subtotal (base + modifiers)'),
  "urgencyAmount": zod.number().describe('Urgency surcharge'),
  "discountAmount": zod.number().describe('Discount amount'),
  "total": zod.number().describe('Total price')
})
})).describe('Order items'),
  "pricing": zod.object({
  "itemsSubtotal": zod.number().describe('Sum of all items subtotals'),
  "urgencyAmount": zod.number().describe('Total urgency amount'),
  "discountAmount": zod.number().describe('Total discount amount'),
  "discountApplicableAmount": zod.number().optional().describe('Amount eligible for discount'),
  "total": zod.number().describe('Final total'),
  "paidAmount": zod.number().describe('Total paid amount'),
  "balanceDue": zod.number().describe('Balance due')
}),
  "payments": zod.array(zod.object({
  "id": zod.uuid(),
  "amount": zod.number().describe('Payment amount in kopiykas'),
  "method": zod.enum(['CASH', 'TERMINAL', 'BANK_TRANSFER']),
  "paidAt": zod.iso.datetime({}),
  "paidBy": zod.string().optional().describe('User ID who registered payment')
})).optional().describe('Order payments'),
  "notes": zod.string().optional().describe('Order notes'),
  "customerSignature": zod.string().optional().describe('Customer signature (base64)'),
  "createdAt": zod.iso.datetime({}).describe('Creation time'),
  "createdBy": zod.string().optional().describe('Created by user ID'),
  "expectedCompletionDate": zod.iso.datetime({}).describe('Expected completion date'),
  "actualCompletionDate": zod.iso.datetime({}).optional().describe('Actual completion date')
})


/**
 * Update the status of an order
 * @summary Update order status
 */
export const updateOrderStatusParams = zod.object({
  "orderId": zod.uuid().describe('Order ID')
})

export const updateOrderStatusBody = zod.object({
  "status": zod.enum(['PENDING', 'ACCEPTED', 'IN_PROGRESS', 'READY', 'COMPLETED', 'CANCELLED']),
  "notes": zod.string().optional().describe('Status change notes')
})

export const updateOrderStatusResponse = zod.object({
  "id": zod.uuid().describe('Order ID'),
  "orderNumber": zod.string().describe('Order number'),
  "customerId": zod.uuid().describe('Customer ID'),
  "customer": zod.object({
  "id": zod.uuid(),
  "firstName": zod.string(),
  "lastName": zod.string(),
  "phone": zod.string(),
  "email": zod.string().optional()
}),
  "branchId": zod.uuid().describe('Branch ID'),
  "uniqueLabel": zod.string().optional().describe('Unique label (QR code)'),
  "status": zod.enum(['PENDING', 'ACCEPTED', 'IN_PROGRESS', 'READY', 'COMPLETED', 'CANCELLED']).describe('Order status'),
  "items": zod.array(zod.object({
  "id": zod.uuid().describe('Order item ID'),
  "priceListItemId": zod.uuid().describe('Price list item ID'),
  "priceListItem": zod.object({
  "id": zod.uuid(),
  "name": zod.string(),
  "categoryCode": zod.string(),
  "unitOfMeasure": zod.enum(['PIECE', 'KILOGRAM', 'PAIR', 'SQUARE_METER']),
  "basePrice": zod.number().describe('Base price in kopiykas')
}),
  "quantity": zod.number().describe('Quantity (in units)'),
  "characteristics": zod.object({
  "material": zod.string().optional().describe('Material type'),
  "color": zod.string().optional().describe('Item color'),
  "filler": zod.string().optional().describe('Filler type (for padded items)'),
  "fillerCondition": zod.enum(['NORMAL', 'COMPRESSED']).optional().describe('Filler condition'),
  "wearLevel": zod.enum(['10', '30', '50', '75']).optional().describe('Wear level percentage')
}),
  "stains": zod.array(zod.object({
  "type": zod.enum(['GREASE', 'BLOOD', 'PROTEIN', 'WINE', 'COFFEE', 'GRASS', 'INK', 'COSMETICS', 'OTHER']).describe('Stain type'),
  "description": zod.string().optional().describe('Additional description')
})).optional().describe('Item stains'),
  "defects": zod.array(zod.object({
  "type": zod.enum(['WORN', 'TORN', 'MISSING_ACCESSORIES', 'DAMAGED_ACCESSORIES', 'OTHER']).describe('Defect type'),
  "description": zod.string().optional().describe('Additional description')
})).optional().describe('Item defects'),
  "risks": zod.array(zod.object({
  "type": zod.enum(['COLOR_CHANGE', 'DEFORMATION', 'NO_WARRANTY']).describe('Risk type'),
  "description": zod.string().optional().describe('Risk description')
})).optional().describe('Item risks'),
  "photos": zod.array(zod.object({
  "id": zod.uuid().describe('Photo ID'),
  "url": zod.string().describe('Photo URL'),
  "type": zod.enum(['GENERAL', 'DEFECT', 'STAIN', 'LABEL']),
  "description": zod.string().optional().describe('Photo description'),
  "uploadedAt": zod.iso.datetime({}).describe('Upload time'),
  "uploadedBy": zod.string().optional().describe('Uploaded by user ID')
})).optional().describe('Item photos'),
  "modifiers": zod.array(zod.object({
  "code": zod.string().describe('Modifier code'),
  "name": zod.string().describe('Modifier name'),
  "type": zod.enum(['PERCENTAGE', 'FIXED']).describe('Modifier type'),
  "value": zod.number().describe('Modifier value (percentage or fixed amount)')
})).optional().describe('Applied modifiers'),
  "pricing": zod.object({
  "basePrice": zod.number().describe('Base price in kopiykas'),
  "modifierDetails": zod.array(zod.object({
  "code": zod.string(),
  "name": zod.string(),
  "amount": zod.number().describe('Modifier amount in kopiykas')
})).optional().describe('Applied modifier details'),
  "modifiersTotalAmount": zod.number().describe('Total modifiers amount'),
  "subtotal": zod.number().describe('Subtotal (base + modifiers)'),
  "urgencyAmount": zod.number().describe('Urgency surcharge'),
  "discountAmount": zod.number().describe('Discount amount'),
  "total": zod.number().describe('Total price')
})
})).describe('Order items'),
  "pricing": zod.object({
  "itemsSubtotal": zod.number().describe('Sum of all items subtotals'),
  "urgencyAmount": zod.number().describe('Total urgency amount'),
  "discountAmount": zod.number().describe('Total discount amount'),
  "discountApplicableAmount": zod.number().optional().describe('Amount eligible for discount'),
  "total": zod.number().describe('Final total'),
  "paidAmount": zod.number().describe('Total paid amount'),
  "balanceDue": zod.number().describe('Balance due')
}),
  "payments": zod.array(zod.object({
  "id": zod.uuid(),
  "amount": zod.number().describe('Payment amount in kopiykas'),
  "method": zod.enum(['CASH', 'TERMINAL', 'BANK_TRANSFER']),
  "paidAt": zod.iso.datetime({}),
  "paidBy": zod.string().optional().describe('User ID who registered payment')
})).optional().describe('Order payments'),
  "notes": zod.string().optional().describe('Order notes'),
  "customerSignature": zod.string().optional().describe('Customer signature (base64)'),
  "createdAt": zod.iso.datetime({}).describe('Creation time'),
  "createdBy": zod.string().optional().describe('Created by user ID'),
  "expectedCompletionDate": zod.iso.datetime({}).describe('Expected completion date'),
  "actualCompletionDate": zod.iso.datetime({}).optional().describe('Actual completion date')
})


/**
 * Get receipt PDF for an order
 * @summary Get order receipt
 */
export const getOrderReceiptParams = zod.object({
  "orderId": zod.uuid().describe('Order ID')
})

export const getOrderReceiptResponse = zod.instanceof(File)


/**
 * Get payment history for a specific order
 * @summary Get order payments
 */
export const getOrderPaymentsParams = zod.object({
  "orderId": zod.uuid().describe('Order ID')
})

export const getOrderPaymentsResponseItem = zod.object({
  "id": zod.uuid(),
  "amount": zod.number().describe('Payment amount in kopiykas'),
  "method": zod.enum(['CASH', 'TERMINAL', 'BANK_TRANSFER']),
  "paidAt": zod.iso.datetime({}),
  "paidBy": zod.string().optional().describe('User ID who registered payment')
})
export const getOrderPaymentsResponse = zod.array(getOrderPaymentsResponseItem)


/**
 * Get all items for a specific order
 * @summary Get order items
 */
export const getOrderItemsParams = zod.object({
  "orderId": zod.uuid().describe('Order ID')
})

export const getOrderItemsResponseItem = zod.object({
  "id": zod.uuid().describe('Order item ID'),
  "priceListItemId": zod.uuid().describe('Price list item ID'),
  "priceListItem": zod.object({
  "id": zod.uuid(),
  "name": zod.string(),
  "categoryCode": zod.string(),
  "unitOfMeasure": zod.enum(['PIECE', 'KILOGRAM', 'PAIR', 'SQUARE_METER']),
  "basePrice": zod.number().describe('Base price in kopiykas')
}),
  "quantity": zod.number().describe('Quantity (in units)'),
  "characteristics": zod.object({
  "material": zod.string().optional().describe('Material type'),
  "color": zod.string().optional().describe('Item color'),
  "filler": zod.string().optional().describe('Filler type (for padded items)'),
  "fillerCondition": zod.enum(['NORMAL', 'COMPRESSED']).optional().describe('Filler condition'),
  "wearLevel": zod.enum(['10', '30', '50', '75']).optional().describe('Wear level percentage')
}),
  "stains": zod.array(zod.object({
  "type": zod.enum(['GREASE', 'BLOOD', 'PROTEIN', 'WINE', 'COFFEE', 'GRASS', 'INK', 'COSMETICS', 'OTHER']).describe('Stain type'),
  "description": zod.string().optional().describe('Additional description')
})).optional().describe('Item stains'),
  "defects": zod.array(zod.object({
  "type": zod.enum(['WORN', 'TORN', 'MISSING_ACCESSORIES', 'DAMAGED_ACCESSORIES', 'OTHER']).describe('Defect type'),
  "description": zod.string().optional().describe('Additional description')
})).optional().describe('Item defects'),
  "risks": zod.array(zod.object({
  "type": zod.enum(['COLOR_CHANGE', 'DEFORMATION', 'NO_WARRANTY']).describe('Risk type'),
  "description": zod.string().optional().describe('Risk description')
})).optional().describe('Item risks'),
  "photos": zod.array(zod.object({
  "id": zod.uuid().describe('Photo ID'),
  "url": zod.string().describe('Photo URL'),
  "type": zod.enum(['GENERAL', 'DEFECT', 'STAIN', 'LABEL']),
  "description": zod.string().optional().describe('Photo description'),
  "uploadedAt": zod.iso.datetime({}).describe('Upload time'),
  "uploadedBy": zod.string().optional().describe('Uploaded by user ID')
})).optional().describe('Item photos'),
  "modifiers": zod.array(zod.object({
  "code": zod.string().describe('Modifier code'),
  "name": zod.string().describe('Modifier name'),
  "type": zod.enum(['PERCENTAGE', 'FIXED']).describe('Modifier type'),
  "value": zod.number().describe('Modifier value (percentage or fixed amount)')
})).optional().describe('Applied modifiers'),
  "pricing": zod.object({
  "basePrice": zod.number().describe('Base price in kopiykas'),
  "modifierDetails": zod.array(zod.object({
  "code": zod.string(),
  "name": zod.string(),
  "amount": zod.number().describe('Modifier amount in kopiykas')
})).optional().describe('Applied modifier details'),
  "modifiersTotalAmount": zod.number().describe('Total modifiers amount'),
  "subtotal": zod.number().describe('Subtotal (base + modifiers)'),
  "urgencyAmount": zod.number().describe('Urgency surcharge'),
  "discountAmount": zod.number().describe('Discount amount'),
  "total": zod.number().describe('Total price')
})
})
export const getOrderItemsResponse = zod.array(getOrderItemsResponseItem)


/**
 * Get orders that are past their expected completion date
 * @summary Get overdue orders
 */
export const getOverdueOrdersQueryPageDefault = 0;
export const getOverdueOrdersQueryPageMin = 0;
export const getOverdueOrdersQuerySizeDefault = 20;
export const getOverdueOrdersQuerySizeMax = 100;
export const getOverdueOrdersQuerySortByDefault = "createdAt";export const getOverdueOrdersQuerySortOrderDefault = "desc";

export const getOverdueOrdersQueryParams = zod.object({
  "page": zod.number().min(getOverdueOrdersQueryPageMin).optional().describe('Page number (0-based)'),
  "size": zod.number().min(1).max(getOverdueOrdersQuerySizeMax).default(getOverdueOrdersQuerySizeDefault).describe('Page size'),
  "sortBy": zod.string().default(getOverdueOrdersQuerySortByDefault).describe('Field to sort by'),
  "sortOrder": zod.string().default(getOverdueOrdersQuerySortOrderDefault).describe('Sort order')
})

export const getOverdueOrdersResponse = zod.object({
  "data": zod.array(zod.object({
  "id": zod.uuid().describe('Order ID'),
  "orderNumber": zod.string().describe('Order number'),
  "customerId": zod.uuid().describe('Customer ID'),
  "customer": zod.object({
  "id": zod.uuid(),
  "firstName": zod.string(),
  "lastName": zod.string(),
  "phone": zod.string(),
  "email": zod.string().optional()
}),
  "branchId": zod.uuid().describe('Branch ID'),
  "uniqueLabel": zod.string().optional().describe('Unique label (QR code)'),
  "status": zod.enum(['PENDING', 'ACCEPTED', 'IN_PROGRESS', 'READY', 'COMPLETED', 'CANCELLED']).describe('Order status'),
  "items": zod.array(zod.object({
  "id": zod.uuid().describe('Order item ID'),
  "priceListItemId": zod.uuid().describe('Price list item ID'),
  "priceListItem": zod.object({
  "id": zod.uuid(),
  "name": zod.string(),
  "categoryCode": zod.string(),
  "unitOfMeasure": zod.enum(['PIECE', 'KILOGRAM', 'PAIR', 'SQUARE_METER']),
  "basePrice": zod.number().describe('Base price in kopiykas')
}),
  "quantity": zod.number().describe('Quantity (in units)'),
  "characteristics": zod.object({
  "material": zod.string().optional().describe('Material type'),
  "color": zod.string().optional().describe('Item color'),
  "filler": zod.string().optional().describe('Filler type (for padded items)'),
  "fillerCondition": zod.enum(['NORMAL', 'COMPRESSED']).optional().describe('Filler condition'),
  "wearLevel": zod.enum(['10', '30', '50', '75']).optional().describe('Wear level percentage')
}),
  "stains": zod.array(zod.object({
  "type": zod.enum(['GREASE', 'BLOOD', 'PROTEIN', 'WINE', 'COFFEE', 'GRASS', 'INK', 'COSMETICS', 'OTHER']).describe('Stain type'),
  "description": zod.string().optional().describe('Additional description')
})).optional().describe('Item stains'),
  "defects": zod.array(zod.object({
  "type": zod.enum(['WORN', 'TORN', 'MISSING_ACCESSORIES', 'DAMAGED_ACCESSORIES', 'OTHER']).describe('Defect type'),
  "description": zod.string().optional().describe('Additional description')
})).optional().describe('Item defects'),
  "risks": zod.array(zod.object({
  "type": zod.enum(['COLOR_CHANGE', 'DEFORMATION', 'NO_WARRANTY']).describe('Risk type'),
  "description": zod.string().optional().describe('Risk description')
})).optional().describe('Item risks'),
  "photos": zod.array(zod.object({
  "id": zod.uuid().describe('Photo ID'),
  "url": zod.string().describe('Photo URL'),
  "type": zod.enum(['GENERAL', 'DEFECT', 'STAIN', 'LABEL']),
  "description": zod.string().optional().describe('Photo description'),
  "uploadedAt": zod.iso.datetime({}).describe('Upload time'),
  "uploadedBy": zod.string().optional().describe('Uploaded by user ID')
})).optional().describe('Item photos'),
  "modifiers": zod.array(zod.object({
  "code": zod.string().describe('Modifier code'),
  "name": zod.string().describe('Modifier name'),
  "type": zod.enum(['PERCENTAGE', 'FIXED']).describe('Modifier type'),
  "value": zod.number().describe('Modifier value (percentage or fixed amount)')
})).optional().describe('Applied modifiers'),
  "pricing": zod.object({
  "basePrice": zod.number().describe('Base price in kopiykas'),
  "modifierDetails": zod.array(zod.object({
  "code": zod.string(),
  "name": zod.string(),
  "amount": zod.number().describe('Modifier amount in kopiykas')
})).optional().describe('Applied modifier details'),
  "modifiersTotalAmount": zod.number().describe('Total modifiers amount'),
  "subtotal": zod.number().describe('Subtotal (base + modifiers)'),
  "urgencyAmount": zod.number().describe('Urgency surcharge'),
  "discountAmount": zod.number().describe('Discount amount'),
  "total": zod.number().describe('Total price')
})
})).describe('Order items'),
  "pricing": zod.object({
  "itemsSubtotal": zod.number().describe('Sum of all items subtotals'),
  "urgencyAmount": zod.number().describe('Total urgency amount'),
  "discountAmount": zod.number().describe('Total discount amount'),
  "discountApplicableAmount": zod.number().optional().describe('Amount eligible for discount'),
  "total": zod.number().describe('Final total'),
  "paidAmount": zod.number().describe('Total paid amount'),
  "balanceDue": zod.number().describe('Balance due')
}),
  "payments": zod.array(zod.object({
  "id": zod.uuid(),
  "amount": zod.number().describe('Payment amount in kopiykas'),
  "method": zod.enum(['CASH', 'TERMINAL', 'BANK_TRANSFER']),
  "paidAt": zod.iso.datetime({}),
  "paidBy": zod.string().optional().describe('User ID who registered payment')
})).optional().describe('Order payments'),
  "notes": zod.string().optional().describe('Order notes'),
  "customerSignature": zod.string().optional().describe('Customer signature (base64)'),
  "createdAt": zod.iso.datetime({}).describe('Creation time'),
  "createdBy": zod.string().optional().describe('Created by user ID'),
  "expectedCompletionDate": zod.iso.datetime({}).describe('Expected completion date'),
  "actualCompletionDate": zod.iso.datetime({}).optional().describe('Actual completion date')
})),
  "totalElements": zod.number().describe('Total number of elements'),
  "totalPages": zod.number().describe('Total number of pages'),
  "size": zod.number().describe('Page size'),
  "number": zod.number().describe('Page number (0-based)'),
  "numberOfElements": zod.number().describe('Number of elements in current page'),
  "first": zod.boolean().describe('Is first page'),
  "last": zod.boolean().describe('Is last page'),
  "empty": zod.boolean().describe('Is empty')
})


/**
 * Get orders that are due for completion within specified days
 * @summary Get orders due for completion
 */
export const getOrdersDueForCompletionQueryDaysDefault = 7;
export const getOrdersDueForCompletionQueryDaysMax = 30;
export const getOrdersDueForCompletionQueryPageDefault = 0;
export const getOrdersDueForCompletionQueryPageMin = 0;
export const getOrdersDueForCompletionQuerySizeDefault = 20;
export const getOrdersDueForCompletionQuerySizeMax = 100;
export const getOrdersDueForCompletionQuerySortByDefault = "createdAt";export const getOrdersDueForCompletionQuerySortOrderDefault = "desc";

export const getOrdersDueForCompletionQueryParams = zod.object({
  "days": zod.number().min(1).max(getOrdersDueForCompletionQueryDaysMax).default(getOrdersDueForCompletionQueryDaysDefault).describe('Number of days to look ahead'),
  "page": zod.number().min(getOrdersDueForCompletionQueryPageMin).optional().describe('Page number (0-based)'),
  "size": zod.number().min(1).max(getOrdersDueForCompletionQuerySizeMax).default(getOrdersDueForCompletionQuerySizeDefault).describe('Page size'),
  "sortBy": zod.string().default(getOrdersDueForCompletionQuerySortByDefault).describe('Field to sort by'),
  "sortOrder": zod.string().default(getOrdersDueForCompletionQuerySortOrderDefault).describe('Sort order')
})

export const getOrdersDueForCompletionResponse = zod.object({
  "data": zod.array(zod.object({
  "id": zod.uuid().describe('Order ID'),
  "orderNumber": zod.string().describe('Order number'),
  "customerId": zod.uuid().describe('Customer ID'),
  "customer": zod.object({
  "id": zod.uuid(),
  "firstName": zod.string(),
  "lastName": zod.string(),
  "phone": zod.string(),
  "email": zod.string().optional()
}),
  "branchId": zod.uuid().describe('Branch ID'),
  "uniqueLabel": zod.string().optional().describe('Unique label (QR code)'),
  "status": zod.enum(['PENDING', 'ACCEPTED', 'IN_PROGRESS', 'READY', 'COMPLETED', 'CANCELLED']).describe('Order status'),
  "items": zod.array(zod.object({
  "id": zod.uuid().describe('Order item ID'),
  "priceListItemId": zod.uuid().describe('Price list item ID'),
  "priceListItem": zod.object({
  "id": zod.uuid(),
  "name": zod.string(),
  "categoryCode": zod.string(),
  "unitOfMeasure": zod.enum(['PIECE', 'KILOGRAM', 'PAIR', 'SQUARE_METER']),
  "basePrice": zod.number().describe('Base price in kopiykas')
}),
  "quantity": zod.number().describe('Quantity (in units)'),
  "characteristics": zod.object({
  "material": zod.string().optional().describe('Material type'),
  "color": zod.string().optional().describe('Item color'),
  "filler": zod.string().optional().describe('Filler type (for padded items)'),
  "fillerCondition": zod.enum(['NORMAL', 'COMPRESSED']).optional().describe('Filler condition'),
  "wearLevel": zod.enum(['10', '30', '50', '75']).optional().describe('Wear level percentage')
}),
  "stains": zod.array(zod.object({
  "type": zod.enum(['GREASE', 'BLOOD', 'PROTEIN', 'WINE', 'COFFEE', 'GRASS', 'INK', 'COSMETICS', 'OTHER']).describe('Stain type'),
  "description": zod.string().optional().describe('Additional description')
})).optional().describe('Item stains'),
  "defects": zod.array(zod.object({
  "type": zod.enum(['WORN', 'TORN', 'MISSING_ACCESSORIES', 'DAMAGED_ACCESSORIES', 'OTHER']).describe('Defect type'),
  "description": zod.string().optional().describe('Additional description')
})).optional().describe('Item defects'),
  "risks": zod.array(zod.object({
  "type": zod.enum(['COLOR_CHANGE', 'DEFORMATION', 'NO_WARRANTY']).describe('Risk type'),
  "description": zod.string().optional().describe('Risk description')
})).optional().describe('Item risks'),
  "photos": zod.array(zod.object({
  "id": zod.uuid().describe('Photo ID'),
  "url": zod.string().describe('Photo URL'),
  "type": zod.enum(['GENERAL', 'DEFECT', 'STAIN', 'LABEL']),
  "description": zod.string().optional().describe('Photo description'),
  "uploadedAt": zod.iso.datetime({}).describe('Upload time'),
  "uploadedBy": zod.string().optional().describe('Uploaded by user ID')
})).optional().describe('Item photos'),
  "modifiers": zod.array(zod.object({
  "code": zod.string().describe('Modifier code'),
  "name": zod.string().describe('Modifier name'),
  "type": zod.enum(['PERCENTAGE', 'FIXED']).describe('Modifier type'),
  "value": zod.number().describe('Modifier value (percentage or fixed amount)')
})).optional().describe('Applied modifiers'),
  "pricing": zod.object({
  "basePrice": zod.number().describe('Base price in kopiykas'),
  "modifierDetails": zod.array(zod.object({
  "code": zod.string(),
  "name": zod.string(),
  "amount": zod.number().describe('Modifier amount in kopiykas')
})).optional().describe('Applied modifier details'),
  "modifiersTotalAmount": zod.number().describe('Total modifiers amount'),
  "subtotal": zod.number().describe('Subtotal (base + modifiers)'),
  "urgencyAmount": zod.number().describe('Urgency surcharge'),
  "discountAmount": zod.number().describe('Discount amount'),
  "total": zod.number().describe('Total price')
})
})).describe('Order items'),
  "pricing": zod.object({
  "itemsSubtotal": zod.number().describe('Sum of all items subtotals'),
  "urgencyAmount": zod.number().describe('Total urgency amount'),
  "discountAmount": zod.number().describe('Total discount amount'),
  "discountApplicableAmount": zod.number().optional().describe('Amount eligible for discount'),
  "total": zod.number().describe('Final total'),
  "paidAmount": zod.number().describe('Total paid amount'),
  "balanceDue": zod.number().describe('Balance due')
}),
  "payments": zod.array(zod.object({
  "id": zod.uuid(),
  "amount": zod.number().describe('Payment amount in kopiykas'),
  "method": zod.enum(['CASH', 'TERMINAL', 'BANK_TRANSFER']),
  "paidAt": zod.iso.datetime({}),
  "paidBy": zod.string().optional().describe('User ID who registered payment')
})).optional().describe('Order payments'),
  "notes": zod.string().optional().describe('Order notes'),
  "customerSignature": zod.string().optional().describe('Customer signature (base64)'),
  "createdAt": zod.iso.datetime({}).describe('Creation time'),
  "createdBy": zod.string().optional().describe('Created by user ID'),
  "expectedCompletionDate": zod.iso.datetime({}).describe('Expected completion date'),
  "actualCompletionDate": zod.iso.datetime({}).optional().describe('Actual completion date')
})),
  "totalElements": zod.number().describe('Total number of elements'),
  "totalPages": zod.number().describe('Total number of pages'),
  "size": zod.number().describe('Page size'),
  "number": zod.number().describe('Page number (0-based)'),
  "numberOfElements": zod.number().describe('Number of elements in current page'),
  "first": zod.boolean().describe('Is first page'),
  "last": zod.boolean().describe('Is last page'),
  "empty": zod.boolean().describe('Is empty')
})


/**
 * Get customer's most recent orders (limited list)
 * @summary Get customer recent orders
 */
export const getCustomerRecentOrdersParams = zod.object({
  "customerId": zod.uuid().describe('Customer ID')
})

export const getCustomerRecentOrdersQueryLimitDefault = 10;
export const getCustomerRecentOrdersQueryLimitMax = 50;


export const getCustomerRecentOrdersQueryParams = zod.object({
  "limit": zod.number().min(1).max(getCustomerRecentOrdersQueryLimitMax).default(getCustomerRecentOrdersQueryLimitDefault).describe('Maximum number of orders to return')
})

export const getCustomerRecentOrdersResponseItem = zod.object({
  "id": zod.uuid().describe('Order ID'),
  "orderNumber": zod.string().describe('Order number'),
  "customerId": zod.uuid().describe('Customer ID'),
  "customer": zod.object({
  "id": zod.uuid(),
  "firstName": zod.string(),
  "lastName": zod.string(),
  "phone": zod.string(),
  "email": zod.string().optional()
}),
  "branchId": zod.uuid().describe('Branch ID'),
  "uniqueLabel": zod.string().optional().describe('Unique label (QR code)'),
  "status": zod.enum(['PENDING', 'ACCEPTED', 'IN_PROGRESS', 'READY', 'COMPLETED', 'CANCELLED']).describe('Order status'),
  "items": zod.array(zod.object({
  "id": zod.uuid().describe('Order item ID'),
  "priceListItemId": zod.uuid().describe('Price list item ID'),
  "priceListItem": zod.object({
  "id": zod.uuid(),
  "name": zod.string(),
  "categoryCode": zod.string(),
  "unitOfMeasure": zod.enum(['PIECE', 'KILOGRAM', 'PAIR', 'SQUARE_METER']),
  "basePrice": zod.number().describe('Base price in kopiykas')
}),
  "quantity": zod.number().describe('Quantity (in units)'),
  "characteristics": zod.object({
  "material": zod.string().optional().describe('Material type'),
  "color": zod.string().optional().describe('Item color'),
  "filler": zod.string().optional().describe('Filler type (for padded items)'),
  "fillerCondition": zod.enum(['NORMAL', 'COMPRESSED']).optional().describe('Filler condition'),
  "wearLevel": zod.enum(['10', '30', '50', '75']).optional().describe('Wear level percentage')
}),
  "stains": zod.array(zod.object({
  "type": zod.enum(['GREASE', 'BLOOD', 'PROTEIN', 'WINE', 'COFFEE', 'GRASS', 'INK', 'COSMETICS', 'OTHER']).describe('Stain type'),
  "description": zod.string().optional().describe('Additional description')
})).optional().describe('Item stains'),
  "defects": zod.array(zod.object({
  "type": zod.enum(['WORN', 'TORN', 'MISSING_ACCESSORIES', 'DAMAGED_ACCESSORIES', 'OTHER']).describe('Defect type'),
  "description": zod.string().optional().describe('Additional description')
})).optional().describe('Item defects'),
  "risks": zod.array(zod.object({
  "type": zod.enum(['COLOR_CHANGE', 'DEFORMATION', 'NO_WARRANTY']).describe('Risk type'),
  "description": zod.string().optional().describe('Risk description')
})).optional().describe('Item risks'),
  "photos": zod.array(zod.object({
  "id": zod.uuid().describe('Photo ID'),
  "url": zod.string().describe('Photo URL'),
  "type": zod.enum(['GENERAL', 'DEFECT', 'STAIN', 'LABEL']),
  "description": zod.string().optional().describe('Photo description'),
  "uploadedAt": zod.iso.datetime({}).describe('Upload time'),
  "uploadedBy": zod.string().optional().describe('Uploaded by user ID')
})).optional().describe('Item photos'),
  "modifiers": zod.array(zod.object({
  "code": zod.string().describe('Modifier code'),
  "name": zod.string().describe('Modifier name'),
  "type": zod.enum(['PERCENTAGE', 'FIXED']).describe('Modifier type'),
  "value": zod.number().describe('Modifier value (percentage or fixed amount)')
})).optional().describe('Applied modifiers'),
  "pricing": zod.object({
  "basePrice": zod.number().describe('Base price in kopiykas'),
  "modifierDetails": zod.array(zod.object({
  "code": zod.string(),
  "name": zod.string(),
  "amount": zod.number().describe('Modifier amount in kopiykas')
})).optional().describe('Applied modifier details'),
  "modifiersTotalAmount": zod.number().describe('Total modifiers amount'),
  "subtotal": zod.number().describe('Subtotal (base + modifiers)'),
  "urgencyAmount": zod.number().describe('Urgency surcharge'),
  "discountAmount": zod.number().describe('Discount amount'),
  "total": zod.number().describe('Total price')
})
})).describe('Order items'),
  "pricing": zod.object({
  "itemsSubtotal": zod.number().describe('Sum of all items subtotals'),
  "urgencyAmount": zod.number().describe('Total urgency amount'),
  "discountAmount": zod.number().describe('Total discount amount'),
  "discountApplicableAmount": zod.number().optional().describe('Amount eligible for discount'),
  "total": zod.number().describe('Final total'),
  "paidAmount": zod.number().describe('Total paid amount'),
  "balanceDue": zod.number().describe('Balance due')
}),
  "payments": zod.array(zod.object({
  "id": zod.uuid(),
  "amount": zod.number().describe('Payment amount in kopiykas'),
  "method": zod.enum(['CASH', 'TERMINAL', 'BANK_TRANSFER']),
  "paidAt": zod.iso.datetime({}),
  "paidBy": zod.string().optional().describe('User ID who registered payment')
})).optional().describe('Order payments'),
  "notes": zod.string().optional().describe('Order notes'),
  "customerSignature": zod.string().optional().describe('Customer signature (base64)'),
  "createdAt": zod.iso.datetime({}).describe('Creation time'),
  "createdBy": zod.string().optional().describe('Created by user ID'),
  "expectedCompletionDate": zod.iso.datetime({}).describe('Expected completion date'),
  "actualCompletionDate": zod.iso.datetime({}).optional().describe('Actual completion date')
})
export const getCustomerRecentOrdersResponse = zod.array(getCustomerRecentOrdersResponseItem)


/**
 * Get paginated order history for a specific customer
 * @summary Get customer order history
 */
export const getCustomerOrderHistoryParams = zod.object({
  "customerId": zod.uuid().describe('Customer ID')
})

export const getCustomerOrderHistoryQueryPageDefault = 0;
export const getCustomerOrderHistoryQueryPageMin = 0;
export const getCustomerOrderHistoryQuerySizeDefault = 20;
export const getCustomerOrderHistoryQuerySizeMax = 100;
export const getCustomerOrderHistoryQuerySortByDefault = "createdAt";export const getCustomerOrderHistoryQuerySortOrderDefault = "desc";

export const getCustomerOrderHistoryQueryParams = zod.object({
  "page": zod.number().min(getCustomerOrderHistoryQueryPageMin).optional().describe('Page number (0-based)'),
  "size": zod.number().min(1).max(getCustomerOrderHistoryQuerySizeMax).default(getCustomerOrderHistoryQuerySizeDefault).describe('Page size'),
  "sortBy": zod.string().default(getCustomerOrderHistoryQuerySortByDefault).describe('Field to sort by'),
  "sortOrder": zod.string().default(getCustomerOrderHistoryQuerySortOrderDefault).describe('Sort order')
})

export const getCustomerOrderHistoryResponse = zod.object({
  "data": zod.array(zod.object({
  "id": zod.uuid().describe('Order ID'),
  "orderNumber": zod.string().describe('Order number'),
  "customerId": zod.uuid().describe('Customer ID'),
  "customer": zod.object({
  "id": zod.uuid(),
  "firstName": zod.string(),
  "lastName": zod.string(),
  "phone": zod.string(),
  "email": zod.string().optional()
}),
  "branchId": zod.uuid().describe('Branch ID'),
  "uniqueLabel": zod.string().optional().describe('Unique label (QR code)'),
  "status": zod.enum(['PENDING', 'ACCEPTED', 'IN_PROGRESS', 'READY', 'COMPLETED', 'CANCELLED']).describe('Order status'),
  "items": zod.array(zod.object({
  "id": zod.uuid().describe('Order item ID'),
  "priceListItemId": zod.uuid().describe('Price list item ID'),
  "priceListItem": zod.object({
  "id": zod.uuid(),
  "name": zod.string(),
  "categoryCode": zod.string(),
  "unitOfMeasure": zod.enum(['PIECE', 'KILOGRAM', 'PAIR', 'SQUARE_METER']),
  "basePrice": zod.number().describe('Base price in kopiykas')
}),
  "quantity": zod.number().describe('Quantity (in units)'),
  "characteristics": zod.object({
  "material": zod.string().optional().describe('Material type'),
  "color": zod.string().optional().describe('Item color'),
  "filler": zod.string().optional().describe('Filler type (for padded items)'),
  "fillerCondition": zod.enum(['NORMAL', 'COMPRESSED']).optional().describe('Filler condition'),
  "wearLevel": zod.enum(['10', '30', '50', '75']).optional().describe('Wear level percentage')
}),
  "stains": zod.array(zod.object({
  "type": zod.enum(['GREASE', 'BLOOD', 'PROTEIN', 'WINE', 'COFFEE', 'GRASS', 'INK', 'COSMETICS', 'OTHER']).describe('Stain type'),
  "description": zod.string().optional().describe('Additional description')
})).optional().describe('Item stains'),
  "defects": zod.array(zod.object({
  "type": zod.enum(['WORN', 'TORN', 'MISSING_ACCESSORIES', 'DAMAGED_ACCESSORIES', 'OTHER']).describe('Defect type'),
  "description": zod.string().optional().describe('Additional description')
})).optional().describe('Item defects'),
  "risks": zod.array(zod.object({
  "type": zod.enum(['COLOR_CHANGE', 'DEFORMATION', 'NO_WARRANTY']).describe('Risk type'),
  "description": zod.string().optional().describe('Risk description')
})).optional().describe('Item risks'),
  "photos": zod.array(zod.object({
  "id": zod.uuid().describe('Photo ID'),
  "url": zod.string().describe('Photo URL'),
  "type": zod.enum(['GENERAL', 'DEFECT', 'STAIN', 'LABEL']),
  "description": zod.string().optional().describe('Photo description'),
  "uploadedAt": zod.iso.datetime({}).describe('Upload time'),
  "uploadedBy": zod.string().optional().describe('Uploaded by user ID')
})).optional().describe('Item photos'),
  "modifiers": zod.array(zod.object({
  "code": zod.string().describe('Modifier code'),
  "name": zod.string().describe('Modifier name'),
  "type": zod.enum(['PERCENTAGE', 'FIXED']).describe('Modifier type'),
  "value": zod.number().describe('Modifier value (percentage or fixed amount)')
})).optional().describe('Applied modifiers'),
  "pricing": zod.object({
  "basePrice": zod.number().describe('Base price in kopiykas'),
  "modifierDetails": zod.array(zod.object({
  "code": zod.string(),
  "name": zod.string(),
  "amount": zod.number().describe('Modifier amount in kopiykas')
})).optional().describe('Applied modifier details'),
  "modifiersTotalAmount": zod.number().describe('Total modifiers amount'),
  "subtotal": zod.number().describe('Subtotal (base + modifiers)'),
  "urgencyAmount": zod.number().describe('Urgency surcharge'),
  "discountAmount": zod.number().describe('Discount amount'),
  "total": zod.number().describe('Total price')
})
})).describe('Order items'),
  "pricing": zod.object({
  "itemsSubtotal": zod.number().describe('Sum of all items subtotals'),
  "urgencyAmount": zod.number().describe('Total urgency amount'),
  "discountAmount": zod.number().describe('Total discount amount'),
  "discountApplicableAmount": zod.number().optional().describe('Amount eligible for discount'),
  "total": zod.number().describe('Final total'),
  "paidAmount": zod.number().describe('Total paid amount'),
  "balanceDue": zod.number().describe('Balance due')
}),
  "payments": zod.array(zod.object({
  "id": zod.uuid(),
  "amount": zod.number().describe('Payment amount in kopiykas'),
  "method": zod.enum(['CASH', 'TERMINAL', 'BANK_TRANSFER']),
  "paidAt": zod.iso.datetime({}),
  "paidBy": zod.string().optional().describe('User ID who registered payment')
})).optional().describe('Order payments'),
  "notes": zod.string().optional().describe('Order notes'),
  "customerSignature": zod.string().optional().describe('Customer signature (base64)'),
  "createdAt": zod.iso.datetime({}).describe('Creation time'),
  "createdBy": zod.string().optional().describe('Created by user ID'),
  "expectedCompletionDate": zod.iso.datetime({}).describe('Expected completion date'),
  "actualCompletionDate": zod.iso.datetime({}).optional().describe('Actual completion date')
})),
  "totalElements": zod.number().describe('Total number of elements'),
  "totalPages": zod.number().describe('Total number of pages'),
  "size": zod.number().describe('Page size'),
  "number": zod.number().describe('Page number (0-based)'),
  "numberOfElements": zod.number().describe('Number of elements in current page'),
  "first": zod.boolean().describe('Is first page'),
  "last": zod.boolean().describe('Is last page'),
  "empty": zod.boolean().describe('Is empty')
})


/**
 * Get all orders with specific status (non-paginated)
 * @summary Get orders by status
 */
export const getOrdersByStatusQueryParams = zod.object({
  "status": zod.enum(['PENDING', 'ACCEPTED', 'IN_PROGRESS', 'READY', 'COMPLETED', 'CANCELLED']).describe('Order status'),
  "branchId": zod.uuid().optional().describe('Filter by branch ID')
})

export const getOrdersByStatusResponseItem = zod.object({
  "id": zod.uuid().describe('Order ID'),
  "orderNumber": zod.string().describe('Order number'),
  "customerId": zod.uuid().describe('Customer ID'),
  "customer": zod.object({
  "id": zod.uuid(),
  "firstName": zod.string(),
  "lastName": zod.string(),
  "phone": zod.string(),
  "email": zod.string().optional()
}),
  "branchId": zod.uuid().describe('Branch ID'),
  "uniqueLabel": zod.string().optional().describe('Unique label (QR code)'),
  "status": zod.enum(['PENDING', 'ACCEPTED', 'IN_PROGRESS', 'READY', 'COMPLETED', 'CANCELLED']).describe('Order status'),
  "items": zod.array(zod.object({
  "id": zod.uuid().describe('Order item ID'),
  "priceListItemId": zod.uuid().describe('Price list item ID'),
  "priceListItem": zod.object({
  "id": zod.uuid(),
  "name": zod.string(),
  "categoryCode": zod.string(),
  "unitOfMeasure": zod.enum(['PIECE', 'KILOGRAM', 'PAIR', 'SQUARE_METER']),
  "basePrice": zod.number().describe('Base price in kopiykas')
}),
  "quantity": zod.number().describe('Quantity (in units)'),
  "characteristics": zod.object({
  "material": zod.string().optional().describe('Material type'),
  "color": zod.string().optional().describe('Item color'),
  "filler": zod.string().optional().describe('Filler type (for padded items)'),
  "fillerCondition": zod.enum(['NORMAL', 'COMPRESSED']).optional().describe('Filler condition'),
  "wearLevel": zod.enum(['10', '30', '50', '75']).optional().describe('Wear level percentage')
}),
  "stains": zod.array(zod.object({
  "type": zod.enum(['GREASE', 'BLOOD', 'PROTEIN', 'WINE', 'COFFEE', 'GRASS', 'INK', 'COSMETICS', 'OTHER']).describe('Stain type'),
  "description": zod.string().optional().describe('Additional description')
})).optional().describe('Item stains'),
  "defects": zod.array(zod.object({
  "type": zod.enum(['WORN', 'TORN', 'MISSING_ACCESSORIES', 'DAMAGED_ACCESSORIES', 'OTHER']).describe('Defect type'),
  "description": zod.string().optional().describe('Additional description')
})).optional().describe('Item defects'),
  "risks": zod.array(zod.object({
  "type": zod.enum(['COLOR_CHANGE', 'DEFORMATION', 'NO_WARRANTY']).describe('Risk type'),
  "description": zod.string().optional().describe('Risk description')
})).optional().describe('Item risks'),
  "photos": zod.array(zod.object({
  "id": zod.uuid().describe('Photo ID'),
  "url": zod.string().describe('Photo URL'),
  "type": zod.enum(['GENERAL', 'DEFECT', 'STAIN', 'LABEL']),
  "description": zod.string().optional().describe('Photo description'),
  "uploadedAt": zod.iso.datetime({}).describe('Upload time'),
  "uploadedBy": zod.string().optional().describe('Uploaded by user ID')
})).optional().describe('Item photos'),
  "modifiers": zod.array(zod.object({
  "code": zod.string().describe('Modifier code'),
  "name": zod.string().describe('Modifier name'),
  "type": zod.enum(['PERCENTAGE', 'FIXED']).describe('Modifier type'),
  "value": zod.number().describe('Modifier value (percentage or fixed amount)')
})).optional().describe('Applied modifiers'),
  "pricing": zod.object({
  "basePrice": zod.number().describe('Base price in kopiykas'),
  "modifierDetails": zod.array(zod.object({
  "code": zod.string(),
  "name": zod.string(),
  "amount": zod.number().describe('Modifier amount in kopiykas')
})).optional().describe('Applied modifier details'),
  "modifiersTotalAmount": zod.number().describe('Total modifiers amount'),
  "subtotal": zod.number().describe('Subtotal (base + modifiers)'),
  "urgencyAmount": zod.number().describe('Urgency surcharge'),
  "discountAmount": zod.number().describe('Discount amount'),
  "total": zod.number().describe('Total price')
})
})).describe('Order items'),
  "pricing": zod.object({
  "itemsSubtotal": zod.number().describe('Sum of all items subtotals'),
  "urgencyAmount": zod.number().describe('Total urgency amount'),
  "discountAmount": zod.number().describe('Total discount amount'),
  "discountApplicableAmount": zod.number().optional().describe('Amount eligible for discount'),
  "total": zod.number().describe('Final total'),
  "paidAmount": zod.number().describe('Total paid amount'),
  "balanceDue": zod.number().describe('Balance due')
}),
  "payments": zod.array(zod.object({
  "id": zod.uuid(),
  "amount": zod.number().describe('Payment amount in kopiykas'),
  "method": zod.enum(['CASH', 'TERMINAL', 'BANK_TRANSFER']),
  "paidAt": zod.iso.datetime({}),
  "paidBy": zod.string().optional().describe('User ID who registered payment')
})).optional().describe('Order payments'),
  "notes": zod.string().optional().describe('Order notes'),
  "customerSignature": zod.string().optional().describe('Customer signature (base64)'),
  "createdAt": zod.iso.datetime({}).describe('Creation time'),
  "createdBy": zod.string().optional().describe('Created by user ID'),
  "expectedCompletionDate": zod.iso.datetime({}).describe('Expected completion date'),
  "actualCompletionDate": zod.iso.datetime({}).optional().describe('Actual completion date')
})
export const getOrdersByStatusResponse = zod.array(getOrdersByStatusResponseItem)


/**
 * Get order details by order number
 * @summary Get order by order number
 */
export const getOrderByNumberParams = zod.object({
  "orderNumber": zod.string().describe('Order number')
})

export const getOrderByNumberResponse = zod.object({
  "id": zod.uuid().describe('Order ID'),
  "orderNumber": zod.string().describe('Order number'),
  "customerId": zod.uuid().describe('Customer ID'),
  "customer": zod.object({
  "id": zod.uuid(),
  "firstName": zod.string(),
  "lastName": zod.string(),
  "phone": zod.string(),
  "email": zod.string().optional()
}),
  "branchId": zod.uuid().describe('Branch ID'),
  "uniqueLabel": zod.string().optional().describe('Unique label (QR code)'),
  "status": zod.enum(['PENDING', 'ACCEPTED', 'IN_PROGRESS', 'READY', 'COMPLETED', 'CANCELLED']).describe('Order status'),
  "items": zod.array(zod.object({
  "id": zod.uuid().describe('Order item ID'),
  "priceListItemId": zod.uuid().describe('Price list item ID'),
  "priceListItem": zod.object({
  "id": zod.uuid(),
  "name": zod.string(),
  "categoryCode": zod.string(),
  "unitOfMeasure": zod.enum(['PIECE', 'KILOGRAM', 'PAIR', 'SQUARE_METER']),
  "basePrice": zod.number().describe('Base price in kopiykas')
}),
  "quantity": zod.number().describe('Quantity (in units)'),
  "characteristics": zod.object({
  "material": zod.string().optional().describe('Material type'),
  "color": zod.string().optional().describe('Item color'),
  "filler": zod.string().optional().describe('Filler type (for padded items)'),
  "fillerCondition": zod.enum(['NORMAL', 'COMPRESSED']).optional().describe('Filler condition'),
  "wearLevel": zod.enum(['10', '30', '50', '75']).optional().describe('Wear level percentage')
}),
  "stains": zod.array(zod.object({
  "type": zod.enum(['GREASE', 'BLOOD', 'PROTEIN', 'WINE', 'COFFEE', 'GRASS', 'INK', 'COSMETICS', 'OTHER']).describe('Stain type'),
  "description": zod.string().optional().describe('Additional description')
})).optional().describe('Item stains'),
  "defects": zod.array(zod.object({
  "type": zod.enum(['WORN', 'TORN', 'MISSING_ACCESSORIES', 'DAMAGED_ACCESSORIES', 'OTHER']).describe('Defect type'),
  "description": zod.string().optional().describe('Additional description')
})).optional().describe('Item defects'),
  "risks": zod.array(zod.object({
  "type": zod.enum(['COLOR_CHANGE', 'DEFORMATION', 'NO_WARRANTY']).describe('Risk type'),
  "description": zod.string().optional().describe('Risk description')
})).optional().describe('Item risks'),
  "photos": zod.array(zod.object({
  "id": zod.uuid().describe('Photo ID'),
  "url": zod.string().describe('Photo URL'),
  "type": zod.enum(['GENERAL', 'DEFECT', 'STAIN', 'LABEL']),
  "description": zod.string().optional().describe('Photo description'),
  "uploadedAt": zod.iso.datetime({}).describe('Upload time'),
  "uploadedBy": zod.string().optional().describe('Uploaded by user ID')
})).optional().describe('Item photos'),
  "modifiers": zod.array(zod.object({
  "code": zod.string().describe('Modifier code'),
  "name": zod.string().describe('Modifier name'),
  "type": zod.enum(['PERCENTAGE', 'FIXED']).describe('Modifier type'),
  "value": zod.number().describe('Modifier value (percentage or fixed amount)')
})).optional().describe('Applied modifiers'),
  "pricing": zod.object({
  "basePrice": zod.number().describe('Base price in kopiykas'),
  "modifierDetails": zod.array(zod.object({
  "code": zod.string(),
  "name": zod.string(),
  "amount": zod.number().describe('Modifier amount in kopiykas')
})).optional().describe('Applied modifier details'),
  "modifiersTotalAmount": zod.number().describe('Total modifiers amount'),
  "subtotal": zod.number().describe('Subtotal (base + modifiers)'),
  "urgencyAmount": zod.number().describe('Urgency surcharge'),
  "discountAmount": zod.number().describe('Discount amount'),
  "total": zod.number().describe('Total price')
})
})).describe('Order items'),
  "pricing": zod.object({
  "itemsSubtotal": zod.number().describe('Sum of all items subtotals'),
  "urgencyAmount": zod.number().describe('Total urgency amount'),
  "discountAmount": zod.number().describe('Total discount amount'),
  "discountApplicableAmount": zod.number().optional().describe('Amount eligible for discount'),
  "total": zod.number().describe('Final total'),
  "paidAmount": zod.number().describe('Total paid amount'),
  "balanceDue": zod.number().describe('Balance due')
}),
  "payments": zod.array(zod.object({
  "id": zod.uuid(),
  "amount": zod.number().describe('Payment amount in kopiykas'),
  "method": zod.enum(['CASH', 'TERMINAL', 'BANK_TRANSFER']),
  "paidAt": zod.iso.datetime({}),
  "paidBy": zod.string().optional().describe('User ID who registered payment')
})).optional().describe('Order payments'),
  "notes": zod.string().optional().describe('Order notes'),
  "customerSignature": zod.string().optional().describe('Customer signature (base64)'),
  "createdAt": zod.iso.datetime({}).describe('Creation time'),
  "createdBy": zod.string().optional().describe('Created by user ID'),
  "expectedCompletionDate": zod.iso.datetime({}).describe('Expected completion date'),
  "actualCompletionDate": zod.iso.datetime({}).optional().describe('Actual completion date')
})


/**
 * Delete a photo from an order item
 * @summary Delete item photo
 */
export const deleteItemPhotoParams = zod.object({
  "orderId": zod.uuid(),
  "itemId": zod.uuid(),
  "photoId": zod.uuid()
})
