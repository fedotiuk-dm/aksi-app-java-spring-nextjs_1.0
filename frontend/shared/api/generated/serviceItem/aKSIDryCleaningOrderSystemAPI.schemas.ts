/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * AKSI Dry Cleaning Order System API
 * API for dry cleaning order management system with Domain-Driven Design architecture. The system includes 13 domains: Auth, User, Customer, Branch, Employee, Order, OrderItem, Service, Garment, Pricing, Payment, Notification, and Analytics.
 * OpenAPI spec version: 1.0.0
 */
export interface BranchAssignment {
  /** Branch ID */
  branchId: string;
  /** Branch name */
  branchName: string;
  /** Is this the primary branch */
  isPrimary: boolean;
}

export type UserDetailRolesItem = typeof UserDetailRolesItem[keyof typeof UserDetailRolesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserDetailRolesItem = {
  OPERATOR: 'OPERATOR',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN',
  CLEANER: 'CLEANER',
  DRIVER: 'DRIVER',
  ACCOUNTANT: 'ACCOUNTANT',
} as const;

export interface UserDetail {
  /** User ID */
  id: string;
  /** Username */
  username: string;
  /** First name */
  firstName: string;
  /** Last name */
  lastName: string;
  /** Email address */
  email: string;
  /**
   * @minItems 1
   * @maxItems 2147483647
   */
  roles: UserDetailRolesItem[];
  /** Is user active */
  active: boolean;
  /** Primary branch ID */
  primaryBranchId?: string;
  /** Primary branch name */
  primaryBranchName?: string;
  /** Creation timestamp */
  createdAt: string;
  /** Last login timestamp */
  lastLoginAt?: string;
  /**
   * Phone number
   * @pattern ^\+?[0-9]{10,15}$
   */
  phone?: string;
  /** Calculated permissions based on roles */
  permissions: string[];
  /** Assigned branches */
  branches: BranchAssignment[];
  /** Last update timestamp */
  updatedAt: string;
  /** ID of user who created this user */
  createdBy?: string;
  /** ID of user who last updated this user */
  updatedBy?: string;
}

export interface ErrorResponse {
  /** Error timestamp */
  timestamp: string;
  /** HTTP status code */
  status: number;
  /** Error name */
  error: string;
  /** Error message */
  message: string;
  /** Request path */
  path: string;
  errors?: JsonNullableListErrorDetail;
}

export interface JsonNullableListErrorDetail {
  present?: boolean;
}

export type UpdateRolesRequestRolesItem = typeof UpdateRolesRequestRolesItem[keyof typeof UpdateRolesRequestRolesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateRolesRequestRolesItem = {
  OPERATOR: 'OPERATOR',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN',
  CLEANER: 'CLEANER',
  DRIVER: 'DRIVER',
  ACCOUNTANT: 'ACCOUNTANT',
} as const;

export interface UpdateRolesRequest {
  /**
   * New set of roles
   * @minItems 1
   * @maxItems 2147483647
   */
  roles: UpdateRolesRequestRolesItem[];
}

export interface ChangePasswordRequest {
  /** Current password (required if changing own password) */
  currentPassword?: string;
  /**
   * New password
   * @minLength 8
   * @maxLength 100
   */
  newPassword: string;
}

export interface UserBranchesResponse {
  branches: BranchAssignment[];
}

export interface UpdateBranchesRequest {
  /** Branch IDs to assign */
  branchIds: string[];
  /** Primary branch ID (must be in branchIds if provided) */
  primaryBranchId?: string;
}

/**
 * Service category code
 */
export type PriceListItemInfoCategoryCode = typeof PriceListItemInfoCategoryCode[keyof typeof PriceListItemInfoCategoryCode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PriceListItemInfoCategoryCode = {
  CLOTHING: 'CLOTHING',
  LAUNDRY: 'LAUNDRY',
  IRONING: 'IRONING',
  LEATHER: 'LEATHER',
  PADDING: 'PADDING',
  FUR: 'FUR',
  DYEING: 'DYEING',
  ADDITIONAL_SERVICES: 'ADDITIONAL_SERVICES',
} as const;

/**
 * Unit of measure
 */
export type PriceListItemInfoUnitOfMeasure = typeof PriceListItemInfoUnitOfMeasure[keyof typeof PriceListItemInfoUnitOfMeasure];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PriceListItemInfoUnitOfMeasure = {
  PIECE: 'PIECE',
  KILOGRAM: 'KILOGRAM',
  PAIR: 'PAIR',
  SQUARE_METER: 'SQUARE_METER',
} as const;

export interface PriceListItemInfo {
  /** Price list item ID */
  id: string;
  /** Service category code */
  categoryCode: PriceListItemInfoCategoryCode;
  /** Catalog number */
  catalogNumber: number;
  /** Item name */
  name: string;
  /** Unit of measure */
  unitOfMeasure: PriceListItemInfoUnitOfMeasure;
  /**
   * Base price in kopiykas (1 kopiykas = 0.01 UAH)
   * @minimum 0
   * @maximum 999999999
   */
  basePrice: number;
  /**
   * Price for black dyeing in kopiykas (1 kopiykas = 0.01 UAH)
   * @minimum 0
   * @maximum 999999999
   */
  priceBlack?: number;
  /**
   * Price for color dyeing in kopiykas (1 kopiykas = 0.01 UAH)
   * @minimum 0
   * @maximum 999999999
   */
  priceColor?: number;
  /** Is item active */
  active: boolean;
  /** Processing time in days */
  processingTimeDays?: number;
  /** Is express service available */
  expressAvailable?: boolean;
  /** Express processing time in hours */
  expressTimeHours?: number;
  /**
   * Express service price in kopiykas
   * @minimum 0
   * @maximum 999999999
   */
  expressPrice?: number;
  /** Sort order for display */
  sortOrder?: number;
  /** Service/item description */
  description?: string;
  /** Ukrainian name */
  nameUa?: string;
}

export interface UpdatePriceListItemRequest {
  /** Item name */
  name?: string;
  /**
   * Base price in kopiykas
   * @minimum 0
   * @maximum 999999999
   */
  basePrice?: number;
  /**
   * Price for black dyeing
   * @minimum 0
   * @maximum 999999999
   */
  priceBlack?: number;
  /**
   * Price for color dyeing
   * @minimum 0
   * @maximum 999999999
   */
  priceColor?: number;
  /** Is item active */
  active?: boolean;
  /** Processing time in days */
  processingTimeDays?: number;
  /** Is express service available */
  expressAvailable?: boolean;
  /** Express processing time in hours */
  expressTimeHours?: number;
  /**
   * Express service price
   * @minimum 0
   * @maximum 999999999
   */
  expressPrice?: number;
  /** Sort order for display */
  sortOrder?: number;
  /** Service/item description */
  description?: string;
  /** Ukrainian name */
  nameUa?: string;
}

export type CreateUserRequestRolesItem = typeof CreateUserRequestRolesItem[keyof typeof CreateUserRequestRolesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUserRequestRolesItem = {
  OPERATOR: 'OPERATOR',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN',
  CLEANER: 'CLEANER',
  DRIVER: 'DRIVER',
  ACCOUNTANT: 'ACCOUNTANT',
} as const;

export interface CreateUserRequest {
  /**
   * Username
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9_]+$
   */
  username: string;
  /**
   * Password
   * @minLength 8
   * @maxLength 100
   */
  password: string;
  /**
   * First name
   * @minLength 1
   * @maxLength 100
   */
  firstName: string;
  /**
   * Last name
   * @minLength 1
   * @maxLength 100
   */
  lastName: string;
  /** Email address */
  email: string;
  /**
   * Phone number
   * @pattern ^\+?[0-9]{10,15}$
   */
  phone?: string;
  /**
   * User roles
   * @minItems 1
   * @maxItems 2147483647
   */
  roles: CreateUserRequestRolesItem[];
  /** Branch IDs to assign */
  branchIds?: string[];
  /** Primary branch ID (must be in branchIds if provided) */
  primaryBranchId?: string;
}

/**
 * Service category code
 */
export type CreatePriceListItemRequestCategoryCode = typeof CreatePriceListItemRequestCategoryCode[keyof typeof CreatePriceListItemRequestCategoryCode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreatePriceListItemRequestCategoryCode = {
  CLOTHING: 'CLOTHING',
  LAUNDRY: 'LAUNDRY',
  IRONING: 'IRONING',
  LEATHER: 'LEATHER',
  PADDING: 'PADDING',
  FUR: 'FUR',
  DYEING: 'DYEING',
  ADDITIONAL_SERVICES: 'ADDITIONAL_SERVICES',
} as const;

/**
 * Unit of measure
 */
export type CreatePriceListItemRequestUnitOfMeasure = typeof CreatePriceListItemRequestUnitOfMeasure[keyof typeof CreatePriceListItemRequestUnitOfMeasure];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreatePriceListItemRequestUnitOfMeasure = {
  PIECE: 'PIECE',
  KILOGRAM: 'KILOGRAM',
  PAIR: 'PAIR',
  SQUARE_METER: 'SQUARE_METER',
} as const;

export interface CreatePriceListItemRequest {
  /** Service category code */
  categoryCode: CreatePriceListItemRequestCategoryCode;
  /** Catalog number */
  catalogNumber: number;
  /** Item name */
  name: string;
  /** Unit of measure */
  unitOfMeasure: CreatePriceListItemRequestUnitOfMeasure;
  /**
   * Base price in kopiykas
   * @minimum 0
   * @maximum 999999999
   */
  basePrice: number;
  /**
   * Price for black dyeing
   * @minimum 0
   * @maximum 999999999
   */
  priceBlack?: number;
  /**
   * Price for color dyeing
   * @minimum 0
   * @maximum 999999999
   */
  priceColor?: number;
  /** Is item active */
  active?: boolean;
  /** Processing time in days */
  processingTimeDays?: number;
  /** Is express service available */
  expressAvailable?: boolean;
  /** Express processing time in hours */
  expressTimeHours?: number;
  /**
   * Express service price
   * @minimum 0
   * @maximum 999999999
   */
  expressPrice?: number;
  /** Sort order for display */
  sortOrder?: number;
  /** Service/item description */
  description?: string;
  /** Ukrainian name */
  nameUa?: string;
}

export interface JsonNullableString {
  present?: boolean;
}

export interface JsonNullableUUID {
  present?: boolean;
}

export interface LoginResponse {
  /** User ID */
  userId: string;
  /** Username */
  username: string;
  /** First name */
  firstName?: string;
  /** Last name */
  lastName?: string;
  /**
   * User roles
   * @minItems 1
   * @maxItems 2147483647
   */
  roles: string[];
  /** User permissions */
  permissions?: string[];
  /** Current branch ID */
  branchId?: JsonNullableUUID;
  /** Current branch name */
  branchName?: JsonNullableString;
  /** Whether branch selection is required */
  requiresBranchSelection: boolean;
}

export interface LoginRequest {
  /**
   * Operator username
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9_]+$
   */
  username: string;
  /**
   * Password
   * @minLength 8
   * @maxLength 100
   */
  password: string;
  /** Remember session for 30 days */
  rememberMe?: boolean;
  /** Branch ID for login (optional, can be selected later) */
  branchId?: JsonNullableUUID;
}

export interface UpdateUserRequest {
  /**
   * First name
   * @minLength 1
   * @maxLength 100
   */
  firstName?: string;
  /**
   * Last name
   * @minLength 1
   * @maxLength 100
   */
  lastName?: string;
  /** Email address */
  email?: string;
  /**
   * Phone number
   * @pattern ^\+?[0-9]{10,15}$
   */
  phone?: string;
}

export interface UserListResponse {
  data: UserSummary[];
  /** Total number of elements */
  totalElements: number;
  /** Total number of pages */
  totalPages: number;
  /** Page size */
  size: number;
  /** Current page number (0-based) */
  number: number;
  /** Number of elements in current page */
  numberOfElements: number;
  /** Is first page */
  first: boolean;
  /** Is last page */
  last: boolean;
  /** Is page empty */
  empty: boolean;
}

export type UserSummaryRolesItem = typeof UserSummaryRolesItem[keyof typeof UserSummaryRolesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserSummaryRolesItem = {
  OPERATOR: 'OPERATOR',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN',
  CLEANER: 'CLEANER',
  DRIVER: 'DRIVER',
  ACCOUNTANT: 'ACCOUNTANT',
} as const;

export interface UserSummary {
  /** User ID */
  id: string;
  /** Username */
  username: string;
  /** First name */
  firstName: string;
  /** Last name */
  lastName: string;
  /** Email address */
  email: string;
  /**
   * @minItems 1
   * @maxItems 2147483647
   */
  roles: UserSummaryRolesItem[];
  /** Is user active */
  active: boolean;
  /** Primary branch ID */
  primaryBranchId?: string;
  /** Primary branch name */
  primaryBranchName?: string;
  /** Creation timestamp */
  createdAt: string;
  /** Last login timestamp */
  lastLoginAt?: string;
}

export interface PriceListItemsResponse {
  /** List of price list items */
  priceListItems: PriceListItemInfo[];
  /** Total number of items matching the filter */
  totalItems: number;
  /** Whether there are more items to load */
  hasMore: boolean;
}

export type CategoryInfoCode = typeof CategoryInfoCode[keyof typeof CategoryInfoCode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryInfoCode = {
  CLOTHING: 'CLOTHING',
  LAUNDRY: 'LAUNDRY',
  IRONING: 'IRONING',
  LEATHER: 'LEATHER',
  PADDING: 'PADDING',
  FUR: 'FUR',
  DYEING: 'DYEING',
  ADDITIONAL_SERVICES: 'ADDITIONAL_SERVICES',
} as const;

export interface CategoryInfo {
  code?: CategoryInfoCode;
  name?: string;
  totalItems?: number;
  activeItems?: number;
  hasActiveItems?: boolean;
}

export interface SessionInfo {
  /** Session ID */
  sessionId: string;
  /** User ID */
  userId: string;
  /** Username */
  username: string;
  roles?: string[];
  /** Current branch ID */
  branchId?: JsonNullableUUID;
  /** Current branch name */
  branchName?: JsonNullableString;
  /** Session creation time */
  createdAt: string;
  /** Last access time */
  lastAccessedAt: string;
  /** Session expiration time */
  expiresAt?: string;
  /** IP address */
  ipAddress?: string;
  /** Browser user agent */
  userAgent?: string;
}

export type DeactivateCategory200 = {[key: string]: unknown};

export type ActivateCategory200 = {[key: string]: unknown};

export type ListPriceListItemsParams = {
/**
 * Filter by category code
 */
categoryCode?: ListPriceListItemsCategoryCode;
/**
 * Filter by active status
 */
active?: boolean;
/**
 * Number of items to skip
 * @minimum 0
 */
offset?: number;
/**
 * Number of items to return
 * @minimum 1
 * @maximum 100
 */
limit?: number;
};

export type ListPriceListItemsCategoryCode = typeof ListPriceListItemsCategoryCode[keyof typeof ListPriceListItemsCategoryCode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListPriceListItemsCategoryCode = {
  CLOTHING: 'CLOTHING',
  LAUNDRY: 'LAUNDRY',
  IRONING: 'IRONING',
  LEATHER: 'LEATHER',
  PADDING: 'PADDING',
  FUR: 'FUR',
  DYEING: 'DYEING',
  ADDITIONAL_SERVICES: 'ADDITIONAL_SERVICES',
} as const;

