/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * AKSI Dry Cleaning Order System API
 * API for dry cleaning order management system with Domain-Driven Design architecture. The system includes 13 domains: Auth, User, Customer, Branch, Employee, Order, OrderItem, Service, Garment, Pricing, Payment, Notification, and Analytics.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AddCartItemRequest,
  CartInfo,
  CartItemInfo,
  CartPricingInfo,
  ErrorResponse,
  UpdateCartItemRequest,
  UpdateCartModifiersRequest
} from './aKSIDryCleaningOrderSystemAPI.schemas';

import orvalFetcher from '../../../../lib/api/orval-fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Update global modifiers like urgency and discount
 * @summary Update cart global modifiers
 */
export const updateCartModifiers = (
    updateCartModifiersRequest: UpdateCartModifiersRequest,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<CartInfo>(
      {url: `/api/cart/modifiers`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateCartModifiersRequest
    },
      options);
    }
  


export const getUpdateCartModifiersMutationOptions = <TError = ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCartModifiers>>, TError,{data: UpdateCartModifiersRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof updateCartModifiers>>, TError,{data: UpdateCartModifiersRequest}, TContext> => {

const mutationKey = ['updateCartModifiers'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCartModifiers>>, {data: UpdateCartModifiersRequest}> = (props) => {
          const {data} = props ?? {};

          return  updateCartModifiers(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCartModifiersMutationResult = NonNullable<Awaited<ReturnType<typeof updateCartModifiers>>>
    export type UpdateCartModifiersMutationBody = UpdateCartModifiersRequest
    export type UpdateCartModifiersMutationError = ErrorResponse | ErrorResponse

    /**
 * @summary Update cart global modifiers
 */
export const useUpdateCartModifiers = <TError = ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCartModifiers>>, TError,{data: UpdateCartModifiersRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateCartModifiers>>,
        TError,
        {data: UpdateCartModifiersRequest},
        TContext
      > => {

      const mutationOptions = getUpdateCartModifiersMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Update quantity or characteristics of a cart item
 * @summary Update cart item
 */
export const updateCartItem = (
    itemId: string,
    updateCartItemRequest: UpdateCartItemRequest,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<CartItemInfo>(
      {url: `/api/cart/items/${itemId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateCartItemRequest
    },
      options);
    }
  


export const getUpdateCartItemMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCartItem>>, TError,{itemId: string;data: UpdateCartItemRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof updateCartItem>>, TError,{itemId: string;data: UpdateCartItemRequest}, TContext> => {

const mutationKey = ['updateCartItem'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCartItem>>, {itemId: string;data: UpdateCartItemRequest}> = (props) => {
          const {itemId,data} = props ?? {};

          return  updateCartItem(itemId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCartItemMutationResult = NonNullable<Awaited<ReturnType<typeof updateCartItem>>>
    export type UpdateCartItemMutationBody = UpdateCartItemRequest
    export type UpdateCartItemMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Update cart item
 */
export const useUpdateCartItem = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCartItem>>, TError,{itemId: string;data: UpdateCartItemRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateCartItem>>,
        TError,
        {itemId: string;data: UpdateCartItemRequest},
        TContext
      > => {

      const mutationOptions = getUpdateCartItemMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Remove an item from the shopping cart
 * @summary Remove item from cart
 */
export const removeCartItem = (
    itemId: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<null>(
      {url: `/api/cart/items/${itemId}`, method: 'DELETE'
    },
      options);
    }
  


export const getRemoveCartItemMutationOptions = <TError = ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeCartItem>>, TError,{itemId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof removeCartItem>>, TError,{itemId: string}, TContext> => {

const mutationKey = ['removeCartItem'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removeCartItem>>, {itemId: string}> = (props) => {
          const {itemId} = props ?? {};

          return  removeCartItem(itemId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemoveCartItemMutationResult = NonNullable<Awaited<ReturnType<typeof removeCartItem>>>
    
    export type RemoveCartItemMutationError = ErrorResponse | ErrorResponse

    /**
 * @summary Remove item from cart
 */
export const useRemoveCartItem = <TError = ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeCartItem>>, TError,{itemId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof removeCartItem>>,
        TError,
        {itemId: string},
        TContext
      > => {

      const mutationOptions = getRemoveCartItemMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Add a new item to the shopping cart
 * @summary Add item to cart
 */
export const addCartItem = (
    addCartItemRequest: AddCartItemRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<CartItemInfo>(
      {url: `/api/cart/items`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: addCartItemRequest, signal
    },
      options);
    }
  


export const getAddCartItemMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addCartItem>>, TError,{data: AddCartItemRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof addCartItem>>, TError,{data: AddCartItemRequest}, TContext> => {

const mutationKey = ['addCartItem'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addCartItem>>, {data: AddCartItemRequest}> = (props) => {
          const {data} = props ?? {};

          return  addCartItem(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddCartItemMutationResult = NonNullable<Awaited<ReturnType<typeof addCartItem>>>
    export type AddCartItemMutationBody = AddCartItemRequest
    export type AddCartItemMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Add item to cart
 */
export const useAddCartItem = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addCartItem>>, TError,{data: AddCartItemRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof addCartItem>>,
        TError,
        {data: AddCartItemRequest},
        TContext
      > => {

      const mutationOptions = getAddCartItemMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Recalculate all prices in the cart
 * @summary Calculate cart totals
 */
export const calculateCart = (
    
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<CartPricingInfo>(
      {url: `/api/cart/calculate`, method: 'POST', signal
    },
      options);
    }
  


export const getCalculateCartMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof calculateCart>>, TError,void, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof calculateCart>>, TError,void, TContext> => {

const mutationKey = ['calculateCart'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof calculateCart>>, void> = () => {
          

          return  calculateCart(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CalculateCartMutationResult = NonNullable<Awaited<ReturnType<typeof calculateCart>>>
    
    export type CalculateCartMutationError = ErrorResponse

    /**
 * @summary Calculate cart totals
 */
export const useCalculateCart = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof calculateCart>>, TError,void, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof calculateCart>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getCalculateCartMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Get the current user's shopping cart with all items and calculations
 * @summary Get current cart
 */
export const getCart = (
    
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<CartInfo>(
      {url: `/api/cart`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCartQueryKey = () => {
    return [`/api/cart`] as const;
    }

    
export const getGetCartQueryOptions = <TData = Awaited<ReturnType<typeof getCart>>, TError = ErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCartQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCart>>> = ({ signal }) => getCart(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCartQueryResult = NonNullable<Awaited<ReturnType<typeof getCart>>>
export type GetCartQueryError = ErrorResponse


export function useGetCart<TData = Awaited<ReturnType<typeof getCart>>, TError = ErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCart>>,
          TError,
          Awaited<ReturnType<typeof getCart>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCart<TData = Awaited<ReturnType<typeof getCart>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCart>>,
          TError,
          Awaited<ReturnType<typeof getCart>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCart<TData = Awaited<ReturnType<typeof getCart>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get current cart
 */

export function useGetCart<TData = Awaited<ReturnType<typeof getCart>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCartQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Remove all items from the cart
 * @summary Clear cart
 */
export const clearCart = (
    
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<null>(
      {url: `/api/cart`, method: 'DELETE'
    },
      options);
    }
  


export const getClearCartMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof clearCart>>, TError,void, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof clearCart>>, TError,void, TContext> => {

const mutationKey = ['clearCart'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof clearCart>>, void> = () => {
          

          return  clearCart(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ClearCartMutationResult = NonNullable<Awaited<ReturnType<typeof clearCart>>>
    
    export type ClearCartMutationError = ErrorResponse

    /**
 * @summary Clear cart
 */
export const useClearCart = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof clearCart>>, TError,void, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof clearCart>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getClearCartMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
