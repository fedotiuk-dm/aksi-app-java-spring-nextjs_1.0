/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * AKSI Dry Cleaning Order System API
 * API for dry cleaning order management system with Domain-Driven Design architecture. The system includes 13 domains: Auth, User, Customer, Branch, Employee, Order, OrderItem, Service, Garment, Pricing, Payment, Notification, and Analytics.
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';

/**
 * Update global modifiers like urgency and discount
 * @summary Update cart global modifiers
 */
export const updateCartModifiersBodyDiscountPercentageMin = 0;

export const updateCartModifiersBodyDiscountPercentageMax = 100;


export const updateCartModifiersBody = zod.object({
  "urgencyType": zod.enum(['NORMAL', 'EXPRESS_48H', 'EXPRESS_24H']).optional(),
  "discountType": zod.enum(['NONE', 'EVERCARD', 'SOCIAL_MEDIA', 'MILITARY', 'OTHER']).optional(),
  "discountPercentage": zod.number().min(updateCartModifiersBodyDiscountPercentageMin).max(updateCartModifiersBodyDiscountPercentageMax).optional().describe('Discount percentage (required for OTHER type)'),
  "expectedCompletionDate": zod.iso.datetime({}).optional().describe('Expected completion date')
})

export const updateCartModifiersResponseGlobalModifiersDiscountPercentageMin = 0;

export const updateCartModifiersResponseGlobalModifiersDiscountPercentageMax = 100;


export const updateCartModifiersResponse = zod.object({
  "id": zod.uuid().describe('Cart ID'),
  "customerId": zod.uuid().describe('Customer ID'),
  "items": zod.array(zod.object({
  "id": zod.uuid().describe('Cart item ID'),
  "priceListItemId": zod.uuid().describe('Price list item ID'),
  "priceListItem": zod.object({
  "id": zod.uuid(),
  "name": zod.string(),
  "categoryCode": zod.enum(['CLOTHING', 'LAUNDRY', 'IRONING', 'LEATHER', 'PADDING', 'FUR', 'DYEING', 'ADDITIONAL_SERVICES', 'SHEEPSKIN', 'OTHER']),
  "unitOfMeasure": zod.enum(['PIECE', 'KILOGRAM', 'PAIR', 'SQUARE_METER']),
  "basePrice": zod.number().describe('Base price in kopiykas')
}),
  "quantity": zod.number().min(1).describe('Quantity (in units)'),
  "characteristics": zod.object({
  "material": zod.string().optional().describe('Material type'),
  "color": zod.string().optional().describe('Item color'),
  "filler": zod.string().optional().describe('Filler type (for padded items)'),
  "fillerCondition": zod.enum(['NORMAL', 'COMPRESSED']).optional(),
  "wearLevel": zod.enum(['10', '30', '50', '75']).optional()
}),
  "modifiers": zod.array(zod.object({
  "code": zod.string().describe('Modifier code'),
  "name": zod.string().describe('Modifier name'),
  "type": zod.enum(['PERCENTAGE', 'FIXED', 'FORMULA', 'MULTIPLIER', 'DISCOUNT']),
  "value": zod.number().describe('Modifier value (percentage or fixed amount)')
})).optional().describe('Applied modifiers'),
  "pricing": zod.object({
  "basePrice": zod.number().describe('Base price in kopiykas'),
  "modifierDetails": zod.array(zod.object({
  "code": zod.string(),
  "name": zod.string(),
  "amount": zod.number().describe('Modifier amount in kopiykas')
})).optional().describe('Applied modifier details'),
  "modifiersTotalAmount": zod.number().describe('Total modifiers amount in kopiykas'),
  "subtotal": zod.number().describe('Subtotal (base + modifiers) in kopiykas'),
  "urgencyAmount": zod.number().describe('Urgency surcharge amount in kopiykas'),
  "discountAmount": zod.number().describe('Discount amount in kopiykas'),
  "total": zod.number().describe('Total price in kopiykas')
})
})).describe('Cart items'),
  "globalModifiers": zod.object({
  "urgencyType": zod.enum(['NORMAL', 'EXPRESS_48H', 'EXPRESS_24H']).optional().describe('Urgency type'),
  "discountType": zod.enum(['NONE', 'EVERCARD', 'SOCIAL_MEDIA', 'MILITARY', 'OTHER']).optional().describe('Discount type'),
  "discountPercentage": zod.number().min(updateCartModifiersResponseGlobalModifiersDiscountPercentageMin).max(updateCartModifiersResponseGlobalModifiersDiscountPercentageMax).optional().describe('Discount percentage (for OTHER type)'),
  "expectedCompletionDate": zod.iso.datetime({}).optional().describe('Expected completion date'),
  "expectedCompletionNote": zod.string().optional().describe('Optional note for expected completion (e.g., \"–ø—ñ—Å–ª—è 14:00\")')
}).optional(),
  "pricing": zod.object({
  "itemsSubtotal": zod.number().describe('Sum of all items subtotals in kopiykas'),
  "urgencyAmount": zod.number().describe('Total urgency amount in kopiykas'),
  "discountAmount": zod.number().describe('Total discount amount in kopiykas'),
  "discountApplicableAmount": zod.number().optional().describe('Amount eligible for discount in kopiykas'),
  "total": zod.number().describe('Final total in kopiykas')
}),
  "createdAt": zod.iso.datetime({}).describe('Cart creation time'),
  "updatedAt": zod.iso.datetime({}).optional().describe('Last update time'),
  "expiresAt": zod.iso.datetime({}).describe('Cart expiration time (TTL)')
})


/**
 * Update quantity or characteristics of a cart item
 * @summary Update cart item
 */
export const updateCartItemParams = zod.object({
  "itemId": zod.uuid().describe('Cart item ID')
})

export const updateCartItemBody = zod.object({
  "quantity": zod.number().min(1).optional().describe('New quantity in smallest unit (piece=1; kilogram=grams)'),
  "characteristics": zod.object({
  "material": zod.string().optional().describe('Material type'),
  "color": zod.string().optional().describe('Item color'),
  "filler": zod.string().optional().describe('Filler type (for padded items)'),
  "fillerCondition": zod.enum(['NORMAL', 'COMPRESSED']).optional(),
  "wearLevel": zod.enum(['10', '30', '50', '75']).optional()
}).optional(),
  "modifierCodes": zod.array(zod.string()).optional().describe('Updated modifier codes')
})

export const updateCartItemResponse = zod.object({
  "id": zod.uuid().describe('Cart item ID'),
  "priceListItemId": zod.uuid().describe('Price list item ID'),
  "priceListItem": zod.object({
  "id": zod.uuid(),
  "name": zod.string(),
  "categoryCode": zod.enum(['CLOTHING', 'LAUNDRY', 'IRONING', 'LEATHER', 'PADDING', 'FUR', 'DYEING', 'ADDITIONAL_SERVICES', 'SHEEPSKIN', 'OTHER']),
  "unitOfMeasure": zod.enum(['PIECE', 'KILOGRAM', 'PAIR', 'SQUARE_METER']),
  "basePrice": zod.number().describe('Base price in kopiykas')
}),
  "quantity": zod.number().min(1).describe('Quantity (in units)'),
  "characteristics": zod.object({
  "material": zod.string().optional().describe('Material type'),
  "color": zod.string().optional().describe('Item color'),
  "filler": zod.string().optional().describe('Filler type (for padded items)'),
  "fillerCondition": zod.enum(['NORMAL', 'COMPRESSED']).optional(),
  "wearLevel": zod.enum(['10', '30', '50', '75']).optional()
}),
  "modifiers": zod.array(zod.object({
  "code": zod.string().describe('Modifier code'),
  "name": zod.string().describe('Modifier name'),
  "type": zod.enum(['PERCENTAGE', 'FIXED', 'FORMULA', 'MULTIPLIER', 'DISCOUNT']),
  "value": zod.number().describe('Modifier value (percentage or fixed amount)')
})).optional().describe('Applied modifiers'),
  "pricing": zod.object({
  "basePrice": zod.number().describe('Base price in kopiykas'),
  "modifierDetails": zod.array(zod.object({
  "code": zod.string(),
  "name": zod.string(),
  "amount": zod.number().describe('Modifier amount in kopiykas')
})).optional().describe('Applied modifier details'),
  "modifiersTotalAmount": zod.number().describe('Total modifiers amount in kopiykas'),
  "subtotal": zod.number().describe('Subtotal (base + modifiers) in kopiykas'),
  "urgencyAmount": zod.number().describe('Urgency surcharge amount in kopiykas'),
  "discountAmount": zod.number().describe('Discount amount in kopiykas'),
  "total": zod.number().describe('Total price in kopiykas')
})
})


/**
 * Remove an item from the shopping cart
 * @summary Remove item from cart
 */
export const removeCartItemParams = zod.object({
  "itemId": zod.uuid().describe('Cart item ID')
})


/**
 * Add a new item to the shopping cart
 * @summary Add item to cart
 */
export const addCartItemBody = zod.object({
  "priceListItemId": zod.uuid().describe('Price list item ID'),
  "quantity": zod.number().min(1).describe('Quantity in smallest unit (piece=1; kilogram=grams)'),
  "characteristics": zod.object({
  "material": zod.string().optional().describe('Material type'),
  "color": zod.string().optional().describe('Item color'),
  "filler": zod.string().optional().describe('Filler type (for padded items)'),
  "fillerCondition": zod.enum(['NORMAL', 'COMPRESSED']).optional(),
  "wearLevel": zod.enum(['10', '30', '50', '75']).optional()
}).optional(),
  "modifierCodes": zod.array(zod.string()).optional().describe('Modifier codes to apply')
})


/**
 * Recalculate all prices in the active customer's cart. Does not create a cart; returns 404 if no active cart exists for the session.
 * @summary Calculate cart totals
 */
export const calculateCartResponse = zod.object({
  "itemsSubtotal": zod.number().describe('Sum of all items subtotals in kopiykas'),
  "urgencyAmount": zod.number().describe('Total urgency amount in kopiykas'),
  "discountAmount": zod.number().describe('Total discount amount in kopiykas'),
  "discountApplicableAmount": zod.number().optional().describe('Amount eligible for discount in kopiykas'),
  "total": zod.number().describe('Final total in kopiykas')
})


/**
 * Binds subsequent cart operations to the selected customer in this session
 * @summary Activate customer for cart in current session
 */
export const activateCustomerForCartBody = zod.object({
  "customerId": zod.uuid().describe('Customer ID to activate')
})


/**
 * Get or create (getOrCreate) the active customer's shopping cart for this session
 * @summary Get current cart
 */
export const getCartResponseGlobalModifiersDiscountPercentageMin = 0;

export const getCartResponseGlobalModifiersDiscountPercentageMax = 100;


export const getCartResponse = zod.object({
  "id": zod.uuid().describe('Cart ID'),
  "customerId": zod.uuid().describe('Customer ID'),
  "items": zod.array(zod.object({
  "id": zod.uuid().describe('Cart item ID'),
  "priceListItemId": zod.uuid().describe('Price list item ID'),
  "priceListItem": zod.object({
  "id": zod.uuid(),
  "name": zod.string(),
  "categoryCode": zod.enum(['CLOTHING', 'LAUNDRY', 'IRONING', 'LEATHER', 'PADDING', 'FUR', 'DYEING', 'ADDITIONAL_SERVICES', 'SHEEPSKIN', 'OTHER']),
  "unitOfMeasure": zod.enum(['PIECE', 'KILOGRAM', 'PAIR', 'SQUARE_METER']),
  "basePrice": zod.number().describe('Base price in kopiykas')
}),
  "quantity": zod.number().min(1).describe('Quantity (in units)'),
  "characteristics": zod.object({
  "material": zod.string().optional().describe('Material type'),
  "color": zod.string().optional().describe('Item color'),
  "filler": zod.string().optional().describe('Filler type (for padded items)'),
  "fillerCondition": zod.enum(['NORMAL', 'COMPRESSED']).optional(),
  "wearLevel": zod.enum(['10', '30', '50', '75']).optional()
}),
  "modifiers": zod.array(zod.object({
  "code": zod.string().describe('Modifier code'),
  "name": zod.string().describe('Modifier name'),
  "type": zod.enum(['PERCENTAGE', 'FIXED', 'FORMULA', 'MULTIPLIER', 'DISCOUNT']),
  "value": zod.number().describe('Modifier value (percentage or fixed amount)')
})).optional().describe('Applied modifiers'),
  "pricing": zod.object({
  "basePrice": zod.number().describe('Base price in kopiykas'),
  "modifierDetails": zod.array(zod.object({
  "code": zod.string(),
  "name": zod.string(),
  "amount": zod.number().describe('Modifier amount in kopiykas')
})).optional().describe('Applied modifier details'),
  "modifiersTotalAmount": zod.number().describe('Total modifiers amount in kopiykas'),
  "subtotal": zod.number().describe('Subtotal (base + modifiers) in kopiykas'),
  "urgencyAmount": zod.number().describe('Urgency surcharge amount in kopiykas'),
  "discountAmount": zod.number().describe('Discount amount in kopiykas'),
  "total": zod.number().describe('Total price in kopiykas')
})
})).describe('Cart items'),
  "globalModifiers": zod.object({
  "urgencyType": zod.enum(['NORMAL', 'EXPRESS_48H', 'EXPRESS_24H']).optional().describe('Urgency type'),
  "discountType": zod.enum(['NONE', 'EVERCARD', 'SOCIAL_MEDIA', 'MILITARY', 'OTHER']).optional().describe('Discount type'),
  "discountPercentage": zod.number().min(getCartResponseGlobalModifiersDiscountPercentageMin).max(getCartResponseGlobalModifiersDiscountPercentageMax).optional().describe('Discount percentage (for OTHER type)'),
  "expectedCompletionDate": zod.iso.datetime({}).optional().describe('Expected completion date'),
  "expectedCompletionNote": zod.string().optional().describe('Optional note for expected completion (e.g., \"–ø—ñ—Å–ª—è 14:00\")')
}).optional(),
  "pricing": zod.object({
  "itemsSubtotal": zod.number().describe('Sum of all items subtotals in kopiykas'),
  "urgencyAmount": zod.number().describe('Total urgency amount in kopiykas'),
  "discountAmount": zod.number().describe('Total discount amount in kopiykas'),
  "discountApplicableAmount": zod.number().optional().describe('Amount eligible for discount in kopiykas'),
  "total": zod.number().describe('Final total in kopiykas')
}),
  "createdAt": zod.iso.datetime({}).describe('Cart creation time'),
  "updatedAt": zod.iso.datetime({}).optional().describe('Last update time'),
  "expiresAt": zod.iso.datetime({}).describe('Cart expiration time (TTL)')
})
