/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AKSI API
 * API –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–ª—ñ–Ω—ñ–Ω–≥–æ–≤–æ—é –∫–æ–º–ø–∞–Ω—ñ—î—é AKSI
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CancelOrder204,
  CreateOrderRequest,
  DeleteOrderItem204,
  ErrorResponse,
  OrderDTO,
  OrderItemDTO
} from './aksiApi.schemas';

import orvalFetcher from '../../../../lib/api/orval-fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–µ–¥–º–µ—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –π–æ–≥–æ ID
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const getOrderItem = (
    orderId: string,
    itemId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<OrderItemDTO>(
      {url: `/orders/${orderId}/items/${itemId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderItemQueryKey = (orderId: string,
    itemId: string,) => {
    return [`/orders/${orderId}/items/${itemId}`] as const;
    }

    
export const getGetOrderItemQueryOptions = <TData = Awaited<ReturnType<typeof getOrderItem>>, TError = ErrorResponse>(orderId: string,
    itemId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderItem>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderItemQueryKey(orderId,itemId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderItem>>> = ({ signal }) => getOrderItem(orderId,itemId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId && itemId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderItem>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOrderItemQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderItem>>>
export type GetOrderItemQueryError = ErrorResponse


export function useGetOrderItem<TData = Awaited<ReturnType<typeof getOrderItem>>, TError = ErrorResponse>(
 orderId: string,
    itemId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderItem>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderItem>>,
          TError,
          Awaited<ReturnType<typeof getOrderItem>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrderItem<TData = Awaited<ReturnType<typeof getOrderItem>>, TError = ErrorResponse>(
 orderId: string,
    itemId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderItem>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderItem>>,
          TError,
          Awaited<ReturnType<typeof getOrderItem>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrderItem<TData = Awaited<ReturnType<typeof getOrderItem>>, TError = ErrorResponse>(
 orderId: string,
    itemId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderItem>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */

export function useGetOrderItem<TData = Awaited<ReturnType<typeof getOrderItem>>, TError = ErrorResponse>(
 orderId: string,
    itemId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderItem>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOrderItemQueryOptions(orderId,itemId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –û–Ω–æ–≤–ª—é—î —ñ—Å–Ω—É—é—á–∏–π –ø—Ä–µ–¥–º–µ—Ç —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ
 * @summary –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const updateOrderItem = (
    orderId: string,
    itemId: string,
    orderItemDTO: OrderItemDTO,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<OrderItemDTO>(
      {url: `/orders/${orderId}/items/${itemId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: orderItemDTO
    },
      options);
    }
  


export const getUpdateOrderItemMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOrderItem>>, TError,{orderId: string;itemId: string;data: OrderItemDTO}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof updateOrderItem>>, TError,{orderId: string;itemId: string;data: OrderItemDTO}, TContext> => {

const mutationKey = ['updateOrderItem'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateOrderItem>>, {orderId: string;itemId: string;data: OrderItemDTO}> = (props) => {
          const {orderId,itemId,data} = props ?? {};

          return  updateOrderItem(orderId,itemId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateOrderItemMutationResult = NonNullable<Awaited<ReturnType<typeof updateOrderItem>>>
    export type UpdateOrderItemMutationBody = OrderItemDTO
    export type UpdateOrderItemMutationError = ErrorResponse

    /**
 * @summary –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const useUpdateOrderItem = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOrderItem>>, TError,{orderId: string;itemId: string;data: OrderItemDTO}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateOrderItem>>,
        TError,
        {orderId: string;itemId: string;data: OrderItemDTO},
        TContext
      > => {

      const mutationOptions = getUpdateOrderItemMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –í–∏–¥–∞–ª—è—î –ø—Ä–µ–¥–º–µ—Ç —ñ–∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * @summary –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const deleteOrderItem = (
    orderId: string,
    itemId: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<DeleteOrderItem204>(
      {url: `/orders/${orderId}/items/${itemId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteOrderItemMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrderItem>>, TError,{orderId: string;itemId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteOrderItem>>, TError,{orderId: string;itemId: string}, TContext> => {

const mutationKey = ['deleteOrderItem'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOrderItem>>, {orderId: string;itemId: string}> = (props) => {
          const {orderId,itemId} = props ?? {};

          return  deleteOrderItem(orderId,itemId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOrderItemMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOrderItem>>>
    
    export type DeleteOrderItemMutationError = ErrorResponse

    /**
 * @summary –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const useDeleteOrderItem = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrderItem>>, TError,{orderId: string;itemId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteOrderItem>>,
        TError,
        {orderId: string;itemId: string},
        TContext
      > => {

      const mutationOptions = getDeleteOrderItemMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * @summary –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const updateOrderStatus = (
    id: string,
    status: 'DRAFT' | 'NEW' | 'IN_PROGRESS' | 'COMPLETED' | 'DELIVERED' | 'CANCELLED',
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<OrderDTO>(
      {url: `/orders/${id}/status/${status}`, method: 'PUT'
    },
      options);
    }
  


export const getUpdateOrderStatusMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOrderStatus>>, TError,{id: string;status: 'DRAFT' | 'NEW' | 'IN_PROGRESS' | 'COMPLETED' | 'DELIVERED' | 'CANCELLED'}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof updateOrderStatus>>, TError,{id: string;status: 'DRAFT' | 'NEW' | 'IN_PROGRESS' | 'COMPLETED' | 'DELIVERED' | 'CANCELLED'}, TContext> => {

const mutationKey = ['updateOrderStatus'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateOrderStatus>>, {id: string;status: 'DRAFT' | 'NEW' | 'IN_PROGRESS' | 'COMPLETED' | 'DELIVERED' | 'CANCELLED'}> = (props) => {
          const {id,status} = props ?? {};

          return  updateOrderStatus(id,status,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateOrderStatusMutationResult = NonNullable<Awaited<ReturnType<typeof updateOrderStatus>>>
    
    export type UpdateOrderStatusMutationError = ErrorResponse

    /**
 * @summary –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const useUpdateOrderStatus = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOrderStatus>>, TError,{id: string;status: 'DRAFT' | 'NEW' | 'IN_PROGRESS' | 'COMPLETED' | 'DELIVERED' | 'CANCELLED'}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateOrderStatus>>,
        TError,
        {id: string;status: 'DRAFT' | 'NEW' | 'IN_PROGRESS' | 'COMPLETED' | 'DELIVERED' | 'CANCELLED'},
        TContext
      > => {

      const mutationOptions = getUpdateOrderStatusMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –î–æ–¥–∞—î –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç—É –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * @summary –î–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç—É
 */
export const addPrepayment = (
    id: string,
    amount: number,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<OrderDTO>(
      {url: `/orders/${id}/prepayment/${amount}`, method: 'PUT'
    },
      options);
    }
  


export const getAddPrepaymentMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addPrepayment>>, TError,{id: string;amount: number}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof addPrepayment>>, TError,{id: string;amount: number}, TContext> => {

const mutationKey = ['addPrepayment'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addPrepayment>>, {id: string;amount: number}> = (props) => {
          const {id,amount} = props ?? {};

          return  addPrepayment(id,amount,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddPrepaymentMutationResult = NonNullable<Awaited<ReturnType<typeof addPrepayment>>>
    
    export type AddPrepaymentMutationError = ErrorResponse

    /**
 * @summary –î–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç—É
 */
export const useAddPrepayment = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addPrepayment>>, TError,{id: string;amount: number}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof addPrepayment>>,
        TError,
        {id: string;amount: number},
        TContext
      > => {

      const mutationOptions = getAddPrepaymentMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ó–∞—Å—Ç–æ—Å–æ–≤—É—î –∑–Ω–∏–∂–∫—É –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * @summary –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –∑–Ω–∏–∂–∫—É
 */
export const applyDiscount = (
    id: string,
    amount: number,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<OrderDTO>(
      {url: `/orders/${id}/discount/${amount}`, method: 'PUT'
    },
      options);
    }
  


export const getApplyDiscountMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof applyDiscount>>, TError,{id: string;amount: number}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof applyDiscount>>, TError,{id: string;amount: number}, TContext> => {

const mutationKey = ['applyDiscount'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof applyDiscount>>, {id: string;amount: number}> = (props) => {
          const {id,amount} = props ?? {};

          return  applyDiscount(id,amount,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApplyDiscountMutationResult = NonNullable<Awaited<ReturnType<typeof applyDiscount>>>
    
    export type ApplyDiscountMutationError = ErrorResponse

    /**
 * @summary –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –∑–Ω–∏–∂–∫—É
 */
export const useApplyDiscount = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof applyDiscount>>, TError,{id: string;amount: number}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof applyDiscount>>,
        TError,
        {id: string;amount: number},
        TContext
      > => {

      const mutationOptions = getApplyDiscountMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î —á–µ—Ä–Ω–µ—Ç–∫—É –Ω–∞ –∞–∫—Ç–∏–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * @summary –ü–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ —á–µ—Ä–Ω–µ—Ç–∫—É –Ω–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const convertDraftToOrder = (
    id: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<OrderDTO>(
      {url: `/orders/${id}/convert-draft`, method: 'PUT'
    },
      options);
    }
  


export const getConvertDraftToOrderMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof convertDraftToOrder>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof convertDraftToOrder>>, TError,{id: string}, TContext> => {

const mutationKey = ['convertDraftToOrder'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof convertDraftToOrder>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  convertDraftToOrder(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ConvertDraftToOrderMutationResult = NonNullable<Awaited<ReturnType<typeof convertDraftToOrder>>>
    
    export type ConvertDraftToOrderMutationError = ErrorResponse

    /**
 * @summary –ü–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ —á–µ—Ä–Ω–µ—Ç–∫—É –Ω–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const useConvertDraftToOrder = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof convertDraftToOrder>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof convertDraftToOrder>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getConvertDraftToOrderMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –í—ñ–¥–∑–Ω–∞—á–∞—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ
 * @summary –í—ñ–¥–∑–Ω–∞—á–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ
 */
export const completeOrder = (
    id: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<OrderDTO>(
      {url: `/orders/${id}/complete`, method: 'PUT'
    },
      options);
    }
  


export const getCompleteOrderMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof completeOrder>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof completeOrder>>, TError,{id: string}, TContext> => {

const mutationKey = ['completeOrder'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof completeOrder>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  completeOrder(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CompleteOrderMutationResult = NonNullable<Awaited<ReturnType<typeof completeOrder>>>
    
    export type CompleteOrderMutationError = ErrorResponse

    /**
 * @summary –í—ñ–¥–∑–Ω–∞—á–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ
 */
export const useCompleteOrder = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof completeOrder>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof completeOrder>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getCompleteOrderMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const getAllOrders = (
    
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<OrderDTO[]>(
      {url: `/orders`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAllOrdersQueryKey = () => {
    return [`/orders`] as const;
    }

    
export const getGetAllOrdersQueryOptions = <TData = Awaited<ReturnType<typeof getAllOrders>>, TError = ErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllOrders>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllOrdersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllOrders>>> = ({ signal }) => getAllOrders(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllOrders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllOrdersQueryResult = NonNullable<Awaited<ReturnType<typeof getAllOrders>>>
export type GetAllOrdersQueryError = ErrorResponse


export function useGetAllOrders<TData = Awaited<ReturnType<typeof getAllOrders>>, TError = ErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllOrders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllOrders>>,
          TError,
          Awaited<ReturnType<typeof getAllOrders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllOrders<TData = Awaited<ReturnType<typeof getAllOrders>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllOrders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllOrders>>,
          TError,
          Awaited<ReturnType<typeof getAllOrders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllOrders<TData = Awaited<ReturnType<typeof getAllOrders>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllOrders>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */

export function useGetAllOrders<TData = Awaited<ReturnType<typeof getAllOrders>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllOrders>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllOrdersQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * @summary –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const createOrder = (
    createOrderRequest: CreateOrderRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<OrderDTO>(
      {url: `/orders`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createOrderRequest, signal
    },
      options);
    }
  


export const getCreateOrderMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrder>>, TError,{data: CreateOrderRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof createOrder>>, TError,{data: CreateOrderRequest}, TContext> => {

const mutationKey = ['createOrder'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createOrder>>, {data: CreateOrderRequest}> = (props) => {
          const {data} = props ?? {};

          return  createOrder(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateOrderMutationResult = NonNullable<Awaited<ReturnType<typeof createOrder>>>
    export type CreateOrderMutationBody = CreateOrderRequest
    export type CreateOrderMutationError = ErrorResponse

    /**
 * @summary –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const useCreateOrder = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrder>>, TError,{data: CreateOrderRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createOrder>>,
        TError,
        {data: CreateOrderRequest},
        TContext
      > => {

      const mutationOptions = getCreateOrderMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø—Ä–µ–¥–º–µ—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const getOrderItems = (
    orderId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<OrderItemDTO[]>(
      {url: `/orders/${orderId}/items`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderItemsQueryKey = (orderId: string,) => {
    return [`/orders/${orderId}/items`] as const;
    }

    
export const getGetOrderItemsQueryOptions = <TData = Awaited<ReturnType<typeof getOrderItems>>, TError = ErrorResponse>(orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderItems>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderItemsQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderItems>>> = ({ signal }) => getOrderItems(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderItems>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOrderItemsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderItems>>>
export type GetOrderItemsQueryError = ErrorResponse


export function useGetOrderItems<TData = Awaited<ReturnType<typeof getOrderItems>>, TError = ErrorResponse>(
 orderId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderItems>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderItems>>,
          TError,
          Awaited<ReturnType<typeof getOrderItems>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrderItems<TData = Awaited<ReturnType<typeof getOrderItems>>, TError = ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderItems>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderItems>>,
          TError,
          Awaited<ReturnType<typeof getOrderItems>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrderItems<TData = Awaited<ReturnType<typeof getOrderItems>>, TError = ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderItems>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø—Ä–µ–¥–º–µ—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */

export function useGetOrderItems<TData = Awaited<ReturnType<typeof getOrderItems>>, TError = ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderItems>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOrderItemsQueryOptions(orderId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –î–æ–¥–∞—î –Ω–æ–≤–∏–π –ø—Ä–µ–¥–º–µ—Ç –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * @summary –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–µ–¥–º–µ—Ç –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const addOrderItem = (
    orderId: string,
    orderItemDTO: OrderItemDTO,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<OrderItemDTO>(
      {url: `/orders/${orderId}/items`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderItemDTO, signal
    },
      options);
    }
  


export const getAddOrderItemMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addOrderItem>>, TError,{orderId: string;data: OrderItemDTO}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof addOrderItem>>, TError,{orderId: string;data: OrderItemDTO}, TContext> => {

const mutationKey = ['addOrderItem'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addOrderItem>>, {orderId: string;data: OrderItemDTO}> = (props) => {
          const {orderId,data} = props ?? {};

          return  addOrderItem(orderId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddOrderItemMutationResult = NonNullable<Awaited<ReturnType<typeof addOrderItem>>>
    export type AddOrderItemMutationBody = OrderItemDTO
    export type AddOrderItemMutationError = ErrorResponse

    /**
 * @summary –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–µ–¥–º–µ—Ç –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const useAddOrderItem = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addOrderItem>>, TError,{orderId: string;data: OrderItemDTO}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof addOrderItem>>,
        TError,
        {orderId: string;data: OrderItemDTO},
        TContext
      > => {

      const mutationOptions = getAddOrderItemMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ó–±–µ—Ä—ñ–≥–∞—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —è–∫ —á–µ—Ä–Ω–µ—Ç–∫—É
 * @summary –ó–±–µ—Ä–µ–≥—Ç–∏ —á–µ—Ä–Ω–µ—Ç–∫—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const saveOrderDraft = (
    createOrderRequest: CreateOrderRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<OrderDTO>(
      {url: `/orders/draft`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createOrderRequest, signal
    },
      options);
    }
  


export const getSaveOrderDraftMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveOrderDraft>>, TError,{data: CreateOrderRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof saveOrderDraft>>, TError,{data: CreateOrderRequest}, TContext> => {

const mutationKey = ['saveOrderDraft'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof saveOrderDraft>>, {data: CreateOrderRequest}> = (props) => {
          const {data} = props ?? {};

          return  saveOrderDraft(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SaveOrderDraftMutationResult = NonNullable<Awaited<ReturnType<typeof saveOrderDraft>>>
    export type SaveOrderDraftMutationBody = CreateOrderRequest
    export type SaveOrderDraftMutationError = ErrorResponse

    /**
 * @summary –ó–±–µ—Ä–µ–≥—Ç–∏ —á–µ—Ä–Ω–µ—Ç–∫—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const useSaveOrderDraft = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveOrderDraft>>, TError,{data: CreateOrderRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof saveOrderDraft>>,
        TError,
        {data: CreateOrderRequest},
        TContext
      > => {

      const mutationOptions = getSaveOrderDraftMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –π–æ–≥–æ ID
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ ID
 */
export const getOrderById = (
    id: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<OrderDTO>(
      {url: `/orders/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderByIdQueryKey = (id: string,) => {
    return [`/orders/${id}`] as const;
    }

    
export const getGetOrderByIdQueryOptions = <TData = Awaited<ReturnType<typeof getOrderById>>, TError = ErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderById>>> = ({ signal }) => getOrderById(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOrderByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderById>>>
export type GetOrderByIdQueryError = ErrorResponse


export function useGetOrderById<TData = Awaited<ReturnType<typeof getOrderById>>, TError = ErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderById>>,
          TError,
          Awaited<ReturnType<typeof getOrderById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrderById<TData = Awaited<ReturnType<typeof getOrderById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderById>>,
          TError,
          Awaited<ReturnType<typeof getOrderById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrderById<TData = Awaited<ReturnType<typeof getOrderById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ ID
 */

export function useGetOrderById<TData = Awaited<ReturnType<typeof getOrderById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOrderByIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —á–µ—Ä–Ω–µ—Ç–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —á–µ—Ä–Ω–µ—Ç–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å
 */
export const getDraftOrders = (
    
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<OrderDTO[]>(
      {url: `/orders/drafts`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDraftOrdersQueryKey = () => {
    return [`/orders/drafts`] as const;
    }

    
export const getGetDraftOrdersQueryOptions = <TData = Awaited<ReturnType<typeof getDraftOrders>>, TError = ErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDraftOrders>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDraftOrdersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDraftOrders>>> = ({ signal }) => getDraftOrders(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDraftOrders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDraftOrdersQueryResult = NonNullable<Awaited<ReturnType<typeof getDraftOrders>>>
export type GetDraftOrdersQueryError = ErrorResponse


export function useGetDraftOrders<TData = Awaited<ReturnType<typeof getDraftOrders>>, TError = ErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDraftOrders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDraftOrders>>,
          TError,
          Awaited<ReturnType<typeof getDraftOrders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDraftOrders<TData = Awaited<ReturnType<typeof getDraftOrders>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDraftOrders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDraftOrders>>,
          TError,
          Awaited<ReturnType<typeof getDraftOrders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDraftOrders<TData = Awaited<ReturnType<typeof getDraftOrders>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDraftOrders>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —á–µ—Ä–Ω–µ—Ç–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å
 */

export function useGetDraftOrders<TData = Awaited<ReturnType<typeof getDraftOrders>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDraftOrders>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetDraftOrdersQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const getActiveOrders = (
    
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<OrderDTO[]>(
      {url: `/orders/active`, method: 'GET', signal
    },
      options);
    }
  

export const getGetActiveOrdersQueryKey = () => {
    return [`/orders/active`] as const;
    }

    
export const getGetActiveOrdersQueryOptions = <TData = Awaited<ReturnType<typeof getActiveOrders>>, TError = ErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getActiveOrders>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetActiveOrdersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getActiveOrders>>> = ({ signal }) => getActiveOrders(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getActiveOrders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetActiveOrdersQueryResult = NonNullable<Awaited<ReturnType<typeof getActiveOrders>>>
export type GetActiveOrdersQueryError = ErrorResponse


export function useGetActiveOrders<TData = Awaited<ReturnType<typeof getActiveOrders>>, TError = ErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getActiveOrders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getActiveOrders>>,
          TError,
          Awaited<ReturnType<typeof getActiveOrders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetActiveOrders<TData = Awaited<ReturnType<typeof getActiveOrders>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getActiveOrders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getActiveOrders>>,
          TError,
          Awaited<ReturnType<typeof getActiveOrders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetActiveOrders<TData = Awaited<ReturnType<typeof getActiveOrders>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getActiveOrders>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */

export function useGetActiveOrders<TData = Awaited<ReturnType<typeof getActiveOrders>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getActiveOrders>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetActiveOrdersQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –°–∫–∞—Å–æ–≤—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * @summary –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const cancelOrder = (
    id: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<CancelOrder204>(
      {url: `/orders/${id}/cancel`, method: 'DELETE'
    },
      options);
    }
  


export const getCancelOrderMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cancelOrder>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof cancelOrder>>, TError,{id: string}, TContext> => {

const mutationKey = ['cancelOrder'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cancelOrder>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  cancelOrder(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CancelOrderMutationResult = NonNullable<Awaited<ReturnType<typeof cancelOrder>>>
    
    export type CancelOrderMutationError = ErrorResponse

    /**
 * @summary –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const useCancelOrder = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cancelOrder>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof cancelOrder>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getCancelOrderMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
