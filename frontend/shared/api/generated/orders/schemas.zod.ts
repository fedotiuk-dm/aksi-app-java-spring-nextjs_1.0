/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AKSI API
 * API –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–ª—ñ–Ω—ñ–Ω–≥–æ–≤–æ—é –∫–æ–º–ø–∞–Ω—ñ—î—é AKSI
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';

/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–µ–¥–º–µ—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –π–æ–≥–æ ID
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const getOrderItemParams = zod.object({
  "orderId": zod.coerce.string().uuid().describe('ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'),
  "itemId": zod.coerce.string().uuid().describe('ID –ø—Ä–µ–¥–º–µ—Ç–∞')
}).strict()

export const getOrderItem200ResponseNameMin = 0;

export const getOrderItem200ResponseNameMax = 255;
export const getOrderItem200ResponseDescriptionMin = 0;

export const getOrderItem200ResponseDescriptionMax = 1000;
export const getOrderItem200ResponseSpecialInstructionsMin = 0;

export const getOrderItem200ResponseSpecialInstructionsMax = 500;
export const getOrderItem200ResponseDefectsNotesMin = 0;

export const getOrderItem200ResponseDefectsNotesMax = 1000;


export const getOrderItem200Response = zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "orderId": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(getOrderItem200ResponseNameMin).max(getOrderItem200ResponseNameMax),
  "description": zod.coerce.string().min(getOrderItem200ResponseDescriptionMin).max(getOrderItem200ResponseDescriptionMax).optional(),
  "quantity": zod.coerce.number().min(1),
  "unitPrice": zod.coerce.number(),
  "totalPrice": zod.coerce.number().optional(),
  "category": zod.coerce.string().optional(),
  "color": zod.coerce.string().optional(),
  "material": zod.coerce.string().optional(),
  "unitOfMeasure": zod.coerce.string().optional(),
  "defects": zod.coerce.string().optional(),
  "specialInstructions": zod.coerce.string().min(getOrderItem200ResponseSpecialInstructionsMin).max(getOrderItem200ResponseSpecialInstructionsMax).optional(),
  "fillerType": zod.coerce.string().optional(),
  "fillerCompressed": zod.coerce.boolean().optional(),
  "wearDegree": zod.coerce.string().optional(),
  "stains": zod.coerce.string().optional(),
  "otherStains": zod.coerce.string().optional(),
  "defectsAndRisks": zod.coerce.string().optional(),
  "noGuaranteeReason": zod.coerce.string().optional(),
  "defectsNotes": zod.coerce.string().min(getOrderItem200ResponseDefectsNotesMin).max(getOrderItem200ResponseDefectsNotesMax).optional()
}).strict()

export const getOrderItem400Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getOrderItem401Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getOrderItem403Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getOrderItem404Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getOrderItem409Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * –û–Ω–æ–≤–ª—é—î —ñ—Å–Ω—É—é—á–∏–π –ø—Ä–µ–¥–º–µ—Ç —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ
 * @summary –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const updateOrderItemParams = zod.object({
  "orderId": zod.coerce.string().uuid().describe('ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'),
  "itemId": zod.coerce.string().uuid().describe('ID –ø—Ä–µ–¥–º–µ—Ç–∞')
}).strict()

export const updateOrderItemBodyNameMin = 0;

export const updateOrderItemBodyNameMax = 255;
export const updateOrderItemBodyDescriptionMin = 0;

export const updateOrderItemBodyDescriptionMax = 1000;
export const updateOrderItemBodySpecialInstructionsMin = 0;

export const updateOrderItemBodySpecialInstructionsMax = 500;
export const updateOrderItemBodyDefectsNotesMin = 0;

export const updateOrderItemBodyDefectsNotesMax = 1000;


export const updateOrderItemBody = zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "orderId": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(updateOrderItemBodyNameMin).max(updateOrderItemBodyNameMax),
  "description": zod.coerce.string().min(updateOrderItemBodyDescriptionMin).max(updateOrderItemBodyDescriptionMax).optional(),
  "quantity": zod.coerce.number().min(1),
  "unitPrice": zod.coerce.number(),
  "totalPrice": zod.coerce.number().optional(),
  "category": zod.coerce.string().optional(),
  "color": zod.coerce.string().optional(),
  "material": zod.coerce.string().optional(),
  "unitOfMeasure": zod.coerce.string().optional(),
  "defects": zod.coerce.string().optional(),
  "specialInstructions": zod.coerce.string().min(updateOrderItemBodySpecialInstructionsMin).max(updateOrderItemBodySpecialInstructionsMax).optional(),
  "fillerType": zod.coerce.string().optional(),
  "fillerCompressed": zod.coerce.boolean().optional(),
  "wearDegree": zod.coerce.string().optional(),
  "stains": zod.coerce.string().optional(),
  "otherStains": zod.coerce.string().optional(),
  "defectsAndRisks": zod.coerce.string().optional(),
  "noGuaranteeReason": zod.coerce.string().optional(),
  "defectsNotes": zod.coerce.string().min(updateOrderItemBodyDefectsNotesMin).max(updateOrderItemBodyDefectsNotesMax).optional()
}).strict()

export const updateOrderItem200ResponseNameMin = 0;

export const updateOrderItem200ResponseNameMax = 255;
export const updateOrderItem200ResponseDescriptionMin = 0;

export const updateOrderItem200ResponseDescriptionMax = 1000;
export const updateOrderItem200ResponseSpecialInstructionsMin = 0;

export const updateOrderItem200ResponseSpecialInstructionsMax = 500;
export const updateOrderItem200ResponseDefectsNotesMin = 0;

export const updateOrderItem200ResponseDefectsNotesMax = 1000;


export const updateOrderItem200Response = zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "orderId": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(updateOrderItem200ResponseNameMin).max(updateOrderItem200ResponseNameMax),
  "description": zod.coerce.string().min(updateOrderItem200ResponseDescriptionMin).max(updateOrderItem200ResponseDescriptionMax).optional(),
  "quantity": zod.coerce.number().min(1),
  "unitPrice": zod.coerce.number(),
  "totalPrice": zod.coerce.number().optional(),
  "category": zod.coerce.string().optional(),
  "color": zod.coerce.string().optional(),
  "material": zod.coerce.string().optional(),
  "unitOfMeasure": zod.coerce.string().optional(),
  "defects": zod.coerce.string().optional(),
  "specialInstructions": zod.coerce.string().min(updateOrderItem200ResponseSpecialInstructionsMin).max(updateOrderItem200ResponseSpecialInstructionsMax).optional(),
  "fillerType": zod.coerce.string().optional(),
  "fillerCompressed": zod.coerce.boolean().optional(),
  "wearDegree": zod.coerce.string().optional(),
  "stains": zod.coerce.string().optional(),
  "otherStains": zod.coerce.string().optional(),
  "defectsAndRisks": zod.coerce.string().optional(),
  "noGuaranteeReason": zod.coerce.string().optional(),
  "defectsNotes": zod.coerce.string().min(updateOrderItem200ResponseDefectsNotesMin).max(updateOrderItem200ResponseDefectsNotesMax).optional()
}).strict()

export const updateOrderItem400Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const updateOrderItem401Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const updateOrderItem403Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const updateOrderItem404Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const updateOrderItem409Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * –í–∏–¥–∞–ª—è—î –ø—Ä–µ–¥–º–µ—Ç —ñ–∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * @summary –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const deleteOrderItemParams = zod.object({
  "orderId": zod.coerce.string().uuid().describe('ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'),
  "itemId": zod.coerce.string().uuid().describe('ID –ø—Ä–µ–¥–º–µ—Ç–∞')
}).strict()

export const deleteOrderItem204Response = zod.object({

})

export const deleteOrderItem400Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const deleteOrderItem401Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const deleteOrderItem403Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const deleteOrderItem404Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const deleteOrderItem409Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * –û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * @summary –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const updateOrderStatusParams = zod.object({
  "id": zod.coerce.string().uuid().describe('ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']).describe('–ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
}).strict()

export const updateOrderStatus200ResponseClientStructuredAddressCityMin = 2;

export const updateOrderStatus200ResponseClientStructuredAddressCityMax = 100;

export const updateOrderStatus200ResponseClientStructuredAddressCityRegExp = new RegExp('^[\\p{L}\\s.,\\-\']+$');
export const updateOrderStatus200ResponseClientStructuredAddressStreetMin = 2;

export const updateOrderStatus200ResponseClientStructuredAddressStreetMax = 150;

export const updateOrderStatus200ResponseClientStructuredAddressStreetRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\']+$');
export const updateOrderStatus200ResponseClientStructuredAddressBuildingMin = 0;

export const updateOrderStatus200ResponseClientStructuredAddressBuildingMax = 20;

export const updateOrderStatus200ResponseClientStructuredAddressBuildingRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const updateOrderStatus200ResponseClientStructuredAddressApartmentMin = 0;

export const updateOrderStatus200ResponseClientStructuredAddressApartmentMax = 20;

export const updateOrderStatus200ResponseClientStructuredAddressApartmentRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const updateOrderStatus200ResponseClientStructuredAddressPostalCodeMin = 0;

export const updateOrderStatus200ResponseClientStructuredAddressPostalCodeMax = 10;

export const updateOrderStatus200ResponseClientStructuredAddressPostalCodeRegExp = new RegExp('^[0-9\\-]+$');
export const updateOrderStatus200ResponseClientStructuredAddressFullAddressMin = 5;

export const updateOrderStatus200ResponseClientStructuredAddressFullAddressMax = 500;
export const updateOrderStatus200ResponseClientPreferencesItemKeyMin = 0;

export const updateOrderStatus200ResponseClientPreferencesItemKeyMax = 100;
export const updateOrderStatus200ResponseClientPreferencesItemValueMin = 0;

export const updateOrderStatus200ResponseClientPreferencesItemValueMax = 255;
export const updateOrderStatus200ResponseItemsItemNameMin = 0;

export const updateOrderStatus200ResponseItemsItemNameMax = 255;
export const updateOrderStatus200ResponseItemsItemDescriptionMin = 0;

export const updateOrderStatus200ResponseItemsItemDescriptionMax = 1000;
export const updateOrderStatus200ResponseItemsItemSpecialInstructionsMin = 0;

export const updateOrderStatus200ResponseItemsItemSpecialInstructionsMax = 500;
export const updateOrderStatus200ResponseItemsItemDefectsNotesMin = 0;

export const updateOrderStatus200ResponseItemsItemDefectsNotesMax = 1000;
export const updateOrderStatus200ResponseBranchLocationPhoneRegExp = new RegExp('^\\+ ? [0-9\\s-()]{10,15}$');
export const updateOrderStatus200ResponseCustomerNotesMin = 0;

export const updateOrderStatus200ResponseCustomerNotesMax = 1000;
export const updateOrderStatus200ResponseInternalNotesMin = 0;

export const updateOrderStatus200ResponseInternalNotesMax = 1000;


export const updateOrderStatus200Response = zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "receiptNumber": zod.coerce.string().min(1),
  "tagNumber": zod.coerce.string().optional(),
  "client": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "lastName": zod.coerce.string().optional(),
  "firstName": zod.coerce.string().optional(),
  "fullName": zod.coerce.string().optional(),
  "phone": zod.coerce.string().optional(),
  "email": zod.coerce.string().optional(),
  "address": zod.coerce.string().optional(),
  "structuredAddress": zod.object({
  "city": zod.coerce.string().min(updateOrderStatus200ResponseClientStructuredAddressCityMin).max(updateOrderStatus200ResponseClientStructuredAddressCityMax).regex(updateOrderStatus200ResponseClientStructuredAddressCityRegExp).optional(),
  "street": zod.coerce.string().min(updateOrderStatus200ResponseClientStructuredAddressStreetMin).max(updateOrderStatus200ResponseClientStructuredAddressStreetMax).regex(updateOrderStatus200ResponseClientStructuredAddressStreetRegExp).optional(),
  "building": zod.coerce.string().min(updateOrderStatus200ResponseClientStructuredAddressBuildingMin).max(updateOrderStatus200ResponseClientStructuredAddressBuildingMax).regex(updateOrderStatus200ResponseClientStructuredAddressBuildingRegExp).optional(),
  "apartment": zod.coerce.string().min(updateOrderStatus200ResponseClientStructuredAddressApartmentMin).max(updateOrderStatus200ResponseClientStructuredAddressApartmentMax).regex(updateOrderStatus200ResponseClientStructuredAddressApartmentRegExp).optional(),
  "postalCode": zod.coerce.string().min(updateOrderStatus200ResponseClientStructuredAddressPostalCodeMin).max(updateOrderStatus200ResponseClientStructuredAddressPostalCodeMax).regex(updateOrderStatus200ResponseClientStructuredAddressPostalCodeRegExp).optional(),
  "fullAddress": zod.coerce.string().min(updateOrderStatus200ResponseClientStructuredAddressFullAddressMin).max(updateOrderStatus200ResponseClientStructuredAddressFullAddressMax).optional()
}).strict().optional(),
  "communicationChannels": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER'])).optional(),
  "source": zod.enum(['INSTAGRAM', 'GOOGLE', 'RECOMMENDATION', 'OTHER']).optional(),
  "sourceDetails": zod.coerce.string().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "updatedAt": zod.coerce.string().datetime({}).optional(),
  "category": zod.object({
  "code": zod.coerce.string().optional(),
  "displayName": zod.coerce.string().optional()
}).strict().optional(),
  "preferences": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "key": zod.coerce.string().min(updateOrderStatus200ResponseClientPreferencesItemKeyMin).max(updateOrderStatus200ResponseClientPreferencesItemKeyMax),
  "value": zod.coerce.string().min(updateOrderStatus200ResponseClientPreferencesItemValueMin).max(updateOrderStatus200ResponseClientPreferencesItemValueMax).optional()
}).strict()).optional(),
  "recentOrders": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "receiptNumber": zod.coerce.string().optional(),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']).optional(),
  "totalAmount": zod.coerce.number().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "completionDate": zod.coerce.string().datetime({}).optional(),
  "itemCount": zod.coerce.number().optional()
}).strict()).optional(),
  "orderCount": zod.coerce.number().optional()
}).strict(),
  "clientId": zod.coerce.string().uuid().optional(),
  "items": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "orderId": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(updateOrderStatus200ResponseItemsItemNameMin).max(updateOrderStatus200ResponseItemsItemNameMax),
  "description": zod.coerce.string().min(updateOrderStatus200ResponseItemsItemDescriptionMin).max(updateOrderStatus200ResponseItemsItemDescriptionMax).optional(),
  "quantity": zod.coerce.number().min(1),
  "unitPrice": zod.coerce.number(),
  "totalPrice": zod.coerce.number().optional(),
  "category": zod.coerce.string().optional(),
  "color": zod.coerce.string().optional(),
  "material": zod.coerce.string().optional(),
  "unitOfMeasure": zod.coerce.string().optional(),
  "defects": zod.coerce.string().optional(),
  "specialInstructions": zod.coerce.string().min(updateOrderStatus200ResponseItemsItemSpecialInstructionsMin).max(updateOrderStatus200ResponseItemsItemSpecialInstructionsMax).optional(),
  "fillerType": zod.coerce.string().optional(),
  "fillerCompressed": zod.coerce.boolean().optional(),
  "wearDegree": zod.coerce.string().optional(),
  "stains": zod.coerce.string().optional(),
  "otherStains": zod.coerce.string().optional(),
  "defectsAndRisks": zod.coerce.string().optional(),
  "noGuaranteeReason": zod.coerce.string().optional(),
  "defectsNotes": zod.coerce.string().min(updateOrderStatus200ResponseItemsItemDefectsNotesMin).max(updateOrderStatus200ResponseItemsItemDefectsNotesMax).optional()
}).strict()).optional(),
  "totalAmount": zod.coerce.number().optional(),
  "discountAmount": zod.coerce.number().optional(),
  "finalAmount": zod.coerce.number().optional(),
  "prepaymentAmount": zod.coerce.number().optional(),
  "balanceAmount": zod.coerce.number().optional(),
  "branchLocation": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(1),
  "address": zod.coerce.string().min(1),
  "phone": zod.coerce.string().regex(updateOrderStatus200ResponseBranchLocationPhoneRegExp).optional(),
  "code": zod.coerce.string().min(1),
  "active": zod.coerce.boolean().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "updatedAt": zod.coerce.string().datetime({}).optional()
}).strict(),
  "branchLocationId": zod.coerce.string().uuid().optional(),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']),
  "createdDate": zod.coerce.string().datetime({}).optional(),
  "updatedDate": zod.coerce.string().datetime({}).optional(),
  "expectedCompletionDate": zod.coerce.string().datetime({}).optional(),
  "completedDate": zod.coerce.string().datetime({}).optional(),
  "customerNotes": zod.coerce.string().min(updateOrderStatus200ResponseCustomerNotesMin).max(updateOrderStatus200ResponseCustomerNotesMax).optional(),
  "internalNotes": zod.coerce.string().min(updateOrderStatus200ResponseInternalNotesMin).max(updateOrderStatus200ResponseInternalNotesMax).optional(),
  "expediteType": zod.enum(['STANDARD', 'EXPRESS_48H', 'EXPRESS_24H']).optional(),
  "completionComments": zod.coerce.string().optional(),
  "termsAccepted": zod.coerce.boolean().optional(),
  "finalizedAt": zod.coerce.string().datetime({}).optional(),
  "express": zod.coerce.boolean().optional(),
  "draft": zod.coerce.boolean().optional(),
  "printed": zod.coerce.boolean().optional(),
  "emailed": zod.coerce.boolean().optional()
}).strict()

export const updateOrderStatus400Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const updateOrderStatus401Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const updateOrderStatus403Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const updateOrderStatus404Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const updateOrderStatus409Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * –î–æ–¥–∞—î –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç—É –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * @summary –î–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç—É
 */
export const addPrepaymentParams = zod.object({
  "id": zod.coerce.string().uuid().describe('ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'),
  "amount": zod.coerce.number().describe('–°—É–º–∞ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∏')
}).strict()

export const addPrepayment200ResponseClientStructuredAddressCityMin = 2;

export const addPrepayment200ResponseClientStructuredAddressCityMax = 100;

export const addPrepayment200ResponseClientStructuredAddressCityRegExp = new RegExp('^[\\p{L}\\s.,\\-\']+$');
export const addPrepayment200ResponseClientStructuredAddressStreetMin = 2;

export const addPrepayment200ResponseClientStructuredAddressStreetMax = 150;

export const addPrepayment200ResponseClientStructuredAddressStreetRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\']+$');
export const addPrepayment200ResponseClientStructuredAddressBuildingMin = 0;

export const addPrepayment200ResponseClientStructuredAddressBuildingMax = 20;

export const addPrepayment200ResponseClientStructuredAddressBuildingRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const addPrepayment200ResponseClientStructuredAddressApartmentMin = 0;

export const addPrepayment200ResponseClientStructuredAddressApartmentMax = 20;

export const addPrepayment200ResponseClientStructuredAddressApartmentRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const addPrepayment200ResponseClientStructuredAddressPostalCodeMin = 0;

export const addPrepayment200ResponseClientStructuredAddressPostalCodeMax = 10;

export const addPrepayment200ResponseClientStructuredAddressPostalCodeRegExp = new RegExp('^[0-9\\-]+$');
export const addPrepayment200ResponseClientStructuredAddressFullAddressMin = 5;

export const addPrepayment200ResponseClientStructuredAddressFullAddressMax = 500;
export const addPrepayment200ResponseClientPreferencesItemKeyMin = 0;

export const addPrepayment200ResponseClientPreferencesItemKeyMax = 100;
export const addPrepayment200ResponseClientPreferencesItemValueMin = 0;

export const addPrepayment200ResponseClientPreferencesItemValueMax = 255;
export const addPrepayment200ResponseItemsItemNameMin = 0;

export const addPrepayment200ResponseItemsItemNameMax = 255;
export const addPrepayment200ResponseItemsItemDescriptionMin = 0;

export const addPrepayment200ResponseItemsItemDescriptionMax = 1000;
export const addPrepayment200ResponseItemsItemSpecialInstructionsMin = 0;

export const addPrepayment200ResponseItemsItemSpecialInstructionsMax = 500;
export const addPrepayment200ResponseItemsItemDefectsNotesMin = 0;

export const addPrepayment200ResponseItemsItemDefectsNotesMax = 1000;
export const addPrepayment200ResponseBranchLocationPhoneRegExp = new RegExp('^\\+ ? [0-9\\s-()]{10,15}$');
export const addPrepayment200ResponseCustomerNotesMin = 0;

export const addPrepayment200ResponseCustomerNotesMax = 1000;
export const addPrepayment200ResponseInternalNotesMin = 0;

export const addPrepayment200ResponseInternalNotesMax = 1000;


export const addPrepayment200Response = zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "receiptNumber": zod.coerce.string().min(1),
  "tagNumber": zod.coerce.string().optional(),
  "client": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "lastName": zod.coerce.string().optional(),
  "firstName": zod.coerce.string().optional(),
  "fullName": zod.coerce.string().optional(),
  "phone": zod.coerce.string().optional(),
  "email": zod.coerce.string().optional(),
  "address": zod.coerce.string().optional(),
  "structuredAddress": zod.object({
  "city": zod.coerce.string().min(addPrepayment200ResponseClientStructuredAddressCityMin).max(addPrepayment200ResponseClientStructuredAddressCityMax).regex(addPrepayment200ResponseClientStructuredAddressCityRegExp).optional(),
  "street": zod.coerce.string().min(addPrepayment200ResponseClientStructuredAddressStreetMin).max(addPrepayment200ResponseClientStructuredAddressStreetMax).regex(addPrepayment200ResponseClientStructuredAddressStreetRegExp).optional(),
  "building": zod.coerce.string().min(addPrepayment200ResponseClientStructuredAddressBuildingMin).max(addPrepayment200ResponseClientStructuredAddressBuildingMax).regex(addPrepayment200ResponseClientStructuredAddressBuildingRegExp).optional(),
  "apartment": zod.coerce.string().min(addPrepayment200ResponseClientStructuredAddressApartmentMin).max(addPrepayment200ResponseClientStructuredAddressApartmentMax).regex(addPrepayment200ResponseClientStructuredAddressApartmentRegExp).optional(),
  "postalCode": zod.coerce.string().min(addPrepayment200ResponseClientStructuredAddressPostalCodeMin).max(addPrepayment200ResponseClientStructuredAddressPostalCodeMax).regex(addPrepayment200ResponseClientStructuredAddressPostalCodeRegExp).optional(),
  "fullAddress": zod.coerce.string().min(addPrepayment200ResponseClientStructuredAddressFullAddressMin).max(addPrepayment200ResponseClientStructuredAddressFullAddressMax).optional()
}).strict().optional(),
  "communicationChannels": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER'])).optional(),
  "source": zod.enum(['INSTAGRAM', 'GOOGLE', 'RECOMMENDATION', 'OTHER']).optional(),
  "sourceDetails": zod.coerce.string().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "updatedAt": zod.coerce.string().datetime({}).optional(),
  "category": zod.object({
  "code": zod.coerce.string().optional(),
  "displayName": zod.coerce.string().optional()
}).strict().optional(),
  "preferences": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "key": zod.coerce.string().min(addPrepayment200ResponseClientPreferencesItemKeyMin).max(addPrepayment200ResponseClientPreferencesItemKeyMax),
  "value": zod.coerce.string().min(addPrepayment200ResponseClientPreferencesItemValueMin).max(addPrepayment200ResponseClientPreferencesItemValueMax).optional()
}).strict()).optional(),
  "recentOrders": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "receiptNumber": zod.coerce.string().optional(),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']).optional(),
  "totalAmount": zod.coerce.number().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "completionDate": zod.coerce.string().datetime({}).optional(),
  "itemCount": zod.coerce.number().optional()
}).strict()).optional(),
  "orderCount": zod.coerce.number().optional()
}).strict(),
  "clientId": zod.coerce.string().uuid().optional(),
  "items": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "orderId": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(addPrepayment200ResponseItemsItemNameMin).max(addPrepayment200ResponseItemsItemNameMax),
  "description": zod.coerce.string().min(addPrepayment200ResponseItemsItemDescriptionMin).max(addPrepayment200ResponseItemsItemDescriptionMax).optional(),
  "quantity": zod.coerce.number().min(1),
  "unitPrice": zod.coerce.number(),
  "totalPrice": zod.coerce.number().optional(),
  "category": zod.coerce.string().optional(),
  "color": zod.coerce.string().optional(),
  "material": zod.coerce.string().optional(),
  "unitOfMeasure": zod.coerce.string().optional(),
  "defects": zod.coerce.string().optional(),
  "specialInstructions": zod.coerce.string().min(addPrepayment200ResponseItemsItemSpecialInstructionsMin).max(addPrepayment200ResponseItemsItemSpecialInstructionsMax).optional(),
  "fillerType": zod.coerce.string().optional(),
  "fillerCompressed": zod.coerce.boolean().optional(),
  "wearDegree": zod.coerce.string().optional(),
  "stains": zod.coerce.string().optional(),
  "otherStains": zod.coerce.string().optional(),
  "defectsAndRisks": zod.coerce.string().optional(),
  "noGuaranteeReason": zod.coerce.string().optional(),
  "defectsNotes": zod.coerce.string().min(addPrepayment200ResponseItemsItemDefectsNotesMin).max(addPrepayment200ResponseItemsItemDefectsNotesMax).optional()
}).strict()).optional(),
  "totalAmount": zod.coerce.number().optional(),
  "discountAmount": zod.coerce.number().optional(),
  "finalAmount": zod.coerce.number().optional(),
  "prepaymentAmount": zod.coerce.number().optional(),
  "balanceAmount": zod.coerce.number().optional(),
  "branchLocation": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(1),
  "address": zod.coerce.string().min(1),
  "phone": zod.coerce.string().regex(addPrepayment200ResponseBranchLocationPhoneRegExp).optional(),
  "code": zod.coerce.string().min(1),
  "active": zod.coerce.boolean().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "updatedAt": zod.coerce.string().datetime({}).optional()
}).strict(),
  "branchLocationId": zod.coerce.string().uuid().optional(),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']),
  "createdDate": zod.coerce.string().datetime({}).optional(),
  "updatedDate": zod.coerce.string().datetime({}).optional(),
  "expectedCompletionDate": zod.coerce.string().datetime({}).optional(),
  "completedDate": zod.coerce.string().datetime({}).optional(),
  "customerNotes": zod.coerce.string().min(addPrepayment200ResponseCustomerNotesMin).max(addPrepayment200ResponseCustomerNotesMax).optional(),
  "internalNotes": zod.coerce.string().min(addPrepayment200ResponseInternalNotesMin).max(addPrepayment200ResponseInternalNotesMax).optional(),
  "expediteType": zod.enum(['STANDARD', 'EXPRESS_48H', 'EXPRESS_24H']).optional(),
  "completionComments": zod.coerce.string().optional(),
  "termsAccepted": zod.coerce.boolean().optional(),
  "finalizedAt": zod.coerce.string().datetime({}).optional(),
  "express": zod.coerce.boolean().optional(),
  "draft": zod.coerce.boolean().optional(),
  "printed": zod.coerce.boolean().optional(),
  "emailed": zod.coerce.boolean().optional()
}).strict()

export const addPrepayment400Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const addPrepayment401Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const addPrepayment403Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const addPrepayment404Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const addPrepayment409Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * –ó–∞—Å—Ç–æ—Å–æ–≤—É—î –∑–Ω–∏–∂–∫—É –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * @summary –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –∑–Ω–∏–∂–∫—É
 */
export const applyDiscountParams = zod.object({
  "id": zod.coerce.string().uuid().describe('ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'),
  "amount": zod.coerce.number().describe('–°—É–º–∞ –∑–Ω–∏–∂–∫–∏')
}).strict()

export const applyDiscount200ResponseClientStructuredAddressCityMin = 2;

export const applyDiscount200ResponseClientStructuredAddressCityMax = 100;

export const applyDiscount200ResponseClientStructuredAddressCityRegExp = new RegExp('^[\\p{L}\\s.,\\-\']+$');
export const applyDiscount200ResponseClientStructuredAddressStreetMin = 2;

export const applyDiscount200ResponseClientStructuredAddressStreetMax = 150;

export const applyDiscount200ResponseClientStructuredAddressStreetRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\']+$');
export const applyDiscount200ResponseClientStructuredAddressBuildingMin = 0;

export const applyDiscount200ResponseClientStructuredAddressBuildingMax = 20;

export const applyDiscount200ResponseClientStructuredAddressBuildingRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const applyDiscount200ResponseClientStructuredAddressApartmentMin = 0;

export const applyDiscount200ResponseClientStructuredAddressApartmentMax = 20;

export const applyDiscount200ResponseClientStructuredAddressApartmentRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const applyDiscount200ResponseClientStructuredAddressPostalCodeMin = 0;

export const applyDiscount200ResponseClientStructuredAddressPostalCodeMax = 10;

export const applyDiscount200ResponseClientStructuredAddressPostalCodeRegExp = new RegExp('^[0-9\\-]+$');
export const applyDiscount200ResponseClientStructuredAddressFullAddressMin = 5;

export const applyDiscount200ResponseClientStructuredAddressFullAddressMax = 500;
export const applyDiscount200ResponseClientPreferencesItemKeyMin = 0;

export const applyDiscount200ResponseClientPreferencesItemKeyMax = 100;
export const applyDiscount200ResponseClientPreferencesItemValueMin = 0;

export const applyDiscount200ResponseClientPreferencesItemValueMax = 255;
export const applyDiscount200ResponseItemsItemNameMin = 0;

export const applyDiscount200ResponseItemsItemNameMax = 255;
export const applyDiscount200ResponseItemsItemDescriptionMin = 0;

export const applyDiscount200ResponseItemsItemDescriptionMax = 1000;
export const applyDiscount200ResponseItemsItemSpecialInstructionsMin = 0;

export const applyDiscount200ResponseItemsItemSpecialInstructionsMax = 500;
export const applyDiscount200ResponseItemsItemDefectsNotesMin = 0;

export const applyDiscount200ResponseItemsItemDefectsNotesMax = 1000;
export const applyDiscount200ResponseBranchLocationPhoneRegExp = new RegExp('^\\+ ? [0-9\\s-()]{10,15}$');
export const applyDiscount200ResponseCustomerNotesMin = 0;

export const applyDiscount200ResponseCustomerNotesMax = 1000;
export const applyDiscount200ResponseInternalNotesMin = 0;

export const applyDiscount200ResponseInternalNotesMax = 1000;


export const applyDiscount200Response = zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "receiptNumber": zod.coerce.string().min(1),
  "tagNumber": zod.coerce.string().optional(),
  "client": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "lastName": zod.coerce.string().optional(),
  "firstName": zod.coerce.string().optional(),
  "fullName": zod.coerce.string().optional(),
  "phone": zod.coerce.string().optional(),
  "email": zod.coerce.string().optional(),
  "address": zod.coerce.string().optional(),
  "structuredAddress": zod.object({
  "city": zod.coerce.string().min(applyDiscount200ResponseClientStructuredAddressCityMin).max(applyDiscount200ResponseClientStructuredAddressCityMax).regex(applyDiscount200ResponseClientStructuredAddressCityRegExp).optional(),
  "street": zod.coerce.string().min(applyDiscount200ResponseClientStructuredAddressStreetMin).max(applyDiscount200ResponseClientStructuredAddressStreetMax).regex(applyDiscount200ResponseClientStructuredAddressStreetRegExp).optional(),
  "building": zod.coerce.string().min(applyDiscount200ResponseClientStructuredAddressBuildingMin).max(applyDiscount200ResponseClientStructuredAddressBuildingMax).regex(applyDiscount200ResponseClientStructuredAddressBuildingRegExp).optional(),
  "apartment": zod.coerce.string().min(applyDiscount200ResponseClientStructuredAddressApartmentMin).max(applyDiscount200ResponseClientStructuredAddressApartmentMax).regex(applyDiscount200ResponseClientStructuredAddressApartmentRegExp).optional(),
  "postalCode": zod.coerce.string().min(applyDiscount200ResponseClientStructuredAddressPostalCodeMin).max(applyDiscount200ResponseClientStructuredAddressPostalCodeMax).regex(applyDiscount200ResponseClientStructuredAddressPostalCodeRegExp).optional(),
  "fullAddress": zod.coerce.string().min(applyDiscount200ResponseClientStructuredAddressFullAddressMin).max(applyDiscount200ResponseClientStructuredAddressFullAddressMax).optional()
}).strict().optional(),
  "communicationChannels": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER'])).optional(),
  "source": zod.enum(['INSTAGRAM', 'GOOGLE', 'RECOMMENDATION', 'OTHER']).optional(),
  "sourceDetails": zod.coerce.string().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "updatedAt": zod.coerce.string().datetime({}).optional(),
  "category": zod.object({
  "code": zod.coerce.string().optional(),
  "displayName": zod.coerce.string().optional()
}).strict().optional(),
  "preferences": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "key": zod.coerce.string().min(applyDiscount200ResponseClientPreferencesItemKeyMin).max(applyDiscount200ResponseClientPreferencesItemKeyMax),
  "value": zod.coerce.string().min(applyDiscount200ResponseClientPreferencesItemValueMin).max(applyDiscount200ResponseClientPreferencesItemValueMax).optional()
}).strict()).optional(),
  "recentOrders": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "receiptNumber": zod.coerce.string().optional(),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']).optional(),
  "totalAmount": zod.coerce.number().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "completionDate": zod.coerce.string().datetime({}).optional(),
  "itemCount": zod.coerce.number().optional()
}).strict()).optional(),
  "orderCount": zod.coerce.number().optional()
}).strict(),
  "clientId": zod.coerce.string().uuid().optional(),
  "items": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "orderId": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(applyDiscount200ResponseItemsItemNameMin).max(applyDiscount200ResponseItemsItemNameMax),
  "description": zod.coerce.string().min(applyDiscount200ResponseItemsItemDescriptionMin).max(applyDiscount200ResponseItemsItemDescriptionMax).optional(),
  "quantity": zod.coerce.number().min(1),
  "unitPrice": zod.coerce.number(),
  "totalPrice": zod.coerce.number().optional(),
  "category": zod.coerce.string().optional(),
  "color": zod.coerce.string().optional(),
  "material": zod.coerce.string().optional(),
  "unitOfMeasure": zod.coerce.string().optional(),
  "defects": zod.coerce.string().optional(),
  "specialInstructions": zod.coerce.string().min(applyDiscount200ResponseItemsItemSpecialInstructionsMin).max(applyDiscount200ResponseItemsItemSpecialInstructionsMax).optional(),
  "fillerType": zod.coerce.string().optional(),
  "fillerCompressed": zod.coerce.boolean().optional(),
  "wearDegree": zod.coerce.string().optional(),
  "stains": zod.coerce.string().optional(),
  "otherStains": zod.coerce.string().optional(),
  "defectsAndRisks": zod.coerce.string().optional(),
  "noGuaranteeReason": zod.coerce.string().optional(),
  "defectsNotes": zod.coerce.string().min(applyDiscount200ResponseItemsItemDefectsNotesMin).max(applyDiscount200ResponseItemsItemDefectsNotesMax).optional()
}).strict()).optional(),
  "totalAmount": zod.coerce.number().optional(),
  "discountAmount": zod.coerce.number().optional(),
  "finalAmount": zod.coerce.number().optional(),
  "prepaymentAmount": zod.coerce.number().optional(),
  "balanceAmount": zod.coerce.number().optional(),
  "branchLocation": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(1),
  "address": zod.coerce.string().min(1),
  "phone": zod.coerce.string().regex(applyDiscount200ResponseBranchLocationPhoneRegExp).optional(),
  "code": zod.coerce.string().min(1),
  "active": zod.coerce.boolean().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "updatedAt": zod.coerce.string().datetime({}).optional()
}).strict(),
  "branchLocationId": zod.coerce.string().uuid().optional(),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']),
  "createdDate": zod.coerce.string().datetime({}).optional(),
  "updatedDate": zod.coerce.string().datetime({}).optional(),
  "expectedCompletionDate": zod.coerce.string().datetime({}).optional(),
  "completedDate": zod.coerce.string().datetime({}).optional(),
  "customerNotes": zod.coerce.string().min(applyDiscount200ResponseCustomerNotesMin).max(applyDiscount200ResponseCustomerNotesMax).optional(),
  "internalNotes": zod.coerce.string().min(applyDiscount200ResponseInternalNotesMin).max(applyDiscount200ResponseInternalNotesMax).optional(),
  "expediteType": zod.enum(['STANDARD', 'EXPRESS_48H', 'EXPRESS_24H']).optional(),
  "completionComments": zod.coerce.string().optional(),
  "termsAccepted": zod.coerce.boolean().optional(),
  "finalizedAt": zod.coerce.string().datetime({}).optional(),
  "express": zod.coerce.boolean().optional(),
  "draft": zod.coerce.boolean().optional(),
  "printed": zod.coerce.boolean().optional(),
  "emailed": zod.coerce.boolean().optional()
}).strict()

export const applyDiscount400Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const applyDiscount401Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const applyDiscount403Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const applyDiscount404Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const applyDiscount409Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î —á–µ—Ä–Ω–µ—Ç–∫—É –Ω–∞ –∞–∫—Ç–∏–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * @summary –ü–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ —á–µ—Ä–Ω–µ—Ç–∫—É –Ω–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const convertDraftToOrderParams = zod.object({
  "id": zod.coerce.string().uuid().describe('ID —á–µ—Ä–Ω–µ—Ç–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
}).strict()

export const convertDraftToOrder200ResponseClientStructuredAddressCityMin = 2;

export const convertDraftToOrder200ResponseClientStructuredAddressCityMax = 100;

export const convertDraftToOrder200ResponseClientStructuredAddressCityRegExp = new RegExp('^[\\p{L}\\s.,\\-\']+$');
export const convertDraftToOrder200ResponseClientStructuredAddressStreetMin = 2;

export const convertDraftToOrder200ResponseClientStructuredAddressStreetMax = 150;

export const convertDraftToOrder200ResponseClientStructuredAddressStreetRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\']+$');
export const convertDraftToOrder200ResponseClientStructuredAddressBuildingMin = 0;

export const convertDraftToOrder200ResponseClientStructuredAddressBuildingMax = 20;

export const convertDraftToOrder200ResponseClientStructuredAddressBuildingRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const convertDraftToOrder200ResponseClientStructuredAddressApartmentMin = 0;

export const convertDraftToOrder200ResponseClientStructuredAddressApartmentMax = 20;

export const convertDraftToOrder200ResponseClientStructuredAddressApartmentRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const convertDraftToOrder200ResponseClientStructuredAddressPostalCodeMin = 0;

export const convertDraftToOrder200ResponseClientStructuredAddressPostalCodeMax = 10;

export const convertDraftToOrder200ResponseClientStructuredAddressPostalCodeRegExp = new RegExp('^[0-9\\-]+$');
export const convertDraftToOrder200ResponseClientStructuredAddressFullAddressMin = 5;

export const convertDraftToOrder200ResponseClientStructuredAddressFullAddressMax = 500;
export const convertDraftToOrder200ResponseClientPreferencesItemKeyMin = 0;

export const convertDraftToOrder200ResponseClientPreferencesItemKeyMax = 100;
export const convertDraftToOrder200ResponseClientPreferencesItemValueMin = 0;

export const convertDraftToOrder200ResponseClientPreferencesItemValueMax = 255;
export const convertDraftToOrder200ResponseItemsItemNameMin = 0;

export const convertDraftToOrder200ResponseItemsItemNameMax = 255;
export const convertDraftToOrder200ResponseItemsItemDescriptionMin = 0;

export const convertDraftToOrder200ResponseItemsItemDescriptionMax = 1000;
export const convertDraftToOrder200ResponseItemsItemSpecialInstructionsMin = 0;

export const convertDraftToOrder200ResponseItemsItemSpecialInstructionsMax = 500;
export const convertDraftToOrder200ResponseItemsItemDefectsNotesMin = 0;

export const convertDraftToOrder200ResponseItemsItemDefectsNotesMax = 1000;
export const convertDraftToOrder200ResponseBranchLocationPhoneRegExp = new RegExp('^\\+ ? [0-9\\s-()]{10,15}$');
export const convertDraftToOrder200ResponseCustomerNotesMin = 0;

export const convertDraftToOrder200ResponseCustomerNotesMax = 1000;
export const convertDraftToOrder200ResponseInternalNotesMin = 0;

export const convertDraftToOrder200ResponseInternalNotesMax = 1000;


export const convertDraftToOrder200Response = zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "receiptNumber": zod.coerce.string().min(1),
  "tagNumber": zod.coerce.string().optional(),
  "client": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "lastName": zod.coerce.string().optional(),
  "firstName": zod.coerce.string().optional(),
  "fullName": zod.coerce.string().optional(),
  "phone": zod.coerce.string().optional(),
  "email": zod.coerce.string().optional(),
  "address": zod.coerce.string().optional(),
  "structuredAddress": zod.object({
  "city": zod.coerce.string().min(convertDraftToOrder200ResponseClientStructuredAddressCityMin).max(convertDraftToOrder200ResponseClientStructuredAddressCityMax).regex(convertDraftToOrder200ResponseClientStructuredAddressCityRegExp).optional(),
  "street": zod.coerce.string().min(convertDraftToOrder200ResponseClientStructuredAddressStreetMin).max(convertDraftToOrder200ResponseClientStructuredAddressStreetMax).regex(convertDraftToOrder200ResponseClientStructuredAddressStreetRegExp).optional(),
  "building": zod.coerce.string().min(convertDraftToOrder200ResponseClientStructuredAddressBuildingMin).max(convertDraftToOrder200ResponseClientStructuredAddressBuildingMax).regex(convertDraftToOrder200ResponseClientStructuredAddressBuildingRegExp).optional(),
  "apartment": zod.coerce.string().min(convertDraftToOrder200ResponseClientStructuredAddressApartmentMin).max(convertDraftToOrder200ResponseClientStructuredAddressApartmentMax).regex(convertDraftToOrder200ResponseClientStructuredAddressApartmentRegExp).optional(),
  "postalCode": zod.coerce.string().min(convertDraftToOrder200ResponseClientStructuredAddressPostalCodeMin).max(convertDraftToOrder200ResponseClientStructuredAddressPostalCodeMax).regex(convertDraftToOrder200ResponseClientStructuredAddressPostalCodeRegExp).optional(),
  "fullAddress": zod.coerce.string().min(convertDraftToOrder200ResponseClientStructuredAddressFullAddressMin).max(convertDraftToOrder200ResponseClientStructuredAddressFullAddressMax).optional()
}).strict().optional(),
  "communicationChannels": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER'])).optional(),
  "source": zod.enum(['INSTAGRAM', 'GOOGLE', 'RECOMMENDATION', 'OTHER']).optional(),
  "sourceDetails": zod.coerce.string().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "updatedAt": zod.coerce.string().datetime({}).optional(),
  "category": zod.object({
  "code": zod.coerce.string().optional(),
  "displayName": zod.coerce.string().optional()
}).strict().optional(),
  "preferences": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "key": zod.coerce.string().min(convertDraftToOrder200ResponseClientPreferencesItemKeyMin).max(convertDraftToOrder200ResponseClientPreferencesItemKeyMax),
  "value": zod.coerce.string().min(convertDraftToOrder200ResponseClientPreferencesItemValueMin).max(convertDraftToOrder200ResponseClientPreferencesItemValueMax).optional()
}).strict()).optional(),
  "recentOrders": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "receiptNumber": zod.coerce.string().optional(),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']).optional(),
  "totalAmount": zod.coerce.number().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "completionDate": zod.coerce.string().datetime({}).optional(),
  "itemCount": zod.coerce.number().optional()
}).strict()).optional(),
  "orderCount": zod.coerce.number().optional()
}).strict(),
  "clientId": zod.coerce.string().uuid().optional(),
  "items": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "orderId": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(convertDraftToOrder200ResponseItemsItemNameMin).max(convertDraftToOrder200ResponseItemsItemNameMax),
  "description": zod.coerce.string().min(convertDraftToOrder200ResponseItemsItemDescriptionMin).max(convertDraftToOrder200ResponseItemsItemDescriptionMax).optional(),
  "quantity": zod.coerce.number().min(1),
  "unitPrice": zod.coerce.number(),
  "totalPrice": zod.coerce.number().optional(),
  "category": zod.coerce.string().optional(),
  "color": zod.coerce.string().optional(),
  "material": zod.coerce.string().optional(),
  "unitOfMeasure": zod.coerce.string().optional(),
  "defects": zod.coerce.string().optional(),
  "specialInstructions": zod.coerce.string().min(convertDraftToOrder200ResponseItemsItemSpecialInstructionsMin).max(convertDraftToOrder200ResponseItemsItemSpecialInstructionsMax).optional(),
  "fillerType": zod.coerce.string().optional(),
  "fillerCompressed": zod.coerce.boolean().optional(),
  "wearDegree": zod.coerce.string().optional(),
  "stains": zod.coerce.string().optional(),
  "otherStains": zod.coerce.string().optional(),
  "defectsAndRisks": zod.coerce.string().optional(),
  "noGuaranteeReason": zod.coerce.string().optional(),
  "defectsNotes": zod.coerce.string().min(convertDraftToOrder200ResponseItemsItemDefectsNotesMin).max(convertDraftToOrder200ResponseItemsItemDefectsNotesMax).optional()
}).strict()).optional(),
  "totalAmount": zod.coerce.number().optional(),
  "discountAmount": zod.coerce.number().optional(),
  "finalAmount": zod.coerce.number().optional(),
  "prepaymentAmount": zod.coerce.number().optional(),
  "balanceAmount": zod.coerce.number().optional(),
  "branchLocation": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(1),
  "address": zod.coerce.string().min(1),
  "phone": zod.coerce.string().regex(convertDraftToOrder200ResponseBranchLocationPhoneRegExp).optional(),
  "code": zod.coerce.string().min(1),
  "active": zod.coerce.boolean().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "updatedAt": zod.coerce.string().datetime({}).optional()
}).strict(),
  "branchLocationId": zod.coerce.string().uuid().optional(),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']),
  "createdDate": zod.coerce.string().datetime({}).optional(),
  "updatedDate": zod.coerce.string().datetime({}).optional(),
  "expectedCompletionDate": zod.coerce.string().datetime({}).optional(),
  "completedDate": zod.coerce.string().datetime({}).optional(),
  "customerNotes": zod.coerce.string().min(convertDraftToOrder200ResponseCustomerNotesMin).max(convertDraftToOrder200ResponseCustomerNotesMax).optional(),
  "internalNotes": zod.coerce.string().min(convertDraftToOrder200ResponseInternalNotesMin).max(convertDraftToOrder200ResponseInternalNotesMax).optional(),
  "expediteType": zod.enum(['STANDARD', 'EXPRESS_48H', 'EXPRESS_24H']).optional(),
  "completionComments": zod.coerce.string().optional(),
  "termsAccepted": zod.coerce.boolean().optional(),
  "finalizedAt": zod.coerce.string().datetime({}).optional(),
  "express": zod.coerce.boolean().optional(),
  "draft": zod.coerce.boolean().optional(),
  "printed": zod.coerce.boolean().optional(),
  "emailed": zod.coerce.boolean().optional()
}).strict()

export const convertDraftToOrder400Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const convertDraftToOrder401Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const convertDraftToOrder403Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const convertDraftToOrder404Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const convertDraftToOrder409Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * –í—ñ–¥–∑–Ω–∞—á–∞—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ
 * @summary –í—ñ–¥–∑–Ω–∞—á–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ
 */
export const completeOrderParams = zod.object({
  "id": zod.coerce.string().uuid().describe('ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
}).strict()

export const completeOrder200ResponseClientStructuredAddressCityMin = 2;

export const completeOrder200ResponseClientStructuredAddressCityMax = 100;

export const completeOrder200ResponseClientStructuredAddressCityRegExp = new RegExp('^[\\p{L}\\s.,\\-\']+$');
export const completeOrder200ResponseClientStructuredAddressStreetMin = 2;

export const completeOrder200ResponseClientStructuredAddressStreetMax = 150;

export const completeOrder200ResponseClientStructuredAddressStreetRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\']+$');
export const completeOrder200ResponseClientStructuredAddressBuildingMin = 0;

export const completeOrder200ResponseClientStructuredAddressBuildingMax = 20;

export const completeOrder200ResponseClientStructuredAddressBuildingRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const completeOrder200ResponseClientStructuredAddressApartmentMin = 0;

export const completeOrder200ResponseClientStructuredAddressApartmentMax = 20;

export const completeOrder200ResponseClientStructuredAddressApartmentRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const completeOrder200ResponseClientStructuredAddressPostalCodeMin = 0;

export const completeOrder200ResponseClientStructuredAddressPostalCodeMax = 10;

export const completeOrder200ResponseClientStructuredAddressPostalCodeRegExp = new RegExp('^[0-9\\-]+$');
export const completeOrder200ResponseClientStructuredAddressFullAddressMin = 5;

export const completeOrder200ResponseClientStructuredAddressFullAddressMax = 500;
export const completeOrder200ResponseClientPreferencesItemKeyMin = 0;

export const completeOrder200ResponseClientPreferencesItemKeyMax = 100;
export const completeOrder200ResponseClientPreferencesItemValueMin = 0;

export const completeOrder200ResponseClientPreferencesItemValueMax = 255;
export const completeOrder200ResponseItemsItemNameMin = 0;

export const completeOrder200ResponseItemsItemNameMax = 255;
export const completeOrder200ResponseItemsItemDescriptionMin = 0;

export const completeOrder200ResponseItemsItemDescriptionMax = 1000;
export const completeOrder200ResponseItemsItemSpecialInstructionsMin = 0;

export const completeOrder200ResponseItemsItemSpecialInstructionsMax = 500;
export const completeOrder200ResponseItemsItemDefectsNotesMin = 0;

export const completeOrder200ResponseItemsItemDefectsNotesMax = 1000;
export const completeOrder200ResponseBranchLocationPhoneRegExp = new RegExp('^\\+ ? [0-9\\s-()]{10,15}$');
export const completeOrder200ResponseCustomerNotesMin = 0;

export const completeOrder200ResponseCustomerNotesMax = 1000;
export const completeOrder200ResponseInternalNotesMin = 0;

export const completeOrder200ResponseInternalNotesMax = 1000;


export const completeOrder200Response = zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "receiptNumber": zod.coerce.string().min(1),
  "tagNumber": zod.coerce.string().optional(),
  "client": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "lastName": zod.coerce.string().optional(),
  "firstName": zod.coerce.string().optional(),
  "fullName": zod.coerce.string().optional(),
  "phone": zod.coerce.string().optional(),
  "email": zod.coerce.string().optional(),
  "address": zod.coerce.string().optional(),
  "structuredAddress": zod.object({
  "city": zod.coerce.string().min(completeOrder200ResponseClientStructuredAddressCityMin).max(completeOrder200ResponseClientStructuredAddressCityMax).regex(completeOrder200ResponseClientStructuredAddressCityRegExp).optional(),
  "street": zod.coerce.string().min(completeOrder200ResponseClientStructuredAddressStreetMin).max(completeOrder200ResponseClientStructuredAddressStreetMax).regex(completeOrder200ResponseClientStructuredAddressStreetRegExp).optional(),
  "building": zod.coerce.string().min(completeOrder200ResponseClientStructuredAddressBuildingMin).max(completeOrder200ResponseClientStructuredAddressBuildingMax).regex(completeOrder200ResponseClientStructuredAddressBuildingRegExp).optional(),
  "apartment": zod.coerce.string().min(completeOrder200ResponseClientStructuredAddressApartmentMin).max(completeOrder200ResponseClientStructuredAddressApartmentMax).regex(completeOrder200ResponseClientStructuredAddressApartmentRegExp).optional(),
  "postalCode": zod.coerce.string().min(completeOrder200ResponseClientStructuredAddressPostalCodeMin).max(completeOrder200ResponseClientStructuredAddressPostalCodeMax).regex(completeOrder200ResponseClientStructuredAddressPostalCodeRegExp).optional(),
  "fullAddress": zod.coerce.string().min(completeOrder200ResponseClientStructuredAddressFullAddressMin).max(completeOrder200ResponseClientStructuredAddressFullAddressMax).optional()
}).strict().optional(),
  "communicationChannels": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER'])).optional(),
  "source": zod.enum(['INSTAGRAM', 'GOOGLE', 'RECOMMENDATION', 'OTHER']).optional(),
  "sourceDetails": zod.coerce.string().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "updatedAt": zod.coerce.string().datetime({}).optional(),
  "category": zod.object({
  "code": zod.coerce.string().optional(),
  "displayName": zod.coerce.string().optional()
}).strict().optional(),
  "preferences": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "key": zod.coerce.string().min(completeOrder200ResponseClientPreferencesItemKeyMin).max(completeOrder200ResponseClientPreferencesItemKeyMax),
  "value": zod.coerce.string().min(completeOrder200ResponseClientPreferencesItemValueMin).max(completeOrder200ResponseClientPreferencesItemValueMax).optional()
}).strict()).optional(),
  "recentOrders": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "receiptNumber": zod.coerce.string().optional(),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']).optional(),
  "totalAmount": zod.coerce.number().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "completionDate": zod.coerce.string().datetime({}).optional(),
  "itemCount": zod.coerce.number().optional()
}).strict()).optional(),
  "orderCount": zod.coerce.number().optional()
}).strict(),
  "clientId": zod.coerce.string().uuid().optional(),
  "items": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "orderId": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(completeOrder200ResponseItemsItemNameMin).max(completeOrder200ResponseItemsItemNameMax),
  "description": zod.coerce.string().min(completeOrder200ResponseItemsItemDescriptionMin).max(completeOrder200ResponseItemsItemDescriptionMax).optional(),
  "quantity": zod.coerce.number().min(1),
  "unitPrice": zod.coerce.number(),
  "totalPrice": zod.coerce.number().optional(),
  "category": zod.coerce.string().optional(),
  "color": zod.coerce.string().optional(),
  "material": zod.coerce.string().optional(),
  "unitOfMeasure": zod.coerce.string().optional(),
  "defects": zod.coerce.string().optional(),
  "specialInstructions": zod.coerce.string().min(completeOrder200ResponseItemsItemSpecialInstructionsMin).max(completeOrder200ResponseItemsItemSpecialInstructionsMax).optional(),
  "fillerType": zod.coerce.string().optional(),
  "fillerCompressed": zod.coerce.boolean().optional(),
  "wearDegree": zod.coerce.string().optional(),
  "stains": zod.coerce.string().optional(),
  "otherStains": zod.coerce.string().optional(),
  "defectsAndRisks": zod.coerce.string().optional(),
  "noGuaranteeReason": zod.coerce.string().optional(),
  "defectsNotes": zod.coerce.string().min(completeOrder200ResponseItemsItemDefectsNotesMin).max(completeOrder200ResponseItemsItemDefectsNotesMax).optional()
}).strict()).optional(),
  "totalAmount": zod.coerce.number().optional(),
  "discountAmount": zod.coerce.number().optional(),
  "finalAmount": zod.coerce.number().optional(),
  "prepaymentAmount": zod.coerce.number().optional(),
  "balanceAmount": zod.coerce.number().optional(),
  "branchLocation": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(1),
  "address": zod.coerce.string().min(1),
  "phone": zod.coerce.string().regex(completeOrder200ResponseBranchLocationPhoneRegExp).optional(),
  "code": zod.coerce.string().min(1),
  "active": zod.coerce.boolean().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "updatedAt": zod.coerce.string().datetime({}).optional()
}).strict(),
  "branchLocationId": zod.coerce.string().uuid().optional(),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']),
  "createdDate": zod.coerce.string().datetime({}).optional(),
  "updatedDate": zod.coerce.string().datetime({}).optional(),
  "expectedCompletionDate": zod.coerce.string().datetime({}).optional(),
  "completedDate": zod.coerce.string().datetime({}).optional(),
  "customerNotes": zod.coerce.string().min(completeOrder200ResponseCustomerNotesMin).max(completeOrder200ResponseCustomerNotesMax).optional(),
  "internalNotes": zod.coerce.string().min(completeOrder200ResponseInternalNotesMin).max(completeOrder200ResponseInternalNotesMax).optional(),
  "expediteType": zod.enum(['STANDARD', 'EXPRESS_48H', 'EXPRESS_24H']).optional(),
  "completionComments": zod.coerce.string().optional(),
  "termsAccepted": zod.coerce.boolean().optional(),
  "finalizedAt": zod.coerce.string().datetime({}).optional(),
  "express": zod.coerce.boolean().optional(),
  "draft": zod.coerce.boolean().optional(),
  "printed": zod.coerce.boolean().optional(),
  "emailed": zod.coerce.boolean().optional()
}).strict()

export const completeOrder400Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const completeOrder401Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const completeOrder403Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const completeOrder404Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const completeOrder409Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const getAllOrders200ResponseClientStructuredAddressCityMin = 2;

export const getAllOrders200ResponseClientStructuredAddressCityMax = 100;

export const getAllOrders200ResponseClientStructuredAddressCityRegExp = new RegExp('^[\\p{L}\\s.,\\-\']+$');
export const getAllOrders200ResponseClientStructuredAddressStreetMin = 2;

export const getAllOrders200ResponseClientStructuredAddressStreetMax = 150;

export const getAllOrders200ResponseClientStructuredAddressStreetRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\']+$');
export const getAllOrders200ResponseClientStructuredAddressBuildingMin = 0;

export const getAllOrders200ResponseClientStructuredAddressBuildingMax = 20;

export const getAllOrders200ResponseClientStructuredAddressBuildingRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const getAllOrders200ResponseClientStructuredAddressApartmentMin = 0;

export const getAllOrders200ResponseClientStructuredAddressApartmentMax = 20;

export const getAllOrders200ResponseClientStructuredAddressApartmentRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const getAllOrders200ResponseClientStructuredAddressPostalCodeMin = 0;

export const getAllOrders200ResponseClientStructuredAddressPostalCodeMax = 10;

export const getAllOrders200ResponseClientStructuredAddressPostalCodeRegExp = new RegExp('^[0-9\\-]+$');
export const getAllOrders200ResponseClientStructuredAddressFullAddressMin = 5;

export const getAllOrders200ResponseClientStructuredAddressFullAddressMax = 500;
export const getAllOrders200ResponseClientPreferencesItemKeyMin = 0;

export const getAllOrders200ResponseClientPreferencesItemKeyMax = 100;
export const getAllOrders200ResponseClientPreferencesItemValueMin = 0;

export const getAllOrders200ResponseClientPreferencesItemValueMax = 255;
export const getAllOrders200ResponseItemsItemNameMin = 0;

export const getAllOrders200ResponseItemsItemNameMax = 255;
export const getAllOrders200ResponseItemsItemDescriptionMin = 0;

export const getAllOrders200ResponseItemsItemDescriptionMax = 1000;
export const getAllOrders200ResponseItemsItemSpecialInstructionsMin = 0;

export const getAllOrders200ResponseItemsItemSpecialInstructionsMax = 500;
export const getAllOrders200ResponseItemsItemDefectsNotesMin = 0;

export const getAllOrders200ResponseItemsItemDefectsNotesMax = 1000;
export const getAllOrders200ResponseBranchLocationPhoneRegExp = new RegExp('^\\+ ? [0-9\\s-()]{10,15}$');
export const getAllOrders200ResponseCustomerNotesMin = 0;

export const getAllOrders200ResponseCustomerNotesMax = 1000;
export const getAllOrders200ResponseInternalNotesMin = 0;

export const getAllOrders200ResponseInternalNotesMax = 1000;


export const getAllOrders200ResponseItem = zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "receiptNumber": zod.coerce.string().min(1),
  "tagNumber": zod.coerce.string().optional(),
  "client": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "lastName": zod.coerce.string().optional(),
  "firstName": zod.coerce.string().optional(),
  "fullName": zod.coerce.string().optional(),
  "phone": zod.coerce.string().optional(),
  "email": zod.coerce.string().optional(),
  "address": zod.coerce.string().optional(),
  "structuredAddress": zod.object({
  "city": zod.coerce.string().min(getAllOrders200ResponseClientStructuredAddressCityMin).max(getAllOrders200ResponseClientStructuredAddressCityMax).regex(getAllOrders200ResponseClientStructuredAddressCityRegExp).optional(),
  "street": zod.coerce.string().min(getAllOrders200ResponseClientStructuredAddressStreetMin).max(getAllOrders200ResponseClientStructuredAddressStreetMax).regex(getAllOrders200ResponseClientStructuredAddressStreetRegExp).optional(),
  "building": zod.coerce.string().min(getAllOrders200ResponseClientStructuredAddressBuildingMin).max(getAllOrders200ResponseClientStructuredAddressBuildingMax).regex(getAllOrders200ResponseClientStructuredAddressBuildingRegExp).optional(),
  "apartment": zod.coerce.string().min(getAllOrders200ResponseClientStructuredAddressApartmentMin).max(getAllOrders200ResponseClientStructuredAddressApartmentMax).regex(getAllOrders200ResponseClientStructuredAddressApartmentRegExp).optional(),
  "postalCode": zod.coerce.string().min(getAllOrders200ResponseClientStructuredAddressPostalCodeMin).max(getAllOrders200ResponseClientStructuredAddressPostalCodeMax).regex(getAllOrders200ResponseClientStructuredAddressPostalCodeRegExp).optional(),
  "fullAddress": zod.coerce.string().min(getAllOrders200ResponseClientStructuredAddressFullAddressMin).max(getAllOrders200ResponseClientStructuredAddressFullAddressMax).optional()
}).strict().optional(),
  "communicationChannels": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER'])).optional(),
  "source": zod.enum(['INSTAGRAM', 'GOOGLE', 'RECOMMENDATION', 'OTHER']).optional(),
  "sourceDetails": zod.coerce.string().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "updatedAt": zod.coerce.string().datetime({}).optional(),
  "category": zod.object({
  "code": zod.coerce.string().optional(),
  "displayName": zod.coerce.string().optional()
}).strict().optional(),
  "preferences": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "key": zod.coerce.string().min(getAllOrders200ResponseClientPreferencesItemKeyMin).max(getAllOrders200ResponseClientPreferencesItemKeyMax),
  "value": zod.coerce.string().min(getAllOrders200ResponseClientPreferencesItemValueMin).max(getAllOrders200ResponseClientPreferencesItemValueMax).optional()
}).strict()).optional(),
  "recentOrders": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "receiptNumber": zod.coerce.string().optional(),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']).optional(),
  "totalAmount": zod.coerce.number().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "completionDate": zod.coerce.string().datetime({}).optional(),
  "itemCount": zod.coerce.number().optional()
}).strict()).optional(),
  "orderCount": zod.coerce.number().optional()
}).strict(),
  "clientId": zod.coerce.string().uuid().optional(),
  "items": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "orderId": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(getAllOrders200ResponseItemsItemNameMin).max(getAllOrders200ResponseItemsItemNameMax),
  "description": zod.coerce.string().min(getAllOrders200ResponseItemsItemDescriptionMin).max(getAllOrders200ResponseItemsItemDescriptionMax).optional(),
  "quantity": zod.coerce.number().min(1),
  "unitPrice": zod.coerce.number(),
  "totalPrice": zod.coerce.number().optional(),
  "category": zod.coerce.string().optional(),
  "color": zod.coerce.string().optional(),
  "material": zod.coerce.string().optional(),
  "unitOfMeasure": zod.coerce.string().optional(),
  "defects": zod.coerce.string().optional(),
  "specialInstructions": zod.coerce.string().min(getAllOrders200ResponseItemsItemSpecialInstructionsMin).max(getAllOrders200ResponseItemsItemSpecialInstructionsMax).optional(),
  "fillerType": zod.coerce.string().optional(),
  "fillerCompressed": zod.coerce.boolean().optional(),
  "wearDegree": zod.coerce.string().optional(),
  "stains": zod.coerce.string().optional(),
  "otherStains": zod.coerce.string().optional(),
  "defectsAndRisks": zod.coerce.string().optional(),
  "noGuaranteeReason": zod.coerce.string().optional(),
  "defectsNotes": zod.coerce.string().min(getAllOrders200ResponseItemsItemDefectsNotesMin).max(getAllOrders200ResponseItemsItemDefectsNotesMax).optional()
}).strict()).optional(),
  "totalAmount": zod.coerce.number().optional(),
  "discountAmount": zod.coerce.number().optional(),
  "finalAmount": zod.coerce.number().optional(),
  "prepaymentAmount": zod.coerce.number().optional(),
  "balanceAmount": zod.coerce.number().optional(),
  "branchLocation": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(1),
  "address": zod.coerce.string().min(1),
  "phone": zod.coerce.string().regex(getAllOrders200ResponseBranchLocationPhoneRegExp).optional(),
  "code": zod.coerce.string().min(1),
  "active": zod.coerce.boolean().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "updatedAt": zod.coerce.string().datetime({}).optional()
}).strict(),
  "branchLocationId": zod.coerce.string().uuid().optional(),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']),
  "createdDate": zod.coerce.string().datetime({}).optional(),
  "updatedDate": zod.coerce.string().datetime({}).optional(),
  "expectedCompletionDate": zod.coerce.string().datetime({}).optional(),
  "completedDate": zod.coerce.string().datetime({}).optional(),
  "customerNotes": zod.coerce.string().min(getAllOrders200ResponseCustomerNotesMin).max(getAllOrders200ResponseCustomerNotesMax).optional(),
  "internalNotes": zod.coerce.string().min(getAllOrders200ResponseInternalNotesMin).max(getAllOrders200ResponseInternalNotesMax).optional(),
  "expediteType": zod.enum(['STANDARD', 'EXPRESS_48H', 'EXPRESS_24H']).optional(),
  "completionComments": zod.coerce.string().optional(),
  "termsAccepted": zod.coerce.boolean().optional(),
  "finalizedAt": zod.coerce.string().datetime({}).optional(),
  "express": zod.coerce.boolean().optional(),
  "draft": zod.coerce.boolean().optional(),
  "printed": zod.coerce.boolean().optional(),
  "emailed": zod.coerce.boolean().optional()
}).strict()
export const getAllOrders200Response = zod.array(getAllOrders200ResponseItem)

export const getAllOrders400Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getAllOrders401Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getAllOrders403Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getAllOrders404Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getAllOrders409Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * @summary –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const createOrderBodyItemsItemNameMin = 0;

export const createOrderBodyItemsItemNameMax = 255;
export const createOrderBodyItemsItemDescriptionMin = 0;

export const createOrderBodyItemsItemDescriptionMax = 1000;
export const createOrderBodyItemsItemSpecialInstructionsMin = 0;

export const createOrderBodyItemsItemSpecialInstructionsMax = 500;
export const createOrderBodyItemsItemDefectsNotesMin = 0;

export const createOrderBodyItemsItemDefectsNotesMax = 1000;
export const createOrderBodyCustomerNotesMin = 0;

export const createOrderBodyCustomerNotesMax = 1000;
export const createOrderBodyInternalNotesMin = 0;

export const createOrderBodyInternalNotesMax = 1000;


export const createOrderBody = zod.object({
  "tagNumber": zod.coerce.string().optional(),
  "clientId": zod.coerce.string().uuid(),
  "items": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "orderId": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(createOrderBodyItemsItemNameMin).max(createOrderBodyItemsItemNameMax),
  "description": zod.coerce.string().min(createOrderBodyItemsItemDescriptionMin).max(createOrderBodyItemsItemDescriptionMax).optional(),
  "quantity": zod.coerce.number().min(1),
  "unitPrice": zod.coerce.number(),
  "totalPrice": zod.coerce.number().optional(),
  "category": zod.coerce.string().optional(),
  "color": zod.coerce.string().optional(),
  "material": zod.coerce.string().optional(),
  "unitOfMeasure": zod.coerce.string().optional(),
  "defects": zod.coerce.string().optional(),
  "specialInstructions": zod.coerce.string().min(createOrderBodyItemsItemSpecialInstructionsMin).max(createOrderBodyItemsItemSpecialInstructionsMax).optional(),
  "fillerType": zod.coerce.string().optional(),
  "fillerCompressed": zod.coerce.boolean().optional(),
  "wearDegree": zod.coerce.string().optional(),
  "stains": zod.coerce.string().optional(),
  "otherStains": zod.coerce.string().optional(),
  "defectsAndRisks": zod.coerce.string().optional(),
  "noGuaranteeReason": zod.coerce.string().optional(),
  "defectsNotes": zod.coerce.string().min(createOrderBodyItemsItemDefectsNotesMin).max(createOrderBodyItemsItemDefectsNotesMax).optional()
}).strict()).optional(),
  "discountAmount": zod.coerce.number().optional(),
  "prepaymentAmount": zod.coerce.number().optional(),
  "branchLocationId": zod.coerce.string().uuid(),
  "expectedCompletionDate": zod.coerce.string().datetime({}).optional(),
  "customerNotes": zod.coerce.string().min(createOrderBodyCustomerNotesMin).max(createOrderBodyCustomerNotesMax).optional(),
  "internalNotes": zod.coerce.string().min(createOrderBodyInternalNotesMin).max(createOrderBodyInternalNotesMax).optional(),
  "expediteType": zod.enum(['STANDARD', 'EXPRESS_48H', 'EXPRESS_24H']).optional(),
  "draft": zod.coerce.boolean().optional()
}).strict().describe('–î–∞–Ω—ñ –¥–ª—è —á–µ—Ä–Ω–µ—Ç–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')

export const createOrder201ResponseClientStructuredAddressCityMin = 2;

export const createOrder201ResponseClientStructuredAddressCityMax = 100;

export const createOrder201ResponseClientStructuredAddressCityRegExp = new RegExp('^[\\p{L}\\s.,\\-\']+$');
export const createOrder201ResponseClientStructuredAddressStreetMin = 2;

export const createOrder201ResponseClientStructuredAddressStreetMax = 150;

export const createOrder201ResponseClientStructuredAddressStreetRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\']+$');
export const createOrder201ResponseClientStructuredAddressBuildingMin = 0;

export const createOrder201ResponseClientStructuredAddressBuildingMax = 20;

export const createOrder201ResponseClientStructuredAddressBuildingRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const createOrder201ResponseClientStructuredAddressApartmentMin = 0;

export const createOrder201ResponseClientStructuredAddressApartmentMax = 20;

export const createOrder201ResponseClientStructuredAddressApartmentRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const createOrder201ResponseClientStructuredAddressPostalCodeMin = 0;

export const createOrder201ResponseClientStructuredAddressPostalCodeMax = 10;

export const createOrder201ResponseClientStructuredAddressPostalCodeRegExp = new RegExp('^[0-9\\-]+$');
export const createOrder201ResponseClientStructuredAddressFullAddressMin = 5;

export const createOrder201ResponseClientStructuredAddressFullAddressMax = 500;
export const createOrder201ResponseClientPreferencesItemKeyMin = 0;

export const createOrder201ResponseClientPreferencesItemKeyMax = 100;
export const createOrder201ResponseClientPreferencesItemValueMin = 0;

export const createOrder201ResponseClientPreferencesItemValueMax = 255;
export const createOrder201ResponseItemsItemNameMin = 0;

export const createOrder201ResponseItemsItemNameMax = 255;
export const createOrder201ResponseItemsItemDescriptionMin = 0;

export const createOrder201ResponseItemsItemDescriptionMax = 1000;
export const createOrder201ResponseItemsItemSpecialInstructionsMin = 0;

export const createOrder201ResponseItemsItemSpecialInstructionsMax = 500;
export const createOrder201ResponseItemsItemDefectsNotesMin = 0;

export const createOrder201ResponseItemsItemDefectsNotesMax = 1000;
export const createOrder201ResponseBranchLocationPhoneRegExp = new RegExp('^\\+ ? [0-9\\s-()]{10,15}$');
export const createOrder201ResponseCustomerNotesMin = 0;

export const createOrder201ResponseCustomerNotesMax = 1000;
export const createOrder201ResponseInternalNotesMin = 0;

export const createOrder201ResponseInternalNotesMax = 1000;


export const createOrder201Response = zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "receiptNumber": zod.coerce.string().min(1),
  "tagNumber": zod.coerce.string().optional(),
  "client": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "lastName": zod.coerce.string().optional(),
  "firstName": zod.coerce.string().optional(),
  "fullName": zod.coerce.string().optional(),
  "phone": zod.coerce.string().optional(),
  "email": zod.coerce.string().optional(),
  "address": zod.coerce.string().optional(),
  "structuredAddress": zod.object({
  "city": zod.coerce.string().min(createOrder201ResponseClientStructuredAddressCityMin).max(createOrder201ResponseClientStructuredAddressCityMax).regex(createOrder201ResponseClientStructuredAddressCityRegExp).optional(),
  "street": zod.coerce.string().min(createOrder201ResponseClientStructuredAddressStreetMin).max(createOrder201ResponseClientStructuredAddressStreetMax).regex(createOrder201ResponseClientStructuredAddressStreetRegExp).optional(),
  "building": zod.coerce.string().min(createOrder201ResponseClientStructuredAddressBuildingMin).max(createOrder201ResponseClientStructuredAddressBuildingMax).regex(createOrder201ResponseClientStructuredAddressBuildingRegExp).optional(),
  "apartment": zod.coerce.string().min(createOrder201ResponseClientStructuredAddressApartmentMin).max(createOrder201ResponseClientStructuredAddressApartmentMax).regex(createOrder201ResponseClientStructuredAddressApartmentRegExp).optional(),
  "postalCode": zod.coerce.string().min(createOrder201ResponseClientStructuredAddressPostalCodeMin).max(createOrder201ResponseClientStructuredAddressPostalCodeMax).regex(createOrder201ResponseClientStructuredAddressPostalCodeRegExp).optional(),
  "fullAddress": zod.coerce.string().min(createOrder201ResponseClientStructuredAddressFullAddressMin).max(createOrder201ResponseClientStructuredAddressFullAddressMax).optional()
}).strict().optional(),
  "communicationChannels": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER'])).optional(),
  "source": zod.enum(['INSTAGRAM', 'GOOGLE', 'RECOMMENDATION', 'OTHER']).optional(),
  "sourceDetails": zod.coerce.string().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "updatedAt": zod.coerce.string().datetime({}).optional(),
  "category": zod.object({
  "code": zod.coerce.string().optional(),
  "displayName": zod.coerce.string().optional()
}).strict().optional(),
  "preferences": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "key": zod.coerce.string().min(createOrder201ResponseClientPreferencesItemKeyMin).max(createOrder201ResponseClientPreferencesItemKeyMax),
  "value": zod.coerce.string().min(createOrder201ResponseClientPreferencesItemValueMin).max(createOrder201ResponseClientPreferencesItemValueMax).optional()
}).strict()).optional(),
  "recentOrders": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "receiptNumber": zod.coerce.string().optional(),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']).optional(),
  "totalAmount": zod.coerce.number().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "completionDate": zod.coerce.string().datetime({}).optional(),
  "itemCount": zod.coerce.number().optional()
}).strict()).optional(),
  "orderCount": zod.coerce.number().optional()
}).strict(),
  "clientId": zod.coerce.string().uuid().optional(),
  "items": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "orderId": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(createOrder201ResponseItemsItemNameMin).max(createOrder201ResponseItemsItemNameMax),
  "description": zod.coerce.string().min(createOrder201ResponseItemsItemDescriptionMin).max(createOrder201ResponseItemsItemDescriptionMax).optional(),
  "quantity": zod.coerce.number().min(1),
  "unitPrice": zod.coerce.number(),
  "totalPrice": zod.coerce.number().optional(),
  "category": zod.coerce.string().optional(),
  "color": zod.coerce.string().optional(),
  "material": zod.coerce.string().optional(),
  "unitOfMeasure": zod.coerce.string().optional(),
  "defects": zod.coerce.string().optional(),
  "specialInstructions": zod.coerce.string().min(createOrder201ResponseItemsItemSpecialInstructionsMin).max(createOrder201ResponseItemsItemSpecialInstructionsMax).optional(),
  "fillerType": zod.coerce.string().optional(),
  "fillerCompressed": zod.coerce.boolean().optional(),
  "wearDegree": zod.coerce.string().optional(),
  "stains": zod.coerce.string().optional(),
  "otherStains": zod.coerce.string().optional(),
  "defectsAndRisks": zod.coerce.string().optional(),
  "noGuaranteeReason": zod.coerce.string().optional(),
  "defectsNotes": zod.coerce.string().min(createOrder201ResponseItemsItemDefectsNotesMin).max(createOrder201ResponseItemsItemDefectsNotesMax).optional()
}).strict()).optional(),
  "totalAmount": zod.coerce.number().optional(),
  "discountAmount": zod.coerce.number().optional(),
  "finalAmount": zod.coerce.number().optional(),
  "prepaymentAmount": zod.coerce.number().optional(),
  "balanceAmount": zod.coerce.number().optional(),
  "branchLocation": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(1),
  "address": zod.coerce.string().min(1),
  "phone": zod.coerce.string().regex(createOrder201ResponseBranchLocationPhoneRegExp).optional(),
  "code": zod.coerce.string().min(1),
  "active": zod.coerce.boolean().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "updatedAt": zod.coerce.string().datetime({}).optional()
}).strict(),
  "branchLocationId": zod.coerce.string().uuid().optional(),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']),
  "createdDate": zod.coerce.string().datetime({}).optional(),
  "updatedDate": zod.coerce.string().datetime({}).optional(),
  "expectedCompletionDate": zod.coerce.string().datetime({}).optional(),
  "completedDate": zod.coerce.string().datetime({}).optional(),
  "customerNotes": zod.coerce.string().min(createOrder201ResponseCustomerNotesMin).max(createOrder201ResponseCustomerNotesMax).optional(),
  "internalNotes": zod.coerce.string().min(createOrder201ResponseInternalNotesMin).max(createOrder201ResponseInternalNotesMax).optional(),
  "expediteType": zod.enum(['STANDARD', 'EXPRESS_48H', 'EXPRESS_24H']).optional(),
  "completionComments": zod.coerce.string().optional(),
  "termsAccepted": zod.coerce.boolean().optional(),
  "finalizedAt": zod.coerce.string().datetime({}).optional(),
  "express": zod.coerce.boolean().optional(),
  "draft": zod.coerce.boolean().optional(),
  "printed": zod.coerce.boolean().optional(),
  "emailed": zod.coerce.boolean().optional()
}).strict()

export const createOrder400Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const createOrder401Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const createOrder403Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const createOrder404Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const createOrder409Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø—Ä–µ–¥–º–µ—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const getOrderItemsParams = zod.object({
  "orderId": zod.coerce.string().uuid().describe('ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
}).strict()

export const getOrderItems200ResponseNameMin = 0;

export const getOrderItems200ResponseNameMax = 255;
export const getOrderItems200ResponseDescriptionMin = 0;

export const getOrderItems200ResponseDescriptionMax = 1000;
export const getOrderItems200ResponseSpecialInstructionsMin = 0;

export const getOrderItems200ResponseSpecialInstructionsMax = 500;
export const getOrderItems200ResponseDefectsNotesMin = 0;

export const getOrderItems200ResponseDefectsNotesMax = 1000;


export const getOrderItems200ResponseItem = zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "orderId": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(getOrderItems200ResponseNameMin).max(getOrderItems200ResponseNameMax),
  "description": zod.coerce.string().min(getOrderItems200ResponseDescriptionMin).max(getOrderItems200ResponseDescriptionMax).optional(),
  "quantity": zod.coerce.number().min(1),
  "unitPrice": zod.coerce.number(),
  "totalPrice": zod.coerce.number().optional(),
  "category": zod.coerce.string().optional(),
  "color": zod.coerce.string().optional(),
  "material": zod.coerce.string().optional(),
  "unitOfMeasure": zod.coerce.string().optional(),
  "defects": zod.coerce.string().optional(),
  "specialInstructions": zod.coerce.string().min(getOrderItems200ResponseSpecialInstructionsMin).max(getOrderItems200ResponseSpecialInstructionsMax).optional(),
  "fillerType": zod.coerce.string().optional(),
  "fillerCompressed": zod.coerce.boolean().optional(),
  "wearDegree": zod.coerce.string().optional(),
  "stains": zod.coerce.string().optional(),
  "otherStains": zod.coerce.string().optional(),
  "defectsAndRisks": zod.coerce.string().optional(),
  "noGuaranteeReason": zod.coerce.string().optional(),
  "defectsNotes": zod.coerce.string().min(getOrderItems200ResponseDefectsNotesMin).max(getOrderItems200ResponseDefectsNotesMax).optional()
}).strict()
export const getOrderItems200Response = zod.array(getOrderItems200ResponseItem)

export const getOrderItems400Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getOrderItems401Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getOrderItems403Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getOrderItems404Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getOrderItems409Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * –î–æ–¥–∞—î –Ω–æ–≤–∏–π –ø—Ä–µ–¥–º–µ—Ç –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * @summary –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–µ–¥–º–µ—Ç –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const addOrderItemParams = zod.object({
  "orderId": zod.coerce.string().uuid().describe('ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
}).strict()

export const addOrderItemBodyNameMin = 0;

export const addOrderItemBodyNameMax = 255;
export const addOrderItemBodyDescriptionMin = 0;

export const addOrderItemBodyDescriptionMax = 1000;
export const addOrderItemBodySpecialInstructionsMin = 0;

export const addOrderItemBodySpecialInstructionsMax = 500;
export const addOrderItemBodyDefectsNotesMin = 0;

export const addOrderItemBodyDefectsNotesMax = 1000;


export const addOrderItemBody = zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "orderId": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(addOrderItemBodyNameMin).max(addOrderItemBodyNameMax),
  "description": zod.coerce.string().min(addOrderItemBodyDescriptionMin).max(addOrderItemBodyDescriptionMax).optional(),
  "quantity": zod.coerce.number().min(1),
  "unitPrice": zod.coerce.number(),
  "totalPrice": zod.coerce.number().optional(),
  "category": zod.coerce.string().optional(),
  "color": zod.coerce.string().optional(),
  "material": zod.coerce.string().optional(),
  "unitOfMeasure": zod.coerce.string().optional(),
  "defects": zod.coerce.string().optional(),
  "specialInstructions": zod.coerce.string().min(addOrderItemBodySpecialInstructionsMin).max(addOrderItemBodySpecialInstructionsMax).optional(),
  "fillerType": zod.coerce.string().optional(),
  "fillerCompressed": zod.coerce.boolean().optional(),
  "wearDegree": zod.coerce.string().optional(),
  "stains": zod.coerce.string().optional(),
  "otherStains": zod.coerce.string().optional(),
  "defectsAndRisks": zod.coerce.string().optional(),
  "noGuaranteeReason": zod.coerce.string().optional(),
  "defectsNotes": zod.coerce.string().min(addOrderItemBodyDefectsNotesMin).max(addOrderItemBodyDefectsNotesMax).optional()
}).strict()

export const addOrderItem201ResponseNameMin = 0;

export const addOrderItem201ResponseNameMax = 255;
export const addOrderItem201ResponseDescriptionMin = 0;

export const addOrderItem201ResponseDescriptionMax = 1000;
export const addOrderItem201ResponseSpecialInstructionsMin = 0;

export const addOrderItem201ResponseSpecialInstructionsMax = 500;
export const addOrderItem201ResponseDefectsNotesMin = 0;

export const addOrderItem201ResponseDefectsNotesMax = 1000;


export const addOrderItem201Response = zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "orderId": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(addOrderItem201ResponseNameMin).max(addOrderItem201ResponseNameMax),
  "description": zod.coerce.string().min(addOrderItem201ResponseDescriptionMin).max(addOrderItem201ResponseDescriptionMax).optional(),
  "quantity": zod.coerce.number().min(1),
  "unitPrice": zod.coerce.number(),
  "totalPrice": zod.coerce.number().optional(),
  "category": zod.coerce.string().optional(),
  "color": zod.coerce.string().optional(),
  "material": zod.coerce.string().optional(),
  "unitOfMeasure": zod.coerce.string().optional(),
  "defects": zod.coerce.string().optional(),
  "specialInstructions": zod.coerce.string().min(addOrderItem201ResponseSpecialInstructionsMin).max(addOrderItem201ResponseSpecialInstructionsMax).optional(),
  "fillerType": zod.coerce.string().optional(),
  "fillerCompressed": zod.coerce.boolean().optional(),
  "wearDegree": zod.coerce.string().optional(),
  "stains": zod.coerce.string().optional(),
  "otherStains": zod.coerce.string().optional(),
  "defectsAndRisks": zod.coerce.string().optional(),
  "noGuaranteeReason": zod.coerce.string().optional(),
  "defectsNotes": zod.coerce.string().min(addOrderItem201ResponseDefectsNotesMin).max(addOrderItem201ResponseDefectsNotesMax).optional()
}).strict()

export const addOrderItem400Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const addOrderItem401Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const addOrderItem403Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const addOrderItem404Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const addOrderItem409Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * –ó–±–µ—Ä—ñ–≥–∞—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —è–∫ —á–µ—Ä–Ω–µ—Ç–∫—É
 * @summary –ó–±–µ—Ä–µ–≥—Ç–∏ —á–µ—Ä–Ω–µ—Ç–∫—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const saveOrderDraftBodyItemsItemNameMin = 0;

export const saveOrderDraftBodyItemsItemNameMax = 255;
export const saveOrderDraftBodyItemsItemDescriptionMin = 0;

export const saveOrderDraftBodyItemsItemDescriptionMax = 1000;
export const saveOrderDraftBodyItemsItemSpecialInstructionsMin = 0;

export const saveOrderDraftBodyItemsItemSpecialInstructionsMax = 500;
export const saveOrderDraftBodyItemsItemDefectsNotesMin = 0;

export const saveOrderDraftBodyItemsItemDefectsNotesMax = 1000;
export const saveOrderDraftBodyCustomerNotesMin = 0;

export const saveOrderDraftBodyCustomerNotesMax = 1000;
export const saveOrderDraftBodyInternalNotesMin = 0;

export const saveOrderDraftBodyInternalNotesMax = 1000;


export const saveOrderDraftBody = zod.object({
  "tagNumber": zod.coerce.string().optional(),
  "clientId": zod.coerce.string().uuid(),
  "items": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "orderId": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(saveOrderDraftBodyItemsItemNameMin).max(saveOrderDraftBodyItemsItemNameMax),
  "description": zod.coerce.string().min(saveOrderDraftBodyItemsItemDescriptionMin).max(saveOrderDraftBodyItemsItemDescriptionMax).optional(),
  "quantity": zod.coerce.number().min(1),
  "unitPrice": zod.coerce.number(),
  "totalPrice": zod.coerce.number().optional(),
  "category": zod.coerce.string().optional(),
  "color": zod.coerce.string().optional(),
  "material": zod.coerce.string().optional(),
  "unitOfMeasure": zod.coerce.string().optional(),
  "defects": zod.coerce.string().optional(),
  "specialInstructions": zod.coerce.string().min(saveOrderDraftBodyItemsItemSpecialInstructionsMin).max(saveOrderDraftBodyItemsItemSpecialInstructionsMax).optional(),
  "fillerType": zod.coerce.string().optional(),
  "fillerCompressed": zod.coerce.boolean().optional(),
  "wearDegree": zod.coerce.string().optional(),
  "stains": zod.coerce.string().optional(),
  "otherStains": zod.coerce.string().optional(),
  "defectsAndRisks": zod.coerce.string().optional(),
  "noGuaranteeReason": zod.coerce.string().optional(),
  "defectsNotes": zod.coerce.string().min(saveOrderDraftBodyItemsItemDefectsNotesMin).max(saveOrderDraftBodyItemsItemDefectsNotesMax).optional()
}).strict()).optional(),
  "discountAmount": zod.coerce.number().optional(),
  "prepaymentAmount": zod.coerce.number().optional(),
  "branchLocationId": zod.coerce.string().uuid(),
  "expectedCompletionDate": zod.coerce.string().datetime({}).optional(),
  "customerNotes": zod.coerce.string().min(saveOrderDraftBodyCustomerNotesMin).max(saveOrderDraftBodyCustomerNotesMax).optional(),
  "internalNotes": zod.coerce.string().min(saveOrderDraftBodyInternalNotesMin).max(saveOrderDraftBodyInternalNotesMax).optional(),
  "expediteType": zod.enum(['STANDARD', 'EXPRESS_48H', 'EXPRESS_24H']).optional(),
  "draft": zod.coerce.boolean().optional()
}).strict().describe('–î–∞–Ω—ñ –¥–ª—è —á–µ—Ä–Ω–µ—Ç–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')

export const saveOrderDraft201ResponseClientStructuredAddressCityMin = 2;

export const saveOrderDraft201ResponseClientStructuredAddressCityMax = 100;

export const saveOrderDraft201ResponseClientStructuredAddressCityRegExp = new RegExp('^[\\p{L}\\s.,\\-\']+$');
export const saveOrderDraft201ResponseClientStructuredAddressStreetMin = 2;

export const saveOrderDraft201ResponseClientStructuredAddressStreetMax = 150;

export const saveOrderDraft201ResponseClientStructuredAddressStreetRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\']+$');
export const saveOrderDraft201ResponseClientStructuredAddressBuildingMin = 0;

export const saveOrderDraft201ResponseClientStructuredAddressBuildingMax = 20;

export const saveOrderDraft201ResponseClientStructuredAddressBuildingRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const saveOrderDraft201ResponseClientStructuredAddressApartmentMin = 0;

export const saveOrderDraft201ResponseClientStructuredAddressApartmentMax = 20;

export const saveOrderDraft201ResponseClientStructuredAddressApartmentRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const saveOrderDraft201ResponseClientStructuredAddressPostalCodeMin = 0;

export const saveOrderDraft201ResponseClientStructuredAddressPostalCodeMax = 10;

export const saveOrderDraft201ResponseClientStructuredAddressPostalCodeRegExp = new RegExp('^[0-9\\-]+$');
export const saveOrderDraft201ResponseClientStructuredAddressFullAddressMin = 5;

export const saveOrderDraft201ResponseClientStructuredAddressFullAddressMax = 500;
export const saveOrderDraft201ResponseClientPreferencesItemKeyMin = 0;

export const saveOrderDraft201ResponseClientPreferencesItemKeyMax = 100;
export const saveOrderDraft201ResponseClientPreferencesItemValueMin = 0;

export const saveOrderDraft201ResponseClientPreferencesItemValueMax = 255;
export const saveOrderDraft201ResponseItemsItemNameMin = 0;

export const saveOrderDraft201ResponseItemsItemNameMax = 255;
export const saveOrderDraft201ResponseItemsItemDescriptionMin = 0;

export const saveOrderDraft201ResponseItemsItemDescriptionMax = 1000;
export const saveOrderDraft201ResponseItemsItemSpecialInstructionsMin = 0;

export const saveOrderDraft201ResponseItemsItemSpecialInstructionsMax = 500;
export const saveOrderDraft201ResponseItemsItemDefectsNotesMin = 0;

export const saveOrderDraft201ResponseItemsItemDefectsNotesMax = 1000;
export const saveOrderDraft201ResponseBranchLocationPhoneRegExp = new RegExp('^\\+ ? [0-9\\s-()]{10,15}$');
export const saveOrderDraft201ResponseCustomerNotesMin = 0;

export const saveOrderDraft201ResponseCustomerNotesMax = 1000;
export const saveOrderDraft201ResponseInternalNotesMin = 0;

export const saveOrderDraft201ResponseInternalNotesMax = 1000;


export const saveOrderDraft201Response = zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "receiptNumber": zod.coerce.string().min(1),
  "tagNumber": zod.coerce.string().optional(),
  "client": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "lastName": zod.coerce.string().optional(),
  "firstName": zod.coerce.string().optional(),
  "fullName": zod.coerce.string().optional(),
  "phone": zod.coerce.string().optional(),
  "email": zod.coerce.string().optional(),
  "address": zod.coerce.string().optional(),
  "structuredAddress": zod.object({
  "city": zod.coerce.string().min(saveOrderDraft201ResponseClientStructuredAddressCityMin).max(saveOrderDraft201ResponseClientStructuredAddressCityMax).regex(saveOrderDraft201ResponseClientStructuredAddressCityRegExp).optional(),
  "street": zod.coerce.string().min(saveOrderDraft201ResponseClientStructuredAddressStreetMin).max(saveOrderDraft201ResponseClientStructuredAddressStreetMax).regex(saveOrderDraft201ResponseClientStructuredAddressStreetRegExp).optional(),
  "building": zod.coerce.string().min(saveOrderDraft201ResponseClientStructuredAddressBuildingMin).max(saveOrderDraft201ResponseClientStructuredAddressBuildingMax).regex(saveOrderDraft201ResponseClientStructuredAddressBuildingRegExp).optional(),
  "apartment": zod.coerce.string().min(saveOrderDraft201ResponseClientStructuredAddressApartmentMin).max(saveOrderDraft201ResponseClientStructuredAddressApartmentMax).regex(saveOrderDraft201ResponseClientStructuredAddressApartmentRegExp).optional(),
  "postalCode": zod.coerce.string().min(saveOrderDraft201ResponseClientStructuredAddressPostalCodeMin).max(saveOrderDraft201ResponseClientStructuredAddressPostalCodeMax).regex(saveOrderDraft201ResponseClientStructuredAddressPostalCodeRegExp).optional(),
  "fullAddress": zod.coerce.string().min(saveOrderDraft201ResponseClientStructuredAddressFullAddressMin).max(saveOrderDraft201ResponseClientStructuredAddressFullAddressMax).optional()
}).strict().optional(),
  "communicationChannels": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER'])).optional(),
  "source": zod.enum(['INSTAGRAM', 'GOOGLE', 'RECOMMENDATION', 'OTHER']).optional(),
  "sourceDetails": zod.coerce.string().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "updatedAt": zod.coerce.string().datetime({}).optional(),
  "category": zod.object({
  "code": zod.coerce.string().optional(),
  "displayName": zod.coerce.string().optional()
}).strict().optional(),
  "preferences": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "key": zod.coerce.string().min(saveOrderDraft201ResponseClientPreferencesItemKeyMin).max(saveOrderDraft201ResponseClientPreferencesItemKeyMax),
  "value": zod.coerce.string().min(saveOrderDraft201ResponseClientPreferencesItemValueMin).max(saveOrderDraft201ResponseClientPreferencesItemValueMax).optional()
}).strict()).optional(),
  "recentOrders": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "receiptNumber": zod.coerce.string().optional(),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']).optional(),
  "totalAmount": zod.coerce.number().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "completionDate": zod.coerce.string().datetime({}).optional(),
  "itemCount": zod.coerce.number().optional()
}).strict()).optional(),
  "orderCount": zod.coerce.number().optional()
}).strict(),
  "clientId": zod.coerce.string().uuid().optional(),
  "items": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "orderId": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(saveOrderDraft201ResponseItemsItemNameMin).max(saveOrderDraft201ResponseItemsItemNameMax),
  "description": zod.coerce.string().min(saveOrderDraft201ResponseItemsItemDescriptionMin).max(saveOrderDraft201ResponseItemsItemDescriptionMax).optional(),
  "quantity": zod.coerce.number().min(1),
  "unitPrice": zod.coerce.number(),
  "totalPrice": zod.coerce.number().optional(),
  "category": zod.coerce.string().optional(),
  "color": zod.coerce.string().optional(),
  "material": zod.coerce.string().optional(),
  "unitOfMeasure": zod.coerce.string().optional(),
  "defects": zod.coerce.string().optional(),
  "specialInstructions": zod.coerce.string().min(saveOrderDraft201ResponseItemsItemSpecialInstructionsMin).max(saveOrderDraft201ResponseItemsItemSpecialInstructionsMax).optional(),
  "fillerType": zod.coerce.string().optional(),
  "fillerCompressed": zod.coerce.boolean().optional(),
  "wearDegree": zod.coerce.string().optional(),
  "stains": zod.coerce.string().optional(),
  "otherStains": zod.coerce.string().optional(),
  "defectsAndRisks": zod.coerce.string().optional(),
  "noGuaranteeReason": zod.coerce.string().optional(),
  "defectsNotes": zod.coerce.string().min(saveOrderDraft201ResponseItemsItemDefectsNotesMin).max(saveOrderDraft201ResponseItemsItemDefectsNotesMax).optional()
}).strict()).optional(),
  "totalAmount": zod.coerce.number().optional(),
  "discountAmount": zod.coerce.number().optional(),
  "finalAmount": zod.coerce.number().optional(),
  "prepaymentAmount": zod.coerce.number().optional(),
  "balanceAmount": zod.coerce.number().optional(),
  "branchLocation": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(1),
  "address": zod.coerce.string().min(1),
  "phone": zod.coerce.string().regex(saveOrderDraft201ResponseBranchLocationPhoneRegExp).optional(),
  "code": zod.coerce.string().min(1),
  "active": zod.coerce.boolean().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "updatedAt": zod.coerce.string().datetime({}).optional()
}).strict(),
  "branchLocationId": zod.coerce.string().uuid().optional(),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']),
  "createdDate": zod.coerce.string().datetime({}).optional(),
  "updatedDate": zod.coerce.string().datetime({}).optional(),
  "expectedCompletionDate": zod.coerce.string().datetime({}).optional(),
  "completedDate": zod.coerce.string().datetime({}).optional(),
  "customerNotes": zod.coerce.string().min(saveOrderDraft201ResponseCustomerNotesMin).max(saveOrderDraft201ResponseCustomerNotesMax).optional(),
  "internalNotes": zod.coerce.string().min(saveOrderDraft201ResponseInternalNotesMin).max(saveOrderDraft201ResponseInternalNotesMax).optional(),
  "expediteType": zod.enum(['STANDARD', 'EXPRESS_48H', 'EXPRESS_24H']).optional(),
  "completionComments": zod.coerce.string().optional(),
  "termsAccepted": zod.coerce.boolean().optional(),
  "finalizedAt": zod.coerce.string().datetime({}).optional(),
  "express": zod.coerce.boolean().optional(),
  "draft": zod.coerce.boolean().optional(),
  "printed": zod.coerce.boolean().optional(),
  "emailed": zod.coerce.boolean().optional()
}).strict()

export const saveOrderDraft400Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const saveOrderDraft401Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const saveOrderDraft403Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const saveOrderDraft404Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const saveOrderDraft409Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –π–æ–≥–æ ID
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ ID
 */
export const getOrderByIdParams = zod.object({
  "id": zod.coerce.string().uuid().describe('ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
}).strict()

export const getOrderById200ResponseClientStructuredAddressCityMin = 2;

export const getOrderById200ResponseClientStructuredAddressCityMax = 100;

export const getOrderById200ResponseClientStructuredAddressCityRegExp = new RegExp('^[\\p{L}\\s.,\\-\']+$');
export const getOrderById200ResponseClientStructuredAddressStreetMin = 2;

export const getOrderById200ResponseClientStructuredAddressStreetMax = 150;

export const getOrderById200ResponseClientStructuredAddressStreetRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\']+$');
export const getOrderById200ResponseClientStructuredAddressBuildingMin = 0;

export const getOrderById200ResponseClientStructuredAddressBuildingMax = 20;

export const getOrderById200ResponseClientStructuredAddressBuildingRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const getOrderById200ResponseClientStructuredAddressApartmentMin = 0;

export const getOrderById200ResponseClientStructuredAddressApartmentMax = 20;

export const getOrderById200ResponseClientStructuredAddressApartmentRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const getOrderById200ResponseClientStructuredAddressPostalCodeMin = 0;

export const getOrderById200ResponseClientStructuredAddressPostalCodeMax = 10;

export const getOrderById200ResponseClientStructuredAddressPostalCodeRegExp = new RegExp('^[0-9\\-]+$');
export const getOrderById200ResponseClientStructuredAddressFullAddressMin = 5;

export const getOrderById200ResponseClientStructuredAddressFullAddressMax = 500;
export const getOrderById200ResponseClientPreferencesItemKeyMin = 0;

export const getOrderById200ResponseClientPreferencesItemKeyMax = 100;
export const getOrderById200ResponseClientPreferencesItemValueMin = 0;

export const getOrderById200ResponseClientPreferencesItemValueMax = 255;
export const getOrderById200ResponseItemsItemNameMin = 0;

export const getOrderById200ResponseItemsItemNameMax = 255;
export const getOrderById200ResponseItemsItemDescriptionMin = 0;

export const getOrderById200ResponseItemsItemDescriptionMax = 1000;
export const getOrderById200ResponseItemsItemSpecialInstructionsMin = 0;

export const getOrderById200ResponseItemsItemSpecialInstructionsMax = 500;
export const getOrderById200ResponseItemsItemDefectsNotesMin = 0;

export const getOrderById200ResponseItemsItemDefectsNotesMax = 1000;
export const getOrderById200ResponseBranchLocationPhoneRegExp = new RegExp('^\\+ ? [0-9\\s-()]{10,15}$');
export const getOrderById200ResponseCustomerNotesMin = 0;

export const getOrderById200ResponseCustomerNotesMax = 1000;
export const getOrderById200ResponseInternalNotesMin = 0;

export const getOrderById200ResponseInternalNotesMax = 1000;


export const getOrderById200Response = zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "receiptNumber": zod.coerce.string().min(1),
  "tagNumber": zod.coerce.string().optional(),
  "client": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "lastName": zod.coerce.string().optional(),
  "firstName": zod.coerce.string().optional(),
  "fullName": zod.coerce.string().optional(),
  "phone": zod.coerce.string().optional(),
  "email": zod.coerce.string().optional(),
  "address": zod.coerce.string().optional(),
  "structuredAddress": zod.object({
  "city": zod.coerce.string().min(getOrderById200ResponseClientStructuredAddressCityMin).max(getOrderById200ResponseClientStructuredAddressCityMax).regex(getOrderById200ResponseClientStructuredAddressCityRegExp).optional(),
  "street": zod.coerce.string().min(getOrderById200ResponseClientStructuredAddressStreetMin).max(getOrderById200ResponseClientStructuredAddressStreetMax).regex(getOrderById200ResponseClientStructuredAddressStreetRegExp).optional(),
  "building": zod.coerce.string().min(getOrderById200ResponseClientStructuredAddressBuildingMin).max(getOrderById200ResponseClientStructuredAddressBuildingMax).regex(getOrderById200ResponseClientStructuredAddressBuildingRegExp).optional(),
  "apartment": zod.coerce.string().min(getOrderById200ResponseClientStructuredAddressApartmentMin).max(getOrderById200ResponseClientStructuredAddressApartmentMax).regex(getOrderById200ResponseClientStructuredAddressApartmentRegExp).optional(),
  "postalCode": zod.coerce.string().min(getOrderById200ResponseClientStructuredAddressPostalCodeMin).max(getOrderById200ResponseClientStructuredAddressPostalCodeMax).regex(getOrderById200ResponseClientStructuredAddressPostalCodeRegExp).optional(),
  "fullAddress": zod.coerce.string().min(getOrderById200ResponseClientStructuredAddressFullAddressMin).max(getOrderById200ResponseClientStructuredAddressFullAddressMax).optional()
}).strict().optional(),
  "communicationChannels": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER'])).optional(),
  "source": zod.enum(['INSTAGRAM', 'GOOGLE', 'RECOMMENDATION', 'OTHER']).optional(),
  "sourceDetails": zod.coerce.string().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "updatedAt": zod.coerce.string().datetime({}).optional(),
  "category": zod.object({
  "code": zod.coerce.string().optional(),
  "displayName": zod.coerce.string().optional()
}).strict().optional(),
  "preferences": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "key": zod.coerce.string().min(getOrderById200ResponseClientPreferencesItemKeyMin).max(getOrderById200ResponseClientPreferencesItemKeyMax),
  "value": zod.coerce.string().min(getOrderById200ResponseClientPreferencesItemValueMin).max(getOrderById200ResponseClientPreferencesItemValueMax).optional()
}).strict()).optional(),
  "recentOrders": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "receiptNumber": zod.coerce.string().optional(),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']).optional(),
  "totalAmount": zod.coerce.number().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "completionDate": zod.coerce.string().datetime({}).optional(),
  "itemCount": zod.coerce.number().optional()
}).strict()).optional(),
  "orderCount": zod.coerce.number().optional()
}).strict(),
  "clientId": zod.coerce.string().uuid().optional(),
  "items": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "orderId": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(getOrderById200ResponseItemsItemNameMin).max(getOrderById200ResponseItemsItemNameMax),
  "description": zod.coerce.string().min(getOrderById200ResponseItemsItemDescriptionMin).max(getOrderById200ResponseItemsItemDescriptionMax).optional(),
  "quantity": zod.coerce.number().min(1),
  "unitPrice": zod.coerce.number(),
  "totalPrice": zod.coerce.number().optional(),
  "category": zod.coerce.string().optional(),
  "color": zod.coerce.string().optional(),
  "material": zod.coerce.string().optional(),
  "unitOfMeasure": zod.coerce.string().optional(),
  "defects": zod.coerce.string().optional(),
  "specialInstructions": zod.coerce.string().min(getOrderById200ResponseItemsItemSpecialInstructionsMin).max(getOrderById200ResponseItemsItemSpecialInstructionsMax).optional(),
  "fillerType": zod.coerce.string().optional(),
  "fillerCompressed": zod.coerce.boolean().optional(),
  "wearDegree": zod.coerce.string().optional(),
  "stains": zod.coerce.string().optional(),
  "otherStains": zod.coerce.string().optional(),
  "defectsAndRisks": zod.coerce.string().optional(),
  "noGuaranteeReason": zod.coerce.string().optional(),
  "defectsNotes": zod.coerce.string().min(getOrderById200ResponseItemsItemDefectsNotesMin).max(getOrderById200ResponseItemsItemDefectsNotesMax).optional()
}).strict()).optional(),
  "totalAmount": zod.coerce.number().optional(),
  "discountAmount": zod.coerce.number().optional(),
  "finalAmount": zod.coerce.number().optional(),
  "prepaymentAmount": zod.coerce.number().optional(),
  "balanceAmount": zod.coerce.number().optional(),
  "branchLocation": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(1),
  "address": zod.coerce.string().min(1),
  "phone": zod.coerce.string().regex(getOrderById200ResponseBranchLocationPhoneRegExp).optional(),
  "code": zod.coerce.string().min(1),
  "active": zod.coerce.boolean().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "updatedAt": zod.coerce.string().datetime({}).optional()
}).strict(),
  "branchLocationId": zod.coerce.string().uuid().optional(),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']),
  "createdDate": zod.coerce.string().datetime({}).optional(),
  "updatedDate": zod.coerce.string().datetime({}).optional(),
  "expectedCompletionDate": zod.coerce.string().datetime({}).optional(),
  "completedDate": zod.coerce.string().datetime({}).optional(),
  "customerNotes": zod.coerce.string().min(getOrderById200ResponseCustomerNotesMin).max(getOrderById200ResponseCustomerNotesMax).optional(),
  "internalNotes": zod.coerce.string().min(getOrderById200ResponseInternalNotesMin).max(getOrderById200ResponseInternalNotesMax).optional(),
  "expediteType": zod.enum(['STANDARD', 'EXPRESS_48H', 'EXPRESS_24H']).optional(),
  "completionComments": zod.coerce.string().optional(),
  "termsAccepted": zod.coerce.boolean().optional(),
  "finalizedAt": zod.coerce.string().datetime({}).optional(),
  "express": zod.coerce.boolean().optional(),
  "draft": zod.coerce.boolean().optional(),
  "printed": zod.coerce.boolean().optional(),
  "emailed": zod.coerce.boolean().optional()
}).strict()

export const getOrderById400Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getOrderById401Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getOrderById403Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getOrderById404Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getOrderById409Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —á–µ—Ä–Ω–µ—Ç–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —á–µ—Ä–Ω–µ—Ç–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å
 */
export const getDraftOrders200ResponseClientStructuredAddressCityMin = 2;

export const getDraftOrders200ResponseClientStructuredAddressCityMax = 100;

export const getDraftOrders200ResponseClientStructuredAddressCityRegExp = new RegExp('^[\\p{L}\\s.,\\-\']+$');
export const getDraftOrders200ResponseClientStructuredAddressStreetMin = 2;

export const getDraftOrders200ResponseClientStructuredAddressStreetMax = 150;

export const getDraftOrders200ResponseClientStructuredAddressStreetRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\']+$');
export const getDraftOrders200ResponseClientStructuredAddressBuildingMin = 0;

export const getDraftOrders200ResponseClientStructuredAddressBuildingMax = 20;

export const getDraftOrders200ResponseClientStructuredAddressBuildingRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const getDraftOrders200ResponseClientStructuredAddressApartmentMin = 0;

export const getDraftOrders200ResponseClientStructuredAddressApartmentMax = 20;

export const getDraftOrders200ResponseClientStructuredAddressApartmentRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const getDraftOrders200ResponseClientStructuredAddressPostalCodeMin = 0;

export const getDraftOrders200ResponseClientStructuredAddressPostalCodeMax = 10;

export const getDraftOrders200ResponseClientStructuredAddressPostalCodeRegExp = new RegExp('^[0-9\\-]+$');
export const getDraftOrders200ResponseClientStructuredAddressFullAddressMin = 5;

export const getDraftOrders200ResponseClientStructuredAddressFullAddressMax = 500;
export const getDraftOrders200ResponseClientPreferencesItemKeyMin = 0;

export const getDraftOrders200ResponseClientPreferencesItemKeyMax = 100;
export const getDraftOrders200ResponseClientPreferencesItemValueMin = 0;

export const getDraftOrders200ResponseClientPreferencesItemValueMax = 255;
export const getDraftOrders200ResponseItemsItemNameMin = 0;

export const getDraftOrders200ResponseItemsItemNameMax = 255;
export const getDraftOrders200ResponseItemsItemDescriptionMin = 0;

export const getDraftOrders200ResponseItemsItemDescriptionMax = 1000;
export const getDraftOrders200ResponseItemsItemSpecialInstructionsMin = 0;

export const getDraftOrders200ResponseItemsItemSpecialInstructionsMax = 500;
export const getDraftOrders200ResponseItemsItemDefectsNotesMin = 0;

export const getDraftOrders200ResponseItemsItemDefectsNotesMax = 1000;
export const getDraftOrders200ResponseBranchLocationPhoneRegExp = new RegExp('^\\+ ? [0-9\\s-()]{10,15}$');
export const getDraftOrders200ResponseCustomerNotesMin = 0;

export const getDraftOrders200ResponseCustomerNotesMax = 1000;
export const getDraftOrders200ResponseInternalNotesMin = 0;

export const getDraftOrders200ResponseInternalNotesMax = 1000;


export const getDraftOrders200ResponseItem = zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "receiptNumber": zod.coerce.string().min(1),
  "tagNumber": zod.coerce.string().optional(),
  "client": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "lastName": zod.coerce.string().optional(),
  "firstName": zod.coerce.string().optional(),
  "fullName": zod.coerce.string().optional(),
  "phone": zod.coerce.string().optional(),
  "email": zod.coerce.string().optional(),
  "address": zod.coerce.string().optional(),
  "structuredAddress": zod.object({
  "city": zod.coerce.string().min(getDraftOrders200ResponseClientStructuredAddressCityMin).max(getDraftOrders200ResponseClientStructuredAddressCityMax).regex(getDraftOrders200ResponseClientStructuredAddressCityRegExp).optional(),
  "street": zod.coerce.string().min(getDraftOrders200ResponseClientStructuredAddressStreetMin).max(getDraftOrders200ResponseClientStructuredAddressStreetMax).regex(getDraftOrders200ResponseClientStructuredAddressStreetRegExp).optional(),
  "building": zod.coerce.string().min(getDraftOrders200ResponseClientStructuredAddressBuildingMin).max(getDraftOrders200ResponseClientStructuredAddressBuildingMax).regex(getDraftOrders200ResponseClientStructuredAddressBuildingRegExp).optional(),
  "apartment": zod.coerce.string().min(getDraftOrders200ResponseClientStructuredAddressApartmentMin).max(getDraftOrders200ResponseClientStructuredAddressApartmentMax).regex(getDraftOrders200ResponseClientStructuredAddressApartmentRegExp).optional(),
  "postalCode": zod.coerce.string().min(getDraftOrders200ResponseClientStructuredAddressPostalCodeMin).max(getDraftOrders200ResponseClientStructuredAddressPostalCodeMax).regex(getDraftOrders200ResponseClientStructuredAddressPostalCodeRegExp).optional(),
  "fullAddress": zod.coerce.string().min(getDraftOrders200ResponseClientStructuredAddressFullAddressMin).max(getDraftOrders200ResponseClientStructuredAddressFullAddressMax).optional()
}).strict().optional(),
  "communicationChannels": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER'])).optional(),
  "source": zod.enum(['INSTAGRAM', 'GOOGLE', 'RECOMMENDATION', 'OTHER']).optional(),
  "sourceDetails": zod.coerce.string().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "updatedAt": zod.coerce.string().datetime({}).optional(),
  "category": zod.object({
  "code": zod.coerce.string().optional(),
  "displayName": zod.coerce.string().optional()
}).strict().optional(),
  "preferences": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "key": zod.coerce.string().min(getDraftOrders200ResponseClientPreferencesItemKeyMin).max(getDraftOrders200ResponseClientPreferencesItemKeyMax),
  "value": zod.coerce.string().min(getDraftOrders200ResponseClientPreferencesItemValueMin).max(getDraftOrders200ResponseClientPreferencesItemValueMax).optional()
}).strict()).optional(),
  "recentOrders": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "receiptNumber": zod.coerce.string().optional(),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']).optional(),
  "totalAmount": zod.coerce.number().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "completionDate": zod.coerce.string().datetime({}).optional(),
  "itemCount": zod.coerce.number().optional()
}).strict()).optional(),
  "orderCount": zod.coerce.number().optional()
}).strict(),
  "clientId": zod.coerce.string().uuid().optional(),
  "items": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "orderId": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(getDraftOrders200ResponseItemsItemNameMin).max(getDraftOrders200ResponseItemsItemNameMax),
  "description": zod.coerce.string().min(getDraftOrders200ResponseItemsItemDescriptionMin).max(getDraftOrders200ResponseItemsItemDescriptionMax).optional(),
  "quantity": zod.coerce.number().min(1),
  "unitPrice": zod.coerce.number(),
  "totalPrice": zod.coerce.number().optional(),
  "category": zod.coerce.string().optional(),
  "color": zod.coerce.string().optional(),
  "material": zod.coerce.string().optional(),
  "unitOfMeasure": zod.coerce.string().optional(),
  "defects": zod.coerce.string().optional(),
  "specialInstructions": zod.coerce.string().min(getDraftOrders200ResponseItemsItemSpecialInstructionsMin).max(getDraftOrders200ResponseItemsItemSpecialInstructionsMax).optional(),
  "fillerType": zod.coerce.string().optional(),
  "fillerCompressed": zod.coerce.boolean().optional(),
  "wearDegree": zod.coerce.string().optional(),
  "stains": zod.coerce.string().optional(),
  "otherStains": zod.coerce.string().optional(),
  "defectsAndRisks": zod.coerce.string().optional(),
  "noGuaranteeReason": zod.coerce.string().optional(),
  "defectsNotes": zod.coerce.string().min(getDraftOrders200ResponseItemsItemDefectsNotesMin).max(getDraftOrders200ResponseItemsItemDefectsNotesMax).optional()
}).strict()).optional(),
  "totalAmount": zod.coerce.number().optional(),
  "discountAmount": zod.coerce.number().optional(),
  "finalAmount": zod.coerce.number().optional(),
  "prepaymentAmount": zod.coerce.number().optional(),
  "balanceAmount": zod.coerce.number().optional(),
  "branchLocation": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(1),
  "address": zod.coerce.string().min(1),
  "phone": zod.coerce.string().regex(getDraftOrders200ResponseBranchLocationPhoneRegExp).optional(),
  "code": zod.coerce.string().min(1),
  "active": zod.coerce.boolean().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "updatedAt": zod.coerce.string().datetime({}).optional()
}).strict(),
  "branchLocationId": zod.coerce.string().uuid().optional(),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']),
  "createdDate": zod.coerce.string().datetime({}).optional(),
  "updatedDate": zod.coerce.string().datetime({}).optional(),
  "expectedCompletionDate": zod.coerce.string().datetime({}).optional(),
  "completedDate": zod.coerce.string().datetime({}).optional(),
  "customerNotes": zod.coerce.string().min(getDraftOrders200ResponseCustomerNotesMin).max(getDraftOrders200ResponseCustomerNotesMax).optional(),
  "internalNotes": zod.coerce.string().min(getDraftOrders200ResponseInternalNotesMin).max(getDraftOrders200ResponseInternalNotesMax).optional(),
  "expediteType": zod.enum(['STANDARD', 'EXPRESS_48H', 'EXPRESS_24H']).optional(),
  "completionComments": zod.coerce.string().optional(),
  "termsAccepted": zod.coerce.boolean().optional(),
  "finalizedAt": zod.coerce.string().datetime({}).optional(),
  "express": zod.coerce.boolean().optional(),
  "draft": zod.coerce.boolean().optional(),
  "printed": zod.coerce.boolean().optional(),
  "emailed": zod.coerce.boolean().optional()
}).strict()
export const getDraftOrders200Response = zod.array(getDraftOrders200ResponseItem)

export const getDraftOrders400Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getDraftOrders401Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getDraftOrders403Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getDraftOrders404Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getDraftOrders409Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const getActiveOrders200ResponseClientStructuredAddressCityMin = 2;

export const getActiveOrders200ResponseClientStructuredAddressCityMax = 100;

export const getActiveOrders200ResponseClientStructuredAddressCityRegExp = new RegExp('^[\\p{L}\\s.,\\-\']+$');
export const getActiveOrders200ResponseClientStructuredAddressStreetMin = 2;

export const getActiveOrders200ResponseClientStructuredAddressStreetMax = 150;

export const getActiveOrders200ResponseClientStructuredAddressStreetRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\']+$');
export const getActiveOrders200ResponseClientStructuredAddressBuildingMin = 0;

export const getActiveOrders200ResponseClientStructuredAddressBuildingMax = 20;

export const getActiveOrders200ResponseClientStructuredAddressBuildingRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const getActiveOrders200ResponseClientStructuredAddressApartmentMin = 0;

export const getActiveOrders200ResponseClientStructuredAddressApartmentMax = 20;

export const getActiveOrders200ResponseClientStructuredAddressApartmentRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const getActiveOrders200ResponseClientStructuredAddressPostalCodeMin = 0;

export const getActiveOrders200ResponseClientStructuredAddressPostalCodeMax = 10;

export const getActiveOrders200ResponseClientStructuredAddressPostalCodeRegExp = new RegExp('^[0-9\\-]+$');
export const getActiveOrders200ResponseClientStructuredAddressFullAddressMin = 5;

export const getActiveOrders200ResponseClientStructuredAddressFullAddressMax = 500;
export const getActiveOrders200ResponseClientPreferencesItemKeyMin = 0;

export const getActiveOrders200ResponseClientPreferencesItemKeyMax = 100;
export const getActiveOrders200ResponseClientPreferencesItemValueMin = 0;

export const getActiveOrders200ResponseClientPreferencesItemValueMax = 255;
export const getActiveOrders200ResponseItemsItemNameMin = 0;

export const getActiveOrders200ResponseItemsItemNameMax = 255;
export const getActiveOrders200ResponseItemsItemDescriptionMin = 0;

export const getActiveOrders200ResponseItemsItemDescriptionMax = 1000;
export const getActiveOrders200ResponseItemsItemSpecialInstructionsMin = 0;

export const getActiveOrders200ResponseItemsItemSpecialInstructionsMax = 500;
export const getActiveOrders200ResponseItemsItemDefectsNotesMin = 0;

export const getActiveOrders200ResponseItemsItemDefectsNotesMax = 1000;
export const getActiveOrders200ResponseBranchLocationPhoneRegExp = new RegExp('^\\+ ? [0-9\\s-()]{10,15}$');
export const getActiveOrders200ResponseCustomerNotesMin = 0;

export const getActiveOrders200ResponseCustomerNotesMax = 1000;
export const getActiveOrders200ResponseInternalNotesMin = 0;

export const getActiveOrders200ResponseInternalNotesMax = 1000;


export const getActiveOrders200ResponseItem = zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "receiptNumber": zod.coerce.string().min(1),
  "tagNumber": zod.coerce.string().optional(),
  "client": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "lastName": zod.coerce.string().optional(),
  "firstName": zod.coerce.string().optional(),
  "fullName": zod.coerce.string().optional(),
  "phone": zod.coerce.string().optional(),
  "email": zod.coerce.string().optional(),
  "address": zod.coerce.string().optional(),
  "structuredAddress": zod.object({
  "city": zod.coerce.string().min(getActiveOrders200ResponseClientStructuredAddressCityMin).max(getActiveOrders200ResponseClientStructuredAddressCityMax).regex(getActiveOrders200ResponseClientStructuredAddressCityRegExp).optional(),
  "street": zod.coerce.string().min(getActiveOrders200ResponseClientStructuredAddressStreetMin).max(getActiveOrders200ResponseClientStructuredAddressStreetMax).regex(getActiveOrders200ResponseClientStructuredAddressStreetRegExp).optional(),
  "building": zod.coerce.string().min(getActiveOrders200ResponseClientStructuredAddressBuildingMin).max(getActiveOrders200ResponseClientStructuredAddressBuildingMax).regex(getActiveOrders200ResponseClientStructuredAddressBuildingRegExp).optional(),
  "apartment": zod.coerce.string().min(getActiveOrders200ResponseClientStructuredAddressApartmentMin).max(getActiveOrders200ResponseClientStructuredAddressApartmentMax).regex(getActiveOrders200ResponseClientStructuredAddressApartmentRegExp).optional(),
  "postalCode": zod.coerce.string().min(getActiveOrders200ResponseClientStructuredAddressPostalCodeMin).max(getActiveOrders200ResponseClientStructuredAddressPostalCodeMax).regex(getActiveOrders200ResponseClientStructuredAddressPostalCodeRegExp).optional(),
  "fullAddress": zod.coerce.string().min(getActiveOrders200ResponseClientStructuredAddressFullAddressMin).max(getActiveOrders200ResponseClientStructuredAddressFullAddressMax).optional()
}).strict().optional(),
  "communicationChannels": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER'])).optional(),
  "source": zod.enum(['INSTAGRAM', 'GOOGLE', 'RECOMMENDATION', 'OTHER']).optional(),
  "sourceDetails": zod.coerce.string().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "updatedAt": zod.coerce.string().datetime({}).optional(),
  "category": zod.object({
  "code": zod.coerce.string().optional(),
  "displayName": zod.coerce.string().optional()
}).strict().optional(),
  "preferences": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "key": zod.coerce.string().min(getActiveOrders200ResponseClientPreferencesItemKeyMin).max(getActiveOrders200ResponseClientPreferencesItemKeyMax),
  "value": zod.coerce.string().min(getActiveOrders200ResponseClientPreferencesItemValueMin).max(getActiveOrders200ResponseClientPreferencesItemValueMax).optional()
}).strict()).optional(),
  "recentOrders": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "receiptNumber": zod.coerce.string().optional(),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']).optional(),
  "totalAmount": zod.coerce.number().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "completionDate": zod.coerce.string().datetime({}).optional(),
  "itemCount": zod.coerce.number().optional()
}).strict()).optional(),
  "orderCount": zod.coerce.number().optional()
}).strict(),
  "clientId": zod.coerce.string().uuid().optional(),
  "items": zod.array(zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "orderId": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(getActiveOrders200ResponseItemsItemNameMin).max(getActiveOrders200ResponseItemsItemNameMax),
  "description": zod.coerce.string().min(getActiveOrders200ResponseItemsItemDescriptionMin).max(getActiveOrders200ResponseItemsItemDescriptionMax).optional(),
  "quantity": zod.coerce.number().min(1),
  "unitPrice": zod.coerce.number(),
  "totalPrice": zod.coerce.number().optional(),
  "category": zod.coerce.string().optional(),
  "color": zod.coerce.string().optional(),
  "material": zod.coerce.string().optional(),
  "unitOfMeasure": zod.coerce.string().optional(),
  "defects": zod.coerce.string().optional(),
  "specialInstructions": zod.coerce.string().min(getActiveOrders200ResponseItemsItemSpecialInstructionsMin).max(getActiveOrders200ResponseItemsItemSpecialInstructionsMax).optional(),
  "fillerType": zod.coerce.string().optional(),
  "fillerCompressed": zod.coerce.boolean().optional(),
  "wearDegree": zod.coerce.string().optional(),
  "stains": zod.coerce.string().optional(),
  "otherStains": zod.coerce.string().optional(),
  "defectsAndRisks": zod.coerce.string().optional(),
  "noGuaranteeReason": zod.coerce.string().optional(),
  "defectsNotes": zod.coerce.string().min(getActiveOrders200ResponseItemsItemDefectsNotesMin).max(getActiveOrders200ResponseItemsItemDefectsNotesMax).optional()
}).strict()).optional(),
  "totalAmount": zod.coerce.number().optional(),
  "discountAmount": zod.coerce.number().optional(),
  "finalAmount": zod.coerce.number().optional(),
  "prepaymentAmount": zod.coerce.number().optional(),
  "balanceAmount": zod.coerce.number().optional(),
  "branchLocation": zod.object({
  "id": zod.coerce.string().uuid().optional(),
  "name": zod.coerce.string().min(1),
  "address": zod.coerce.string().min(1),
  "phone": zod.coerce.string().regex(getActiveOrders200ResponseBranchLocationPhoneRegExp).optional(),
  "code": zod.coerce.string().min(1),
  "active": zod.coerce.boolean().optional(),
  "createdAt": zod.coerce.string().datetime({}).optional(),
  "updatedAt": zod.coerce.string().datetime({}).optional()
}).strict(),
  "branchLocationId": zod.coerce.string().uuid().optional(),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']),
  "createdDate": zod.coerce.string().datetime({}).optional(),
  "updatedDate": zod.coerce.string().datetime({}).optional(),
  "expectedCompletionDate": zod.coerce.string().datetime({}).optional(),
  "completedDate": zod.coerce.string().datetime({}).optional(),
  "customerNotes": zod.coerce.string().min(getActiveOrders200ResponseCustomerNotesMin).max(getActiveOrders200ResponseCustomerNotesMax).optional(),
  "internalNotes": zod.coerce.string().min(getActiveOrders200ResponseInternalNotesMin).max(getActiveOrders200ResponseInternalNotesMax).optional(),
  "expediteType": zod.enum(['STANDARD', 'EXPRESS_48H', 'EXPRESS_24H']).optional(),
  "completionComments": zod.coerce.string().optional(),
  "termsAccepted": zod.coerce.boolean().optional(),
  "finalizedAt": zod.coerce.string().datetime({}).optional(),
  "express": zod.coerce.boolean().optional(),
  "draft": zod.coerce.boolean().optional(),
  "printed": zod.coerce.boolean().optional(),
  "emailed": zod.coerce.boolean().optional()
}).strict()
export const getActiveOrders200Response = zod.array(getActiveOrders200ResponseItem)

export const getActiveOrders400Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getActiveOrders401Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getActiveOrders403Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getActiveOrders404Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getActiveOrders409Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * –°–∫–∞—Å–æ–≤—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * @summary –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const cancelOrderParams = zod.object({
  "id": zod.coerce.string().uuid().describe('ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
}).strict()

export const cancelOrder204Response = zod.object({

})

export const cancelOrder400Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const cancelOrder401Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const cancelOrder403Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const cancelOrder404Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const cancelOrder409Response = zod.object({
  "timestamp": zod.coerce.string().optional(),
  "status": zod.coerce.number().optional(),
  "error": zod.coerce.string().optional(),
  "message": zod.coerce.string().optional(),
  "path": zod.coerce.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')
