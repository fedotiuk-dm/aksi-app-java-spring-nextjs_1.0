/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AKSI Dry Cleaning Order System API
 * API –¥–ª—è –æ–¥–Ω–æ—Å—Ç–æ—Ä—ñ–Ω–∫–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å —Ö—ñ–º—á–∏—Å—Ç–∫–∏ –∑ DDD –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–æ—é
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';

/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ ID
 */
export const getClientByIdParams = zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID)')
}).strict()

export const getClientById200ResponsePhoneRegExp = new RegExp('^\\+380\\d{9}$');
export const getClientById200ResponseEmailMin = 3;

export const getClientById200ResponseEmailMax = 254;
export const getClientById200ResponseAddressStreetMin = 0;

export const getClientById200ResponseAddressStreetMax = 200;
export const getClientById200ResponseAddressCityMin = 0;

export const getClientById200ResponseAddressCityMax = 100;
export const getClientById200ResponseAddressRegionMin = 0;

export const getClientById200ResponseAddressRegionMax = 100;
export const getClientById200ResponseAddressPostalCodeMin = 0;

export const getClientById200ResponseAddressPostalCodeMax = 10;
export const getClientById200ResponseAddressCountryMin = 0;

export const getClientById200ResponseAddressCountryMax = 100;
export const getClientById200ResponseStatisticsTotalSpentMin = 0;
export const getClientById200ResponseStatisticsAverageOrderValueMin = 0;


export const getClientById200Response = zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "firstName": zod.coerce.string().describe('–Ü–º\'—è –∫–ª—ñ—î–Ω—Ç–∞'),
  "lastName": zod.coerce.string().describe('–ü—Ä—ñ–∑–≤–∏—â–µ –∫–ª—ñ—î–Ω—Ç–∞'),
  "fullName": zod.coerce.string().optional().describe('–ü–æ–≤–Ω–µ —ñ–º\'—è (firstName + lastName)'),
  "phone": zod.coerce.string().regex(getClientById200ResponsePhoneRegExp).describe('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "email": zod.coerce.string().min(getClientById200ResponseEmailMin).max(getClientById200ResponseEmailMax).optional().describe('Email –∞–¥—Ä–µ—Å–∞'),
  "address": zod.object({
  "street": zod.coerce.string().min(getClientById200ResponseAddressStreetMin).max(getClientById200ResponseAddressStreetMax).optional().describe('–í—É–ª–∏—Ü—è —Ç–∞ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É'),
  "city": zod.coerce.string().min(getClientById200ResponseAddressCityMin).max(getClientById200ResponseAddressCityMax).optional().describe('–ú—ñ—Å—Ç–æ'),
  "region": zod.coerce.string().min(getClientById200ResponseAddressRegionMin).max(getClientById200ResponseAddressRegionMax).optional().describe('–û–±–ª–∞—Å—Ç—å/—Ä–µ–≥—ñ–æ–Ω'),
  "postalCode": zod.coerce.string().min(getClientById200ResponseAddressPostalCodeMin).max(getClientById200ResponseAddressPostalCodeMax).optional().describe('–ü–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å'),
  "country": zod.coerce.string().min(getClientById200ResponseAddressCountryMin).max(getClientById200ResponseAddressCountryMax).optional().describe('–ö—Ä–∞—ó–Ω–∞')
}).strict().optional(),
  "communicationMethods": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER', 'TELEGRAM', 'EMAIL'])).optional(),
  "sourceType": zod.enum(['REFERRAL', 'ADVERTISING', 'SOCIAL_MEDIA', 'WEBSITE', 'WALKING_BY', 'REPEAT_CUSTOMER', 'OTHER']).optional(),
  "notes": zod.coerce.string().optional().describe('–ü—Ä–∏–º—ñ—Ç–∫–∏'),
  "statistics": zod.object({
  "totalOrders": zod.coerce.number().optional().describe('–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å'),
  "totalSpent": zod.coerce.number().min(getClientById200ResponseStatisticsTotalSpentMin).optional().describe('–ì—Ä–æ—à–æ–≤–∞ —Å—É–º–∞ (–≤ –≥—Ä–∏–≤–Ω—è—Ö)'),
  "lastOrderDate": zod.coerce.string().date().optional().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "averageOrderValue": zod.coerce.number().min(getClientById200ResponseStatisticsAverageOrderValueMin).optional().describe('–ì—Ä–æ—à–æ–≤–∞ —Å—É–º–∞ (–≤ –≥—Ä–∏–≤–Ω—è—Ö)'),
  "isVip": zod.coerce.boolean().optional().describe('–ß–∏ —î –∫–ª—ñ—î–Ω—Ç VIP'),
  "registrationDate": zod.coerce.string().date().optional().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ')
}).strict().optional(),
  "createdAt": zod.coerce.string().datetime({}).describe('–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è'),
  "updatedAt": zod.coerce.string().datetime({}).optional().describe('–î–∞—Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è')
}).strict()

export const getClientById404Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "traceId": zod.coerce.string().optional().describe('–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏')
}).strict()


/**
 * –û–Ω–æ–≤–ª—é—î —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
 * @summary –û–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞
 */
export const updateClientParams = zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID)')
}).strict()

export const updateClientBodyFirstNameMin = 2;

export const updateClientBodyFirstNameMax = 50;
export const updateClientBodyLastNameMin = 2;

export const updateClientBodyLastNameMax = 50;
export const updateClientBodyPhoneRegExp = new RegExp('^\\+380\\d{9}$');
export const updateClientBodyEmailMin = 3;

export const updateClientBodyEmailMax = 254;
export const updateClientBodyAddressStreetMin = 0;

export const updateClientBodyAddressStreetMax = 200;
export const updateClientBodyAddressCityMin = 0;

export const updateClientBodyAddressCityMax = 100;
export const updateClientBodyAddressRegionMin = 0;

export const updateClientBodyAddressRegionMax = 100;
export const updateClientBodyAddressPostalCodeMin = 0;

export const updateClientBodyAddressPostalCodeMax = 10;
export const updateClientBodyAddressCountryMin = 0;

export const updateClientBodyAddressCountryMax = 100;
export const updateClientBodyNotesMin = 0;

export const updateClientBodyNotesMax = 500;


export const updateClientBody = zod.object({
  "firstName": zod.coerce.string().min(updateClientBodyFirstNameMin).max(updateClientBodyFirstNameMax).optional().describe('–Ü–º\'—è –∫–ª—ñ—î–Ω—Ç–∞'),
  "lastName": zod.coerce.string().min(updateClientBodyLastNameMin).max(updateClientBodyLastNameMax).optional().describe('–ü—Ä—ñ–∑–≤–∏—â–µ –∫–ª—ñ—î–Ω—Ç–∞'),
  "phone": zod.coerce.string().regex(updateClientBodyPhoneRegExp).optional().describe('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "email": zod.coerce.string().min(updateClientBodyEmailMin).max(updateClientBodyEmailMax).optional().describe('Email –∞–¥—Ä–µ—Å–∞'),
  "address": zod.object({
  "street": zod.coerce.string().min(updateClientBodyAddressStreetMin).max(updateClientBodyAddressStreetMax).optional().describe('–í—É–ª–∏—Ü—è —Ç–∞ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É'),
  "city": zod.coerce.string().min(updateClientBodyAddressCityMin).max(updateClientBodyAddressCityMax).optional().describe('–ú—ñ—Å—Ç–æ'),
  "region": zod.coerce.string().min(updateClientBodyAddressRegionMin).max(updateClientBodyAddressRegionMax).optional().describe('–û–±–ª–∞—Å—Ç—å/—Ä–µ–≥—ñ–æ–Ω'),
  "postalCode": zod.coerce.string().min(updateClientBodyAddressPostalCodeMin).max(updateClientBodyAddressPostalCodeMax).optional().describe('–ü–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å'),
  "country": zod.coerce.string().min(updateClientBodyAddressCountryMin).max(updateClientBodyAddressCountryMax).optional().describe('–ö—Ä–∞—ó–Ω–∞')
}).strict().optional(),
  "communicationMethods": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER', 'TELEGRAM', 'EMAIL'])).optional().describe('–ë–∞–∂–∞–Ω—ñ —Å–ø–æ—Å–æ–±–∏ –∑–≤\'—è–∑–∫—É'),
  "sourceType": zod.enum(['REFERRAL', 'ADVERTISING', 'SOCIAL_MEDIA', 'WEBSITE', 'WALKING_BY', 'REPEAT_CUSTOMER', 'OTHER']).optional(),
  "notes": zod.coerce.string().min(updateClientBodyNotesMin).max(updateClientBodyNotesMax).optional().describe('–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø—Ä–∏–º—ñ—Ç–∫–∏ –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞')
}).strict()

export const updateClient200ResponsePhoneRegExp = new RegExp('^\\+380\\d{9}$');
export const updateClient200ResponseEmailMin = 3;

export const updateClient200ResponseEmailMax = 254;
export const updateClient200ResponseAddressStreetMin = 0;

export const updateClient200ResponseAddressStreetMax = 200;
export const updateClient200ResponseAddressCityMin = 0;

export const updateClient200ResponseAddressCityMax = 100;
export const updateClient200ResponseAddressRegionMin = 0;

export const updateClient200ResponseAddressRegionMax = 100;
export const updateClient200ResponseAddressPostalCodeMin = 0;

export const updateClient200ResponseAddressPostalCodeMax = 10;
export const updateClient200ResponseAddressCountryMin = 0;

export const updateClient200ResponseAddressCountryMax = 100;
export const updateClient200ResponseStatisticsTotalSpentMin = 0;
export const updateClient200ResponseStatisticsAverageOrderValueMin = 0;


export const updateClient200Response = zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "firstName": zod.coerce.string().describe('–Ü–º\'—è –∫–ª—ñ—î–Ω—Ç–∞'),
  "lastName": zod.coerce.string().describe('–ü—Ä—ñ–∑–≤–∏—â–µ –∫–ª—ñ—î–Ω—Ç–∞'),
  "fullName": zod.coerce.string().optional().describe('–ü–æ–≤–Ω–µ —ñ–º\'—è (firstName + lastName)'),
  "phone": zod.coerce.string().regex(updateClient200ResponsePhoneRegExp).describe('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "email": zod.coerce.string().min(updateClient200ResponseEmailMin).max(updateClient200ResponseEmailMax).optional().describe('Email –∞–¥—Ä–µ—Å–∞'),
  "address": zod.object({
  "street": zod.coerce.string().min(updateClient200ResponseAddressStreetMin).max(updateClient200ResponseAddressStreetMax).optional().describe('–í—É–ª–∏—Ü—è —Ç–∞ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É'),
  "city": zod.coerce.string().min(updateClient200ResponseAddressCityMin).max(updateClient200ResponseAddressCityMax).optional().describe('–ú—ñ—Å—Ç–æ'),
  "region": zod.coerce.string().min(updateClient200ResponseAddressRegionMin).max(updateClient200ResponseAddressRegionMax).optional().describe('–û–±–ª–∞—Å—Ç—å/—Ä–µ–≥—ñ–æ–Ω'),
  "postalCode": zod.coerce.string().min(updateClient200ResponseAddressPostalCodeMin).max(updateClient200ResponseAddressPostalCodeMax).optional().describe('–ü–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å'),
  "country": zod.coerce.string().min(updateClient200ResponseAddressCountryMin).max(updateClient200ResponseAddressCountryMax).optional().describe('–ö—Ä–∞—ó–Ω–∞')
}).strict().optional(),
  "communicationMethods": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER', 'TELEGRAM', 'EMAIL'])).optional(),
  "sourceType": zod.enum(['REFERRAL', 'ADVERTISING', 'SOCIAL_MEDIA', 'WEBSITE', 'WALKING_BY', 'REPEAT_CUSTOMER', 'OTHER']).optional(),
  "notes": zod.coerce.string().optional().describe('–ü—Ä–∏–º—ñ—Ç–∫–∏'),
  "statistics": zod.object({
  "totalOrders": zod.coerce.number().optional().describe('–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å'),
  "totalSpent": zod.coerce.number().min(updateClient200ResponseStatisticsTotalSpentMin).optional().describe('–ì—Ä–æ—à–æ–≤–∞ —Å—É–º–∞ (–≤ –≥—Ä–∏–≤–Ω—è—Ö)'),
  "lastOrderDate": zod.coerce.string().date().optional().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "averageOrderValue": zod.coerce.number().min(updateClient200ResponseStatisticsAverageOrderValueMin).optional().describe('–ì—Ä–æ—à–æ–≤–∞ —Å—É–º–∞ (–≤ –≥—Ä–∏–≤–Ω—è—Ö)'),
  "isVip": zod.coerce.boolean().optional().describe('–ß–∏ —î –∫–ª—ñ—î–Ω—Ç VIP'),
  "registrationDate": zod.coerce.string().date().optional().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ')
}).strict().optional(),
  "createdAt": zod.coerce.string().datetime({}).describe('–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è'),
  "updatedAt": zod.coerce.string().datetime({}).optional().describe('–î–∞—Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è')
}).strict()

export const updateClient400Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥ (400)'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–ó–∞–≥–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "errors": zod.array(zod.object({
  "field": zod.coerce.string().describe('–ù–∞–∑–≤–∞ –ø–æ–ª—è –∑ –ø–æ–º–∏–ª–∫–æ—é'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "rejectedValue": zod.object({
  "present": zod.coerce.boolean().optional()
}).strict().optional(),
  "code": zod.coerce.string().optional().describe('–ö–æ–¥ –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó')
}).strict()).describe('–°–ø–∏—Å–æ–∫ –ø–æ–º–∏–ª–æ–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø–æ–ª—ñ–≤')
}).strict()

export const updateClient404Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "traceId": zod.coerce.string().optional().describe('–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏')
}).strict()


/**
 * –í–∏–¥–∞–ª—è—î –∫–ª—ñ—î–Ω—Ç–∞ (–º'—è–∫–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è)
 * @summary –í–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞
 */
export const deleteClientParams = zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID)')
}).strict()

export const deleteClient404Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "traceId": zod.coerce.string().optional().describe('–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏')
}).strict()


/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –≤—Å—é –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∫–ª—ñ—î–Ω—Ç–∞
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∫–ª—ñ—î–Ω—Ç–∞
 */
export const getClientContactsParams = zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID)')
}).strict()

export const getClientContacts200ResponsePhoneRegExp = new RegExp('^\\+380\\d{9}$');
export const getClientContacts200ResponseEmailMin = 3;

export const getClientContacts200ResponseEmailMax = 254;
export const getClientContacts200ResponseAddressStreetMin = 0;

export const getClientContacts200ResponseAddressStreetMax = 200;
export const getClientContacts200ResponseAddressCityMin = 0;

export const getClientContacts200ResponseAddressCityMax = 100;
export const getClientContacts200ResponseAddressRegionMin = 0;

export const getClientContacts200ResponseAddressRegionMax = 100;
export const getClientContacts200ResponseAddressPostalCodeMin = 0;

export const getClientContacts200ResponseAddressPostalCodeMax = 10;
export const getClientContacts200ResponseAddressCountryMin = 0;

export const getClientContacts200ResponseAddressCountryMax = 100;


export const getClientContacts200Response = zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "phone": zod.coerce.string().regex(getClientContacts200ResponsePhoneRegExp).optional().describe('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "email": zod.coerce.string().min(getClientContacts200ResponseEmailMin).max(getClientContacts200ResponseEmailMax).optional().describe('Email –∞–¥—Ä–µ—Å–∞'),
  "communicationMethods": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER', 'TELEGRAM', 'EMAIL'])).optional(),
  "address": zod.object({
  "street": zod.coerce.string().min(getClientContacts200ResponseAddressStreetMin).max(getClientContacts200ResponseAddressStreetMax).optional().describe('–í—É–ª–∏—Ü—è —Ç–∞ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É'),
  "city": zod.coerce.string().min(getClientContacts200ResponseAddressCityMin).max(getClientContacts200ResponseAddressCityMax).optional().describe('–ú—ñ—Å—Ç–æ'),
  "region": zod.coerce.string().min(getClientContacts200ResponseAddressRegionMin).max(getClientContacts200ResponseAddressRegionMax).optional().describe('–û–±–ª–∞—Å—Ç—å/—Ä–µ–≥—ñ–æ–Ω'),
  "postalCode": zod.coerce.string().min(getClientContacts200ResponseAddressPostalCodeMin).max(getClientContacts200ResponseAddressPostalCodeMax).optional().describe('–ü–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å'),
  "country": zod.coerce.string().min(getClientContacts200ResponseAddressCountryMin).max(getClientContacts200ResponseAddressCountryMax).optional().describe('–ö—Ä–∞—ó–Ω–∞')
}).strict().optional()
}).strict()

export const getClientContacts404Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "traceId": zod.coerce.string().optional().describe('–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏')
}).strict()


/**
 * –û–Ω–æ–≤–ª—é—î –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
 * @summary –û–Ω–æ–≤–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∫–ª—ñ—î–Ω—Ç–∞
 */
export const updateClientContactsParams = zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID)')
}).strict()

export const updateClientContactsBodyPhoneRegExp = new RegExp('^\\+380\\d{9}$');
export const updateClientContactsBodyEmailMin = 3;

export const updateClientContactsBodyEmailMax = 254;
export const updateClientContactsBodyAddressStreetMin = 0;

export const updateClientContactsBodyAddressStreetMax = 200;
export const updateClientContactsBodyAddressCityMin = 0;

export const updateClientContactsBodyAddressCityMax = 100;
export const updateClientContactsBodyAddressRegionMin = 0;

export const updateClientContactsBodyAddressRegionMax = 100;
export const updateClientContactsBodyAddressPostalCodeMin = 0;

export const updateClientContactsBodyAddressPostalCodeMax = 10;
export const updateClientContactsBodyAddressCountryMin = 0;

export const updateClientContactsBodyAddressCountryMax = 100;


export const updateClientContactsBody = zod.object({
  "phone": zod.coerce.string().regex(updateClientContactsBodyPhoneRegExp).optional().describe('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "email": zod.coerce.string().min(updateClientContactsBodyEmailMin).max(updateClientContactsBodyEmailMax).optional().describe('Email –∞–¥—Ä–µ—Å–∞'),
  "communicationMethods": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER', 'TELEGRAM', 'EMAIL'])).optional().describe('–ë–∞–∂–∞–Ω—ñ —Å–ø–æ—Å–æ–±–∏ –∑–≤\'—è–∑–∫—É'),
  "address": zod.object({
  "street": zod.coerce.string().min(updateClientContactsBodyAddressStreetMin).max(updateClientContactsBodyAddressStreetMax).optional().describe('–í—É–ª–∏—Ü—è —Ç–∞ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É'),
  "city": zod.coerce.string().min(updateClientContactsBodyAddressCityMin).max(updateClientContactsBodyAddressCityMax).optional().describe('–ú—ñ—Å—Ç–æ'),
  "region": zod.coerce.string().min(updateClientContactsBodyAddressRegionMin).max(updateClientContactsBodyAddressRegionMax).optional().describe('–û–±–ª–∞—Å—Ç—å/—Ä–µ–≥—ñ–æ–Ω'),
  "postalCode": zod.coerce.string().min(updateClientContactsBodyAddressPostalCodeMin).max(updateClientContactsBodyAddressPostalCodeMax).optional().describe('–ü–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å'),
  "country": zod.coerce.string().min(updateClientContactsBodyAddressCountryMin).max(updateClientContactsBodyAddressCountryMax).optional().describe('–ö—Ä–∞—ó–Ω–∞')
}).strict().optional()
}).strict()

export const updateClientContacts200ResponsePhoneRegExp = new RegExp('^\\+380\\d{9}$');
export const updateClientContacts200ResponseEmailMin = 3;

export const updateClientContacts200ResponseEmailMax = 254;
export const updateClientContacts200ResponseAddressStreetMin = 0;

export const updateClientContacts200ResponseAddressStreetMax = 200;
export const updateClientContacts200ResponseAddressCityMin = 0;

export const updateClientContacts200ResponseAddressCityMax = 100;
export const updateClientContacts200ResponseAddressRegionMin = 0;

export const updateClientContacts200ResponseAddressRegionMax = 100;
export const updateClientContacts200ResponseAddressPostalCodeMin = 0;

export const updateClientContacts200ResponseAddressPostalCodeMax = 10;
export const updateClientContacts200ResponseAddressCountryMin = 0;

export const updateClientContacts200ResponseAddressCountryMax = 100;


export const updateClientContacts200Response = zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "phone": zod.coerce.string().regex(updateClientContacts200ResponsePhoneRegExp).optional().describe('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "email": zod.coerce.string().min(updateClientContacts200ResponseEmailMin).max(updateClientContacts200ResponseEmailMax).optional().describe('Email –∞–¥—Ä–µ—Å–∞'),
  "communicationMethods": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER', 'TELEGRAM', 'EMAIL'])).optional(),
  "address": zod.object({
  "street": zod.coerce.string().min(updateClientContacts200ResponseAddressStreetMin).max(updateClientContacts200ResponseAddressStreetMax).optional().describe('–í—É–ª–∏—Ü—è —Ç–∞ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É'),
  "city": zod.coerce.string().min(updateClientContacts200ResponseAddressCityMin).max(updateClientContacts200ResponseAddressCityMax).optional().describe('–ú—ñ—Å—Ç–æ'),
  "region": zod.coerce.string().min(updateClientContacts200ResponseAddressRegionMin).max(updateClientContacts200ResponseAddressRegionMax).optional().describe('–û–±–ª–∞—Å—Ç—å/—Ä–µ–≥—ñ–æ–Ω'),
  "postalCode": zod.coerce.string().min(updateClientContacts200ResponseAddressPostalCodeMin).max(updateClientContacts200ResponseAddressPostalCodeMax).optional().describe('–ü–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å'),
  "country": zod.coerce.string().min(updateClientContacts200ResponseAddressCountryMin).max(updateClientContacts200ResponseAddressCountryMax).optional().describe('–ö—Ä–∞—ó–Ω–∞')
}).strict().optional()
}).strict()

export const updateClientContacts400Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥ (400)'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–ó–∞–≥–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "errors": zod.array(zod.object({
  "field": zod.coerce.string().describe('–ù–∞–∑–≤–∞ –ø–æ–ª—è –∑ –ø–æ–º–∏–ª–∫–æ—é'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "rejectedValue": zod.object({
  "present": zod.coerce.boolean().optional()
}).strict().optional(),
  "code": zod.coerce.string().optional().describe('–ö–æ–¥ –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó')
}).strict()).describe('–°–ø–∏—Å–æ–∫ –ø–æ–º–∏–ª–æ–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø–æ–ª—ñ–≤')
}).strict()

export const updateClientContacts404Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "traceId": zod.coerce.string().optional().describe('–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏')
}).strict()


/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤
 */
export const getClientsQueryPageDefault = 0;
export const getClientsQueryPageMin = 0;
export const getClientsQuerySizeDefault = 20;
export const getClientsQuerySizeMax = 100;
export const getClientsQuerySortDefault = "lastName";

export const getClientsQueryParams = zod.object({
  "page": zod.coerce.number().min(getClientsQueryPageMin).optional().describe('–ù–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (–ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 0)'),
  "size": zod.coerce.number().min(1).max(getClientsQuerySizeMax).default(getClientsQuerySizeDefault).describe('–†–æ–∑–º—ñ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏'),
  "sort": zod.coerce.string().default(getClientsQuerySortDefault).describe('–ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è')
}).strict()

export const getClients200ResponseContentItemPhoneRegExp = new RegExp('^\\+380\\d{9}$');
export const getClients200ResponseContentItemEmailMin = 3;

export const getClients200ResponseContentItemEmailMax = 254;
export const getClients200ResponseContentItemAddressStreetMin = 0;

export const getClients200ResponseContentItemAddressStreetMax = 200;
export const getClients200ResponseContentItemAddressCityMin = 0;

export const getClients200ResponseContentItemAddressCityMax = 100;
export const getClients200ResponseContentItemAddressRegionMin = 0;

export const getClients200ResponseContentItemAddressRegionMax = 100;
export const getClients200ResponseContentItemAddressPostalCodeMin = 0;

export const getClients200ResponseContentItemAddressPostalCodeMax = 10;
export const getClients200ResponseContentItemAddressCountryMin = 0;

export const getClients200ResponseContentItemAddressCountryMax = 100;
export const getClients200ResponseContentItemStatisticsTotalSpentMin = 0;
export const getClients200ResponseContentItemStatisticsAverageOrderValueMin = 0;
export const getClients200ResponsePageablePageMin = 0;


export const getClients200Response = zod.object({
  "content": zod.array(zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "firstName": zod.coerce.string().describe('–Ü–º\'—è –∫–ª—ñ—î–Ω—Ç–∞'),
  "lastName": zod.coerce.string().describe('–ü—Ä—ñ–∑–≤–∏—â–µ –∫–ª—ñ—î–Ω—Ç–∞'),
  "fullName": zod.coerce.string().optional().describe('–ü–æ–≤–Ω–µ —ñ–º\'—è (firstName + lastName)'),
  "phone": zod.coerce.string().regex(getClients200ResponseContentItemPhoneRegExp).describe('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "email": zod.coerce.string().min(getClients200ResponseContentItemEmailMin).max(getClients200ResponseContentItemEmailMax).optional().describe('Email –∞–¥—Ä–µ—Å–∞'),
  "address": zod.object({
  "street": zod.coerce.string().min(getClients200ResponseContentItemAddressStreetMin).max(getClients200ResponseContentItemAddressStreetMax).optional().describe('–í—É–ª–∏—Ü—è —Ç–∞ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É'),
  "city": zod.coerce.string().min(getClients200ResponseContentItemAddressCityMin).max(getClients200ResponseContentItemAddressCityMax).optional().describe('–ú—ñ—Å—Ç–æ'),
  "region": zod.coerce.string().min(getClients200ResponseContentItemAddressRegionMin).max(getClients200ResponseContentItemAddressRegionMax).optional().describe('–û–±–ª–∞—Å—Ç—å/—Ä–µ–≥—ñ–æ–Ω'),
  "postalCode": zod.coerce.string().min(getClients200ResponseContentItemAddressPostalCodeMin).max(getClients200ResponseContentItemAddressPostalCodeMax).optional().describe('–ü–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å'),
  "country": zod.coerce.string().min(getClients200ResponseContentItemAddressCountryMin).max(getClients200ResponseContentItemAddressCountryMax).optional().describe('–ö—Ä–∞—ó–Ω–∞')
}).strict().optional(),
  "communicationMethods": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER', 'TELEGRAM', 'EMAIL'])).optional(),
  "sourceType": zod.enum(['REFERRAL', 'ADVERTISING', 'SOCIAL_MEDIA', 'WEBSITE', 'WALKING_BY', 'REPEAT_CUSTOMER', 'OTHER']).optional(),
  "notes": zod.coerce.string().optional().describe('–ü—Ä–∏–º—ñ—Ç–∫–∏'),
  "statistics": zod.object({
  "totalOrders": zod.coerce.number().optional().describe('–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å'),
  "totalSpent": zod.coerce.number().min(getClients200ResponseContentItemStatisticsTotalSpentMin).optional().describe('–ì—Ä–æ—à–æ–≤–∞ —Å—É–º–∞ (–≤ –≥—Ä–∏–≤–Ω—è—Ö)'),
  "lastOrderDate": zod.coerce.string().date().optional().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "averageOrderValue": zod.coerce.number().min(getClients200ResponseContentItemStatisticsAverageOrderValueMin).optional().describe('–ì—Ä–æ—à–æ–≤–∞ —Å—É–º–∞ (–≤ –≥—Ä–∏–≤–Ω—è—Ö)'),
  "isVip": zod.coerce.boolean().optional().describe('–ß–∏ —î –∫–ª—ñ—î–Ω—Ç VIP'),
  "registrationDate": zod.coerce.string().date().optional().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ')
}).strict().optional(),
  "createdAt": zod.coerce.string().datetime({}).describe('–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è'),
  "updatedAt": zod.coerce.string().datetime({}).optional().describe('–î–∞—Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è')
}).strict()),
  "pageable": zod.object({
  "page": zod.coerce.number().min(getClients200ResponsePageablePageMin).describe('–ù–æ–º–µ—Ä –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (–ø–æ—á–∏–Ω–∞—é—á–∏ –∑ 0)'),
  "size": zod.coerce.number().min(1).describe('–†–æ–∑–º—ñ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏'),
  "totalElements": zod.coerce.number().describe('–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤'),
  "totalPages": zod.coerce.number().describe('–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫'),
  "last": zod.coerce.boolean().describe('–ß–∏ —î –ø–æ—Ç–æ—á–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ—é'),
  "first": zod.coerce.boolean().describe('–ß–∏ —î –ø–æ—Ç–æ—á–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–µ—Ä—à–æ—é'),
  "numberOfElements": zod.coerce.number().describe('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ'),
  "sort": zod.object({
  "sorted": zod.coerce.boolean().optional().describe('–ß–∏ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è'),
  "unsorted": zod.coerce.boolean().optional().describe('–ß–∏ –Ω–µ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è'),
  "empty": zod.coerce.boolean().optional().describe('–ß–∏ –≤—ñ–¥—Å—É—Ç–Ω—î —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è')
}).strict().optional().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è')
}).strict(),
  "totalElements": zod.coerce.number().describe('–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤'),
  "totalPages": zod.coerce.number().describe('–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫'),
  "last": zod.coerce.boolean().describe('–ß–∏ —Ü–µ –æ—Å—Ç–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞'),
  "first": zod.coerce.boolean().describe('–ß–∏ —Ü–µ –ø–µ—Ä—à–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞'),
  "numberOfElements": zod.coerce.number().describe('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ')
}).strict()

export const getClients400Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "traceId": zod.coerce.string().optional().describe('–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏')
}).strict()


/**
 * –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ —Ö—ñ–º—á–∏—Å—Ç–∫–∏
 * @summary –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
 */
export const createClientBodyFirstNameMin = 2;

export const createClientBodyFirstNameMax = 50;
export const createClientBodyLastNameMin = 2;

export const createClientBodyLastNameMax = 50;
export const createClientBodyPhoneRegExp = new RegExp('^\\+380\\d{9}$');
export const createClientBodyEmailMin = 3;

export const createClientBodyEmailMax = 254;
export const createClientBodyAddressStreetMin = 0;

export const createClientBodyAddressStreetMax = 200;
export const createClientBodyAddressCityMin = 0;

export const createClientBodyAddressCityMax = 100;
export const createClientBodyAddressRegionMin = 0;

export const createClientBodyAddressRegionMax = 100;
export const createClientBodyAddressPostalCodeMin = 0;

export const createClientBodyAddressPostalCodeMax = 10;
export const createClientBodyAddressCountryMin = 0;

export const createClientBodyAddressCountryMax = 100;
export const createClientBodyCommunicationMethodsMax = 2147483647;
export const createClientBodyNotesMin = 0;

export const createClientBodyNotesMax = 500;


export const createClientBody = zod.object({
  "firstName": zod.coerce.string().min(createClientBodyFirstNameMin).max(createClientBodyFirstNameMax).describe('–Ü–º\'—è –∫–ª—ñ—î–Ω—Ç–∞'),
  "lastName": zod.coerce.string().min(createClientBodyLastNameMin).max(createClientBodyLastNameMax).describe('–ü—Ä—ñ–∑–≤–∏—â–µ –∫–ª—ñ—î–Ω—Ç–∞'),
  "phone": zod.coerce.string().regex(createClientBodyPhoneRegExp).describe('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "email": zod.coerce.string().min(createClientBodyEmailMin).max(createClientBodyEmailMax).optional().describe('Email –∞–¥—Ä–µ—Å–∞'),
  "address": zod.object({
  "street": zod.coerce.string().min(createClientBodyAddressStreetMin).max(createClientBodyAddressStreetMax).optional().describe('–í—É–ª–∏—Ü—è —Ç–∞ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É'),
  "city": zod.coerce.string().min(createClientBodyAddressCityMin).max(createClientBodyAddressCityMax).optional().describe('–ú—ñ—Å—Ç–æ'),
  "region": zod.coerce.string().min(createClientBodyAddressRegionMin).max(createClientBodyAddressRegionMax).optional().describe('–û–±–ª–∞—Å—Ç—å/—Ä–µ–≥—ñ–æ–Ω'),
  "postalCode": zod.coerce.string().min(createClientBodyAddressPostalCodeMin).max(createClientBodyAddressPostalCodeMax).optional().describe('–ü–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å'),
  "country": zod.coerce.string().min(createClientBodyAddressCountryMin).max(createClientBodyAddressCountryMax).optional().describe('–ö—Ä–∞—ó–Ω–∞')
}).strict().optional(),
  "communicationMethods": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER', 'TELEGRAM', 'EMAIL'])).min(1).max(createClientBodyCommunicationMethodsMax).describe('–ë–∞–∂–∞–Ω—ñ —Å–ø–æ—Å–æ–±–∏ –∑–≤\'—è–∑–∫—É (–º—ñ–Ω—ñ–º—É–º –æ–¥–∏–Ω)'),
  "sourceType": zod.enum(['REFERRAL', 'ADVERTISING', 'SOCIAL_MEDIA', 'WEBSITE', 'WALKING_BY', 'REPEAT_CUSTOMER', 'OTHER']).optional(),
  "notes": zod.coerce.string().min(createClientBodyNotesMin).max(createClientBodyNotesMax).optional().describe('–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø—Ä–∏–º—ñ—Ç–∫–∏ –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞')
}).strict()

export const createClient201ResponsePhoneRegExp = new RegExp('^\\+380\\d{9}$');
export const createClient201ResponseEmailMin = 3;

export const createClient201ResponseEmailMax = 254;
export const createClient201ResponseAddressStreetMin = 0;

export const createClient201ResponseAddressStreetMax = 200;
export const createClient201ResponseAddressCityMin = 0;

export const createClient201ResponseAddressCityMax = 100;
export const createClient201ResponseAddressRegionMin = 0;

export const createClient201ResponseAddressRegionMax = 100;
export const createClient201ResponseAddressPostalCodeMin = 0;

export const createClient201ResponseAddressPostalCodeMax = 10;
export const createClient201ResponseAddressCountryMin = 0;

export const createClient201ResponseAddressCountryMax = 100;
export const createClient201ResponseStatisticsTotalSpentMin = 0;
export const createClient201ResponseStatisticsAverageOrderValueMin = 0;


export const createClient201Response = zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "firstName": zod.coerce.string().describe('–Ü–º\'—è –∫–ª—ñ—î–Ω—Ç–∞'),
  "lastName": zod.coerce.string().describe('–ü—Ä—ñ–∑–≤–∏—â–µ –∫–ª—ñ—î–Ω—Ç–∞'),
  "fullName": zod.coerce.string().optional().describe('–ü–æ–≤–Ω–µ —ñ–º\'—è (firstName + lastName)'),
  "phone": zod.coerce.string().regex(createClient201ResponsePhoneRegExp).describe('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "email": zod.coerce.string().min(createClient201ResponseEmailMin).max(createClient201ResponseEmailMax).optional().describe('Email –∞–¥—Ä–µ—Å–∞'),
  "address": zod.object({
  "street": zod.coerce.string().min(createClient201ResponseAddressStreetMin).max(createClient201ResponseAddressStreetMax).optional().describe('–í—É–ª–∏—Ü—è —Ç–∞ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É'),
  "city": zod.coerce.string().min(createClient201ResponseAddressCityMin).max(createClient201ResponseAddressCityMax).optional().describe('–ú—ñ—Å—Ç–æ'),
  "region": zod.coerce.string().min(createClient201ResponseAddressRegionMin).max(createClient201ResponseAddressRegionMax).optional().describe('–û–±–ª–∞—Å—Ç—å/—Ä–µ–≥—ñ–æ–Ω'),
  "postalCode": zod.coerce.string().min(createClient201ResponseAddressPostalCodeMin).max(createClient201ResponseAddressPostalCodeMax).optional().describe('–ü–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å'),
  "country": zod.coerce.string().min(createClient201ResponseAddressCountryMin).max(createClient201ResponseAddressCountryMax).optional().describe('–ö—Ä–∞—ó–Ω–∞')
}).strict().optional(),
  "communicationMethods": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER', 'TELEGRAM', 'EMAIL'])).optional(),
  "sourceType": zod.enum(['REFERRAL', 'ADVERTISING', 'SOCIAL_MEDIA', 'WEBSITE', 'WALKING_BY', 'REPEAT_CUSTOMER', 'OTHER']).optional(),
  "notes": zod.coerce.string().optional().describe('–ü—Ä–∏–º—ñ—Ç–∫–∏'),
  "statistics": zod.object({
  "totalOrders": zod.coerce.number().optional().describe('–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å'),
  "totalSpent": zod.coerce.number().min(createClient201ResponseStatisticsTotalSpentMin).optional().describe('–ì—Ä–æ—à–æ–≤–∞ —Å—É–º–∞ (–≤ –≥—Ä–∏–≤–Ω—è—Ö)'),
  "lastOrderDate": zod.coerce.string().date().optional().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "averageOrderValue": zod.coerce.number().min(createClient201ResponseStatisticsAverageOrderValueMin).optional().describe('–ì—Ä–æ—à–æ–≤–∞ —Å—É–º–∞ (–≤ –≥—Ä–∏–≤–Ω—è—Ö)'),
  "isVip": zod.coerce.boolean().optional().describe('–ß–∏ —î –∫–ª—ñ—î–Ω—Ç VIP'),
  "registrationDate": zod.coerce.string().date().optional().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ')
}).strict().optional(),
  "createdAt": zod.coerce.string().datetime({}).describe('–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è'),
  "updatedAt": zod.coerce.string().datetime({}).optional().describe('–î–∞—Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è')
}).strict()

export const createClient400Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥ (400)'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–ó–∞–≥–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "errors": zod.array(zod.object({
  "field": zod.coerce.string().describe('–ù–∞–∑–≤–∞ –ø–æ–ª—è –∑ –ø–æ–º–∏–ª–∫–æ—é'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "rejectedValue": zod.object({
  "present": zod.coerce.boolean().optional()
}).strict().optional(),
  "code": zod.coerce.string().optional().describe('–ö–æ–¥ –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó')
}).strict()).describe('–°–ø–∏—Å–æ–∫ –ø–æ–º–∏–ª–æ–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø–æ–ª—ñ–≤')
}).strict()

export const createClient409Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "traceId": zod.coerce.string().optional().describe('–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏')
}).strict()


/**
 * –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è–º
 * @summary –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤
 */
export const advancedSearchClientsBodyQueryMin = 2;

export const advancedSearchClientsBodyQueryMax = 100;
export const advancedSearchClientsBodyFirstNameMin = 0;

export const advancedSearchClientsBodyFirstNameMax = 50;
export const advancedSearchClientsBodyLastNameMin = 0;

export const advancedSearchClientsBodyLastNameMax = 50;
export const advancedSearchClientsBodyCityMin = 0;

export const advancedSearchClientsBodyCityMax = 100;
export const advancedSearchClientsBodyPageMin = 0;
export const advancedSearchClientsBodySizeMax = 100;


export const advancedSearchClientsBody = zod.object({
  "query": zod.coerce.string().min(advancedSearchClientsBodyQueryMin).max(advancedSearchClientsBodyQueryMax).optional().describe('–ó–∞–≥–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç'),
  "firstName": zod.coerce.string().min(advancedSearchClientsBodyFirstNameMin).max(advancedSearchClientsBodyFirstNameMax).optional().describe('–§—ñ–ª—å—Ç—Ä –∑–∞ —ñ–º\'—è–º'),
  "lastName": zod.coerce.string().min(advancedSearchClientsBodyLastNameMin).max(advancedSearchClientsBodyLastNameMax).optional().describe('–§—ñ–ª—å—Ç—Ä –∑–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º'),
  "phone": zod.coerce.string().optional().describe('–§—ñ–ª—å—Ç—Ä –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º'),
  "email": zod.coerce.string().optional().describe('–§—ñ–ª—å—Ç—Ä –∑–∞ email'),
  "city": zod.coerce.string().min(advancedSearchClientsBodyCityMin).max(advancedSearchClientsBodyCityMax).optional().describe('–§—ñ–ª—å—Ç—Ä –∑–∞ –º—ñ—Å—Ç–æ–º'),
  "sourceType": zod.enum(['REFERRAL', 'ADVERTISING', 'SOCIAL_MEDIA', 'WEBSITE', 'WALKING_BY', 'REPEAT_CUSTOMER', 'OTHER']).optional(),
  "communicationMethods": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER', 'TELEGRAM', 'EMAIL'])).optional(),
  "registrationDateFrom": zod.coerce.string().date().optional().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "registrationDateTo": zod.coerce.string().date().optional().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "isVip": zod.coerce.boolean().optional().describe('–§—ñ–ª—å—Ç—Ä VIP –∫–ª—ñ—î–Ω—Ç—ñ–≤'),
  "page": zod.coerce.number().min(advancedSearchClientsBodyPageMin).optional().describe('–ù–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏'),
  "size": zod.coerce.number().min(1).max(advancedSearchClientsBodySizeMax).optional().describe('–†–æ–∑–º—ñ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏'),
  "sort": zod.enum(['firstName', 'lastName', 'phone', 'createdAt', 'totalOrders', 'totalSpent']).optional()
}).strict().describe('–ó–∞–ø–∏—Ç –Ω–∞ –ø–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ (—Ö–æ—á–∞ –± –æ–¥–∏–Ω –ø–æ—à—É–∫–æ–≤–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π)')

export const advancedSearchClients200ResponseContentItemPhoneRegExp = new RegExp('^\\+380\\d{9}$');
export const advancedSearchClients200ResponseContentItemEmailMin = 3;

export const advancedSearchClients200ResponseContentItemEmailMax = 254;
export const advancedSearchClients200ResponseContentItemAddressStreetMin = 0;

export const advancedSearchClients200ResponseContentItemAddressStreetMax = 200;
export const advancedSearchClients200ResponseContentItemAddressCityMin = 0;

export const advancedSearchClients200ResponseContentItemAddressCityMax = 100;
export const advancedSearchClients200ResponseContentItemAddressRegionMin = 0;

export const advancedSearchClients200ResponseContentItemAddressRegionMax = 100;
export const advancedSearchClients200ResponseContentItemAddressPostalCodeMin = 0;

export const advancedSearchClients200ResponseContentItemAddressPostalCodeMax = 10;
export const advancedSearchClients200ResponseContentItemAddressCountryMin = 0;

export const advancedSearchClients200ResponseContentItemAddressCountryMax = 100;
export const advancedSearchClients200ResponseContentItemStatisticsTotalSpentMin = 0;
export const advancedSearchClients200ResponseContentItemStatisticsAverageOrderValueMin = 0;
export const advancedSearchClients200ResponsePageablePageMin = 0;


export const advancedSearchClients200Response = zod.object({
  "content": zod.array(zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "firstName": zod.coerce.string().describe('–Ü–º\'—è –∫–ª—ñ—î–Ω—Ç–∞'),
  "lastName": zod.coerce.string().describe('–ü—Ä—ñ–∑–≤–∏—â–µ –∫–ª—ñ—î–Ω—Ç–∞'),
  "fullName": zod.coerce.string().optional().describe('–ü–æ–≤–Ω–µ —ñ–º\'—è (firstName + lastName)'),
  "phone": zod.coerce.string().regex(advancedSearchClients200ResponseContentItemPhoneRegExp).describe('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "email": zod.coerce.string().min(advancedSearchClients200ResponseContentItemEmailMin).max(advancedSearchClients200ResponseContentItemEmailMax).optional().describe('Email –∞–¥—Ä–µ—Å–∞'),
  "address": zod.object({
  "street": zod.coerce.string().min(advancedSearchClients200ResponseContentItemAddressStreetMin).max(advancedSearchClients200ResponseContentItemAddressStreetMax).optional().describe('–í—É–ª–∏—Ü—è —Ç–∞ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É'),
  "city": zod.coerce.string().min(advancedSearchClients200ResponseContentItemAddressCityMin).max(advancedSearchClients200ResponseContentItemAddressCityMax).optional().describe('–ú—ñ—Å—Ç–æ'),
  "region": zod.coerce.string().min(advancedSearchClients200ResponseContentItemAddressRegionMin).max(advancedSearchClients200ResponseContentItemAddressRegionMax).optional().describe('–û–±–ª–∞—Å—Ç—å/—Ä–µ–≥—ñ–æ–Ω'),
  "postalCode": zod.coerce.string().min(advancedSearchClients200ResponseContentItemAddressPostalCodeMin).max(advancedSearchClients200ResponseContentItemAddressPostalCodeMax).optional().describe('–ü–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å'),
  "country": zod.coerce.string().min(advancedSearchClients200ResponseContentItemAddressCountryMin).max(advancedSearchClients200ResponseContentItemAddressCountryMax).optional().describe('–ö—Ä–∞—ó–Ω–∞')
}).strict().optional(),
  "communicationMethods": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER', 'TELEGRAM', 'EMAIL'])).optional(),
  "sourceType": zod.enum(['REFERRAL', 'ADVERTISING', 'SOCIAL_MEDIA', 'WEBSITE', 'WALKING_BY', 'REPEAT_CUSTOMER', 'OTHER']).optional(),
  "notes": zod.coerce.string().optional().describe('–ü—Ä–∏–º—ñ—Ç–∫–∏'),
  "statistics": zod.object({
  "totalOrders": zod.coerce.number().optional().describe('–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å'),
  "totalSpent": zod.coerce.number().min(advancedSearchClients200ResponseContentItemStatisticsTotalSpentMin).optional().describe('–ì—Ä–æ—à–æ–≤–∞ —Å—É–º–∞ (–≤ –≥—Ä–∏–≤–Ω—è—Ö)'),
  "lastOrderDate": zod.coerce.string().date().optional().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "averageOrderValue": zod.coerce.number().min(advancedSearchClients200ResponseContentItemStatisticsAverageOrderValueMin).optional().describe('–ì—Ä–æ—à–æ–≤–∞ —Å—É–º–∞ (–≤ –≥—Ä–∏–≤–Ω—è—Ö)'),
  "isVip": zod.coerce.boolean().optional().describe('–ß–∏ —î –∫–ª—ñ—î–Ω—Ç VIP'),
  "registrationDate": zod.coerce.string().date().optional().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ')
}).strict().optional(),
  "createdAt": zod.coerce.string().datetime({}).describe('–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è'),
  "updatedAt": zod.coerce.string().datetime({}).optional().describe('–î–∞—Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è')
}).strict()),
  "pageable": zod.object({
  "page": zod.coerce.number().min(advancedSearchClients200ResponsePageablePageMin).describe('–ù–æ–º–µ—Ä –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (–ø–æ—á–∏–Ω–∞—é—á–∏ –∑ 0)'),
  "size": zod.coerce.number().min(1).describe('–†–æ–∑–º—ñ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏'),
  "totalElements": zod.coerce.number().describe('–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤'),
  "totalPages": zod.coerce.number().describe('–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫'),
  "last": zod.coerce.boolean().describe('–ß–∏ —î –ø–æ—Ç–æ—á–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ—é'),
  "first": zod.coerce.boolean().describe('–ß–∏ —î –ø–æ—Ç–æ—á–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–µ—Ä—à–æ—é'),
  "numberOfElements": zod.coerce.number().describe('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ'),
  "sort": zod.object({
  "sorted": zod.coerce.boolean().optional().describe('–ß–∏ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è'),
  "unsorted": zod.coerce.boolean().optional().describe('–ß–∏ –Ω–µ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è'),
  "empty": zod.coerce.boolean().optional().describe('–ß–∏ –≤—ñ–¥—Å—É—Ç–Ω—î —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è')
}).strict().optional().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è')
}).strict(),
  "totalElements": zod.coerce.number().describe('–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤'),
  "totalPages": zod.coerce.number().describe('–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫'),
  "last": zod.coerce.boolean().describe('–ß–∏ —Ü–µ –æ—Å—Ç–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞'),
  "first": zod.coerce.boolean().describe('–ß–∏ —Ü–µ –ø–µ—Ä—à–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞'),
  "numberOfElements": zod.coerce.number().describe('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ')
}).strict()

export const advancedSearchClients400Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥ (400)'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–ó–∞–≥–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "errors": zod.array(zod.object({
  "field": zod.coerce.string().describe('–ù–∞–∑–≤–∞ –ø–æ–ª—è –∑ –ø–æ–º–∏–ª–∫–æ—é'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "rejectedValue": zod.object({
  "present": zod.coerce.boolean().optional()
}).strict().optional(),
  "code": zod.coerce.string().optional().describe('–ö–æ–¥ –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó')
}).strict()).describe('–°–ø–∏—Å–æ–∫ –ø–æ–º–∏–ª–æ–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø–æ–ª—ñ–≤')
}).strict()


/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–º–æ–≤–ª–µ–Ω—å —Ç–∞ –≤–∏—Ç—Ä–∞—Ç –∫–ª—ñ—î–Ω—Ç–∞
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª—ñ—î–Ω—Ç–∞
 */
export const getClientStatisticsParams = zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID)')
}).strict()

export const getClientStatistics200ResponseTotalSpentMin = 0;
export const getClientStatistics200ResponseAverageOrderValueMin = 0;


export const getClientStatistics200Response = zod.object({
  "totalOrders": zod.coerce.number().optional().describe('–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å'),
  "totalSpent": zod.coerce.number().min(getClientStatistics200ResponseTotalSpentMin).optional().describe('–ì—Ä–æ—à–æ–≤–∞ —Å—É–º–∞ (–≤ –≥—Ä–∏–≤–Ω—è—Ö)'),
  "lastOrderDate": zod.coerce.string().date().optional().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "averageOrderValue": zod.coerce.number().min(getClientStatistics200ResponseAverageOrderValueMin).optional().describe('–ì—Ä–æ—à–æ–≤–∞ —Å—É–º–∞ (–≤ –≥—Ä–∏–≤–Ω—è—Ö)'),
  "isVip": zod.coerce.boolean().optional().describe('–ß–∏ —î –∫–ª—ñ—î–Ω—Ç VIP'),
  "registrationDate": zod.coerce.string().date().optional().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ')
}).strict()

export const getClientStatistics404Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "traceId": zod.coerce.string().optional().describe('–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏')
}).strict()


/**
 * –®–≤–∏–¥–∫–∏–π –ø–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ —Ä—ñ–∑–Ω–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏ –∑ –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è–º
 * @summary –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤
 */
export const searchClientsQueryQueryMin = 2;

export const searchClientsQueryQueryMax = 100;
export const searchClientsQueryLimitDefault = 10;
export const searchClientsQueryLimitMax = 50;


export const searchClientsQueryParams = zod.object({
  "query": zod.coerce.string().min(searchClientsQueryQueryMin).max(searchClientsQueryQueryMax).describe('–ü–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç (—ñ–º\'—è, –ø—Ä—ñ–∑–≤–∏—â–µ, —Ç–µ–ª–µ—Ñ–æ–Ω, email)'),
  "limit": zod.coerce.number().min(1).max(searchClientsQueryLimitMax).default(searchClientsQueryLimitDefault).describe('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ (–¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è)')
}).strict()

export const searchClients200ResponseResultsItemPhoneRegExp = new RegExp('^\\+380\\d{9}$');
export const searchClients200ResponseResultsItemEmailMin = 3;

export const searchClients200ResponseResultsItemEmailMax = 254;


export const searchClients200Response = zod.object({
  "results": zod.array(zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "firstName": zod.coerce.string(),
  "lastName": zod.coerce.string(),
  "fullName": zod.coerce.string().optional(),
  "phone": zod.coerce.string().regex(searchClients200ResponseResultsItemPhoneRegExp).describe('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "email": zod.coerce.string().min(searchClients200ResponseResultsItemEmailMin).max(searchClients200ResponseResultsItemEmailMax).optional().describe('Email –∞–¥—Ä–µ—Å–∞'),
  "lastOrderDate": zod.coerce.string().date().optional().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "orderCount": zod.coerce.number().optional().describe('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å'),
  "highlightedFields": zod.array(zod.coerce.string()).optional().describe('–ü–æ–ª—è, —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –ø–æ—à—É–∫–æ–≤–æ–º—É –∑–∞–ø–∏—Ç—É')
}).strict()),
  "totalFound": zod.coerce.number().describe('–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤'),
  "hasMore": zod.coerce.boolean().describe('–ß–∏ —î —â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏')
}).strict()

export const searchClients400Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "traceId": zod.coerce.string().optional().describe('–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏')
}).strict()
