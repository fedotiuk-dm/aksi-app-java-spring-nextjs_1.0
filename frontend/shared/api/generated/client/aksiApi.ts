/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * AKSI API
 * API –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–ª—ñ–Ω—ñ–Ω–≥–æ–≤–æ—é –∫–æ–º–ø–∞–Ω—ñ—î—é AKSI
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ClientPageResponse,
  ClientResponse,
  ClientSearchRequest,
  CreateClientRequest,
  CustomerSignatureRequest,
  CustomerSignatureResponse,
  DeleteClient204,
  ErrorResponse,
  GetAllClientsParams,
  SearchClientsParams,
  UpdateClientRequest
} from './aksiApi.schemas';

import orvalFetcher from '../../../../lib/api/orval-fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ –π–æ–≥–æ ID
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ ID
 */
export const getClientById = (
    id: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<ClientResponse>(
      {url: `/clients/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetClientByIdQueryKey = (id: string,) => {
    return [`/clients/${id}`] as const;
    }

    
export const getGetClientByIdQueryOptions = <TData = Awaited<ReturnType<typeof getClientById>>, TError = ErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClientById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClientByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClientById>>> = ({ signal }) => getClientById(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClientById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetClientByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getClientById>>>
export type GetClientByIdQueryError = ErrorResponse


export function useGetClientById<TData = Awaited<ReturnType<typeof getClientById>>, TError = ErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClientById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClientById>>,
          TError,
          Awaited<ReturnType<typeof getClientById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetClientById<TData = Awaited<ReturnType<typeof getClientById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClientById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClientById>>,
          TError,
          Awaited<ReturnType<typeof getClientById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetClientById<TData = Awaited<ReturnType<typeof getClientById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClientById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ ID
 */

export function useGetClientById<TData = Awaited<ReturnType<typeof getClientById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClientById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetClientByIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –û–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
 * @summary –û–Ω–æ–≤–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞
 */
export const updateClient = (
    id: string,
    updateClientRequest: UpdateClientRequest,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<ClientResponse>(
      {url: `/clients/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateClientRequest
    },
      options);
    }
  


export const getUpdateClientMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateClient>>, TError,{id: string;data: UpdateClientRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof updateClient>>, TError,{id: string;data: UpdateClientRequest}, TContext> => {

const mutationKey = ['updateClient'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateClient>>, {id: string;data: UpdateClientRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updateClient(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateClientMutationResult = NonNullable<Awaited<ReturnType<typeof updateClient>>>
    export type UpdateClientMutationBody = UpdateClientRequest
    export type UpdateClientMutationError = ErrorResponse

    /**
 * @summary –û–Ω–æ–≤–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞
 */
export const useUpdateClient = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateClient>>, TError,{id: string;data: UpdateClientRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateClient>>,
        TError,
        {id: string;data: UpdateClientRequest},
        TContext
      > => {

      const mutationOptions = getUpdateClientMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –í–∏–¥–∞–ª—è—î –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ –π–æ–≥–æ ID
 * @summary –í–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞
 */
export const deleteClient = (
    id: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<DeleteClient204>(
      {url: `/clients/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteClientMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteClient>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteClient>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteClient'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteClient>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteClient(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteClientMutationResult = NonNullable<Awaited<ReturnType<typeof deleteClient>>>
    
    export type DeleteClientMutationError = ErrorResponse

    /**
 * @summary –í–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞
 */
export const useDeleteClient = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteClient>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteClient>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteClientMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ó–±–µ—Ä—ñ–≥–∞—î –Ω–æ–≤–∏–π –∞–±–æ –æ–Ω–æ–≤–ª—é—î —ñ—Å–Ω—É—é—á–∏–π –ø—ñ–¥–ø–∏—Å –∫–ª—ñ—î–Ω—Ç–∞
 * @summary –ó–±–µ—Ä–µ–≥—Ç–∏ –ø—ñ–¥–ø–∏—Å –∫–ª—ñ—î–Ω—Ç–∞
 */
export const saveSignature = (
    customerSignatureRequest: CustomerSignatureRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<CustomerSignatureResponse>(
      {url: `/signatures`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: customerSignatureRequest, signal
    },
      options);
    }
  


export const getSaveSignatureMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveSignature>>, TError,{data: CustomerSignatureRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof saveSignature>>, TError,{data: CustomerSignatureRequest}, TContext> => {

const mutationKey = ['saveSignature'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof saveSignature>>, {data: CustomerSignatureRequest}> = (props) => {
          const {data} = props ?? {};

          return  saveSignature(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SaveSignatureMutationResult = NonNullable<Awaited<ReturnType<typeof saveSignature>>>
    export type SaveSignatureMutationBody = CustomerSignatureRequest
    export type SaveSignatureMutationError = ErrorResponse

    /**
 * @summary –ó–±–µ—Ä–µ–≥—Ç–∏ –ø—ñ–¥–ø–∏—Å –∫–ª—ñ—î–Ω—Ç–∞
 */
export const useSaveSignature = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveSignature>>, TError,{data: CustomerSignatureRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof saveSignature>>,
        TError,
        {data: CustomerSignatureRequest},
        TContext
      > => {

      const mutationOptions = getSaveSignatureMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
 */
export const getAllClients = (
    params?: GetAllClientsParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<ClientResponse>(
      {url: `/clients`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllClientsQueryKey = (params?: GetAllClientsParams,) => {
    return [`/clients`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllClientsQueryOptions = <TData = Awaited<ReturnType<typeof getAllClients>>, TError = ErrorResponse>(params?: GetAllClientsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllClients>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllClientsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllClients>>> = ({ signal }) => getAllClients(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllClients>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllClientsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllClients>>>
export type GetAllClientsQueryError = ErrorResponse


export function useGetAllClients<TData = Awaited<ReturnType<typeof getAllClients>>, TError = ErrorResponse>(
 params: undefined |  GetAllClientsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllClients>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllClients>>,
          TError,
          Awaited<ReturnType<typeof getAllClients>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllClients<TData = Awaited<ReturnType<typeof getAllClients>>, TError = ErrorResponse>(
 params?: GetAllClientsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllClients>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllClients>>,
          TError,
          Awaited<ReturnType<typeof getAllClients>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllClients<TData = Awaited<ReturnType<typeof getAllClients>>, TError = ErrorResponse>(
 params?: GetAllClientsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllClients>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
 */

export function useGetAllClients<TData = Awaited<ReturnType<typeof getAllClients>>, TError = ErrorResponse>(
 params?: GetAllClientsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllClients>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllClientsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –∑ –Ω–∞–¥–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
 * @summary –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
 */
export const createClient = (
    createClientRequest: CreateClientRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<ClientResponse>(
      {url: `/clients`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createClientRequest, signal
    },
      options);
    }
  


export const getCreateClientMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createClient>>, TError,{data: CreateClientRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof createClient>>, TError,{data: CreateClientRequest}, TContext> => {

const mutationKey = ['createClient'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createClient>>, {data: CreateClientRequest}> = (props) => {
          const {data} = props ?? {};

          return  createClient(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateClientMutationResult = NonNullable<Awaited<ReturnType<typeof createClient>>>
    export type CreateClientMutationBody = CreateClientRequest
    export type CreateClientMutationError = ErrorResponse

    /**
 * @summary –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
 */
export const useCreateClient = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createClient>>, TError,{data: CreateClientRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createClient>>,
        TError,
        {data: CreateClientRequest},
        TContext
      > => {

      const mutationOptions = getCreateClientMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ –∑–∞–ø–∏—Ç–æ–º –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
 * @summary –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
 */
export const searchClientsWithPagination = (
    clientSearchRequest: ClientSearchRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<ClientPageResponse>(
      {url: `/clients/search/pagination`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: clientSearchRequest, signal
    },
      options);
    }
  


export const getSearchClientsWithPaginationMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof searchClientsWithPagination>>, TError,{data: ClientSearchRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof searchClientsWithPagination>>, TError,{data: ClientSearchRequest}, TContext> => {

const mutationKey = ['searchClientsWithPagination'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof searchClientsWithPagination>>, {data: ClientSearchRequest}> = (props) => {
          const {data} = props ?? {};

          return  searchClientsWithPagination(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SearchClientsWithPaginationMutationResult = NonNullable<Awaited<ReturnType<typeof searchClientsWithPagination>>>
    export type SearchClientsWithPaginationMutationBody = ClientSearchRequest
    export type SearchClientsWithPaginationMutationError = ErrorResponse

    /**
 * @summary –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
 */
export const useSearchClientsWithPagination = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof searchClientsWithPagination>>, TError,{data: ClientSearchRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof searchClientsWithPagination>>,
        TError,
        {data: ClientSearchRequest},
        TContext
      > => {

      const mutationOptions = getSearchClientsWithPaginationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –ø—ñ–¥–ø–∏—Å –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ –π–æ–≥–æ ID
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å –∑–∞ ID
 */
export const getSignatureById = (
    id: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<CustomerSignatureResponse>(
      {url: `/signatures/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSignatureByIdQueryKey = (id: string,) => {
    return [`/signatures/${id}`] as const;
    }

    
export const getGetSignatureByIdQueryOptions = <TData = Awaited<ReturnType<typeof getSignatureById>>, TError = ErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSignatureById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSignatureByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSignatureById>>> = ({ signal }) => getSignatureById(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSignatureById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSignatureByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSignatureById>>>
export type GetSignatureByIdQueryError = ErrorResponse


export function useGetSignatureById<TData = Awaited<ReturnType<typeof getSignatureById>>, TError = ErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSignatureById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSignatureById>>,
          TError,
          Awaited<ReturnType<typeof getSignatureById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSignatureById<TData = Awaited<ReturnType<typeof getSignatureById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSignatureById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSignatureById>>,
          TError,
          Awaited<ReturnType<typeof getSignatureById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSignatureById<TData = Awaited<ReturnType<typeof getSignatureById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSignatureById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å –∑–∞ ID
 */

export function useGetSignatureById<TData = Awaited<ReturnType<typeof getSignatureById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSignatureById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSignatureByIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –≤—Å—ñ –ø—ñ–¥–ø–∏—Å–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø—ñ–¥–ø–∏—Å–∏ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const getSignaturesByOrderId = (
    orderId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<CustomerSignatureResponse[]>(
      {url: `/signatures/orders/${orderId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSignaturesByOrderIdQueryKey = (orderId: string,) => {
    return [`/signatures/orders/${orderId}`] as const;
    }

    
export const getGetSignaturesByOrderIdQueryOptions = <TData = Awaited<ReturnType<typeof getSignaturesByOrderId>>, TError = ErrorResponse>(orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSignaturesByOrderId>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSignaturesByOrderIdQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSignaturesByOrderId>>> = ({ signal }) => getSignaturesByOrderId(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSignaturesByOrderId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSignaturesByOrderIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSignaturesByOrderId>>>
export type GetSignaturesByOrderIdQueryError = ErrorResponse


export function useGetSignaturesByOrderId<TData = Awaited<ReturnType<typeof getSignaturesByOrderId>>, TError = ErrorResponse>(
 orderId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSignaturesByOrderId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSignaturesByOrderId>>,
          TError,
          Awaited<ReturnType<typeof getSignaturesByOrderId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSignaturesByOrderId<TData = Awaited<ReturnType<typeof getSignaturesByOrderId>>, TError = ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSignaturesByOrderId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSignaturesByOrderId>>,
          TError,
          Awaited<ReturnType<typeof getSignaturesByOrderId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSignaturesByOrderId<TData = Awaited<ReturnType<typeof getSignaturesByOrderId>>, TError = ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSignaturesByOrderId>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø—ñ–¥–ø–∏—Å–∏ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */

export function useGetSignaturesByOrderId<TData = Awaited<ReturnType<typeof getSignaturesByOrderId>>, TError = ErrorResponse>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSignaturesByOrderId>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSignaturesByOrderIdQueryOptions(orderId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –ø—ñ–¥–ø–∏—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø—É –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å –∑–∞ —Ç–∏–ø–æ–º –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const getSignatureByOrderIdAndType = (
    orderId: string,
    signatureType: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<CustomerSignatureResponse>(
      {url: `/signatures/orders/${orderId}/types/${signatureType}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSignatureByOrderIdAndTypeQueryKey = (orderId: string,
    signatureType: string,) => {
    return [`/signatures/orders/${orderId}/types/${signatureType}`] as const;
    }

    
export const getGetSignatureByOrderIdAndTypeQueryOptions = <TData = Awaited<ReturnType<typeof getSignatureByOrderIdAndType>>, TError = ErrorResponse>(orderId: string,
    signatureType: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSignatureByOrderIdAndType>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSignatureByOrderIdAndTypeQueryKey(orderId,signatureType);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSignatureByOrderIdAndType>>> = ({ signal }) => getSignatureByOrderIdAndType(orderId,signatureType, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId && signatureType), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSignatureByOrderIdAndType>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSignatureByOrderIdAndTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getSignatureByOrderIdAndType>>>
export type GetSignatureByOrderIdAndTypeQueryError = ErrorResponse


export function useGetSignatureByOrderIdAndType<TData = Awaited<ReturnType<typeof getSignatureByOrderIdAndType>>, TError = ErrorResponse>(
 orderId: string,
    signatureType: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSignatureByOrderIdAndType>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSignatureByOrderIdAndType>>,
          TError,
          Awaited<ReturnType<typeof getSignatureByOrderIdAndType>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSignatureByOrderIdAndType<TData = Awaited<ReturnType<typeof getSignatureByOrderIdAndType>>, TError = ErrorResponse>(
 orderId: string,
    signatureType: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSignatureByOrderIdAndType>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSignatureByOrderIdAndType>>,
          TError,
          Awaited<ReturnType<typeof getSignatureByOrderIdAndType>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSignatureByOrderIdAndType<TData = Awaited<ReturnType<typeof getSignatureByOrderIdAndType>>, TError = ErrorResponse>(
 orderId: string,
    signatureType: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSignatureByOrderIdAndType>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å –∑–∞ —Ç–∏–ø–æ–º –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */

export function useGetSignatureByOrderIdAndType<TData = Awaited<ReturnType<typeof getSignatureByOrderIdAndType>>, TError = ErrorResponse>(
 orderId: string,
    signatureType: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSignatureByOrderIdAndType>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSignatureByOrderIdAndTypeQueryOptions(orderId,signatureType,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º
 * @deprecated
 * @summary –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤
 */
export const searchClients = (
    params: SearchClientsParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<ClientResponse>(
      {url: `/clients/search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSearchClientsQueryKey = (params: SearchClientsParams,) => {
    return [`/clients/search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchClientsQueryOptions = <TData = Awaited<ReturnType<typeof searchClients>>, TError = ErrorResponse>(params: SearchClientsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchClients>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchClientsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchClients>>> = ({ signal }) => searchClients(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchClients>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchClientsQueryResult = NonNullable<Awaited<ReturnType<typeof searchClients>>>
export type SearchClientsQueryError = ErrorResponse


export function useSearchClients<TData = Awaited<ReturnType<typeof searchClients>>, TError = ErrorResponse>(
 params: SearchClientsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchClients>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchClients>>,
          TError,
          Awaited<ReturnType<typeof searchClients>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchClients<TData = Awaited<ReturnType<typeof searchClients>>, TError = ErrorResponse>(
 params: SearchClientsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchClients>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchClients>>,
          TError,
          Awaited<ReturnType<typeof searchClients>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchClients<TData = Awaited<ReturnType<typeof searchClients>>, TError = ErrorResponse>(
 params: SearchClientsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchClients>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @deprecated
 * @summary –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤
 */

export function useSearchClients<TData = Awaited<ReturnType<typeof searchClients>>, TError = ErrorResponse>(
 params: SearchClientsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchClients>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchClientsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




