/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * AKSI API
 * API –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–ª—ñ–Ω—ñ–Ω–≥–æ–≤–æ—é –∫–æ–º–ø–∞–Ω—ñ—î—é AKSI
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';


/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ –π–æ–≥–æ ID
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ ID
 */
export const getClientByIdParams = zod.object({
  "id": zod.string().uuid().describe('ID –∫–ª—ñ—î–Ω—Ç–∞')
}).strict()

export const getClientById200ResponseStructuredAddressCityMin = 2;

export const getClientById200ResponseStructuredAddressCityMax = 100;

export const getClientById200ResponseStructuredAddressCityRegExp = new RegExp('^[\\p{L}\\s.,\\-\']+$');
export const getClientById200ResponseStructuredAddressStreetMin = 2;

export const getClientById200ResponseStructuredAddressStreetMax = 150;

export const getClientById200ResponseStructuredAddressStreetRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\']+$');
export const getClientById200ResponseStructuredAddressBuildingMin = 0;

export const getClientById200ResponseStructuredAddressBuildingMax = 20;

export const getClientById200ResponseStructuredAddressBuildingRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const getClientById200ResponseStructuredAddressApartmentMin = 0;

export const getClientById200ResponseStructuredAddressApartmentMax = 20;

export const getClientById200ResponseStructuredAddressApartmentRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const getClientById200ResponseStructuredAddressPostalCodeMin = 0;

export const getClientById200ResponseStructuredAddressPostalCodeMax = 10;

export const getClientById200ResponseStructuredAddressPostalCodeRegExp = new RegExp('^[0-9\\-]+$');
export const getClientById200ResponseStructuredAddressFullAddressMin = 5;

export const getClientById200ResponseStructuredAddressFullAddressMax = 500;
export const getClientById200ResponsePreferencesItemKeyMin = 0;

export const getClientById200ResponsePreferencesItemKeyMax = 100;
export const getClientById200ResponsePreferencesItemValueMin = 0;

export const getClientById200ResponsePreferencesItemValueMax = 255;


export const getClientById200Response = zod.object({
  "id": zod.string().uuid().optional(),
  "lastName": zod.string().optional(),
  "firstName": zod.string().optional(),
  "fullName": zod.string().optional(),
  "phone": zod.string().optional(),
  "email": zod.string().optional(),
  "address": zod.string().optional(),
  "structuredAddress": zod.object({
  "city": zod.string().min(getClientById200ResponseStructuredAddressCityMin).max(getClientById200ResponseStructuredAddressCityMax).regex(getClientById200ResponseStructuredAddressCityRegExp).optional(),
  "street": zod.string().min(getClientById200ResponseStructuredAddressStreetMin).max(getClientById200ResponseStructuredAddressStreetMax).regex(getClientById200ResponseStructuredAddressStreetRegExp).optional(),
  "building": zod.string().min(getClientById200ResponseStructuredAddressBuildingMin).max(getClientById200ResponseStructuredAddressBuildingMax).regex(getClientById200ResponseStructuredAddressBuildingRegExp).optional(),
  "apartment": zod.string().min(getClientById200ResponseStructuredAddressApartmentMin).max(getClientById200ResponseStructuredAddressApartmentMax).regex(getClientById200ResponseStructuredAddressApartmentRegExp).optional(),
  "postalCode": zod.string().min(getClientById200ResponseStructuredAddressPostalCodeMin).max(getClientById200ResponseStructuredAddressPostalCodeMax).regex(getClientById200ResponseStructuredAddressPostalCodeRegExp).optional(),
  "fullAddress": zod.string().min(getClientById200ResponseStructuredAddressFullAddressMin).max(getClientById200ResponseStructuredAddressFullAddressMax).optional()
}).strict().optional(),
  "communicationChannels": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER'])).optional(),
  "source": zod.enum(['INSTAGRAM', 'GOOGLE', 'RECOMMENDATION', 'OTHER']).optional(),
  "sourceDetails": zod.string().optional(),
  "createdAt": zod.string().datetime({}).optional(),
  "updatedAt": zod.string().datetime({}).optional(),
  "category": zod.object({
  "code": zod.string().optional(),
  "displayName": zod.string().optional()
}).strict().optional(),
  "preferences": zod.array(zod.object({
  "id": zod.string().uuid().optional(),
  "key": zod.string().min(getClientById200ResponsePreferencesItemKeyMin).max(getClientById200ResponsePreferencesItemKeyMax),
  "value": zod.string().min(getClientById200ResponsePreferencesItemValueMin).max(getClientById200ResponsePreferencesItemValueMax).optional()
}).strict()).optional(),
  "recentOrders": zod.array(zod.object({
  "id": zod.string().uuid().optional(),
  "receiptNumber": zod.string().optional(),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']).optional(),
  "totalAmount": zod.number().optional(),
  "createdAt": zod.string().datetime({}).optional(),
  "completionDate": zod.string().datetime({}).optional(),
  "itemCount": zod.number().optional()
}).strict()).optional(),
  "orderCount": zod.number().optional()
}).strict()

export const getClientById400Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getClientById401Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getClientById403Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getClientById404Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getClientById409Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * –û–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
 * @summary –û–Ω–æ–≤–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞
 */
export const updateClientParams = zod.object({
  "id": zod.string().uuid().describe('ID –∫–ª—ñ—î–Ω—Ç–∞')
}).strict()

export const updateClientBodyLastNameMin = 2;

export const updateClientBodyLastNameMax = 50;

export const updateClientBodyLastNameRegExp = new RegExp('^[\\p{L}\\s\\-\']+$');
export const updateClientBodyFirstNameMin = 2;

export const updateClientBodyFirstNameMax = 50;

export const updateClientBodyFirstNameRegExp = new RegExp('^[\\p{L}\\s\\-\']+$');
export const updateClientBodyPhoneRegExp = new RegExp('^\\+?[0-9]{10,15}$');
export const updateClientBodyStructuredAddressCityMin = 2;

export const updateClientBodyStructuredAddressCityMax = 100;

export const updateClientBodyStructuredAddressCityRegExp = new RegExp('^[\\p{L}\\s.,\\-\']+$');
export const updateClientBodyStructuredAddressStreetMin = 2;

export const updateClientBodyStructuredAddressStreetMax = 150;

export const updateClientBodyStructuredAddressStreetRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\']+$');
export const updateClientBodyStructuredAddressBuildingMin = 0;

export const updateClientBodyStructuredAddressBuildingMax = 20;

export const updateClientBodyStructuredAddressBuildingRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const updateClientBodyStructuredAddressApartmentMin = 0;

export const updateClientBodyStructuredAddressApartmentMax = 20;

export const updateClientBodyStructuredAddressApartmentRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const updateClientBodyStructuredAddressPostalCodeMin = 0;

export const updateClientBodyStructuredAddressPostalCodeMax = 10;

export const updateClientBodyStructuredAddressPostalCodeRegExp = new RegExp('^[0-9\\-]+$');
export const updateClientBodyStructuredAddressFullAddressMin = 5;

export const updateClientBodyStructuredAddressFullAddressMax = 500;


export const updateClientBody = zod.object({
  "lastName": zod.string().min(updateClientBodyLastNameMin).max(updateClientBodyLastNameMax).regex(updateClientBodyLastNameRegExp),
  "firstName": zod.string().min(updateClientBodyFirstNameMin).max(updateClientBodyFirstNameMax).regex(updateClientBodyFirstNameRegExp),
  "phone": zod.string().min(1).regex(updateClientBodyPhoneRegExp),
  "email": zod.string().optional(),
  "address": zod.string().optional(),
  "structuredAddress": zod.object({
  "city": zod.string().min(updateClientBodyStructuredAddressCityMin).max(updateClientBodyStructuredAddressCityMax).regex(updateClientBodyStructuredAddressCityRegExp).optional(),
  "street": zod.string().min(updateClientBodyStructuredAddressStreetMin).max(updateClientBodyStructuredAddressStreetMax).regex(updateClientBodyStructuredAddressStreetRegExp).optional(),
  "building": zod.string().min(updateClientBodyStructuredAddressBuildingMin).max(updateClientBodyStructuredAddressBuildingMax).regex(updateClientBodyStructuredAddressBuildingRegExp).optional(),
  "apartment": zod.string().min(updateClientBodyStructuredAddressApartmentMin).max(updateClientBodyStructuredAddressApartmentMax).regex(updateClientBodyStructuredAddressApartmentRegExp).optional(),
  "postalCode": zod.string().min(updateClientBodyStructuredAddressPostalCodeMin).max(updateClientBodyStructuredAddressPostalCodeMax).regex(updateClientBodyStructuredAddressPostalCodeRegExp).optional(),
  "fullAddress": zod.string().min(updateClientBodyStructuredAddressFullAddressMin).max(updateClientBodyStructuredAddressFullAddressMax).optional()
}).strict().optional(),
  "communicationChannels": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER'])).optional(),
  "source": zod.enum(['INSTAGRAM', 'GOOGLE', 'RECOMMENDATION', 'OTHER']).optional(),
  "sourceDetails": zod.string().optional()
}).strict().describe('–î–∞–Ω—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞')

export const updateClient200ResponseStructuredAddressCityMin = 2;

export const updateClient200ResponseStructuredAddressCityMax = 100;

export const updateClient200ResponseStructuredAddressCityRegExp = new RegExp('^[\\p{L}\\s.,\\-\']+$');
export const updateClient200ResponseStructuredAddressStreetMin = 2;

export const updateClient200ResponseStructuredAddressStreetMax = 150;

export const updateClient200ResponseStructuredAddressStreetRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\']+$');
export const updateClient200ResponseStructuredAddressBuildingMin = 0;

export const updateClient200ResponseStructuredAddressBuildingMax = 20;

export const updateClient200ResponseStructuredAddressBuildingRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const updateClient200ResponseStructuredAddressApartmentMin = 0;

export const updateClient200ResponseStructuredAddressApartmentMax = 20;

export const updateClient200ResponseStructuredAddressApartmentRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const updateClient200ResponseStructuredAddressPostalCodeMin = 0;

export const updateClient200ResponseStructuredAddressPostalCodeMax = 10;

export const updateClient200ResponseStructuredAddressPostalCodeRegExp = new RegExp('^[0-9\\-]+$');
export const updateClient200ResponseStructuredAddressFullAddressMin = 5;

export const updateClient200ResponseStructuredAddressFullAddressMax = 500;
export const updateClient200ResponsePreferencesItemKeyMin = 0;

export const updateClient200ResponsePreferencesItemKeyMax = 100;
export const updateClient200ResponsePreferencesItemValueMin = 0;

export const updateClient200ResponsePreferencesItemValueMax = 255;


export const updateClient200Response = zod.object({
  "id": zod.string().uuid().optional(),
  "lastName": zod.string().optional(),
  "firstName": zod.string().optional(),
  "fullName": zod.string().optional(),
  "phone": zod.string().optional(),
  "email": zod.string().optional(),
  "address": zod.string().optional(),
  "structuredAddress": zod.object({
  "city": zod.string().min(updateClient200ResponseStructuredAddressCityMin).max(updateClient200ResponseStructuredAddressCityMax).regex(updateClient200ResponseStructuredAddressCityRegExp).optional(),
  "street": zod.string().min(updateClient200ResponseStructuredAddressStreetMin).max(updateClient200ResponseStructuredAddressStreetMax).regex(updateClient200ResponseStructuredAddressStreetRegExp).optional(),
  "building": zod.string().min(updateClient200ResponseStructuredAddressBuildingMin).max(updateClient200ResponseStructuredAddressBuildingMax).regex(updateClient200ResponseStructuredAddressBuildingRegExp).optional(),
  "apartment": zod.string().min(updateClient200ResponseStructuredAddressApartmentMin).max(updateClient200ResponseStructuredAddressApartmentMax).regex(updateClient200ResponseStructuredAddressApartmentRegExp).optional(),
  "postalCode": zod.string().min(updateClient200ResponseStructuredAddressPostalCodeMin).max(updateClient200ResponseStructuredAddressPostalCodeMax).regex(updateClient200ResponseStructuredAddressPostalCodeRegExp).optional(),
  "fullAddress": zod.string().min(updateClient200ResponseStructuredAddressFullAddressMin).max(updateClient200ResponseStructuredAddressFullAddressMax).optional()
}).strict().optional(),
  "communicationChannels": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER'])).optional(),
  "source": zod.enum(['INSTAGRAM', 'GOOGLE', 'RECOMMENDATION', 'OTHER']).optional(),
  "sourceDetails": zod.string().optional(),
  "createdAt": zod.string().datetime({}).optional(),
  "updatedAt": zod.string().datetime({}).optional(),
  "category": zod.object({
  "code": zod.string().optional(),
  "displayName": zod.string().optional()
}).strict().optional(),
  "preferences": zod.array(zod.object({
  "id": zod.string().uuid().optional(),
  "key": zod.string().min(updateClient200ResponsePreferencesItemKeyMin).max(updateClient200ResponsePreferencesItemKeyMax),
  "value": zod.string().min(updateClient200ResponsePreferencesItemValueMin).max(updateClient200ResponsePreferencesItemValueMax).optional()
}).strict()).optional(),
  "recentOrders": zod.array(zod.object({
  "id": zod.string().uuid().optional(),
  "receiptNumber": zod.string().optional(),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']).optional(),
  "totalAmount": zod.number().optional(),
  "createdAt": zod.string().datetime({}).optional(),
  "completionDate": zod.string().datetime({}).optional(),
  "itemCount": zod.number().optional()
}).strict()).optional(),
  "orderCount": zod.number().optional()
}).strict()

export const updateClient400Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const updateClient401Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const updateClient403Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const updateClient404Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const updateClient409Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * –í–∏–¥–∞–ª—è—î –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ –π–æ–≥–æ ID
 * @summary –í–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞
 */
export const deleteClientParams = zod.object({
  "id": zod.string().uuid().describe('ID –∫–ª—ñ—î–Ω—Ç–∞')
}).strict()

export const deleteClient204Response = zod.object({

})

export const deleteClient400Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const deleteClient401Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const deleteClient403Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const deleteClient404Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const deleteClient409Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * –ó–±–µ—Ä—ñ–≥–∞—î –Ω–æ–≤–∏–π –∞–±–æ –æ–Ω–æ–≤–ª—é—î —ñ—Å–Ω—É—é—á–∏–π –ø—ñ–¥–ø–∏—Å –∫–ª—ñ—î–Ω—Ç–∞
 * @summary –ó–±–µ—Ä–µ–≥—Ç–∏ –ø—ñ–¥–ø–∏—Å –∫–ª—ñ—î–Ω—Ç–∞
 */
export const saveSignatureBody = zod.object({
  "orderId": zod.string().uuid(),
  "signatureData": zod.string().min(1),
  "termsAccepted": zod.boolean(),
  "signatureType": zod.string().optional()
}).strict().describe('–î–∞–Ω—ñ –ø—ñ–¥–ø–∏—Å—É –∫–ª—ñ—î–Ω—Ç–∞')

export const saveSignature201Response = zod.object({
  "id": zod.string().uuid().optional(),
  "orderId": zod.string().uuid().optional(),
  "signatureData": zod.string().optional(),
  "termsAccepted": zod.boolean().optional(),
  "signatureType": zod.string().optional(),
  "createdAt": zod.string().datetime({}).optional(),
  "updatedAt": zod.string().datetime({}).optional()
}).strict()

export const saveSignature400Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const saveSignature401Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const saveSignature403Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const saveSignature404Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const saveSignature409Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
 */
export const getAllClientsQueryPageDefault = 0;export const getAllClientsQuerySizeDefault = 20;

export const getAllClientsQueryParams = zod.object({
  "page": zod.number().optional().describe('–ù–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (–∑ 0)'),
  "size": zod.number().default(getAllClientsQuerySizeDefault).describe('–†–æ–∑–º—ñ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏')
}).strict()

export const getAllClients200ResponseStructuredAddressCityMin = 2;

export const getAllClients200ResponseStructuredAddressCityMax = 100;

export const getAllClients200ResponseStructuredAddressCityRegExp = new RegExp('^[\\p{L}\\s.,\\-\']+$');
export const getAllClients200ResponseStructuredAddressStreetMin = 2;

export const getAllClients200ResponseStructuredAddressStreetMax = 150;

export const getAllClients200ResponseStructuredAddressStreetRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\']+$');
export const getAllClients200ResponseStructuredAddressBuildingMin = 0;

export const getAllClients200ResponseStructuredAddressBuildingMax = 20;

export const getAllClients200ResponseStructuredAddressBuildingRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const getAllClients200ResponseStructuredAddressApartmentMin = 0;

export const getAllClients200ResponseStructuredAddressApartmentMax = 20;

export const getAllClients200ResponseStructuredAddressApartmentRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const getAllClients200ResponseStructuredAddressPostalCodeMin = 0;

export const getAllClients200ResponseStructuredAddressPostalCodeMax = 10;

export const getAllClients200ResponseStructuredAddressPostalCodeRegExp = new RegExp('^[0-9\\-]+$');
export const getAllClients200ResponseStructuredAddressFullAddressMin = 5;

export const getAllClients200ResponseStructuredAddressFullAddressMax = 500;
export const getAllClients200ResponsePreferencesItemKeyMin = 0;

export const getAllClients200ResponsePreferencesItemKeyMax = 100;
export const getAllClients200ResponsePreferencesItemValueMin = 0;

export const getAllClients200ResponsePreferencesItemValueMax = 255;


export const getAllClients200Response = zod.object({
  "id": zod.string().uuid().optional(),
  "lastName": zod.string().optional(),
  "firstName": zod.string().optional(),
  "fullName": zod.string().optional(),
  "phone": zod.string().optional(),
  "email": zod.string().optional(),
  "address": zod.string().optional(),
  "structuredAddress": zod.object({
  "city": zod.string().min(getAllClients200ResponseStructuredAddressCityMin).max(getAllClients200ResponseStructuredAddressCityMax).regex(getAllClients200ResponseStructuredAddressCityRegExp).optional(),
  "street": zod.string().min(getAllClients200ResponseStructuredAddressStreetMin).max(getAllClients200ResponseStructuredAddressStreetMax).regex(getAllClients200ResponseStructuredAddressStreetRegExp).optional(),
  "building": zod.string().min(getAllClients200ResponseStructuredAddressBuildingMin).max(getAllClients200ResponseStructuredAddressBuildingMax).regex(getAllClients200ResponseStructuredAddressBuildingRegExp).optional(),
  "apartment": zod.string().min(getAllClients200ResponseStructuredAddressApartmentMin).max(getAllClients200ResponseStructuredAddressApartmentMax).regex(getAllClients200ResponseStructuredAddressApartmentRegExp).optional(),
  "postalCode": zod.string().min(getAllClients200ResponseStructuredAddressPostalCodeMin).max(getAllClients200ResponseStructuredAddressPostalCodeMax).regex(getAllClients200ResponseStructuredAddressPostalCodeRegExp).optional(),
  "fullAddress": zod.string().min(getAllClients200ResponseStructuredAddressFullAddressMin).max(getAllClients200ResponseStructuredAddressFullAddressMax).optional()
}).strict().optional(),
  "communicationChannels": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER'])).optional(),
  "source": zod.enum(['INSTAGRAM', 'GOOGLE', 'RECOMMENDATION', 'OTHER']).optional(),
  "sourceDetails": zod.string().optional(),
  "createdAt": zod.string().datetime({}).optional(),
  "updatedAt": zod.string().datetime({}).optional(),
  "category": zod.object({
  "code": zod.string().optional(),
  "displayName": zod.string().optional()
}).strict().optional(),
  "preferences": zod.array(zod.object({
  "id": zod.string().uuid().optional(),
  "key": zod.string().min(getAllClients200ResponsePreferencesItemKeyMin).max(getAllClients200ResponsePreferencesItemKeyMax),
  "value": zod.string().min(getAllClients200ResponsePreferencesItemValueMin).max(getAllClients200ResponsePreferencesItemValueMax).optional()
}).strict()).optional(),
  "recentOrders": zod.array(zod.object({
  "id": zod.string().uuid().optional(),
  "receiptNumber": zod.string().optional(),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']).optional(),
  "totalAmount": zod.number().optional(),
  "createdAt": zod.string().datetime({}).optional(),
  "completionDate": zod.string().datetime({}).optional(),
  "itemCount": zod.number().optional()
}).strict()).optional(),
  "orderCount": zod.number().optional()
}).strict()

export const getAllClients400Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getAllClients401Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getAllClients403Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getAllClients404Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getAllClients409Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –∑ –Ω–∞–¥–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
 * @summary –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
 */
export const createClientBodyLastNameMin = 2;

export const createClientBodyLastNameMax = 50;

export const createClientBodyLastNameRegExp = new RegExp('^[\\p{L}\\s\\-\']+$');
export const createClientBodyFirstNameMin = 2;

export const createClientBodyFirstNameMax = 50;

export const createClientBodyFirstNameRegExp = new RegExp('^[\\p{L}\\s\\-\']+$');
export const createClientBodyPhoneRegExp = new RegExp('^\\+?[0-9]{10,15}$');
export const createClientBodyStructuredAddressCityMin = 2;

export const createClientBodyStructuredAddressCityMax = 100;

export const createClientBodyStructuredAddressCityRegExp = new RegExp('^[\\p{L}\\s.,\\-\']+$');
export const createClientBodyStructuredAddressStreetMin = 2;

export const createClientBodyStructuredAddressStreetMax = 150;

export const createClientBodyStructuredAddressStreetRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\']+$');
export const createClientBodyStructuredAddressBuildingMin = 0;

export const createClientBodyStructuredAddressBuildingMax = 20;

export const createClientBodyStructuredAddressBuildingRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const createClientBodyStructuredAddressApartmentMin = 0;

export const createClientBodyStructuredAddressApartmentMax = 20;

export const createClientBodyStructuredAddressApartmentRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const createClientBodyStructuredAddressPostalCodeMin = 0;

export const createClientBodyStructuredAddressPostalCodeMax = 10;

export const createClientBodyStructuredAddressPostalCodeRegExp = new RegExp('^[0-9\\-]+$');
export const createClientBodyStructuredAddressFullAddressMin = 5;

export const createClientBodyStructuredAddressFullAddressMax = 500;


export const createClientBody = zod.object({
  "lastName": zod.string().min(createClientBodyLastNameMin).max(createClientBodyLastNameMax).regex(createClientBodyLastNameRegExp),
  "firstName": zod.string().min(createClientBodyFirstNameMin).max(createClientBodyFirstNameMax).regex(createClientBodyFirstNameRegExp),
  "phone": zod.string().min(1).regex(createClientBodyPhoneRegExp),
  "email": zod.string().optional(),
  "address": zod.string().optional(),
  "structuredAddress": zod.object({
  "city": zod.string().min(createClientBodyStructuredAddressCityMin).max(createClientBodyStructuredAddressCityMax).regex(createClientBodyStructuredAddressCityRegExp).optional(),
  "street": zod.string().min(createClientBodyStructuredAddressStreetMin).max(createClientBodyStructuredAddressStreetMax).regex(createClientBodyStructuredAddressStreetRegExp).optional(),
  "building": zod.string().min(createClientBodyStructuredAddressBuildingMin).max(createClientBodyStructuredAddressBuildingMax).regex(createClientBodyStructuredAddressBuildingRegExp).optional(),
  "apartment": zod.string().min(createClientBodyStructuredAddressApartmentMin).max(createClientBodyStructuredAddressApartmentMax).regex(createClientBodyStructuredAddressApartmentRegExp).optional(),
  "postalCode": zod.string().min(createClientBodyStructuredAddressPostalCodeMin).max(createClientBodyStructuredAddressPostalCodeMax).regex(createClientBodyStructuredAddressPostalCodeRegExp).optional(),
  "fullAddress": zod.string().min(createClientBodyStructuredAddressFullAddressMin).max(createClientBodyStructuredAddressFullAddressMax).optional()
}).strict().optional(),
  "communicationChannels": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER'])).optional(),
  "source": zod.enum(['INSTAGRAM', 'GOOGLE', 'RECOMMENDATION', 'OTHER']).optional(),
  "sourceDetails": zod.string().optional()
}).strict().describe('–î–∞–Ω—ñ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞')

export const createClient201ResponseStructuredAddressCityMin = 2;

export const createClient201ResponseStructuredAddressCityMax = 100;

export const createClient201ResponseStructuredAddressCityRegExp = new RegExp('^[\\p{L}\\s.,\\-\']+$');
export const createClient201ResponseStructuredAddressStreetMin = 2;

export const createClient201ResponseStructuredAddressStreetMax = 150;

export const createClient201ResponseStructuredAddressStreetRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\']+$');
export const createClient201ResponseStructuredAddressBuildingMin = 0;

export const createClient201ResponseStructuredAddressBuildingMax = 20;

export const createClient201ResponseStructuredAddressBuildingRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const createClient201ResponseStructuredAddressApartmentMin = 0;

export const createClient201ResponseStructuredAddressApartmentMax = 20;

export const createClient201ResponseStructuredAddressApartmentRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const createClient201ResponseStructuredAddressPostalCodeMin = 0;

export const createClient201ResponseStructuredAddressPostalCodeMax = 10;

export const createClient201ResponseStructuredAddressPostalCodeRegExp = new RegExp('^[0-9\\-]+$');
export const createClient201ResponseStructuredAddressFullAddressMin = 5;

export const createClient201ResponseStructuredAddressFullAddressMax = 500;
export const createClient201ResponsePreferencesItemKeyMin = 0;

export const createClient201ResponsePreferencesItemKeyMax = 100;
export const createClient201ResponsePreferencesItemValueMin = 0;

export const createClient201ResponsePreferencesItemValueMax = 255;


export const createClient201Response = zod.object({
  "id": zod.string().uuid().optional(),
  "lastName": zod.string().optional(),
  "firstName": zod.string().optional(),
  "fullName": zod.string().optional(),
  "phone": zod.string().optional(),
  "email": zod.string().optional(),
  "address": zod.string().optional(),
  "structuredAddress": zod.object({
  "city": zod.string().min(createClient201ResponseStructuredAddressCityMin).max(createClient201ResponseStructuredAddressCityMax).regex(createClient201ResponseStructuredAddressCityRegExp).optional(),
  "street": zod.string().min(createClient201ResponseStructuredAddressStreetMin).max(createClient201ResponseStructuredAddressStreetMax).regex(createClient201ResponseStructuredAddressStreetRegExp).optional(),
  "building": zod.string().min(createClient201ResponseStructuredAddressBuildingMin).max(createClient201ResponseStructuredAddressBuildingMax).regex(createClient201ResponseStructuredAddressBuildingRegExp).optional(),
  "apartment": zod.string().min(createClient201ResponseStructuredAddressApartmentMin).max(createClient201ResponseStructuredAddressApartmentMax).regex(createClient201ResponseStructuredAddressApartmentRegExp).optional(),
  "postalCode": zod.string().min(createClient201ResponseStructuredAddressPostalCodeMin).max(createClient201ResponseStructuredAddressPostalCodeMax).regex(createClient201ResponseStructuredAddressPostalCodeRegExp).optional(),
  "fullAddress": zod.string().min(createClient201ResponseStructuredAddressFullAddressMin).max(createClient201ResponseStructuredAddressFullAddressMax).optional()
}).strict().optional(),
  "communicationChannels": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER'])).optional(),
  "source": zod.enum(['INSTAGRAM', 'GOOGLE', 'RECOMMENDATION', 'OTHER']).optional(),
  "sourceDetails": zod.string().optional(),
  "createdAt": zod.string().datetime({}).optional(),
  "updatedAt": zod.string().datetime({}).optional(),
  "category": zod.object({
  "code": zod.string().optional(),
  "displayName": zod.string().optional()
}).strict().optional(),
  "preferences": zod.array(zod.object({
  "id": zod.string().uuid().optional(),
  "key": zod.string().min(createClient201ResponsePreferencesItemKeyMin).max(createClient201ResponsePreferencesItemKeyMax),
  "value": zod.string().min(createClient201ResponsePreferencesItemValueMin).max(createClient201ResponsePreferencesItemValueMax).optional()
}).strict()).optional(),
  "recentOrders": zod.array(zod.object({
  "id": zod.string().uuid().optional(),
  "receiptNumber": zod.string().optional(),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']).optional(),
  "totalAmount": zod.number().optional(),
  "createdAt": zod.string().datetime({}).optional(),
  "completionDate": zod.string().datetime({}).optional(),
  "itemCount": zod.number().optional()
}).strict()).optional(),
  "orderCount": zod.number().optional()
}).strict()

export const createClient400Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const createClient401Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const createClient403Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const createClient404Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const createClient409Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ –∑–∞–ø–∏—Ç–æ–º –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
 * @summary –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
 */
export const searchClientsWithPaginationBodyPageMin = 0;


export const searchClientsWithPaginationBody = zod.object({
  "query": zod.string().min(1),
  "page": zod.number().min(searchClientsWithPaginationBodyPageMin).optional(),
  "size": zod.number().min(1).optional()
}).strict().describe('–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É —Ç–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó')

export const searchClientsWithPagination200ResponseContentItemStructuredAddressCityMin = 2;

export const searchClientsWithPagination200ResponseContentItemStructuredAddressCityMax = 100;

export const searchClientsWithPagination200ResponseContentItemStructuredAddressCityRegExp = new RegExp('^[\\p{L}\\s.,\\-\']+$');
export const searchClientsWithPagination200ResponseContentItemStructuredAddressStreetMin = 2;

export const searchClientsWithPagination200ResponseContentItemStructuredAddressStreetMax = 150;

export const searchClientsWithPagination200ResponseContentItemStructuredAddressStreetRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\']+$');
export const searchClientsWithPagination200ResponseContentItemStructuredAddressBuildingMin = 0;

export const searchClientsWithPagination200ResponseContentItemStructuredAddressBuildingMax = 20;

export const searchClientsWithPagination200ResponseContentItemStructuredAddressBuildingRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const searchClientsWithPagination200ResponseContentItemStructuredAddressApartmentMin = 0;

export const searchClientsWithPagination200ResponseContentItemStructuredAddressApartmentMax = 20;

export const searchClientsWithPagination200ResponseContentItemStructuredAddressApartmentRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const searchClientsWithPagination200ResponseContentItemStructuredAddressPostalCodeMin = 0;

export const searchClientsWithPagination200ResponseContentItemStructuredAddressPostalCodeMax = 10;

export const searchClientsWithPagination200ResponseContentItemStructuredAddressPostalCodeRegExp = new RegExp('^[0-9\\-]+$');
export const searchClientsWithPagination200ResponseContentItemStructuredAddressFullAddressMin = 5;

export const searchClientsWithPagination200ResponseContentItemStructuredAddressFullAddressMax = 500;
export const searchClientsWithPagination200ResponseContentItemPreferencesItemKeyMin = 0;

export const searchClientsWithPagination200ResponseContentItemPreferencesItemKeyMax = 100;
export const searchClientsWithPagination200ResponseContentItemPreferencesItemValueMin = 0;

export const searchClientsWithPagination200ResponseContentItemPreferencesItemValueMax = 255;


export const searchClientsWithPagination200Response = zod.object({
  "content": zod.array(zod.object({
  "id": zod.string().uuid().optional(),
  "lastName": zod.string().optional(),
  "firstName": zod.string().optional(),
  "fullName": zod.string().optional(),
  "phone": zod.string().optional(),
  "email": zod.string().optional(),
  "address": zod.string().optional(),
  "structuredAddress": zod.object({
  "city": zod.string().min(searchClientsWithPagination200ResponseContentItemStructuredAddressCityMin).max(searchClientsWithPagination200ResponseContentItemStructuredAddressCityMax).regex(searchClientsWithPagination200ResponseContentItemStructuredAddressCityRegExp).optional(),
  "street": zod.string().min(searchClientsWithPagination200ResponseContentItemStructuredAddressStreetMin).max(searchClientsWithPagination200ResponseContentItemStructuredAddressStreetMax).regex(searchClientsWithPagination200ResponseContentItemStructuredAddressStreetRegExp).optional(),
  "building": zod.string().min(searchClientsWithPagination200ResponseContentItemStructuredAddressBuildingMin).max(searchClientsWithPagination200ResponseContentItemStructuredAddressBuildingMax).regex(searchClientsWithPagination200ResponseContentItemStructuredAddressBuildingRegExp).optional(),
  "apartment": zod.string().min(searchClientsWithPagination200ResponseContentItemStructuredAddressApartmentMin).max(searchClientsWithPagination200ResponseContentItemStructuredAddressApartmentMax).regex(searchClientsWithPagination200ResponseContentItemStructuredAddressApartmentRegExp).optional(),
  "postalCode": zod.string().min(searchClientsWithPagination200ResponseContentItemStructuredAddressPostalCodeMin).max(searchClientsWithPagination200ResponseContentItemStructuredAddressPostalCodeMax).regex(searchClientsWithPagination200ResponseContentItemStructuredAddressPostalCodeRegExp).optional(),
  "fullAddress": zod.string().min(searchClientsWithPagination200ResponseContentItemStructuredAddressFullAddressMin).max(searchClientsWithPagination200ResponseContentItemStructuredAddressFullAddressMax).optional()
}).strict().optional(),
  "communicationChannels": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER'])).optional(),
  "source": zod.enum(['INSTAGRAM', 'GOOGLE', 'RECOMMENDATION', 'OTHER']).optional(),
  "sourceDetails": zod.string().optional(),
  "createdAt": zod.string().datetime({}).optional(),
  "updatedAt": zod.string().datetime({}).optional(),
  "category": zod.object({
  "code": zod.string().optional(),
  "displayName": zod.string().optional()
}).strict().optional(),
  "preferences": zod.array(zod.object({
  "id": zod.string().uuid().optional(),
  "key": zod.string().min(searchClientsWithPagination200ResponseContentItemPreferencesItemKeyMin).max(searchClientsWithPagination200ResponseContentItemPreferencesItemKeyMax),
  "value": zod.string().min(searchClientsWithPagination200ResponseContentItemPreferencesItemValueMin).max(searchClientsWithPagination200ResponseContentItemPreferencesItemValueMax).optional()
}).strict()).optional(),
  "recentOrders": zod.array(zod.object({
  "id": zod.string().uuid().optional(),
  "receiptNumber": zod.string().optional(),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']).optional(),
  "totalAmount": zod.number().optional(),
  "createdAt": zod.string().datetime({}).optional(),
  "completionDate": zod.string().datetime({}).optional(),
  "itemCount": zod.number().optional()
}).strict()).optional(),
  "orderCount": zod.number().optional()
}).strict()).optional(),
  "totalElements": zod.number().optional(),
  "totalPages": zod.number().optional(),
  "pageNumber": zod.number().optional(),
  "pageSize": zod.number().optional(),
  "hasPrevious": zod.boolean().optional(),
  "hasNext": zod.boolean().optional()
}).strict()

export const searchClientsWithPagination400Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const searchClientsWithPagination401Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const searchClientsWithPagination403Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const searchClientsWithPagination404Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const searchClientsWithPagination409Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –ø—ñ–¥–ø–∏—Å –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ –π–æ–≥–æ ID
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å –∑–∞ ID
 */
export const getSignatureByIdParams = zod.object({
  "id": zod.string().uuid().describe('ID –ø—ñ–¥–ø–∏—Å—É')
}).strict()

export const getSignatureById200Response = zod.object({
  "id": zod.string().uuid().optional(),
  "orderId": zod.string().uuid().optional(),
  "signatureData": zod.string().optional(),
  "termsAccepted": zod.boolean().optional(),
  "signatureType": zod.string().optional(),
  "createdAt": zod.string().datetime({}).optional(),
  "updatedAt": zod.string().datetime({}).optional()
}).strict()

export const getSignatureById400Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getSignatureById401Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getSignatureById403Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getSignatureById404Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getSignatureById409Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –≤—Å—ñ –ø—ñ–¥–ø–∏—Å–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø—ñ–¥–ø–∏—Å–∏ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const getSignaturesByOrderIdParams = zod.object({
  "orderId": zod.string().uuid().describe('ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
}).strict()

export const getSignaturesByOrderId200ResponseItem = zod.object({
  "id": zod.string().uuid().optional(),
  "orderId": zod.string().uuid().optional(),
  "signatureData": zod.string().optional(),
  "termsAccepted": zod.boolean().optional(),
  "signatureType": zod.string().optional(),
  "createdAt": zod.string().datetime({}).optional(),
  "updatedAt": zod.string().datetime({}).optional()
}).strict()
export const getSignaturesByOrderId200Response = zod.array(getSignaturesByOrderId200ResponseItem)

export const getSignaturesByOrderId400Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getSignaturesByOrderId401Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getSignaturesByOrderId403Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getSignaturesByOrderId404Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getSignaturesByOrderId409Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –ø—ñ–¥–ø–∏—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø—É –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å –∑–∞ —Ç–∏–ø–æ–º –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export const getSignatureByOrderIdAndTypeParams = zod.object({
  "orderId": zod.string().uuid().describe('ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'),
  "signatureType": zod.string().describe('–¢–∏–ø –ø—ñ–¥–ø–∏—Å—É')
}).strict()

export const getSignatureByOrderIdAndType200Response = zod.object({
  "id": zod.string().uuid().optional(),
  "orderId": zod.string().uuid().optional(),
  "signatureData": zod.string().optional(),
  "termsAccepted": zod.boolean().optional(),
  "signatureType": zod.string().optional(),
  "createdAt": zod.string().datetime({}).optional(),
  "updatedAt": zod.string().datetime({}).optional()
}).strict()

export const getSignatureByOrderIdAndType400Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getSignatureByOrderIdAndType401Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getSignatureByOrderIdAndType403Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getSignatureByOrderIdAndType404Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const getSignatureByOrderIdAndType409Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


/**
 * –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º
 * @deprecated
 * @summary –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤
 */
export const searchClientsQueryParams = zod.object({
  "keyword": zod.string().describe('–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ—à—É–∫—É')
}).strict()

export const searchClients200ResponseStructuredAddressCityMin = 2;

export const searchClients200ResponseStructuredAddressCityMax = 100;

export const searchClients200ResponseStructuredAddressCityRegExp = new RegExp('^[\\p{L}\\s.,\\-\']+$');
export const searchClients200ResponseStructuredAddressStreetMin = 2;

export const searchClients200ResponseStructuredAddressStreetMax = 150;

export const searchClients200ResponseStructuredAddressStreetRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\']+$');
export const searchClients200ResponseStructuredAddressBuildingMin = 0;

export const searchClients200ResponseStructuredAddressBuildingMax = 20;

export const searchClients200ResponseStructuredAddressBuildingRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const searchClients200ResponseStructuredAddressApartmentMin = 0;

export const searchClients200ResponseStructuredAddressApartmentMax = 20;

export const searchClients200ResponseStructuredAddressApartmentRegExp = new RegExp('^[\\p{L}\\s0-9.,\\-\'/]+$');
export const searchClients200ResponseStructuredAddressPostalCodeMin = 0;

export const searchClients200ResponseStructuredAddressPostalCodeMax = 10;

export const searchClients200ResponseStructuredAddressPostalCodeRegExp = new RegExp('^[0-9\\-]+$');
export const searchClients200ResponseStructuredAddressFullAddressMin = 5;

export const searchClients200ResponseStructuredAddressFullAddressMax = 500;
export const searchClients200ResponsePreferencesItemKeyMin = 0;

export const searchClients200ResponsePreferencesItemKeyMax = 100;
export const searchClients200ResponsePreferencesItemValueMin = 0;

export const searchClients200ResponsePreferencesItemValueMax = 255;


export const searchClients200Response = zod.object({
  "id": zod.string().uuid().optional(),
  "lastName": zod.string().optional(),
  "firstName": zod.string().optional(),
  "fullName": zod.string().optional(),
  "phone": zod.string().optional(),
  "email": zod.string().optional(),
  "address": zod.string().optional(),
  "structuredAddress": zod.object({
  "city": zod.string().min(searchClients200ResponseStructuredAddressCityMin).max(searchClients200ResponseStructuredAddressCityMax).regex(searchClients200ResponseStructuredAddressCityRegExp).optional(),
  "street": zod.string().min(searchClients200ResponseStructuredAddressStreetMin).max(searchClients200ResponseStructuredAddressStreetMax).regex(searchClients200ResponseStructuredAddressStreetRegExp).optional(),
  "building": zod.string().min(searchClients200ResponseStructuredAddressBuildingMin).max(searchClients200ResponseStructuredAddressBuildingMax).regex(searchClients200ResponseStructuredAddressBuildingRegExp).optional(),
  "apartment": zod.string().min(searchClients200ResponseStructuredAddressApartmentMin).max(searchClients200ResponseStructuredAddressApartmentMax).regex(searchClients200ResponseStructuredAddressApartmentRegExp).optional(),
  "postalCode": zod.string().min(searchClients200ResponseStructuredAddressPostalCodeMin).max(searchClients200ResponseStructuredAddressPostalCodeMax).regex(searchClients200ResponseStructuredAddressPostalCodeRegExp).optional(),
  "fullAddress": zod.string().min(searchClients200ResponseStructuredAddressFullAddressMin).max(searchClients200ResponseStructuredAddressFullAddressMax).optional()
}).strict().optional(),
  "communicationChannels": zod.array(zod.enum(['PHONE', 'SMS', 'VIBER'])).optional(),
  "source": zod.enum(['INSTAGRAM', 'GOOGLE', 'RECOMMENDATION', 'OTHER']).optional(),
  "sourceDetails": zod.string().optional(),
  "createdAt": zod.string().datetime({}).optional(),
  "updatedAt": zod.string().datetime({}).optional(),
  "category": zod.object({
  "code": zod.string().optional(),
  "displayName": zod.string().optional()
}).strict().optional(),
  "preferences": zod.array(zod.object({
  "id": zod.string().uuid().optional(),
  "key": zod.string().min(searchClients200ResponsePreferencesItemKeyMin).max(searchClients200ResponsePreferencesItemKeyMax),
  "value": zod.string().min(searchClients200ResponsePreferencesItemValueMin).max(searchClients200ResponsePreferencesItemValueMax).optional()
}).strict()).optional(),
  "recentOrders": zod.array(zod.object({
  "id": zod.string().uuid().optional(),
  "receiptNumber": zod.string().optional(),
  "status": zod.enum(['DRAFT', 'NEW', 'IN_PROGRESS', 'COMPLETED', 'DELIVERED', 'CANCELLED']).optional(),
  "totalAmount": zod.number().optional(),
  "createdAt": zod.string().datetime({}).optional(),
  "completionDate": zod.string().datetime({}).optional(),
  "itemCount": zod.number().optional()
}).strict()).optional(),
  "orderCount": zod.number().optional()
}).strict()

export const searchClients400Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const searchClients401Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const searchClients403Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const searchClients404Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')

export const searchClients409Response = zod.object({
  "timestamp": zod.string().optional(),
  "status": zod.number().optional(),
  "error": zod.string().optional(),
  "message": zod.string().optional(),
  "path": zod.string().optional()
}).strict().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO-8601')


