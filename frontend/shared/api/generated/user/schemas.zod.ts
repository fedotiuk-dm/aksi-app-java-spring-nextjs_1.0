/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * AKSI Dry Cleaning Order System API
 * API for dry cleaning order management system with Domain-Driven Design architecture. The system includes 13 domains: Auth, User, Customer, Branch, Employee, Order, OrderItem, Service, Garment, Pricing, Payment, Notification, and Analytics.
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';

/**
 * Replace user roles with new set
 * @summary Update user roles
 */
export const updateUserRolesParams = zod.object({
  "userId": zod.uuid().describe('User ID')
})

export const updateUserRolesBodyRolesMax = 2147483647;


export const updateUserRolesBody = zod.object({
  "roles": zod.array(zod.enum(['OPERATOR', 'MANAGER', 'ADMIN', 'CLEANER', 'DRIVER', 'ACCOUNTANT'])).min(1).max(updateUserRolesBodyRolesMax).describe('New set of roles')
})

export const updateUserRolesResponseRolesMax = 2147483647;
export const updateUserRolesResponsePhoneRegExp = new RegExp('^\\+?[0-9]{10,15}$');


export const updateUserRolesResponse = zod.object({
  "id": zod.uuid().describe('User ID'),
  "username": zod.string().describe('Username'),
  "firstName": zod.string().describe('First name'),
  "lastName": zod.string().describe('Last name'),
  "email": zod.string().describe('Email address'),
  "roles": zod.array(zod.enum(['OPERATOR', 'MANAGER', 'ADMIN', 'CLEANER', 'DRIVER', 'ACCOUNTANT'])).min(1).max(updateUserRolesResponseRolesMax),
  "active": zod.boolean().describe('Is user active'),
  "createdAt": zod.iso.datetime({}).describe('Creation timestamp'),
  "lastLoginAt": zod.iso.datetime({}).optional().describe('Last login timestamp'),
  "phone": zod.string().regex(updateUserRolesResponsePhoneRegExp).optional().describe('Phone number'),
  "branches": zod.array(zod.object({
  "branchId": zod.uuid().describe('Branch ID'),
  "branchName": zod.string().describe('Branch name'),
  "isPrimary": zod.boolean().describe('Is this the primary branch')
})).describe('Assigned branches'),
  "updatedAt": zod.iso.datetime({}).describe('Last update timestamp'),
  "createdBy": zod.uuid().optional().describe('ID of user who created this user'),
  "updatedBy": zod.uuid().optional().describe('ID of user who last updated this user')
})


/**
 * Change password for a user
 * @summary Change user password
 */
export const changePasswordParams = zod.object({
  "userId": zod.uuid().describe('User ID')
})

export const changePasswordBodyNewPasswordMin = 8;

export const changePasswordBodyNewPasswordMax = 100;


export const changePasswordBody = zod.object({
  "currentPassword": zod.string().optional().describe('Current password (required if changing own password)'),
  "newPassword": zod.string().min(changePasswordBodyNewPasswordMin).max(changePasswordBodyNewPasswordMax).describe('New password')
})


/**
 * List branches assigned to user
 * @summary Get user branches
 */
export const getUserBranchesParams = zod.object({
  "userId": zod.uuid().describe('User ID')
})

export const getUserBranchesResponse = zod.object({
  "branches": zod.array(zod.object({
  "branchId": zod.uuid().describe('Branch ID'),
  "branchName": zod.string().describe('Branch name'),
  "isPrimary": zod.boolean().describe('Is this the primary branch')
}))
})


/**
 * Replace user branch assignments
 * @summary Update user branches
 */
export const updateUserBranchesParams = zod.object({
  "userId": zod.uuid().describe('User ID')
})

export const updateUserBranchesBody = zod.object({
  "branchIds": zod.array(zod.uuid()).describe('Branch IDs to assign'),
  "primaryBranchId": zod.uuid().optional().describe('Primary branch ID (must be in branchIds if provided)')
})

export const updateUserBranchesResponse = zod.object({
  "branches": zod.array(zod.object({
  "branchId": zod.uuid().describe('Branch ID'),
  "branchName": zod.string().describe('Branch name'),
  "isPrimary": zod.boolean().describe('Is this the primary branch')
}))
})


/**
 * Get paginated list of users with filtering
 * @summary List users
 */
export const listUsersQueryPageDefault = 0;
export const listUsersQueryPageMin = 0;
export const listUsersQuerySizeDefault = 20;
export const listUsersQuerySizeMax = 100;
export const listUsersQuerySortByDefault = "createdAt";export const listUsersQuerySortOrderDefault = "desc";

export const listUsersQueryParams = zod.object({
  "page": zod.number().min(listUsersQueryPageMin).optional().describe('Page number (0-based)'),
  "size": zod.number().min(1).max(listUsersQuerySizeMax).default(listUsersQuerySizeDefault).describe('Page size'),
  "sortBy": zod.string().default(listUsersQuerySortByDefault).describe('Field to sort by'),
  "sortOrder": zod.string().default(listUsersQuerySortOrderDefault).describe('Sort order'),
  "search": zod.string().optional().describe('Search by username, first name, or last name'),
  "role": zod.enum(['OPERATOR', 'MANAGER', 'ADMIN', 'CLEANER', 'DRIVER', 'ACCOUNTANT']).optional().describe('Filter by role'),
  "branchId": zod.uuid().optional().describe('Filter by branch'),
  "active": zod.boolean().optional().describe('Filter by active status')
})

export const listUsersResponseDataItemRolesMax = 2147483647;


export const listUsersResponse = zod.object({
  "data": zod.array(zod.object({
  "id": zod.uuid().describe('User ID'),
  "username": zod.string().describe('Username'),
  "firstName": zod.string().describe('First name'),
  "lastName": zod.string().describe('Last name'),
  "email": zod.string().describe('Email address'),
  "roles": zod.array(zod.enum(['OPERATOR', 'MANAGER', 'ADMIN', 'CLEANER', 'DRIVER', 'ACCOUNTANT'])).min(1).max(listUsersResponseDataItemRolesMax),
  "active": zod.boolean().describe('Is user active'),
  "createdAt": zod.iso.datetime({}).describe('Creation timestamp'),
  "lastLoginAt": zod.iso.datetime({}).optional().describe('Last login timestamp')
})),
  "totalElements": zod.number().describe('Total number of elements'),
  "totalPages": zod.number().describe('Total number of pages'),
  "size": zod.number().describe('Page size'),
  "number": zod.number().describe('Current page number (0-based)'),
  "numberOfElements": zod.number().describe('Number of elements in current page'),
  "first": zod.boolean().describe('Is first page'),
  "last": zod.boolean().describe('Is last page'),
  "empty": zod.boolean().describe('Is page empty')
})


/**
 * Create a new system user
 * @summary Create new user
 */
export const createUserBodyUsernameMin = 3;

export const createUserBodyUsernameMax = 50;

export const createUserBodyUsernameRegExp = new RegExp('^[a-zA-Z0-9_]+$');
export const createUserBodyPasswordMin = 8;

export const createUserBodyPasswordMax = 100;

export const createUserBodyPasswordRegExp = new RegExp('^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$');
export const createUserBodyFirstNameMax = 100;

export const createUserBodyFirstNameRegExp = new RegExp('^[a-zA-Z\\u0400-\\u04FF\\s\\-]+$');
export const createUserBodyLastNameMax = 100;

export const createUserBodyLastNameRegExp = new RegExp('^[a-zA-Z\\u0400-\\u04FF\\s\\-]+$');
export const createUserBodyEmailMin = 0;

export const createUserBodyEmailMax = 255;
export const createUserBodyPhoneRegExp = new RegExp('^\\+?[0-9]{10,15}$');
export const createUserBodyRolesMax = 10;
export const createUserBodyBranchIdsMin = 0;

export const createUserBodyBranchIdsMax = 50;


export const createUserBody = zod.object({
  "username": zod.string().min(createUserBodyUsernameMin).max(createUserBodyUsernameMax).regex(createUserBodyUsernameRegExp).describe('Username (must be unique)'),
  "password": zod.string().min(createUserBodyPasswordMin).max(createUserBodyPasswordMax).regex(createUserBodyPasswordRegExp).describe('Password (min 8 chars, must contain uppercase, lowercase, number and special char)'),
  "firstName": zod.string().min(1).max(createUserBodyFirstNameMax).regex(createUserBodyFirstNameRegExp).describe('First name (letters only)'),
  "lastName": zod.string().min(1).max(createUserBodyLastNameMax).regex(createUserBodyLastNameRegExp).describe('Last name (letters only)'),
  "email": zod.string().min(createUserBodyEmailMin).max(createUserBodyEmailMax).describe('Email address (must be unique)'),
  "phone": zod.string().regex(createUserBodyPhoneRegExp).optional().describe('Phone number (optional, international format)'),
  "roles": zod.array(zod.enum(['OPERATOR', 'MANAGER', 'ADMIN', 'CLEANER', 'DRIVER', 'ACCOUNTANT'])).min(1).max(createUserBodyRolesMax).optional().describe('User roles (defaults to OPERATOR if not specified)'),
  "branchIds": zod.array(zod.uuid()).min(createUserBodyBranchIdsMin).max(createUserBodyBranchIdsMax).optional().describe('Branch IDs to assign (optional)'),
  "primaryBranchId": zod.uuid().optional().describe('Primary branch ID (must be in branchIds if provided)'),
  "active": zod.boolean().optional().describe('Account active status'),
  "emailVerified": zod.boolean().optional().describe('Email verification status')
})


/**
 * Deactivate an active user
 * @summary Deactivate user
 */
export const deactivateUserParams = zod.object({
  "userId": zod.uuid().describe('User ID')
})

export const deactivateUserResponseRolesMax = 2147483647;
export const deactivateUserResponsePhoneRegExp = new RegExp('^\\+?[0-9]{10,15}$');


export const deactivateUserResponse = zod.object({
  "id": zod.uuid().describe('User ID'),
  "username": zod.string().describe('Username'),
  "firstName": zod.string().describe('First name'),
  "lastName": zod.string().describe('Last name'),
  "email": zod.string().describe('Email address'),
  "roles": zod.array(zod.enum(['OPERATOR', 'MANAGER', 'ADMIN', 'CLEANER', 'DRIVER', 'ACCOUNTANT'])).min(1).max(deactivateUserResponseRolesMax),
  "active": zod.boolean().describe('Is user active'),
  "createdAt": zod.iso.datetime({}).describe('Creation timestamp'),
  "lastLoginAt": zod.iso.datetime({}).optional().describe('Last login timestamp'),
  "phone": zod.string().regex(deactivateUserResponsePhoneRegExp).optional().describe('Phone number'),
  "branches": zod.array(zod.object({
  "branchId": zod.uuid().describe('Branch ID'),
  "branchName": zod.string().describe('Branch name'),
  "isPrimary": zod.boolean().describe('Is this the primary branch')
})).describe('Assigned branches'),
  "updatedAt": zod.iso.datetime({}).describe('Last update timestamp'),
  "createdBy": zod.uuid().optional().describe('ID of user who created this user'),
  "updatedBy": zod.uuid().optional().describe('ID of user who last updated this user')
})


/**
 * Activate a deactivated user
 * @summary Activate user
 */
export const activateUserParams = zod.object({
  "userId": zod.uuid().describe('User ID')
})

export const activateUserResponseRolesMax = 2147483647;
export const activateUserResponsePhoneRegExp = new RegExp('^\\+?[0-9]{10,15}$');


export const activateUserResponse = zod.object({
  "id": zod.uuid().describe('User ID'),
  "username": zod.string().describe('Username'),
  "firstName": zod.string().describe('First name'),
  "lastName": zod.string().describe('Last name'),
  "email": zod.string().describe('Email address'),
  "roles": zod.array(zod.enum(['OPERATOR', 'MANAGER', 'ADMIN', 'CLEANER', 'DRIVER', 'ACCOUNTANT'])).min(1).max(activateUserResponseRolesMax),
  "active": zod.boolean().describe('Is user active'),
  "createdAt": zod.iso.datetime({}).describe('Creation timestamp'),
  "lastLoginAt": zod.iso.datetime({}).optional().describe('Last login timestamp'),
  "phone": zod.string().regex(activateUserResponsePhoneRegExp).optional().describe('Phone number'),
  "branches": zod.array(zod.object({
  "branchId": zod.uuid().describe('Branch ID'),
  "branchName": zod.string().describe('Branch name'),
  "isPrimary": zod.boolean().describe('Is this the primary branch')
})).describe('Assigned branches'),
  "updatedAt": zod.iso.datetime({}).describe('Last update timestamp'),
  "createdBy": zod.uuid().optional().describe('ID of user who created this user'),
  "updatedBy": zod.uuid().optional().describe('ID of user who last updated this user')
})


/**
 * Get detailed information about a user
 * @summary Get user details
 */
export const getUserByIdParams = zod.object({
  "userId": zod.uuid().describe('User ID')
})

export const getUserByIdResponseRolesMax = 2147483647;
export const getUserByIdResponsePhoneRegExp = new RegExp('^\\+?[0-9]{10,15}$');


export const getUserByIdResponse = zod.object({
  "id": zod.uuid().describe('User ID'),
  "username": zod.string().describe('Username'),
  "firstName": zod.string().describe('First name'),
  "lastName": zod.string().describe('Last name'),
  "email": zod.string().describe('Email address'),
  "roles": zod.array(zod.enum(['OPERATOR', 'MANAGER', 'ADMIN', 'CLEANER', 'DRIVER', 'ACCOUNTANT'])).min(1).max(getUserByIdResponseRolesMax),
  "active": zod.boolean().describe('Is user active'),
  "createdAt": zod.iso.datetime({}).describe('Creation timestamp'),
  "lastLoginAt": zod.iso.datetime({}).optional().describe('Last login timestamp'),
  "phone": zod.string().regex(getUserByIdResponsePhoneRegExp).optional().describe('Phone number'),
  "branches": zod.array(zod.object({
  "branchId": zod.uuid().describe('Branch ID'),
  "branchName": zod.string().describe('Branch name'),
  "isPrimary": zod.boolean().describe('Is this the primary branch')
})).describe('Assigned branches'),
  "updatedAt": zod.iso.datetime({}).describe('Last update timestamp'),
  "createdBy": zod.uuid().optional().describe('ID of user who created this user'),
  "updatedBy": zod.uuid().optional().describe('ID of user who last updated this user')
})


/**
 * Update user information
 * @summary Update user
 */
export const updateUserParams = zod.object({
  "userId": zod.uuid().describe('User ID')
})

export const updateUserBodyFirstNameMax = 100;
export const updateUserBodyLastNameMax = 100;
export const updateUserBodyPhoneRegExp = new RegExp('^\\+?[0-9]{10,15}$');


export const updateUserBody = zod.object({
  "firstName": zod.string().min(1).max(updateUserBodyFirstNameMax).optional().describe('First name'),
  "lastName": zod.string().min(1).max(updateUserBodyLastNameMax).optional().describe('Last name'),
  "email": zod.string().optional().describe('Email address'),
  "phone": zod.string().regex(updateUserBodyPhoneRegExp).optional().describe('Phone number')
})

export const updateUserResponseRolesMax = 2147483647;
export const updateUserResponsePhoneRegExp = new RegExp('^\\+?[0-9]{10,15}$');


export const updateUserResponse = zod.object({
  "id": zod.uuid().describe('User ID'),
  "username": zod.string().describe('Username'),
  "firstName": zod.string().describe('First name'),
  "lastName": zod.string().describe('Last name'),
  "email": zod.string().describe('Email address'),
  "roles": zod.array(zod.enum(['OPERATOR', 'MANAGER', 'ADMIN', 'CLEANER', 'DRIVER', 'ACCOUNTANT'])).min(1).max(updateUserResponseRolesMax),
  "active": zod.boolean().describe('Is user active'),
  "createdAt": zod.iso.datetime({}).describe('Creation timestamp'),
  "lastLoginAt": zod.iso.datetime({}).optional().describe('Last login timestamp'),
  "phone": zod.string().regex(updateUserResponsePhoneRegExp).optional().describe('Phone number'),
  "branches": zod.array(zod.object({
  "branchId": zod.uuid().describe('Branch ID'),
  "branchName": zod.string().describe('Branch name'),
  "isPrimary": zod.boolean().describe('Is this the primary branch')
})).describe('Assigned branches'),
  "updatedAt": zod.iso.datetime({}).describe('Last update timestamp'),
  "createdBy": zod.uuid().optional().describe('ID of user who created this user'),
  "updatedBy": zod.uuid().optional().describe('ID of user who last updated this user')
})


/**
 * Get all permissions for a user based on their roles
 * @summary Get user permissions
 */
export const getUserPermissionsParams = zod.object({
  "userId": zod.uuid().describe('User ID')
})

export const getUserPermissionsResponseItem = zod.string()
export const getUserPermissionsResponse = zod.array(getUserPermissionsResponseItem)


/**
 * Get all permissions associated with a specific role
 * @summary Get role permissions
 */
export const getRolePermissionsParams = zod.object({
  "role": zod.enum(['OPERATOR', 'MANAGER', 'ADMIN', 'CLEANER', 'DRIVER', 'ACCOUNTANT']).describe('User role')
})

export const getRolePermissionsResponseItem = zod.string()
export const getRolePermissionsResponse = zod.array(getRolePermissionsResponseItem)
