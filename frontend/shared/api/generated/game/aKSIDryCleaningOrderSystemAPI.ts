/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * AKSI Dry Cleaning Order System API
 * API for dry cleaning order management system with Domain-Driven Design architecture. The system includes 13 domains: Auth, User, Customer, Branch, Employee, Order, OrderItem, Service, Garment, Pricing, Payment, Notification, and Analytics.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  Booster,
  BoosterListResponse,
  CalculationRequest,
  CalculationResult,
  CreateBoosterRequest,
  CreateDifficultyLevelRequest,
  CreateGameRequest,
  CreatePriceConfigurationRequest,
  CreateServiceTypeRequest,
  DifficultyLevel,
  DifficultyLevelListResponse,
  ErrorResponse,
  Game,
  GameListResponse,
  GamesListBoostersParams,
  GamesListDifficultyLevelsParams,
  GamesListGamesParams,
  GamesListPriceConfigurationsParams,
  GamesListServiceTypesParams,
  GamesSetServiceTypeActiveParams,
  PriceConfiguration,
  PriceConfigurationListResponse,
  ServiceType,
  ServiceTypeListResponse,
  UpdateBoosterRequest,
  UpdateDifficultyLevelRequest,
  UpdateGameRequest,
  UpdatePriceConfigurationRequest,
  UpdateServiceTypeRequest
} from './aKSIDryCleaningOrderSystemAPI.schemas';

import orvalFetcher from '../../../../lib/api/orval-fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Retrieve detailed information about a specific service type
 * @summary Get service type by ID
 */
export const gamesGetServiceTypeById = (
    serviceTypeId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<ServiceType>(
      {url: `/api/games/service-types/${serviceTypeId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGamesGetServiceTypeByIdQueryKey = (serviceTypeId?: string,) => {
    return [`/api/games/service-types/${serviceTypeId}`] as const;
    }

    
export const getGamesGetServiceTypeByIdQueryOptions = <TData = Awaited<ReturnType<typeof gamesGetServiceTypeById>>, TError = ErrorResponse | ErrorResponse>(serviceTypeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetServiceTypeById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGamesGetServiceTypeByIdQueryKey(serviceTypeId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof gamesGetServiceTypeById>>> = ({ signal }) => gamesGetServiceTypeById(serviceTypeId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceTypeId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof gamesGetServiceTypeById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GamesGetServiceTypeByIdQueryResult = NonNullable<Awaited<ReturnType<typeof gamesGetServiceTypeById>>>
export type GamesGetServiceTypeByIdQueryError = ErrorResponse | ErrorResponse


export function useGamesGetServiceTypeById<TData = Awaited<ReturnType<typeof gamesGetServiceTypeById>>, TError = ErrorResponse | ErrorResponse>(
 serviceTypeId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetServiceTypeById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof gamesGetServiceTypeById>>,
          TError,
          Awaited<ReturnType<typeof gamesGetServiceTypeById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGamesGetServiceTypeById<TData = Awaited<ReturnType<typeof gamesGetServiceTypeById>>, TError = ErrorResponse | ErrorResponse>(
 serviceTypeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetServiceTypeById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof gamesGetServiceTypeById>>,
          TError,
          Awaited<ReturnType<typeof gamesGetServiceTypeById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGamesGetServiceTypeById<TData = Awaited<ReturnType<typeof gamesGetServiceTypeById>>, TError = ErrorResponse | ErrorResponse>(
 serviceTypeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetServiceTypeById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get service type by ID
 */

export function useGamesGetServiceTypeById<TData = Awaited<ReturnType<typeof gamesGetServiceTypeById>>, TError = ErrorResponse | ErrorResponse>(
 serviceTypeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetServiceTypeById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGamesGetServiceTypeByIdQueryOptions(serviceTypeId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Update an existing service type's information
 * @summary Update service type
 */
export const gamesUpdateServiceType = (
    serviceTypeId: string,
    updateServiceTypeRequest: UpdateServiceTypeRequest,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<ServiceType>(
      {url: `/api/games/service-types/${serviceTypeId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateServiceTypeRequest
    },
      options);
    }
  


export const getGamesUpdateServiceTypeMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesUpdateServiceType>>, TError,{serviceTypeId: string;data: UpdateServiceTypeRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof gamesUpdateServiceType>>, TError,{serviceTypeId: string;data: UpdateServiceTypeRequest}, TContext> => {

const mutationKey = ['gamesUpdateServiceType'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof gamesUpdateServiceType>>, {serviceTypeId: string;data: UpdateServiceTypeRequest}> = (props) => {
          const {serviceTypeId,data} = props ?? {};

          return  gamesUpdateServiceType(serviceTypeId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GamesUpdateServiceTypeMutationResult = NonNullable<Awaited<ReturnType<typeof gamesUpdateServiceType>>>
    export type GamesUpdateServiceTypeMutationBody = UpdateServiceTypeRequest
    export type GamesUpdateServiceTypeMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Update service type
 */
export const useGamesUpdateServiceType = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesUpdateServiceType>>, TError,{serviceTypeId: string;data: UpdateServiceTypeRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof gamesUpdateServiceType>>,
        TError,
        {serviceTypeId: string;data: UpdateServiceTypeRequest},
        TContext
      > => {

      const mutationOptions = getGamesUpdateServiceTypeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Permanently delete a service type from the system
 * @summary Delete service type
 */
export const gamesDeleteServiceType = (
    serviceTypeId: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<null>(
      {url: `/api/games/service-types/${serviceTypeId}`, method: 'DELETE'
    },
      options);
    }
  


export const getGamesDeleteServiceTypeMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesDeleteServiceType>>, TError,{serviceTypeId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof gamesDeleteServiceType>>, TError,{serviceTypeId: string}, TContext> => {

const mutationKey = ['gamesDeleteServiceType'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof gamesDeleteServiceType>>, {serviceTypeId: string}> = (props) => {
          const {serviceTypeId} = props ?? {};

          return  gamesDeleteServiceType(serviceTypeId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GamesDeleteServiceTypeMutationResult = NonNullable<Awaited<ReturnType<typeof gamesDeleteServiceType>>>
    
    export type GamesDeleteServiceTypeMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Delete service type
 */
export const useGamesDeleteServiceType = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesDeleteServiceType>>, TError,{serviceTypeId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof gamesDeleteServiceType>>,
        TError,
        {serviceTypeId: string},
        TContext
      > => {

      const mutationOptions = getGamesDeleteServiceTypeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Update the active status of a service type
 * @summary Set service type active status
 */
export const gamesSetServiceTypeActive = (
    serviceTypeId: string,
    params: GamesSetServiceTypeActiveParams,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<ServiceType>(
      {url: `/api/games/service-types/${serviceTypeId}`, method: 'PATCH',
        params
    },
      options);
    }
  


export const getGamesSetServiceTypeActiveMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesSetServiceTypeActive>>, TError,{serviceTypeId: string;params: GamesSetServiceTypeActiveParams}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof gamesSetServiceTypeActive>>, TError,{serviceTypeId: string;params: GamesSetServiceTypeActiveParams}, TContext> => {

const mutationKey = ['gamesSetServiceTypeActive'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof gamesSetServiceTypeActive>>, {serviceTypeId: string;params: GamesSetServiceTypeActiveParams}> = (props) => {
          const {serviceTypeId,params} = props ?? {};

          return  gamesSetServiceTypeActive(serviceTypeId,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GamesSetServiceTypeActiveMutationResult = NonNullable<Awaited<ReturnType<typeof gamesSetServiceTypeActive>>>
    
    export type GamesSetServiceTypeActiveMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Set service type active status
 */
export const useGamesSetServiceTypeActive = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesSetServiceTypeActive>>, TError,{serviceTypeId: string;params: GamesSetServiceTypeActiveParams}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof gamesSetServiceTypeActive>>,
        TError,
        {serviceTypeId: string;params: GamesSetServiceTypeActiveParams},
        TContext
      > => {

      const mutationOptions = getGamesSetServiceTypeActiveMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Retrieve detailed information about a specific price configuration
 * @summary Get price configuration by ID
 */
export const gamesGetPriceConfigurationById = (
    configId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<PriceConfiguration>(
      {url: `/api/games/price-configurations/${configId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGamesGetPriceConfigurationByIdQueryKey = (configId?: string,) => {
    return [`/api/games/price-configurations/${configId}`] as const;
    }

    
export const getGamesGetPriceConfigurationByIdQueryOptions = <TData = Awaited<ReturnType<typeof gamesGetPriceConfigurationById>>, TError = ErrorResponse | ErrorResponse>(configId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetPriceConfigurationById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGamesGetPriceConfigurationByIdQueryKey(configId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof gamesGetPriceConfigurationById>>> = ({ signal }) => gamesGetPriceConfigurationById(configId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(configId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof gamesGetPriceConfigurationById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GamesGetPriceConfigurationByIdQueryResult = NonNullable<Awaited<ReturnType<typeof gamesGetPriceConfigurationById>>>
export type GamesGetPriceConfigurationByIdQueryError = ErrorResponse | ErrorResponse


export function useGamesGetPriceConfigurationById<TData = Awaited<ReturnType<typeof gamesGetPriceConfigurationById>>, TError = ErrorResponse | ErrorResponse>(
 configId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetPriceConfigurationById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof gamesGetPriceConfigurationById>>,
          TError,
          Awaited<ReturnType<typeof gamesGetPriceConfigurationById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGamesGetPriceConfigurationById<TData = Awaited<ReturnType<typeof gamesGetPriceConfigurationById>>, TError = ErrorResponse | ErrorResponse>(
 configId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetPriceConfigurationById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof gamesGetPriceConfigurationById>>,
          TError,
          Awaited<ReturnType<typeof gamesGetPriceConfigurationById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGamesGetPriceConfigurationById<TData = Awaited<ReturnType<typeof gamesGetPriceConfigurationById>>, TError = ErrorResponse | ErrorResponse>(
 configId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetPriceConfigurationById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get price configuration by ID
 */

export function useGamesGetPriceConfigurationById<TData = Awaited<ReturnType<typeof gamesGetPriceConfigurationById>>, TError = ErrorResponse | ErrorResponse>(
 configId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetPriceConfigurationById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGamesGetPriceConfigurationByIdQueryOptions(configId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Update an existing price configuration's information
 * @summary Update price configuration
 */
export const gamesUpdatePriceConfiguration = (
    configId: string,
    updatePriceConfigurationRequest: UpdatePriceConfigurationRequest,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<PriceConfiguration>(
      {url: `/api/games/price-configurations/${configId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updatePriceConfigurationRequest
    },
      options);
    }
  


export const getGamesUpdatePriceConfigurationMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesUpdatePriceConfiguration>>, TError,{configId: string;data: UpdatePriceConfigurationRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof gamesUpdatePriceConfiguration>>, TError,{configId: string;data: UpdatePriceConfigurationRequest}, TContext> => {

const mutationKey = ['gamesUpdatePriceConfiguration'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof gamesUpdatePriceConfiguration>>, {configId: string;data: UpdatePriceConfigurationRequest}> = (props) => {
          const {configId,data} = props ?? {};

          return  gamesUpdatePriceConfiguration(configId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GamesUpdatePriceConfigurationMutationResult = NonNullable<Awaited<ReturnType<typeof gamesUpdatePriceConfiguration>>>
    export type GamesUpdatePriceConfigurationMutationBody = UpdatePriceConfigurationRequest
    export type GamesUpdatePriceConfigurationMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Update price configuration
 */
export const useGamesUpdatePriceConfiguration = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesUpdatePriceConfiguration>>, TError,{configId: string;data: UpdatePriceConfigurationRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof gamesUpdatePriceConfiguration>>,
        TError,
        {configId: string;data: UpdatePriceConfigurationRequest},
        TContext
      > => {

      const mutationOptions = getGamesUpdatePriceConfigurationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Permanently delete a price configuration from the system
 * @summary Delete price configuration
 */
export const gamesDeletePriceConfiguration = (
    configId: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<null>(
      {url: `/api/games/price-configurations/${configId}`, method: 'DELETE'
    },
      options);
    }
  


export const getGamesDeletePriceConfigurationMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesDeletePriceConfiguration>>, TError,{configId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof gamesDeletePriceConfiguration>>, TError,{configId: string}, TContext> => {

const mutationKey = ['gamesDeletePriceConfiguration'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof gamesDeletePriceConfiguration>>, {configId: string}> = (props) => {
          const {configId} = props ?? {};

          return  gamesDeletePriceConfiguration(configId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GamesDeletePriceConfigurationMutationResult = NonNullable<Awaited<ReturnType<typeof gamesDeletePriceConfiguration>>>
    
    export type GamesDeletePriceConfigurationMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Delete price configuration
 */
export const useGamesDeletePriceConfiguration = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesDeletePriceConfiguration>>, TError,{configId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof gamesDeletePriceConfiguration>>,
        TError,
        {configId: string},
        TContext
      > => {

      const mutationOptions = getGamesDeletePriceConfigurationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Retrieve detailed information about a specific difficulty level
 * @summary Get difficulty level by ID
 */
export const gamesGetDifficultyLevelById = (
    difficultyLevelId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<DifficultyLevel>(
      {url: `/api/games/difficulty-levels/${difficultyLevelId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGamesGetDifficultyLevelByIdQueryKey = (difficultyLevelId?: string,) => {
    return [`/api/games/difficulty-levels/${difficultyLevelId}`] as const;
    }

    
export const getGamesGetDifficultyLevelByIdQueryOptions = <TData = Awaited<ReturnType<typeof gamesGetDifficultyLevelById>>, TError = ErrorResponse | ErrorResponse>(difficultyLevelId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetDifficultyLevelById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGamesGetDifficultyLevelByIdQueryKey(difficultyLevelId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof gamesGetDifficultyLevelById>>> = ({ signal }) => gamesGetDifficultyLevelById(difficultyLevelId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(difficultyLevelId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof gamesGetDifficultyLevelById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GamesGetDifficultyLevelByIdQueryResult = NonNullable<Awaited<ReturnType<typeof gamesGetDifficultyLevelById>>>
export type GamesGetDifficultyLevelByIdQueryError = ErrorResponse | ErrorResponse


export function useGamesGetDifficultyLevelById<TData = Awaited<ReturnType<typeof gamesGetDifficultyLevelById>>, TError = ErrorResponse | ErrorResponse>(
 difficultyLevelId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetDifficultyLevelById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof gamesGetDifficultyLevelById>>,
          TError,
          Awaited<ReturnType<typeof gamesGetDifficultyLevelById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGamesGetDifficultyLevelById<TData = Awaited<ReturnType<typeof gamesGetDifficultyLevelById>>, TError = ErrorResponse | ErrorResponse>(
 difficultyLevelId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetDifficultyLevelById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof gamesGetDifficultyLevelById>>,
          TError,
          Awaited<ReturnType<typeof gamesGetDifficultyLevelById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGamesGetDifficultyLevelById<TData = Awaited<ReturnType<typeof gamesGetDifficultyLevelById>>, TError = ErrorResponse | ErrorResponse>(
 difficultyLevelId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetDifficultyLevelById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get difficulty level by ID
 */

export function useGamesGetDifficultyLevelById<TData = Awaited<ReturnType<typeof gamesGetDifficultyLevelById>>, TError = ErrorResponse | ErrorResponse>(
 difficultyLevelId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetDifficultyLevelById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGamesGetDifficultyLevelByIdQueryOptions(difficultyLevelId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Update an existing difficulty level's information
 * @summary Update difficulty level
 */
export const gamesUpdateDifficultyLevel = (
    difficultyLevelId: string,
    updateDifficultyLevelRequest: UpdateDifficultyLevelRequest,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<DifficultyLevel>(
      {url: `/api/games/difficulty-levels/${difficultyLevelId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateDifficultyLevelRequest
    },
      options);
    }
  


export const getGamesUpdateDifficultyLevelMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesUpdateDifficultyLevel>>, TError,{difficultyLevelId: string;data: UpdateDifficultyLevelRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof gamesUpdateDifficultyLevel>>, TError,{difficultyLevelId: string;data: UpdateDifficultyLevelRequest}, TContext> => {

const mutationKey = ['gamesUpdateDifficultyLevel'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof gamesUpdateDifficultyLevel>>, {difficultyLevelId: string;data: UpdateDifficultyLevelRequest}> = (props) => {
          const {difficultyLevelId,data} = props ?? {};

          return  gamesUpdateDifficultyLevel(difficultyLevelId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GamesUpdateDifficultyLevelMutationResult = NonNullable<Awaited<ReturnType<typeof gamesUpdateDifficultyLevel>>>
    export type GamesUpdateDifficultyLevelMutationBody = UpdateDifficultyLevelRequest
    export type GamesUpdateDifficultyLevelMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Update difficulty level
 */
export const useGamesUpdateDifficultyLevel = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesUpdateDifficultyLevel>>, TError,{difficultyLevelId: string;data: UpdateDifficultyLevelRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof gamesUpdateDifficultyLevel>>,
        TError,
        {difficultyLevelId: string;data: UpdateDifficultyLevelRequest},
        TContext
      > => {

      const mutationOptions = getGamesUpdateDifficultyLevelMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Permanently delete a difficulty level from the system
 * @summary Delete difficulty level
 */
export const gamesDeleteDifficultyLevel = (
    difficultyLevelId: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<null>(
      {url: `/api/games/difficulty-levels/${difficultyLevelId}`, method: 'DELETE'
    },
      options);
    }
  


export const getGamesDeleteDifficultyLevelMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesDeleteDifficultyLevel>>, TError,{difficultyLevelId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof gamesDeleteDifficultyLevel>>, TError,{difficultyLevelId: string}, TContext> => {

const mutationKey = ['gamesDeleteDifficultyLevel'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof gamesDeleteDifficultyLevel>>, {difficultyLevelId: string}> = (props) => {
          const {difficultyLevelId} = props ?? {};

          return  gamesDeleteDifficultyLevel(difficultyLevelId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GamesDeleteDifficultyLevelMutationResult = NonNullable<Awaited<ReturnType<typeof gamesDeleteDifficultyLevel>>>
    
    export type GamesDeleteDifficultyLevelMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Delete difficulty level
 */
export const useGamesDeleteDifficultyLevel = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesDeleteDifficultyLevel>>, TError,{difficultyLevelId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof gamesDeleteDifficultyLevel>>,
        TError,
        {difficultyLevelId: string},
        TContext
      > => {

      const mutationOptions = getGamesDeleteDifficultyLevelMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Retrieve detailed information about a specific game
 * @summary Get game by ID
 */
export const gamesGetGameById = (
    gameId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Game>(
      {url: `/api/games/by-id/${gameId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGamesGetGameByIdQueryKey = (gameId?: string,) => {
    return [`/api/games/by-id/${gameId}`] as const;
    }

    
export const getGamesGetGameByIdQueryOptions = <TData = Awaited<ReturnType<typeof gamesGetGameById>>, TError = ErrorResponse | ErrorResponse>(gameId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetGameById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGamesGetGameByIdQueryKey(gameId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof gamesGetGameById>>> = ({ signal }) => gamesGetGameById(gameId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(gameId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof gamesGetGameById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GamesGetGameByIdQueryResult = NonNullable<Awaited<ReturnType<typeof gamesGetGameById>>>
export type GamesGetGameByIdQueryError = ErrorResponse | ErrorResponse


export function useGamesGetGameById<TData = Awaited<ReturnType<typeof gamesGetGameById>>, TError = ErrorResponse | ErrorResponse>(
 gameId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetGameById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof gamesGetGameById>>,
          TError,
          Awaited<ReturnType<typeof gamesGetGameById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGamesGetGameById<TData = Awaited<ReturnType<typeof gamesGetGameById>>, TError = ErrorResponse | ErrorResponse>(
 gameId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetGameById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof gamesGetGameById>>,
          TError,
          Awaited<ReturnType<typeof gamesGetGameById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGamesGetGameById<TData = Awaited<ReturnType<typeof gamesGetGameById>>, TError = ErrorResponse | ErrorResponse>(
 gameId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetGameById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get game by ID
 */

export function useGamesGetGameById<TData = Awaited<ReturnType<typeof gamesGetGameById>>, TError = ErrorResponse | ErrorResponse>(
 gameId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetGameById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGamesGetGameByIdQueryOptions(gameId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Update an existing game's information
 * @summary Update game
 */
export const gamesUpdateGame = (
    gameId: string,
    updateGameRequest: UpdateGameRequest,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<Game>(
      {url: `/api/games/by-id/${gameId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateGameRequest
    },
      options);
    }
  


export const getGamesUpdateGameMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesUpdateGame>>, TError,{gameId: string;data: UpdateGameRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof gamesUpdateGame>>, TError,{gameId: string;data: UpdateGameRequest}, TContext> => {

const mutationKey = ['gamesUpdateGame'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof gamesUpdateGame>>, {gameId: string;data: UpdateGameRequest}> = (props) => {
          const {gameId,data} = props ?? {};

          return  gamesUpdateGame(gameId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GamesUpdateGameMutationResult = NonNullable<Awaited<ReturnType<typeof gamesUpdateGame>>>
    export type GamesUpdateGameMutationBody = UpdateGameRequest
    export type GamesUpdateGameMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Update game
 */
export const useGamesUpdateGame = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesUpdateGame>>, TError,{gameId: string;data: UpdateGameRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof gamesUpdateGame>>,
        TError,
        {gameId: string;data: UpdateGameRequest},
        TContext
      > => {

      const mutationOptions = getGamesUpdateGameMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Permanently delete a game from the system
 * @summary Delete game
 */
export const gamesDeleteGame = (
    gameId: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<null>(
      {url: `/api/games/by-id/${gameId}`, method: 'DELETE'
    },
      options);
    }
  


export const getGamesDeleteGameMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesDeleteGame>>, TError,{gameId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof gamesDeleteGame>>, TError,{gameId: string}, TContext> => {

const mutationKey = ['gamesDeleteGame'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof gamesDeleteGame>>, {gameId: string}> = (props) => {
          const {gameId} = props ?? {};

          return  gamesDeleteGame(gameId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GamesDeleteGameMutationResult = NonNullable<Awaited<ReturnType<typeof gamesDeleteGame>>>
    
    export type GamesDeleteGameMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Delete game
 */
export const useGamesDeleteGame = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesDeleteGame>>, TError,{gameId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof gamesDeleteGame>>,
        TError,
        {gameId: string},
        TContext
      > => {

      const mutationOptions = getGamesDeleteGameMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Retrieve detailed information about a specific booster
 * @summary Get booster by ID
 */
export const gamesGetBoosterById = (
    boosterId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Booster>(
      {url: `/api/games/boosters/${boosterId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGamesGetBoosterByIdQueryKey = (boosterId?: string,) => {
    return [`/api/games/boosters/${boosterId}`] as const;
    }

    
export const getGamesGetBoosterByIdQueryOptions = <TData = Awaited<ReturnType<typeof gamesGetBoosterById>>, TError = ErrorResponse | ErrorResponse>(boosterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetBoosterById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGamesGetBoosterByIdQueryKey(boosterId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof gamesGetBoosterById>>> = ({ signal }) => gamesGetBoosterById(boosterId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(boosterId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof gamesGetBoosterById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GamesGetBoosterByIdQueryResult = NonNullable<Awaited<ReturnType<typeof gamesGetBoosterById>>>
export type GamesGetBoosterByIdQueryError = ErrorResponse | ErrorResponse


export function useGamesGetBoosterById<TData = Awaited<ReturnType<typeof gamesGetBoosterById>>, TError = ErrorResponse | ErrorResponse>(
 boosterId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetBoosterById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof gamesGetBoosterById>>,
          TError,
          Awaited<ReturnType<typeof gamesGetBoosterById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGamesGetBoosterById<TData = Awaited<ReturnType<typeof gamesGetBoosterById>>, TError = ErrorResponse | ErrorResponse>(
 boosterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetBoosterById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof gamesGetBoosterById>>,
          TError,
          Awaited<ReturnType<typeof gamesGetBoosterById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGamesGetBoosterById<TData = Awaited<ReturnType<typeof gamesGetBoosterById>>, TError = ErrorResponse | ErrorResponse>(
 boosterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetBoosterById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get booster by ID
 */

export function useGamesGetBoosterById<TData = Awaited<ReturnType<typeof gamesGetBoosterById>>, TError = ErrorResponse | ErrorResponse>(
 boosterId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetBoosterById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGamesGetBoosterByIdQueryOptions(boosterId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Update an existing booster's information
 * @summary Update booster
 */
export const gamesUpdateBooster = (
    boosterId: string,
    updateBoosterRequest: UpdateBoosterRequest,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<Booster>(
      {url: `/api/games/boosters/${boosterId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateBoosterRequest
    },
      options);
    }
  


export const getGamesUpdateBoosterMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesUpdateBooster>>, TError,{boosterId: string;data: UpdateBoosterRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof gamesUpdateBooster>>, TError,{boosterId: string;data: UpdateBoosterRequest}, TContext> => {

const mutationKey = ['gamesUpdateBooster'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof gamesUpdateBooster>>, {boosterId: string;data: UpdateBoosterRequest}> = (props) => {
          const {boosterId,data} = props ?? {};

          return  gamesUpdateBooster(boosterId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GamesUpdateBoosterMutationResult = NonNullable<Awaited<ReturnType<typeof gamesUpdateBooster>>>
    export type GamesUpdateBoosterMutationBody = UpdateBoosterRequest
    export type GamesUpdateBoosterMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Update booster
 */
export const useGamesUpdateBooster = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesUpdateBooster>>, TError,{boosterId: string;data: UpdateBoosterRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof gamesUpdateBooster>>,
        TError,
        {boosterId: string;data: UpdateBoosterRequest},
        TContext
      > => {

      const mutationOptions = getGamesUpdateBoosterMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Permanently delete a booster from the system
 * @summary Delete booster
 */
export const gamesDeleteBooster = (
    boosterId: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<null>(
      {url: `/api/games/boosters/${boosterId}`, method: 'DELETE'
    },
      options);
    }
  


export const getGamesDeleteBoosterMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesDeleteBooster>>, TError,{boosterId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof gamesDeleteBooster>>, TError,{boosterId: string}, TContext> => {

const mutationKey = ['gamesDeleteBooster'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof gamesDeleteBooster>>, {boosterId: string}> = (props) => {
          const {boosterId} = props ?? {};

          return  gamesDeleteBooster(boosterId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GamesDeleteBoosterMutationResult = NonNullable<Awaited<ReturnType<typeof gamesDeleteBooster>>>
    
    export type GamesDeleteBoosterMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Delete booster
 */
export const useGamesDeleteBooster = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesDeleteBooster>>, TError,{boosterId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof gamesDeleteBooster>>,
        TError,
        {boosterId: string},
        TContext
      > => {

      const mutationOptions = getGamesDeleteBoosterMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Get paginated list of games with optional filtering by active status
 * @summary Get all games
 */
export const gamesListGames = (
    params?: GamesListGamesParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<GameListResponse>(
      {url: `/api/games`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGamesListGamesQueryKey = (params?: GamesListGamesParams,) => {
    return [`/api/games`, ...(params ? [params]: [])] as const;
    }

    
export const getGamesListGamesQueryOptions = <TData = Awaited<ReturnType<typeof gamesListGames>>, TError = ErrorResponse>(params?: GamesListGamesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesListGames>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGamesListGamesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof gamesListGames>>> = ({ signal }) => gamesListGames(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof gamesListGames>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GamesListGamesQueryResult = NonNullable<Awaited<ReturnType<typeof gamesListGames>>>
export type GamesListGamesQueryError = ErrorResponse


export function useGamesListGames<TData = Awaited<ReturnType<typeof gamesListGames>>, TError = ErrorResponse>(
 params: undefined |  GamesListGamesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesListGames>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof gamesListGames>>,
          TError,
          Awaited<ReturnType<typeof gamesListGames>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGamesListGames<TData = Awaited<ReturnType<typeof gamesListGames>>, TError = ErrorResponse>(
 params?: GamesListGamesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesListGames>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof gamesListGames>>,
          TError,
          Awaited<ReturnType<typeof gamesListGames>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGamesListGames<TData = Awaited<ReturnType<typeof gamesListGames>>, TError = ErrorResponse>(
 params?: GamesListGamesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesListGames>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all games
 */

export function useGamesListGames<TData = Awaited<ReturnType<typeof gamesListGames>>, TError = ErrorResponse>(
 params?: GamesListGamesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesListGames>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGamesListGamesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Create a new game entry in the system
 * @summary Create new game
 */
export const gamesCreateGame = (
    createGameRequest: CreateGameRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Game>(
      {url: `/api/games`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createGameRequest, signal
    },
      options);
    }
  


export const getGamesCreateGameMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesCreateGame>>, TError,{data: CreateGameRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof gamesCreateGame>>, TError,{data: CreateGameRequest}, TContext> => {

const mutationKey = ['gamesCreateGame'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof gamesCreateGame>>, {data: CreateGameRequest}> = (props) => {
          const {data} = props ?? {};

          return  gamesCreateGame(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GamesCreateGameMutationResult = NonNullable<Awaited<ReturnType<typeof gamesCreateGame>>>
    export type GamesCreateGameMutationBody = CreateGameRequest
    export type GamesCreateGameMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Create new game
 */
export const useGamesCreateGame = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesCreateGame>>, TError,{data: CreateGameRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof gamesCreateGame>>,
        TError,
        {data: CreateGameRequest},
        TContext
      > => {

      const mutationOptions = getGamesCreateGameMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Get paginated list of service types with optional filtering
 * @summary Get service types
 */
export const gamesListServiceTypes = (
    params?: GamesListServiceTypesParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<ServiceTypeListResponse>(
      {url: `/api/games/service-types`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGamesListServiceTypesQueryKey = (params?: GamesListServiceTypesParams,) => {
    return [`/api/games/service-types`, ...(params ? [params]: [])] as const;
    }

    
export const getGamesListServiceTypesQueryOptions = <TData = Awaited<ReturnType<typeof gamesListServiceTypes>>, TError = ErrorResponse>(params?: GamesListServiceTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesListServiceTypes>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGamesListServiceTypesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof gamesListServiceTypes>>> = ({ signal }) => gamesListServiceTypes(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof gamesListServiceTypes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GamesListServiceTypesQueryResult = NonNullable<Awaited<ReturnType<typeof gamesListServiceTypes>>>
export type GamesListServiceTypesQueryError = ErrorResponse


export function useGamesListServiceTypes<TData = Awaited<ReturnType<typeof gamesListServiceTypes>>, TError = ErrorResponse>(
 params: undefined |  GamesListServiceTypesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesListServiceTypes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof gamesListServiceTypes>>,
          TError,
          Awaited<ReturnType<typeof gamesListServiceTypes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGamesListServiceTypes<TData = Awaited<ReturnType<typeof gamesListServiceTypes>>, TError = ErrorResponse>(
 params?: GamesListServiceTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesListServiceTypes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof gamesListServiceTypes>>,
          TError,
          Awaited<ReturnType<typeof gamesListServiceTypes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGamesListServiceTypes<TData = Awaited<ReturnType<typeof gamesListServiceTypes>>, TError = ErrorResponse>(
 params?: GamesListServiceTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesListServiceTypes>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get service types
 */

export function useGamesListServiceTypes<TData = Awaited<ReturnType<typeof gamesListServiceTypes>>, TError = ErrorResponse>(
 params?: GamesListServiceTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesListServiceTypes>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGamesListServiceTypesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Create a new service type in the system
 * @summary Create service type
 */
export const gamesCreateServiceType = (
    createServiceTypeRequest: CreateServiceTypeRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<ServiceType>(
      {url: `/api/games/service-types`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createServiceTypeRequest, signal
    },
      options);
    }
  


export const getGamesCreateServiceTypeMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesCreateServiceType>>, TError,{data: CreateServiceTypeRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof gamesCreateServiceType>>, TError,{data: CreateServiceTypeRequest}, TContext> => {

const mutationKey = ['gamesCreateServiceType'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof gamesCreateServiceType>>, {data: CreateServiceTypeRequest}> = (props) => {
          const {data} = props ?? {};

          return  gamesCreateServiceType(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GamesCreateServiceTypeMutationResult = NonNullable<Awaited<ReturnType<typeof gamesCreateServiceType>>>
    export type GamesCreateServiceTypeMutationBody = CreateServiceTypeRequest
    export type GamesCreateServiceTypeMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Create service type
 */
export const useGamesCreateServiceType = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesCreateServiceType>>, TError,{data: CreateServiceTypeRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof gamesCreateServiceType>>,
        TError,
        {data: CreateServiceTypeRequest},
        TContext
      > => {

      const mutationOptions = getGamesCreateServiceTypeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Get paginated list of price configurations with optional filtering
 * @summary Get price configurations
 */
export const gamesListPriceConfigurations = (
    params?: GamesListPriceConfigurationsParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<PriceConfigurationListResponse>(
      {url: `/api/games/price-configurations`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGamesListPriceConfigurationsQueryKey = (params?: GamesListPriceConfigurationsParams,) => {
    return [`/api/games/price-configurations`, ...(params ? [params]: [])] as const;
    }

    
export const getGamesListPriceConfigurationsQueryOptions = <TData = Awaited<ReturnType<typeof gamesListPriceConfigurations>>, TError = ErrorResponse>(params?: GamesListPriceConfigurationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesListPriceConfigurations>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGamesListPriceConfigurationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof gamesListPriceConfigurations>>> = ({ signal }) => gamesListPriceConfigurations(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof gamesListPriceConfigurations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GamesListPriceConfigurationsQueryResult = NonNullable<Awaited<ReturnType<typeof gamesListPriceConfigurations>>>
export type GamesListPriceConfigurationsQueryError = ErrorResponse


export function useGamesListPriceConfigurations<TData = Awaited<ReturnType<typeof gamesListPriceConfigurations>>, TError = ErrorResponse>(
 params: undefined |  GamesListPriceConfigurationsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesListPriceConfigurations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof gamesListPriceConfigurations>>,
          TError,
          Awaited<ReturnType<typeof gamesListPriceConfigurations>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGamesListPriceConfigurations<TData = Awaited<ReturnType<typeof gamesListPriceConfigurations>>, TError = ErrorResponse>(
 params?: GamesListPriceConfigurationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesListPriceConfigurations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof gamesListPriceConfigurations>>,
          TError,
          Awaited<ReturnType<typeof gamesListPriceConfigurations>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGamesListPriceConfigurations<TData = Awaited<ReturnType<typeof gamesListPriceConfigurations>>, TError = ErrorResponse>(
 params?: GamesListPriceConfigurationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesListPriceConfigurations>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get price configurations
 */

export function useGamesListPriceConfigurations<TData = Awaited<ReturnType<typeof gamesListPriceConfigurations>>, TError = ErrorResponse>(
 params?: GamesListPriceConfigurationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesListPriceConfigurations>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGamesListPriceConfigurationsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Create a new price configuration in the system
 * @summary Create price configuration
 */
export const gamesCreatePriceConfiguration = (
    createPriceConfigurationRequest: CreatePriceConfigurationRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<PriceConfiguration>(
      {url: `/api/games/price-configurations`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createPriceConfigurationRequest, signal
    },
      options);
    }
  


export const getGamesCreatePriceConfigurationMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesCreatePriceConfiguration>>, TError,{data: CreatePriceConfigurationRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof gamesCreatePriceConfiguration>>, TError,{data: CreatePriceConfigurationRequest}, TContext> => {

const mutationKey = ['gamesCreatePriceConfiguration'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof gamesCreatePriceConfiguration>>, {data: CreatePriceConfigurationRequest}> = (props) => {
          const {data} = props ?? {};

          return  gamesCreatePriceConfiguration(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GamesCreatePriceConfigurationMutationResult = NonNullable<Awaited<ReturnType<typeof gamesCreatePriceConfiguration>>>
    export type GamesCreatePriceConfigurationMutationBody = CreatePriceConfigurationRequest
    export type GamesCreatePriceConfigurationMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Create price configuration
 */
export const useGamesCreatePriceConfiguration = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesCreatePriceConfiguration>>, TError,{data: CreatePriceConfigurationRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof gamesCreatePriceConfiguration>>,
        TError,
        {data: CreatePriceConfigurationRequest},
        TContext
      > => {

      const mutationOptions = getGamesCreatePriceConfigurationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Get paginated list of difficulty levels with optional filtering
 * @summary Get difficulty levels
 */
export const gamesListDifficultyLevels = (
    params?: GamesListDifficultyLevelsParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<DifficultyLevelListResponse>(
      {url: `/api/games/difficulty-levels`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGamesListDifficultyLevelsQueryKey = (params?: GamesListDifficultyLevelsParams,) => {
    return [`/api/games/difficulty-levels`, ...(params ? [params]: [])] as const;
    }

    
export const getGamesListDifficultyLevelsQueryOptions = <TData = Awaited<ReturnType<typeof gamesListDifficultyLevels>>, TError = ErrorResponse>(params?: GamesListDifficultyLevelsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesListDifficultyLevels>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGamesListDifficultyLevelsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof gamesListDifficultyLevels>>> = ({ signal }) => gamesListDifficultyLevels(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof gamesListDifficultyLevels>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GamesListDifficultyLevelsQueryResult = NonNullable<Awaited<ReturnType<typeof gamesListDifficultyLevels>>>
export type GamesListDifficultyLevelsQueryError = ErrorResponse


export function useGamesListDifficultyLevels<TData = Awaited<ReturnType<typeof gamesListDifficultyLevels>>, TError = ErrorResponse>(
 params: undefined |  GamesListDifficultyLevelsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesListDifficultyLevels>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof gamesListDifficultyLevels>>,
          TError,
          Awaited<ReturnType<typeof gamesListDifficultyLevels>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGamesListDifficultyLevels<TData = Awaited<ReturnType<typeof gamesListDifficultyLevels>>, TError = ErrorResponse>(
 params?: GamesListDifficultyLevelsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesListDifficultyLevels>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof gamesListDifficultyLevels>>,
          TError,
          Awaited<ReturnType<typeof gamesListDifficultyLevels>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGamesListDifficultyLevels<TData = Awaited<ReturnType<typeof gamesListDifficultyLevels>>, TError = ErrorResponse>(
 params?: GamesListDifficultyLevelsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesListDifficultyLevels>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get difficulty levels
 */

export function useGamesListDifficultyLevels<TData = Awaited<ReturnType<typeof gamesListDifficultyLevels>>, TError = ErrorResponse>(
 params?: GamesListDifficultyLevelsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesListDifficultyLevels>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGamesListDifficultyLevelsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Create a new difficulty level in the system
 * @summary Create difficulty level
 */
export const gamesCreateDifficultyLevel = (
    createDifficultyLevelRequest: CreateDifficultyLevelRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<DifficultyLevel>(
      {url: `/api/games/difficulty-levels`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createDifficultyLevelRequest, signal
    },
      options);
    }
  


export const getGamesCreateDifficultyLevelMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesCreateDifficultyLevel>>, TError,{data: CreateDifficultyLevelRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof gamesCreateDifficultyLevel>>, TError,{data: CreateDifficultyLevelRequest}, TContext> => {

const mutationKey = ['gamesCreateDifficultyLevel'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof gamesCreateDifficultyLevel>>, {data: CreateDifficultyLevelRequest}> = (props) => {
          const {data} = props ?? {};

          return  gamesCreateDifficultyLevel(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GamesCreateDifficultyLevelMutationResult = NonNullable<Awaited<ReturnType<typeof gamesCreateDifficultyLevel>>>
    export type GamesCreateDifficultyLevelMutationBody = CreateDifficultyLevelRequest
    export type GamesCreateDifficultyLevelMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Create difficulty level
 */
export const useGamesCreateDifficultyLevel = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesCreateDifficultyLevel>>, TError,{data: CreateDifficultyLevelRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof gamesCreateDifficultyLevel>>,
        TError,
        {data: CreateDifficultyLevelRequest},
        TContext
      > => {

      const mutationOptions = getGamesCreateDifficultyLevelMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Calculate the total price for game boosting service based on selected parameters
 * @summary Calculate game boosting price
 */
export const calculateGamePrice = (
    calculationRequest: CalculationRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<CalculationResult>(
      {url: `/api/games/calculator/calculate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: calculationRequest, signal
    },
      options);
    }
  


export const getCalculateGamePriceMutationOptions = <TError = ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof calculateGamePrice>>, TError,{data: CalculationRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof calculateGamePrice>>, TError,{data: CalculationRequest}, TContext> => {

const mutationKey = ['calculateGamePrice'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof calculateGamePrice>>, {data: CalculationRequest}> = (props) => {
          const {data} = props ?? {};

          return  calculateGamePrice(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CalculateGamePriceMutationResult = NonNullable<Awaited<ReturnType<typeof calculateGamePrice>>>
    export type CalculateGamePriceMutationBody = CalculationRequest
    export type CalculateGamePriceMutationError = ErrorResponse | ErrorResponse

    /**
 * @summary Calculate game boosting price
 */
export const useCalculateGamePrice = <TError = ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof calculateGamePrice>>, TError,{data: CalculationRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof calculateGamePrice>>,
        TError,
        {data: CalculationRequest},
        TContext
      > => {

      const mutationOptions = getCalculateGamePriceMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Get paginated list of boosters with optional filtering
 * @summary Get all boosters
 */
export const gamesListBoosters = (
    params?: GamesListBoostersParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<BoosterListResponse>(
      {url: `/api/games/boosters`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGamesListBoostersQueryKey = (params?: GamesListBoostersParams,) => {
    return [`/api/games/boosters`, ...(params ? [params]: [])] as const;
    }

    
export const getGamesListBoostersQueryOptions = <TData = Awaited<ReturnType<typeof gamesListBoosters>>, TError = ErrorResponse>(params?: GamesListBoostersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesListBoosters>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGamesListBoostersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof gamesListBoosters>>> = ({ signal }) => gamesListBoosters(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof gamesListBoosters>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GamesListBoostersQueryResult = NonNullable<Awaited<ReturnType<typeof gamesListBoosters>>>
export type GamesListBoostersQueryError = ErrorResponse


export function useGamesListBoosters<TData = Awaited<ReturnType<typeof gamesListBoosters>>, TError = ErrorResponse>(
 params: undefined |  GamesListBoostersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesListBoosters>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof gamesListBoosters>>,
          TError,
          Awaited<ReturnType<typeof gamesListBoosters>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGamesListBoosters<TData = Awaited<ReturnType<typeof gamesListBoosters>>, TError = ErrorResponse>(
 params?: GamesListBoostersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesListBoosters>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof gamesListBoosters>>,
          TError,
          Awaited<ReturnType<typeof gamesListBoosters>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGamesListBoosters<TData = Awaited<ReturnType<typeof gamesListBoosters>>, TError = ErrorResponse>(
 params?: GamesListBoostersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesListBoosters>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all boosters
 */

export function useGamesListBoosters<TData = Awaited<ReturnType<typeof gamesListBoosters>>, TError = ErrorResponse>(
 params?: GamesListBoostersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesListBoosters>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGamesListBoostersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Create a new booster in the system
 * @summary Create new booster
 */
export const gamesCreateBooster = (
    createBoosterRequest: CreateBoosterRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Booster>(
      {url: `/api/games/boosters`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createBoosterRequest, signal
    },
      options);
    }
  


export const getGamesCreateBoosterMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesCreateBooster>>, TError,{data: CreateBoosterRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof gamesCreateBooster>>, TError,{data: CreateBoosterRequest}, TContext> => {

const mutationKey = ['gamesCreateBooster'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof gamesCreateBooster>>, {data: CreateBoosterRequest}> = (props) => {
          const {data} = props ?? {};

          return  gamesCreateBooster(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GamesCreateBoosterMutationResult = NonNullable<Awaited<ReturnType<typeof gamesCreateBooster>>>
    export type GamesCreateBoosterMutationBody = CreateBoosterRequest
    export type GamesCreateBoosterMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Create new booster
 */
export const useGamesCreateBooster = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesCreateBooster>>, TError,{data: CreateBoosterRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof gamesCreateBooster>>,
        TError,
        {data: CreateBoosterRequest},
        TContext
      > => {

      const mutationOptions = getGamesCreateBoosterMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Mark a difficulty level as inactive and unavailable
 * @summary Deactivate difficulty level
 */
export const gamesDeactivateDifficultyLevel = (
    difficultyLevelId: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<DifficultyLevel>(
      {url: `/api/games/difficulty-levels/${difficultyLevelId}/deactivate`, method: 'PATCH'
    },
      options);
    }
  


export const getGamesDeactivateDifficultyLevelMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesDeactivateDifficultyLevel>>, TError,{difficultyLevelId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof gamesDeactivateDifficultyLevel>>, TError,{difficultyLevelId: string}, TContext> => {

const mutationKey = ['gamesDeactivateDifficultyLevel'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof gamesDeactivateDifficultyLevel>>, {difficultyLevelId: string}> = (props) => {
          const {difficultyLevelId} = props ?? {};

          return  gamesDeactivateDifficultyLevel(difficultyLevelId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GamesDeactivateDifficultyLevelMutationResult = NonNullable<Awaited<ReturnType<typeof gamesDeactivateDifficultyLevel>>>
    
    export type GamesDeactivateDifficultyLevelMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Deactivate difficulty level
 */
export const useGamesDeactivateDifficultyLevel = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesDeactivateDifficultyLevel>>, TError,{difficultyLevelId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof gamesDeactivateDifficultyLevel>>,
        TError,
        {difficultyLevelId: string},
        TContext
      > => {

      const mutationOptions = getGamesDeactivateDifficultyLevelMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Mark a difficulty level as active and available
 * @summary Activate difficulty level
 */
export const gamesActivateDifficultyLevel = (
    difficultyLevelId: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<DifficultyLevel>(
      {url: `/api/games/difficulty-levels/${difficultyLevelId}/activate`, method: 'PATCH'
    },
      options);
    }
  


export const getGamesActivateDifficultyLevelMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesActivateDifficultyLevel>>, TError,{difficultyLevelId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof gamesActivateDifficultyLevel>>, TError,{difficultyLevelId: string}, TContext> => {

const mutationKey = ['gamesActivateDifficultyLevel'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof gamesActivateDifficultyLevel>>, {difficultyLevelId: string}> = (props) => {
          const {difficultyLevelId} = props ?? {};

          return  gamesActivateDifficultyLevel(difficultyLevelId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GamesActivateDifficultyLevelMutationResult = NonNullable<Awaited<ReturnType<typeof gamesActivateDifficultyLevel>>>
    
    export type GamesActivateDifficultyLevelMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Activate difficulty level
 */
export const useGamesActivateDifficultyLevel = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesActivateDifficultyLevel>>, TError,{difficultyLevelId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof gamesActivateDifficultyLevel>>,
        TError,
        {difficultyLevelId: string},
        TContext
      > => {

      const mutationOptions = getGamesActivateDifficultyLevelMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Mark a game as active and available for boosting
 * @summary Activate game
 */
export const gamesActivateGame = (
    gameId: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<Game>(
      {url: `/api/games/by-id/${gameId}/enable`, method: 'PATCH'
    },
      options);
    }
  


export const getGamesActivateGameMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesActivateGame>>, TError,{gameId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof gamesActivateGame>>, TError,{gameId: string}, TContext> => {

const mutationKey = ['gamesActivateGame'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof gamesActivateGame>>, {gameId: string}> = (props) => {
          const {gameId} = props ?? {};

          return  gamesActivateGame(gameId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GamesActivateGameMutationResult = NonNullable<Awaited<ReturnType<typeof gamesActivateGame>>>
    
    export type GamesActivateGameMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Activate game
 */
export const useGamesActivateGame = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesActivateGame>>, TError,{gameId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof gamesActivateGame>>,
        TError,
        {gameId: string},
        TContext
      > => {

      const mutationOptions = getGamesActivateGameMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Mark a game as inactive and unavailable for boosting
 * @summary Deactivate game
 */
export const gamesDeactivateGame = (
    gameId: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<Game>(
      {url: `/api/games/by-id/${gameId}/disable`, method: 'PATCH'
    },
      options);
    }
  


export const getGamesDeactivateGameMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesDeactivateGame>>, TError,{gameId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof gamesDeactivateGame>>, TError,{gameId: string}, TContext> => {

const mutationKey = ['gamesDeactivateGame'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof gamesDeactivateGame>>, {gameId: string}> = (props) => {
          const {gameId} = props ?? {};

          return  gamesDeactivateGame(gameId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GamesDeactivateGameMutationResult = NonNullable<Awaited<ReturnType<typeof gamesDeactivateGame>>>
    
    export type GamesDeactivateGameMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Deactivate game
 */
export const useGamesDeactivateGame = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gamesDeactivateGame>>, TError,{gameId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof gamesDeactivateGame>>,
        TError,
        {gameId: string},
        TContext
      > => {

      const mutationOptions = getGamesDeactivateGameMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Retrieve game information using game code
 * @summary Get game by code
 */
export const gamesGetGameByCode = (
    code: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Game>(
      {url: `/api/games/by-code/${code}`, method: 'GET', signal
    },
      options);
    }
  

export const getGamesGetGameByCodeQueryKey = (code?: string,) => {
    return [`/api/games/by-code/${code}`] as const;
    }

    
export const getGamesGetGameByCodeQueryOptions = <TData = Awaited<ReturnType<typeof gamesGetGameByCode>>, TError = ErrorResponse | Game>(code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetGameByCode>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGamesGetGameByCodeQueryKey(code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof gamesGetGameByCode>>> = ({ signal }) => gamesGetGameByCode(code, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof gamesGetGameByCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GamesGetGameByCodeQueryResult = NonNullable<Awaited<ReturnType<typeof gamesGetGameByCode>>>
export type GamesGetGameByCodeQueryError = ErrorResponse | Game


export function useGamesGetGameByCode<TData = Awaited<ReturnType<typeof gamesGetGameByCode>>, TError = ErrorResponse | Game>(
 code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetGameByCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof gamesGetGameByCode>>,
          TError,
          Awaited<ReturnType<typeof gamesGetGameByCode>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGamesGetGameByCode<TData = Awaited<ReturnType<typeof gamesGetGameByCode>>, TError = ErrorResponse | Game>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetGameByCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof gamesGetGameByCode>>,
          TError,
          Awaited<ReturnType<typeof gamesGetGameByCode>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGamesGetGameByCode<TData = Awaited<ReturnType<typeof gamesGetGameByCode>>, TError = ErrorResponse | Game>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetGameByCode>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get game by code
 */

export function useGamesGetGameByCode<TData = Awaited<ReturnType<typeof gamesGetGameByCode>>, TError = ErrorResponse | Game>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetGameByCode>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGamesGetGameByCodeQueryOptions(code,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Retrieve list of all currently active games
 * @summary Get all active games
 */
export const gamesGetAllActiveGames = (
    
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<Game[]>(
      {url: `/api/games/active`, method: 'GET', signal
    },
      options);
    }
  

export const getGamesGetAllActiveGamesQueryKey = () => {
    return [`/api/games/active`] as const;
    }

    
export const getGamesGetAllActiveGamesQueryOptions = <TData = Awaited<ReturnType<typeof gamesGetAllActiveGames>>, TError = ErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetAllActiveGames>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGamesGetAllActiveGamesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof gamesGetAllActiveGames>>> = ({ signal }) => gamesGetAllActiveGames(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof gamesGetAllActiveGames>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GamesGetAllActiveGamesQueryResult = NonNullable<Awaited<ReturnType<typeof gamesGetAllActiveGames>>>
export type GamesGetAllActiveGamesQueryError = ErrorResponse


export function useGamesGetAllActiveGames<TData = Awaited<ReturnType<typeof gamesGetAllActiveGames>>, TError = ErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetAllActiveGames>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof gamesGetAllActiveGames>>,
          TError,
          Awaited<ReturnType<typeof gamesGetAllActiveGames>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGamesGetAllActiveGames<TData = Awaited<ReturnType<typeof gamesGetAllActiveGames>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetAllActiveGames>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof gamesGetAllActiveGames>>,
          TError,
          Awaited<ReturnType<typeof gamesGetAllActiveGames>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGamesGetAllActiveGames<TData = Awaited<ReturnType<typeof gamesGetAllActiveGames>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetAllActiveGames>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all active games
 */

export function useGamesGetAllActiveGames<TData = Awaited<ReturnType<typeof gamesGetAllActiveGames>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof gamesGetAllActiveGames>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGamesGetAllActiveGamesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




