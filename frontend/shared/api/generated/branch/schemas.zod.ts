/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AKSI Dry Cleaning Order System API
 * API –¥–ª—è –æ–¥–Ω–æ—Å—Ç–æ—Ä—ñ–Ω–∫–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å —Ö—ñ–º—á–∏—Å—Ç–∫–∏ –∑ DDD –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–æ—é
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';

/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ—ñ–ª—ñ—é
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ—ñ–ª—ñ—é –∑–∞ ID
 */
export const getBranchByIdParams = zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID)')
}).strict()

export const getBranchById200ResponseAddressStreetMin = 0;

export const getBranchById200ResponseAddressStreetMax = 200;
export const getBranchById200ResponseAddressCityMin = 0;

export const getBranchById200ResponseAddressCityMax = 100;
export const getBranchById200ResponseAddressRegionMin = 0;

export const getBranchById200ResponseAddressRegionMax = 100;
export const getBranchById200ResponseAddressPostalCodeMin = 0;

export const getBranchById200ResponseAddressPostalCodeMax = 10;
export const getBranchById200ResponseAddressCountryMin = 0;

export const getBranchById200ResponseAddressCountryMax = 100;


export const getBranchById200Response = zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "code": zod.coerce.string().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥ —Ñ—ñ–ª—ñ—ó'),
  "name": zod.coerce.string().describe('–ù–∞–∑–≤–∞ —Ñ—ñ–ª—ñ—ó'),
  "description": zod.coerce.string().describe('–û–ø–∏—Å —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è'),
  "address": zod.object({
  "street": zod.coerce.string().min(getBranchById200ResponseAddressStreetMin).max(getBranchById200ResponseAddressStreetMax).optional().describe('–í—É–ª–∏—Ü—è —Ç–∞ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É'),
  "city": zod.coerce.string().min(getBranchById200ResponseAddressCityMin).max(getBranchById200ResponseAddressCityMax).optional().describe('–ú—ñ—Å—Ç–æ'),
  "region": zod.coerce.string().min(getBranchById200ResponseAddressRegionMin).max(getBranchById200ResponseAddressRegionMax).optional().describe('–û–±–ª–∞—Å—Ç—å/—Ä–µ–≥—ñ–æ–Ω'),
  "postalCode": zod.coerce.string().min(getBranchById200ResponseAddressPostalCodeMin).max(getBranchById200ResponseAddressPostalCodeMax).optional().describe('–ü–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å'),
  "country": zod.coerce.string().min(getBranchById200ResponseAddressCountryMin).max(getBranchById200ResponseAddressCountryMax).optional().describe('–ö—Ä–∞—ó–Ω–∞')
}).strict(),
  "contactInfo": zod.object({
  "phone": zod.coerce.string().describe('–û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω'),
  "alternativePhone": zod.coerce.string().optional().describe('–î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω'),
  "email": zod.coerce.string().describe('Email —Ñ—ñ–ª—ñ—ó'),
  "managerName": zod.coerce.string().describe('–Ü–º\'—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞')
}).strict(),
  "coordinates": zod.object({
  "latitude": zod.coerce.number().optional().describe('–®–∏—Ä–æ—Ç–∞'),
  "longitude": zod.coerce.number().optional().describe('–î–æ–≤–≥–æ—Ç–∞'),
  "mapUrl": zod.coerce.string().url().optional().describe('–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞—Ä—Ç—É')
}).strict().optional(),
  "status": zod.enum(['ACTIVE', 'INACTIVE', 'TEMPORARILY_CLOSED', 'UNDER_RENOVATION']),
  "workingSchedule": zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "branchId": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "workingDays": zod.array(zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "dayOfWeek": zod.enum(['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY']),
  "openTime": zod.coerce.string().optional().describe('–ß–∞—Å –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è'),
  "closeTime": zod.coerce.string().optional().describe('–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è'),
  "isWorkingDay": zod.coerce.boolean().describe('–ß–∏ —î –¥–µ–Ω—å —Ä–æ–±–æ—á–∏–º'),
  "notes": zod.coerce.string().optional().describe('–ü—Ä–∏–º—ñ—Ç–∫–∏ –¥–æ –¥–Ω—è')
}).strict()),
  "holidays": zod.array(zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "date": zod.coerce.string().date().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "name": zod.coerce.string().describe('–ù–∞–∑–≤–∞ —Å–≤—è—Ç–∞'),
  "isRecurring": zod.coerce.boolean().describe('–ß–∏ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è —â–æ—Ä–æ–∫—É')
}).strict()),
  "timezone": zod.coerce.string().describe('–ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å')
}).strict().optional(),
  "receiptCounter": zod.coerce.number().describe('–ü–æ—Ç–æ—á–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∫–≤–∏—Ç–∞–Ω—Ü—ñ–π'),
  "createdAt": zod.coerce.string().datetime({}).describe('–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è'),
  "updatedAt": zod.coerce.string().datetime({}).describe('–î–∞—Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è')
}).strict()

export const getBranchById404Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "traceId": zod.coerce.string().optional().describe('–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏')
}).strict()


/**
 * –û–Ω–æ–≤–ª—é—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ—ñ–ª—ñ—é
 * @summary –û–Ω–æ–≤–∏—Ç–∏ —Ñ—ñ–ª—ñ—é
 */
export const updateBranchParams = zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID)')
}).strict()

export const updateBranchBodyNameMin = 3;

export const updateBranchBodyNameMax = 100;
export const updateBranchBodyDescriptionMin = 0;

export const updateBranchBodyDescriptionMax = 500;
export const updateBranchBodyAddressStreetMin = 0;

export const updateBranchBodyAddressStreetMax = 200;
export const updateBranchBodyAddressCityMin = 0;

export const updateBranchBodyAddressCityMax = 100;
export const updateBranchBodyAddressRegionMin = 0;

export const updateBranchBodyAddressRegionMax = 100;
export const updateBranchBodyAddressPostalCodeMin = 0;

export const updateBranchBodyAddressPostalCodeMax = 10;
export const updateBranchBodyAddressCountryMin = 0;

export const updateBranchBodyAddressCountryMax = 100;
export const updateBranchBodyContactInfoPhoneRegExp = new RegExp('^\\+380\\d{9}$');
export const updateBranchBodyContactInfoAlternativePhoneRegExp = new RegExp('^\\+380\\d{9}$');
export const updateBranchBodyContactInfoEmailMin = 3;

export const updateBranchBodyContactInfoEmailMax = 254;
export const updateBranchBodyContactInfoManagerNameMin = 0;

export const updateBranchBodyContactInfoManagerNameMax = 100;
export const updateBranchBodyCoordinatesLatitudeMin = -90;

export const updateBranchBodyCoordinatesLatitudeMax = 90;
export const updateBranchBodyCoordinatesLongitudeMin = -180;

export const updateBranchBodyCoordinatesLongitudeMax = 180;


export const updateBranchBody = zod.object({
  "name": zod.coerce.string().min(updateBranchBodyNameMin).max(updateBranchBodyNameMax).optional().describe('–ù–∞–∑–≤–∞ —Ñ—ñ–ª—ñ—ó'),
  "description": zod.coerce.string().min(updateBranchBodyDescriptionMin).max(updateBranchBodyDescriptionMax).optional().describe('–û–ø–∏—Å —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è'),
  "address": zod.object({
  "street": zod.coerce.string().min(updateBranchBodyAddressStreetMin).max(updateBranchBodyAddressStreetMax).optional().describe('–í—É–ª–∏—Ü—è —Ç–∞ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É'),
  "city": zod.coerce.string().min(updateBranchBodyAddressCityMin).max(updateBranchBodyAddressCityMax).optional().describe('–ú—ñ—Å—Ç–æ'),
  "region": zod.coerce.string().min(updateBranchBodyAddressRegionMin).max(updateBranchBodyAddressRegionMax).optional().describe('–û–±–ª–∞—Å—Ç—å/—Ä–µ–≥—ñ–æ–Ω'),
  "postalCode": zod.coerce.string().min(updateBranchBodyAddressPostalCodeMin).max(updateBranchBodyAddressPostalCodeMax).optional().describe('–ü–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å'),
  "country": zod.coerce.string().min(updateBranchBodyAddressCountryMin).max(updateBranchBodyAddressCountryMax).optional().describe('–ö—Ä–∞—ó–Ω–∞')
}).strict().optional(),
  "contactInfo": zod.object({
  "phone": zod.coerce.string().regex(updateBranchBodyContactInfoPhoneRegExp).describe('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "alternativePhone": zod.coerce.string().regex(updateBranchBodyContactInfoAlternativePhoneRegExp).optional().describe('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "email": zod.coerce.string().min(updateBranchBodyContactInfoEmailMin).max(updateBranchBodyContactInfoEmailMax).describe('Email –∞–¥—Ä–µ—Å–∞'),
  "managerName": zod.coerce.string().min(updateBranchBodyContactInfoManagerNameMin).max(updateBranchBodyContactInfoManagerNameMax).describe('–Ü–º\'—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞')
}).strict().optional(),
  "coordinates": zod.object({
  "latitude": zod.coerce.number().min(updateBranchBodyCoordinatesLatitudeMin).max(updateBranchBodyCoordinatesLatitudeMax).optional().describe('–®–∏—Ä–æ—Ç–∞'),
  "longitude": zod.coerce.number().min(updateBranchBodyCoordinatesLongitudeMin).max(updateBranchBodyCoordinatesLongitudeMax).optional().describe('–î–æ–≤–≥–æ—Ç–∞'),
  "mapUrl": zod.coerce.string().url().optional().describe('–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞—Ä—Ç—É')
}).strict().optional(),
  "status": zod.enum(['ACTIVE', 'INACTIVE', 'TEMPORARILY_CLOSED', 'UNDER_RENOVATION']).optional()
}).strict()

export const updateBranch200ResponseAddressStreetMin = 0;

export const updateBranch200ResponseAddressStreetMax = 200;
export const updateBranch200ResponseAddressCityMin = 0;

export const updateBranch200ResponseAddressCityMax = 100;
export const updateBranch200ResponseAddressRegionMin = 0;

export const updateBranch200ResponseAddressRegionMax = 100;
export const updateBranch200ResponseAddressPostalCodeMin = 0;

export const updateBranch200ResponseAddressPostalCodeMax = 10;
export const updateBranch200ResponseAddressCountryMin = 0;

export const updateBranch200ResponseAddressCountryMax = 100;


export const updateBranch200Response = zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "code": zod.coerce.string().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥ —Ñ—ñ–ª—ñ—ó'),
  "name": zod.coerce.string().describe('–ù–∞–∑–≤–∞ —Ñ—ñ–ª—ñ—ó'),
  "description": zod.coerce.string().describe('–û–ø–∏—Å —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è'),
  "address": zod.object({
  "street": zod.coerce.string().min(updateBranch200ResponseAddressStreetMin).max(updateBranch200ResponseAddressStreetMax).optional().describe('–í—É–ª–∏—Ü—è —Ç–∞ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É'),
  "city": zod.coerce.string().min(updateBranch200ResponseAddressCityMin).max(updateBranch200ResponseAddressCityMax).optional().describe('–ú—ñ—Å—Ç–æ'),
  "region": zod.coerce.string().min(updateBranch200ResponseAddressRegionMin).max(updateBranch200ResponseAddressRegionMax).optional().describe('–û–±–ª–∞—Å—Ç—å/—Ä–µ–≥—ñ–æ–Ω'),
  "postalCode": zod.coerce.string().min(updateBranch200ResponseAddressPostalCodeMin).max(updateBranch200ResponseAddressPostalCodeMax).optional().describe('–ü–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å'),
  "country": zod.coerce.string().min(updateBranch200ResponseAddressCountryMin).max(updateBranch200ResponseAddressCountryMax).optional().describe('–ö—Ä–∞—ó–Ω–∞')
}).strict(),
  "contactInfo": zod.object({
  "phone": zod.coerce.string().describe('–û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω'),
  "alternativePhone": zod.coerce.string().optional().describe('–î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω'),
  "email": zod.coerce.string().describe('Email —Ñ—ñ–ª—ñ—ó'),
  "managerName": zod.coerce.string().describe('–Ü–º\'—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞')
}).strict(),
  "coordinates": zod.object({
  "latitude": zod.coerce.number().optional().describe('–®–∏—Ä–æ—Ç–∞'),
  "longitude": zod.coerce.number().optional().describe('–î–æ–≤–≥–æ—Ç–∞'),
  "mapUrl": zod.coerce.string().url().optional().describe('–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞—Ä—Ç—É')
}).strict().optional(),
  "status": zod.enum(['ACTIVE', 'INACTIVE', 'TEMPORARILY_CLOSED', 'UNDER_RENOVATION']),
  "workingSchedule": zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "branchId": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "workingDays": zod.array(zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "dayOfWeek": zod.enum(['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY']),
  "openTime": zod.coerce.string().optional().describe('–ß–∞—Å –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è'),
  "closeTime": zod.coerce.string().optional().describe('–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è'),
  "isWorkingDay": zod.coerce.boolean().describe('–ß–∏ —î –¥–µ–Ω—å —Ä–æ–±–æ—á–∏–º'),
  "notes": zod.coerce.string().optional().describe('–ü—Ä–∏–º—ñ—Ç–∫–∏ –¥–æ –¥–Ω—è')
}).strict()),
  "holidays": zod.array(zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "date": zod.coerce.string().date().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "name": zod.coerce.string().describe('–ù–∞–∑–≤–∞ —Å–≤—è—Ç–∞'),
  "isRecurring": zod.coerce.boolean().describe('–ß–∏ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è —â–æ—Ä–æ–∫—É')
}).strict()),
  "timezone": zod.coerce.string().describe('–ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å')
}).strict().optional(),
  "receiptCounter": zod.coerce.number().describe('–ü–æ—Ç–æ—á–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∫–≤–∏—Ç–∞–Ω—Ü—ñ–π'),
  "createdAt": zod.coerce.string().datetime({}).describe('–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è'),
  "updatedAt": zod.coerce.string().datetime({}).describe('–î–∞—Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è')
}).strict()

export const updateBranch400Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥ (400)'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–ó–∞–≥–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "errors": zod.array(zod.object({
  "field": zod.coerce.string().describe('–ù–∞–∑–≤–∞ –ø–æ–ª—è –∑ –ø–æ–º–∏–ª–∫–æ—é'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "rejectedValue": zod.object({
  "present": zod.coerce.boolean().optional()
}).strict().optional(),
  "code": zod.coerce.string().optional().describe('–ö–æ–¥ –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó')
}).strict()).describe('–°–ø–∏—Å–æ–∫ –ø–æ–º–∏–ª–æ–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø–æ–ª—ñ–≤')
}).strict()

export const updateBranch404Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "traceId": zod.coerce.string().optional().describe('–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏')
}).strict()


/**
 * –î–µ–∞–∫—Ç–∏–≤—É—î —Ñ—ñ–ª—ñ—é (–Ω–µ –≤–∏–¥–∞–ª—è—î, –∞ —Ä–æ–±–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—é)
 * @summary –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Ñ—ñ–ª—ñ—é
 */
export const deleteBranchParams = zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID)')
}).strict()

export const deleteBranch404Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "traceId": zod.coerce.string().optional().describe('–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏')
}).strict()


/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Ñ—ñ–ª—ñ—ó
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ —Ñ—ñ–ª—ñ—ó
 */
export const getBranchScheduleParams = zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID)')
}).strict()

export const getBranchSchedule200Response = zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "branchId": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "workingDays": zod.array(zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "dayOfWeek": zod.enum(['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY']),
  "openTime": zod.coerce.string().optional().describe('–ß–∞—Å –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è'),
  "closeTime": zod.coerce.string().optional().describe('–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è'),
  "isWorkingDay": zod.coerce.boolean().describe('–ß–∏ —î –¥–µ–Ω—å —Ä–æ–±–æ—á–∏–º'),
  "notes": zod.coerce.string().optional().describe('–ü—Ä–∏–º—ñ—Ç–∫–∏ –¥–æ –¥–Ω—è')
}).strict()),
  "holidays": zod.array(zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "date": zod.coerce.string().date().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "name": zod.coerce.string().describe('–ù–∞–∑–≤–∞ —Å–≤—è—Ç–∞'),
  "isRecurring": zod.coerce.boolean().describe('–ß–∏ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è —â–æ—Ä–æ–∫—É')
}).strict()),
  "timezone": zod.coerce.string().describe('–ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å')
}).strict()

export const getBranchSchedule404Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "traceId": zod.coerce.string().optional().describe('–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏')
}).strict()


/**
 * –û–Ω–æ–≤–ª—é—î –≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ —Ñ—ñ–ª—ñ—ó
 * @summary –û–Ω–æ–≤–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏
 */
export const updateBranchScheduleParams = zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID)')
}).strict()

export const updateBranchScheduleBodyWorkingDaysItemNotesMin = 0;

export const updateBranchScheduleBodyWorkingDaysItemNotesMax = 200;
export const updateBranchScheduleBodyWorkingDaysMin = 7;

export const updateBranchScheduleBodyWorkingDaysMax = 7;
export const updateBranchScheduleBodyHolidaysItemNameMin = 0;

export const updateBranchScheduleBodyHolidaysItemNameMax = 100;


export const updateBranchScheduleBody = zod.object({
  "workingDays": zod.array(zod.object({
  "dayOfWeek": zod.enum(['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY']),
  "openTime": zod.coerce.string().optional().describe('–ß–∞—Å –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è (—è–∫—â–æ —Ä–æ–±–æ—á–∏–π –¥–µ–Ω—å)'),
  "closeTime": zod.coerce.string().optional().describe('–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è (—è–∫—â–æ —Ä–æ–±–æ—á–∏–π –¥–µ–Ω—å)'),
  "isWorkingDay": zod.coerce.boolean().describe('–ß–∏ —î –¥–µ–Ω—å —Ä–æ–±–æ—á–∏–º'),
  "notes": zod.coerce.string().min(updateBranchScheduleBodyWorkingDaysItemNotesMin).max(updateBranchScheduleBodyWorkingDaysItemNotesMax).optional().describe('–ü—Ä–∏–º—ñ—Ç–∫–∏ –¥–æ –¥–Ω—è')
}).strict()).min(updateBranchScheduleBodyWorkingDaysMin).max(updateBranchScheduleBodyWorkingDaysMax).optional(),
  "holidays": zod.array(zod.object({
  "date": zod.coerce.string().date().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "name": zod.coerce.string().min(updateBranchScheduleBodyHolidaysItemNameMin).max(updateBranchScheduleBodyHolidaysItemNameMax).describe('–ù–∞–∑–≤–∞ —Å–≤—è—Ç–∞'),
  "isRecurring": zod.coerce.boolean().optional().describe('–ß–∏ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è —â–æ—Ä–æ–∫—É')
}).strict()).optional(),
  "timezone": zod.coerce.string().optional()
}).strict()

export const updateBranchSchedule200Response = zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "branchId": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "workingDays": zod.array(zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "dayOfWeek": zod.enum(['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY']),
  "openTime": zod.coerce.string().optional().describe('–ß–∞—Å –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è'),
  "closeTime": zod.coerce.string().optional().describe('–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è'),
  "isWorkingDay": zod.coerce.boolean().describe('–ß–∏ —î –¥–µ–Ω—å —Ä–æ–±–æ—á–∏–º'),
  "notes": zod.coerce.string().optional().describe('–ü—Ä–∏–º—ñ—Ç–∫–∏ –¥–æ –¥–Ω—è')
}).strict()),
  "holidays": zod.array(zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "date": zod.coerce.string().date().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "name": zod.coerce.string().describe('–ù–∞–∑–≤–∞ —Å–≤—è—Ç–∞'),
  "isRecurring": zod.coerce.boolean().describe('–ß–∏ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è —â–æ—Ä–æ–∫—É')
}).strict()),
  "timezone": zod.coerce.string().describe('–ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å')
}).strict()

export const updateBranchSchedule400Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥ (400)'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–ó–∞–≥–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "errors": zod.array(zod.object({
  "field": zod.coerce.string().describe('–ù–∞–∑–≤–∞ –ø–æ–ª—è –∑ –ø–æ–º–∏–ª–∫–æ—é'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "rejectedValue": zod.object({
  "present": zod.coerce.boolean().optional()
}).strict().optional(),
  "code": zod.coerce.string().optional().describe('–ö–æ–¥ –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó')
}).strict()).describe('–°–ø–∏—Å–æ–∫ –ø–æ–º–∏–ª–æ–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø–æ–ª—ñ–≤')
}).strict()

export const updateBranchSchedule404Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "traceId": zod.coerce.string().optional().describe('–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏')
}).strict()


/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç—É –Ω–æ–º–µ—Ä–∞ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 * @summary –í–∞–ª—ñ–¥—É–≤–∞—Ç–∏ –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 */
export const validateReceiptNumberBody = zod.object({
  "receiptNumber": zod.coerce.string().describe('–ù–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó')
}).strict()

export const validateReceiptNumber200Response = zod.object({
  "receiptNumber": zod.coerce.string().describe('–ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏–π –Ω–æ–º–µ—Ä'),
  "isValid": zod.coerce.boolean().describe('–ß–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç'),
  "errors": zod.array(zod.coerce.string()).describe('–°–ø–∏—Å–æ–∫ –ø–æ–º–∏–ª–æ–∫ (—è–∫—â–æ —î)'),
  "branchCode": zod.coerce.string().optional().describe('–ö–æ–¥ —Ñ—ñ–ª—ñ—ó (—è–∫—â–æ –≤–∞–ª—ñ–¥–Ω–∏–π)')
}).strict()


/**
 * –†–æ–∑–±–∏—Ä–∞—î –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
 * @summary –†–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 */
export const parseReceiptNumberBody = zod.object({
  "receiptNumber": zod.coerce.string().describe('–ù–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó –¥–ª—è —Ä–æ–∑–±–æ—Ä—É')
}).strict()

export const parseReceiptNumber200Response = zod.object({
  "receiptNumber": zod.coerce.string().describe('–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä'),
  "branchCode": zod.coerce.string().describe('–ö–æ–¥ —Ñ—ñ–ª—ñ—ó'),
  "year": zod.coerce.number().describe('–†—ñ–∫'),
  "sequenceNumber": zod.coerce.number().describe('–ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä'),
  "branchInfo": zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "code": zod.coerce.string(),
  "name": zod.coerce.string(),
  "city": zod.coerce.string()
}).strict().optional()
}).strict()

export const parseReceiptNumber400Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥ (400)'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–ó–∞–≥–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "errors": zod.array(zod.object({
  "field": zod.coerce.string().describe('–ù–∞–∑–≤–∞ –ø–æ–ª—è –∑ –ø–æ–º–∏–ª–∫–æ—é'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "rejectedValue": zod.object({
  "present": zod.coerce.boolean().optional()
}).strict().optional(),
  "code": zod.coerce.string().optional().describe('–ö–æ–¥ –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó')
}).strict()).describe('–°–ø–∏—Å–æ–∫ –ø–æ–º–∏–ª–æ–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø–æ–ª—ñ–≤')
}).strict()


/**
 * –ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó –¥–ª—è —Ñ—ñ–ª—ñ—ó
 * @summary –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 */
export const generateReceiptNumberBodyBranchCodeRegExp = new RegExp('^[A-Z0-9-]+$');


export const generateReceiptNumberBody = zod.object({
  "branchId": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "branchCode": zod.coerce.string().regex(generateReceiptNumberBodyBranchCodeRegExp).optional().describe('–ö–æ–¥ —Ñ—ñ–ª—ñ—ó (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–æ branchId)')
}).strict()

export const generateReceiptNumber201Response = zod.object({
  "receiptNumber": zod.coerce.string().describe('–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó'),
  "branchId": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "branchCode": zod.coerce.string(),
  "year": zod.coerce.number(),
  "sequenceNumber": zod.coerce.number(),
  "generatedAt": zod.coerce.string().datetime({}).describe('–ú—ñ—Ç–∫–∞ —á–∞—Å—É –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ')
}).strict()

export const generateReceiptNumber400Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥ (400)'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–ó–∞–≥–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "errors": zod.array(zod.object({
  "field": zod.coerce.string().describe('–ù–∞–∑–≤–∞ –ø–æ–ª—è –∑ –ø–æ–º–∏–ª–∫–æ—é'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "rejectedValue": zod.object({
  "present": zod.coerce.boolean().optional()
}).strict().optional(),
  "code": zod.coerce.string().optional().describe('–ö–æ–¥ –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó')
}).strict()).describe('–°–ø–∏—Å–æ–∫ –ø–æ–º–∏–ª–æ–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø–æ–ª—ñ–≤')
}).strict()

export const generateReceiptNumber404Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "traceId": zod.coerce.string().optional().describe('–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏')
}).strict()


/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —Ñ—ñ–ª—ñ–π –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ñ—ñ–ª—ñ–π
 */
export const getBranchesQueryActiveDefault = true;export const getBranchesQueryIncludeInactiveDefault = false;

export const getBranchesQueryParams = zod.object({
  "active": zod.coerce.boolean().default(getBranchesQueryActiveDefault).describe('–§—ñ–ª—å—Ç—Ä –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ'),
  "city": zod.coerce.string().optional().describe('–§—ñ–ª—å—Ç—Ä –∑–∞ –º—ñ—Å—Ç–æ–º'),
  "includeInactive": zod.coerce.boolean().optional().describe('–í–∫–ª—é—á–∏—Ç–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ —Ñ—ñ–ª—ñ—ó')
}).strict()

export const getBranches200ResponseAddressStreetMin = 0;

export const getBranches200ResponseAddressStreetMax = 200;
export const getBranches200ResponseAddressCityMin = 0;

export const getBranches200ResponseAddressCityMax = 100;
export const getBranches200ResponseAddressRegionMin = 0;

export const getBranches200ResponseAddressRegionMax = 100;
export const getBranches200ResponseAddressPostalCodeMin = 0;

export const getBranches200ResponseAddressPostalCodeMax = 10;
export const getBranches200ResponseAddressCountryMin = 0;

export const getBranches200ResponseAddressCountryMax = 100;


export const getBranches200ResponseItem = zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "code": zod.coerce.string().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥ —Ñ—ñ–ª—ñ—ó'),
  "name": zod.coerce.string().describe('–ù–∞–∑–≤–∞ —Ñ—ñ–ª—ñ—ó'),
  "description": zod.coerce.string().describe('–û–ø–∏—Å —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è'),
  "address": zod.object({
  "street": zod.coerce.string().min(getBranches200ResponseAddressStreetMin).max(getBranches200ResponseAddressStreetMax).optional().describe('–í—É–ª–∏—Ü—è —Ç–∞ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É'),
  "city": zod.coerce.string().min(getBranches200ResponseAddressCityMin).max(getBranches200ResponseAddressCityMax).optional().describe('–ú—ñ—Å—Ç–æ'),
  "region": zod.coerce.string().min(getBranches200ResponseAddressRegionMin).max(getBranches200ResponseAddressRegionMax).optional().describe('–û–±–ª–∞—Å—Ç—å/—Ä–µ–≥—ñ–æ–Ω'),
  "postalCode": zod.coerce.string().min(getBranches200ResponseAddressPostalCodeMin).max(getBranches200ResponseAddressPostalCodeMax).optional().describe('–ü–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å'),
  "country": zod.coerce.string().min(getBranches200ResponseAddressCountryMin).max(getBranches200ResponseAddressCountryMax).optional().describe('–ö—Ä–∞—ó–Ω–∞')
}).strict(),
  "contactInfo": zod.object({
  "phone": zod.coerce.string().describe('–û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω'),
  "alternativePhone": zod.coerce.string().optional().describe('–î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω'),
  "email": zod.coerce.string().describe('Email —Ñ—ñ–ª—ñ—ó'),
  "managerName": zod.coerce.string().describe('–Ü–º\'—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞')
}).strict(),
  "coordinates": zod.object({
  "latitude": zod.coerce.number().optional().describe('–®–∏—Ä–æ—Ç–∞'),
  "longitude": zod.coerce.number().optional().describe('–î–æ–≤–≥–æ—Ç–∞'),
  "mapUrl": zod.coerce.string().url().optional().describe('–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞—Ä—Ç—É')
}).strict().optional(),
  "status": zod.enum(['ACTIVE', 'INACTIVE', 'TEMPORARILY_CLOSED', 'UNDER_RENOVATION']),
  "workingSchedule": zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "branchId": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "workingDays": zod.array(zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "dayOfWeek": zod.enum(['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY']),
  "openTime": zod.coerce.string().optional().describe('–ß–∞—Å –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è'),
  "closeTime": zod.coerce.string().optional().describe('–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è'),
  "isWorkingDay": zod.coerce.boolean().describe('–ß–∏ —î –¥–µ–Ω—å —Ä–æ–±–æ—á–∏–º'),
  "notes": zod.coerce.string().optional().describe('–ü—Ä–∏–º—ñ—Ç–∫–∏ –¥–æ –¥–Ω—è')
}).strict()),
  "holidays": zod.array(zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "date": zod.coerce.string().date().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "name": zod.coerce.string().describe('–ù–∞–∑–≤–∞ —Å–≤—è—Ç–∞'),
  "isRecurring": zod.coerce.boolean().describe('–ß–∏ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è —â–æ—Ä–æ–∫—É')
}).strict()),
  "timezone": zod.coerce.string().describe('–ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å')
}).strict().optional(),
  "receiptCounter": zod.coerce.number().describe('–ü–æ—Ç–æ—á–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∫–≤–∏—Ç–∞–Ω—Ü—ñ–π'),
  "createdAt": zod.coerce.string().datetime({}).describe('–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è'),
  "updatedAt": zod.coerce.string().datetime({}).describe('–î–∞—Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è')
}).strict()
export const getBranches200Response = zod.array(getBranches200ResponseItem)


/**
 * –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É —Ñ—ñ–ª—ñ—é —Ö—ñ–º—á–∏—Å—Ç–∫–∏
 * @summary –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É —Ñ—ñ–ª—ñ—é
 */
export const createBranchBodyCodeMin = 3;

export const createBranchBodyCodeMax = 20;

export const createBranchBodyCodeRegExp = new RegExp('^[A-Z0-9-]+$');
export const createBranchBodyNameMin = 3;

export const createBranchBodyNameMax = 100;
export const createBranchBodyDescriptionMin = 0;

export const createBranchBodyDescriptionMax = 500;
export const createBranchBodyAddressStreetMin = 0;

export const createBranchBodyAddressStreetMax = 200;
export const createBranchBodyAddressCityMin = 0;

export const createBranchBodyAddressCityMax = 100;
export const createBranchBodyAddressRegionMin = 0;

export const createBranchBodyAddressRegionMax = 100;
export const createBranchBodyAddressPostalCodeMin = 0;

export const createBranchBodyAddressPostalCodeMax = 10;
export const createBranchBodyAddressCountryMin = 0;

export const createBranchBodyAddressCountryMax = 100;
export const createBranchBodyContactInfoPhoneRegExp = new RegExp('^\\+380\\d{9}$');
export const createBranchBodyContactInfoAlternativePhoneRegExp = new RegExp('^\\+380\\d{9}$');
export const createBranchBodyContactInfoEmailMin = 3;

export const createBranchBodyContactInfoEmailMax = 254;
export const createBranchBodyContactInfoManagerNameMin = 0;

export const createBranchBodyContactInfoManagerNameMax = 100;
export const createBranchBodyCoordinatesLatitudeMin = -90;

export const createBranchBodyCoordinatesLatitudeMax = 90;
export const createBranchBodyCoordinatesLongitudeMin = -180;

export const createBranchBodyCoordinatesLongitudeMax = 180;
export const createBranchBodyWorkingScheduleWorkingDaysItemNotesMin = 0;

export const createBranchBodyWorkingScheduleWorkingDaysItemNotesMax = 200;
export const createBranchBodyWorkingScheduleWorkingDaysMin = 7;

export const createBranchBodyWorkingScheduleWorkingDaysMax = 7;
export const createBranchBodyWorkingScheduleHolidaysItemNameMin = 0;

export const createBranchBodyWorkingScheduleHolidaysItemNameMax = 100;


export const createBranchBody = zod.object({
  "code": zod.coerce.string().min(createBranchBodyCodeMin).max(createBranchBodyCodeMax).regex(createBranchBodyCodeRegExp).describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥ —Ñ—ñ–ª—ñ—ó'),
  "name": zod.coerce.string().min(createBranchBodyNameMin).max(createBranchBodyNameMax).describe('–ù–∞–∑–≤–∞ —Ñ—ñ–ª—ñ—ó'),
  "description": zod.coerce.string().min(createBranchBodyDescriptionMin).max(createBranchBodyDescriptionMax).optional().describe('–û–ø–∏—Å —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è'),
  "address": zod.object({
  "street": zod.coerce.string().min(createBranchBodyAddressStreetMin).max(createBranchBodyAddressStreetMax).optional().describe('–í—É–ª–∏—Ü—è —Ç–∞ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É'),
  "city": zod.coerce.string().min(createBranchBodyAddressCityMin).max(createBranchBodyAddressCityMax).optional().describe('–ú—ñ—Å—Ç–æ'),
  "region": zod.coerce.string().min(createBranchBodyAddressRegionMin).max(createBranchBodyAddressRegionMax).optional().describe('–û–±–ª–∞—Å—Ç—å/—Ä–µ–≥—ñ–æ–Ω'),
  "postalCode": zod.coerce.string().min(createBranchBodyAddressPostalCodeMin).max(createBranchBodyAddressPostalCodeMax).optional().describe('–ü–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å'),
  "country": zod.coerce.string().min(createBranchBodyAddressCountryMin).max(createBranchBodyAddressCountryMax).optional().describe('–ö—Ä–∞—ó–Ω–∞')
}).strict(),
  "contactInfo": zod.object({
  "phone": zod.coerce.string().regex(createBranchBodyContactInfoPhoneRegExp).describe('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "alternativePhone": zod.coerce.string().regex(createBranchBodyContactInfoAlternativePhoneRegExp).optional().describe('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "email": zod.coerce.string().min(createBranchBodyContactInfoEmailMin).max(createBranchBodyContactInfoEmailMax).describe('Email –∞–¥—Ä–µ—Å–∞'),
  "managerName": zod.coerce.string().min(createBranchBodyContactInfoManagerNameMin).max(createBranchBodyContactInfoManagerNameMax).describe('–Ü–º\'—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞')
}).strict(),
  "coordinates": zod.object({
  "latitude": zod.coerce.number().min(createBranchBodyCoordinatesLatitudeMin).max(createBranchBodyCoordinatesLatitudeMax).optional().describe('–®–∏—Ä–æ—Ç–∞'),
  "longitude": zod.coerce.number().min(createBranchBodyCoordinatesLongitudeMin).max(createBranchBodyCoordinatesLongitudeMax).optional().describe('–î–æ–≤–≥–æ—Ç–∞'),
  "mapUrl": zod.coerce.string().url().optional().describe('–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞—Ä—Ç—É')
}).strict().optional(),
  "workingSchedule": zod.object({
  "workingDays": zod.array(zod.object({
  "dayOfWeek": zod.enum(['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY']),
  "openTime": zod.coerce.string().optional().describe('–ß–∞—Å –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è (—è–∫—â–æ —Ä–æ–±–æ—á–∏–π –¥–µ–Ω—å)'),
  "closeTime": zod.coerce.string().optional().describe('–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è (—è–∫—â–æ —Ä–æ–±–æ—á–∏–π –¥–µ–Ω—å)'),
  "isWorkingDay": zod.coerce.boolean().describe('–ß–∏ —î –¥–µ–Ω—å —Ä–æ–±–æ—á–∏–º'),
  "notes": zod.coerce.string().min(createBranchBodyWorkingScheduleWorkingDaysItemNotesMin).max(createBranchBodyWorkingScheduleWorkingDaysItemNotesMax).optional().describe('–ü—Ä–∏–º—ñ—Ç–∫–∏ –¥–æ –¥–Ω—è')
}).strict()).min(createBranchBodyWorkingScheduleWorkingDaysMin).max(createBranchBodyWorkingScheduleWorkingDaysMax).describe('–†–æ–±–æ—á—ñ –¥–Ω—ñ (7 –¥–Ω—ñ–≤ —Ç–∏–∂–Ω—è)'),
  "holidays": zod.array(zod.object({
  "date": zod.coerce.string().date().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "name": zod.coerce.string().min(createBranchBodyWorkingScheduleHolidaysItemNameMin).max(createBranchBodyWorkingScheduleHolidaysItemNameMax).describe('–ù–∞–∑–≤–∞ —Å–≤—è—Ç–∞'),
  "isRecurring": zod.coerce.boolean().optional().describe('–ß–∏ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è —â–æ—Ä–æ–∫—É')
}).strict()).optional().describe('–°–≤—è—Ç–∫–æ–≤—ñ –¥–Ω—ñ'),
  "timezone": zod.coerce.string().describe('–ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å')
}).strict().optional()
}).strict()

export const createBranch201ResponseAddressStreetMin = 0;

export const createBranch201ResponseAddressStreetMax = 200;
export const createBranch201ResponseAddressCityMin = 0;

export const createBranch201ResponseAddressCityMax = 100;
export const createBranch201ResponseAddressRegionMin = 0;

export const createBranch201ResponseAddressRegionMax = 100;
export const createBranch201ResponseAddressPostalCodeMin = 0;

export const createBranch201ResponseAddressPostalCodeMax = 10;
export const createBranch201ResponseAddressCountryMin = 0;

export const createBranch201ResponseAddressCountryMax = 100;


export const createBranch201Response = zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "code": zod.coerce.string().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥ —Ñ—ñ–ª—ñ—ó'),
  "name": zod.coerce.string().describe('–ù–∞–∑–≤–∞ —Ñ—ñ–ª—ñ—ó'),
  "description": zod.coerce.string().describe('–û–ø–∏—Å —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è'),
  "address": zod.object({
  "street": zod.coerce.string().min(createBranch201ResponseAddressStreetMin).max(createBranch201ResponseAddressStreetMax).optional().describe('–í—É–ª–∏—Ü—è —Ç–∞ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É'),
  "city": zod.coerce.string().min(createBranch201ResponseAddressCityMin).max(createBranch201ResponseAddressCityMax).optional().describe('–ú—ñ—Å—Ç–æ'),
  "region": zod.coerce.string().min(createBranch201ResponseAddressRegionMin).max(createBranch201ResponseAddressRegionMax).optional().describe('–û–±–ª–∞—Å—Ç—å/—Ä–µ–≥—ñ–æ–Ω'),
  "postalCode": zod.coerce.string().min(createBranch201ResponseAddressPostalCodeMin).max(createBranch201ResponseAddressPostalCodeMax).optional().describe('–ü–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å'),
  "country": zod.coerce.string().min(createBranch201ResponseAddressCountryMin).max(createBranch201ResponseAddressCountryMax).optional().describe('–ö—Ä–∞—ó–Ω–∞')
}).strict(),
  "contactInfo": zod.object({
  "phone": zod.coerce.string().describe('–û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω'),
  "alternativePhone": zod.coerce.string().optional().describe('–î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω'),
  "email": zod.coerce.string().describe('Email —Ñ—ñ–ª—ñ—ó'),
  "managerName": zod.coerce.string().describe('–Ü–º\'—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞')
}).strict(),
  "coordinates": zod.object({
  "latitude": zod.coerce.number().optional().describe('–®–∏—Ä–æ—Ç–∞'),
  "longitude": zod.coerce.number().optional().describe('–î–æ–≤–≥–æ—Ç–∞'),
  "mapUrl": zod.coerce.string().url().optional().describe('–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞—Ä—Ç—É')
}).strict().optional(),
  "status": zod.enum(['ACTIVE', 'INACTIVE', 'TEMPORARILY_CLOSED', 'UNDER_RENOVATION']),
  "workingSchedule": zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "branchId": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "workingDays": zod.array(zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "dayOfWeek": zod.enum(['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY']),
  "openTime": zod.coerce.string().optional().describe('–ß–∞—Å –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è'),
  "closeTime": zod.coerce.string().optional().describe('–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è'),
  "isWorkingDay": zod.coerce.boolean().describe('–ß–∏ —î –¥–µ–Ω—å —Ä–æ–±–æ—á–∏–º'),
  "notes": zod.coerce.string().optional().describe('–ü—Ä–∏–º—ñ—Ç–∫–∏ –¥–æ –¥–Ω—è')
}).strict()),
  "holidays": zod.array(zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "date": zod.coerce.string().date().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "name": zod.coerce.string().describe('–ù–∞–∑–≤–∞ —Å–≤—è—Ç–∞'),
  "isRecurring": zod.coerce.boolean().describe('–ß–∏ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è —â–æ—Ä–æ–∫—É')
}).strict()),
  "timezone": zod.coerce.string().describe('–ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å')
}).strict().optional(),
  "receiptCounter": zod.coerce.number().describe('–ü–æ—Ç–æ—á–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∫–≤–∏—Ç–∞–Ω—Ü—ñ–π'),
  "createdAt": zod.coerce.string().datetime({}).describe('–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è'),
  "updatedAt": zod.coerce.string().datetime({}).describe('–î–∞—Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è')
}).strict()

export const createBranch400Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥ (400)'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–ó–∞–≥–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "errors": zod.array(zod.object({
  "field": zod.coerce.string().describe('–ù–∞–∑–≤–∞ –ø–æ–ª—è –∑ –ø–æ–º–∏–ª–∫–æ—é'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "rejectedValue": zod.object({
  "present": zod.coerce.boolean().optional()
}).strict().optional(),
  "code": zod.coerce.string().optional().describe('–ö–æ–¥ –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó')
}).strict()).describe('–°–ø–∏—Å–æ–∫ –ø–æ–º–∏–ª–æ–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø–æ–ª—ñ–≤')
}).strict()

export const createBranch409Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "traceId": zod.coerce.string().optional().describe('–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏')
}).strict()


/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–º–æ–≤–ª–µ–Ω—å —Ç–∞ –¥–æ—Ö–æ–¥—ñ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Ñ—ñ–ª—ñ—ó
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ—ñ–ª—ñ—ó
 */
export const getBranchStatisticsParams = zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID)')
}).strict()

export const getBranchStatisticsQueryParams = zod.object({
  "startDate": zod.coerce.string().date().describe('–ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞ –ø–µ—Ä—ñ–æ–¥—É'),
  "endDate": zod.coerce.string().date().describe('–ö—ñ–Ω—Ü–µ–≤–∞ –¥–∞—Ç–∞ –ø–µ—Ä—ñ–æ–¥—É')
}).strict()

export const getBranchStatistics200ResponseTotalRevenueMin = 0;
export const getBranchStatistics200ResponseAverageOrderValueMin = 0;
export const getBranchStatistics200ResponsePopularServicesItemTotalRevenueMin = 0;
export const getBranchStatistics200ResponseDailyStatsItemRevenueMin = 0;


export const getBranchStatistics200Response = zod.object({
  "branchId": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "branchName": zod.coerce.string(),
  "period": zod.object({
  "startDate": zod.coerce.string().date().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "endDate": zod.coerce.string().date().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ')
}).strict().describe('–ü–µ—Ä—ñ–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'),
  "ordersCount": zod.coerce.number().describe('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å'),
  "totalRevenue": zod.coerce.number().min(getBranchStatistics200ResponseTotalRevenueMin).describe('–ì—Ä–æ—à–æ–≤–∞ —Å—É–º–∞ (–≤ –≥—Ä–∏–≤–Ω—è—Ö)'),
  "averageOrderValue": zod.coerce.number().min(getBranchStatistics200ResponseAverageOrderValueMin).describe('–ì—Ä–æ—à–æ–≤–∞ —Å—É–º–∞ (–≤ –≥—Ä–∏–≤–Ω—è—Ö)'),
  "popularServices": zod.array(zod.object({
  "serviceName": zod.coerce.string(),
  "ordersCount": zod.coerce.number(),
  "totalRevenue": zod.coerce.number().min(getBranchStatistics200ResponsePopularServicesItemTotalRevenueMin).describe('–ì—Ä–æ—à–æ–≤–∞ —Å—É–º–∞ (–≤ –≥—Ä–∏–≤–Ω—è—Ö)'),
  "percentage": zod.coerce.number().describe('–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –¥–æ—Ö–æ–¥—É')
}).strict()),
  "dailyStats": zod.array(zod.object({
  "date": zod.coerce.string().date().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "ordersCount": zod.coerce.number(),
  "revenue": zod.coerce.number().min(getBranchStatistics200ResponseDailyStatsItemRevenueMin).describe('–ì—Ä–æ—à–æ–≤–∞ —Å—É–º–∞ (–≤ –≥—Ä–∏–≤–Ω—è—Ö)')
}).strict())
}).strict()

export const getBranchStatistics400Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥ (400)'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–ó–∞–≥–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "errors": zod.array(zod.object({
  "field": zod.coerce.string().describe('–ù–∞–∑–≤–∞ –ø–æ–ª—è –∑ –ø–æ–º–∏–ª–∫–æ—é'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "rejectedValue": zod.object({
  "present": zod.coerce.boolean().optional()
}).strict().optional(),
  "code": zod.coerce.string().optional().describe('–ö–æ–¥ –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó')
}).strict()).describe('–°–ø–∏—Å–æ–∫ –ø–æ–º–∏–ª–æ–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø–æ–ª—ñ–≤')
}).strict()

export const getBranchStatistics404Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "traceId": zod.coerce.string().optional().describe('–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏')
}).strict()


/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä–æ–±–æ—á–∏–π –¥–µ–Ω—å —Ñ—ñ–ª—ñ—ó
 * @summary –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä–æ–±–æ—á–∏–π –¥–µ–Ω—å
 */
export const getBranchNextWorkingDayParams = zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID)')
}).strict()

export const getBranchNextWorkingDayQueryParams = zod.object({
  "fromDate": zod.coerce.string().date().optional().describe('–î–∞—Ç–∞ –≤—ñ–¥ —è–∫–æ—ó —à—É–∫–∞—Ç–∏ (ISO 8601 date)')
}).strict()

export const getBranchNextWorkingDay200Response = zod.object({
  "branchId": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "nextWorkingDate": zod.coerce.string().date().optional().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "workingHours": zod.object({
  "openTime": zod.coerce.string().describe('–ß–∞—Å –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è'),
  "closeTime": zod.coerce.string().describe('–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è')
}).strict().optional().describe('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏'),
  "daysUntilNextWorking": zod.coerce.number().optional().describe('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è')
}).strict()

export const getBranchNextWorkingDay404Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "traceId": zod.coerce.string().optional().describe('–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏')
}).strict()


/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø—Ä–∞—Ü—é—î —Ñ—ñ–ª—ñ—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —á–∞—Å
 * @summary –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –≤—ñ–¥–∫—Ä–∏—Ç–∞ —Ñ—ñ–ª—ñ—è
 */
export const getBranchOpenStatusParams = zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID)')
}).strict()

export const getBranchOpenStatusQueryParams = zod.object({
  "dateTime": zod.coerce.string().datetime({}).optional().describe('–î–∞—Ç–∞ —Ç–∞ —á–∞—Å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (ISO 8601)')
}).strict()

export const getBranchOpenStatus200Response = zod.object({
  "branchId": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "isOpen": zod.coerce.boolean().describe('–ß–∏ –≤—ñ–¥–∫—Ä–∏—Ç–∞ —Ñ—ñ–ª—ñ—è –∑–∞—Ä–∞–∑'),
  "checkDateTime": zod.coerce.string().datetime({}).describe('–ú—ñ—Ç–∫–∞ —á–∞—Å—É –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "currentStatus": zod.enum(['OPEN', 'CLOSED', 'HOLIDAY']),
  "nextOpenTime": zod.coerce.string().datetime({}).optional().describe('–ú—ñ—Ç–∫–∞ —á–∞—Å—É –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "todaySchedule": zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "dayOfWeek": zod.enum(['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY']),
  "openTime": zod.coerce.string().optional().describe('–ß–∞—Å –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è'),
  "closeTime": zod.coerce.string().optional().describe('–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è'),
  "isWorkingDay": zod.coerce.boolean().describe('–ß–∏ —î –¥–µ–Ω—å —Ä–æ–±–æ—á–∏–º'),
  "notes": zod.coerce.string().optional().describe('–ü—Ä–∏–º—ñ—Ç–∫–∏ –¥–æ –¥–Ω—è')
}).strict().optional()
}).strict()

export const getBranchOpenStatus404Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "traceId": zod.coerce.string().optional().describe('–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏')
}).strict()


/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ä—ñ–≤–Ω—è–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å—ñ—Ö —Ñ—ñ–ª—ñ–π –∑–∞ –ø–µ—Ä—ñ–æ–¥
 * @summary –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ—ñ–ª—ñ–π
 */
export const compareBranchStatisticsQuerySortByDefault = "revenue";export const compareBranchStatisticsQueryOrderDefault = "desc";

export const compareBranchStatisticsQueryParams = zod.object({
  "startDate": zod.coerce.string().date().describe('–ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞ –ø–µ—Ä—ñ–æ–¥—É'),
  "endDate": zod.coerce.string().date().describe('–ö—ñ–Ω—Ü–µ–≤–∞ –¥–∞—Ç–∞ –ø–µ—Ä—ñ–æ–¥—É'),
  "city": zod.coerce.string().optional().describe('–§—ñ–ª—å—Ç—Ä –∑–∞ –º—ñ—Å—Ç–æ–º'),
  "sortBy": zod.coerce.string().default(compareBranchStatisticsQuerySortByDefault).describe('–ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è'),
  "order": zod.coerce.string().default(compareBranchStatisticsQueryOrderDefault).describe('–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è')
}).strict()

export const compareBranchStatistics200ResponseTotalRevenueMin = 0;
export const compareBranchStatistics200ResponseAverageOrderValueMin = 0;


export const compareBranchStatistics200ResponseItem = zod.object({
  "branchId": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "branchName": zod.coerce.string(),
  "branchCode": zod.coerce.string(),
  "ordersCount": zod.coerce.number(),
  "totalRevenue": zod.coerce.number().min(compareBranchStatistics200ResponseTotalRevenueMin).describe('–ì—Ä–æ—à–æ–≤–∞ —Å—É–º–∞ (–≤ –≥—Ä–∏–≤–Ω—è—Ö)'),
  "averageOrderValue": zod.coerce.number().min(compareBranchStatistics200ResponseAverageOrderValueMin).describe('–ì—Ä–æ—à–æ–≤–∞ —Å—É–º–∞ (–≤ –≥—Ä–∏–≤–Ω—è—Ö)'),
  "ranking": zod.coerce.number().describe('–ü–æ–∑–∏—Ü—ñ—è –≤ —Ä–µ–π—Ç–∏–Ω–≥—É')
}).strict()
export const compareBranchStatistics200Response = zod.array(compareBranchStatistics200ResponseItem)

export const compareBranchStatistics400Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥ (400)'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–ó–∞–≥–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "errors": zod.array(zod.object({
  "field": zod.coerce.string().describe('–ù–∞–∑–≤–∞ –ø–æ–ª—è –∑ –ø–æ–º–∏–ª–∫–æ—é'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "rejectedValue": zod.object({
  "present": zod.coerce.boolean().optional()
}).strict().optional(),
  "code": zod.coerce.string().optional().describe('–ö–æ–¥ –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó')
}).strict()).describe('–°–ø–∏—Å–æ–∫ –ø–æ–º–∏–ª–æ–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø–æ–ª—ñ–≤')
}).strict()


/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Ñ—ñ–ª—ñ—ó –≤ —Ä–∞–¥—ñ—É—Å—ñ –≤—ñ–¥ –∑–∞–¥–∞–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
 * @summary –ó–Ω–∞–π—Ç–∏ –Ω–∞–π–±–ª–∏–∂—á—ñ —Ñ—ñ–ª—ñ—ó
 */
export const getNearbyBranchesQueryLatitudeMin = -90;

export const getNearbyBranchesQueryLatitudeMax = 90;
export const getNearbyBranchesQueryLongitudeMin = -180;

export const getNearbyBranchesQueryLongitudeMax = 180;
export const getNearbyBranchesQueryRadiusDefault = 10;
export const getNearbyBranchesQueryRadiusMin = 0.1;

export const getNearbyBranchesQueryRadiusMax = 100;
export const getNearbyBranchesQueryLimitDefault = 10;
export const getNearbyBranchesQueryLimitMax = 50;


export const getNearbyBranchesQueryParams = zod.object({
  "latitude": zod.coerce.number().min(getNearbyBranchesQueryLatitudeMin).max(getNearbyBranchesQueryLatitudeMax).describe('–®–∏—Ä–æ—Ç–∞'),
  "longitude": zod.coerce.number().min(getNearbyBranchesQueryLongitudeMin).max(getNearbyBranchesQueryLongitudeMax).describe('–î–æ–≤–≥–æ—Ç–∞'),
  "radius": zod.coerce.number().min(getNearbyBranchesQueryRadiusMin).max(getNearbyBranchesQueryRadiusMax).default(getNearbyBranchesQueryRadiusDefault).describe('–†–∞–¥—ñ—É—Å –ø–æ—à—É–∫—É –≤ –∫—ñ–ª–æ–º–µ—Ç—Ä–∞—Ö'),
  "limit": zod.coerce.number().min(1).max(getNearbyBranchesQueryLimitMax).default(getNearbyBranchesQueryLimitDefault).describe('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤')
}).strict()

export const getNearbyBranches200ResponseAddressStreetMin = 0;

export const getNearbyBranches200ResponseAddressStreetMax = 200;
export const getNearbyBranches200ResponseAddressCityMin = 0;

export const getNearbyBranches200ResponseAddressCityMax = 100;
export const getNearbyBranches200ResponseAddressRegionMin = 0;

export const getNearbyBranches200ResponseAddressRegionMax = 100;
export const getNearbyBranches200ResponseAddressPostalCodeMin = 0;

export const getNearbyBranches200ResponseAddressPostalCodeMax = 10;
export const getNearbyBranches200ResponseAddressCountryMin = 0;

export const getNearbyBranches200ResponseAddressCountryMax = 100;


export const getNearbyBranches200ResponseItem = zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "code": zod.coerce.string().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥ —Ñ—ñ–ª—ñ—ó'),
  "name": zod.coerce.string().describe('–ù–∞–∑–≤–∞ —Ñ—ñ–ª—ñ—ó'),
  "description": zod.coerce.string().describe('–û–ø–∏—Å —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è'),
  "address": zod.object({
  "street": zod.coerce.string().min(getNearbyBranches200ResponseAddressStreetMin).max(getNearbyBranches200ResponseAddressStreetMax).optional().describe('–í—É–ª–∏—Ü—è —Ç–∞ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É'),
  "city": zod.coerce.string().min(getNearbyBranches200ResponseAddressCityMin).max(getNearbyBranches200ResponseAddressCityMax).optional().describe('–ú—ñ—Å—Ç–æ'),
  "region": zod.coerce.string().min(getNearbyBranches200ResponseAddressRegionMin).max(getNearbyBranches200ResponseAddressRegionMax).optional().describe('–û–±–ª–∞—Å—Ç—å/—Ä–µ–≥—ñ–æ–Ω'),
  "postalCode": zod.coerce.string().min(getNearbyBranches200ResponseAddressPostalCodeMin).max(getNearbyBranches200ResponseAddressPostalCodeMax).optional().describe('–ü–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å'),
  "country": zod.coerce.string().min(getNearbyBranches200ResponseAddressCountryMin).max(getNearbyBranches200ResponseAddressCountryMax).optional().describe('–ö—Ä–∞—ó–Ω–∞')
}).strict(),
  "contactInfo": zod.object({
  "phone": zod.coerce.string().describe('–û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω'),
  "alternativePhone": zod.coerce.string().optional().describe('–î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω'),
  "email": zod.coerce.string().describe('Email —Ñ—ñ–ª—ñ—ó'),
  "managerName": zod.coerce.string().describe('–Ü–º\'—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞')
}).strict(),
  "coordinates": zod.object({
  "latitude": zod.coerce.number().optional().describe('–®–∏—Ä–æ—Ç–∞'),
  "longitude": zod.coerce.number().optional().describe('–î–æ–≤–≥–æ—Ç–∞'),
  "mapUrl": zod.coerce.string().url().optional().describe('–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞—Ä—Ç—É')
}).strict().optional(),
  "status": zod.enum(['ACTIVE', 'INACTIVE', 'TEMPORARILY_CLOSED', 'UNDER_RENOVATION']),
  "workingSchedule": zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "branchId": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "workingDays": zod.array(zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "dayOfWeek": zod.enum(['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY']),
  "openTime": zod.coerce.string().optional().describe('–ß–∞—Å –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è'),
  "closeTime": zod.coerce.string().optional().describe('–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è'),
  "isWorkingDay": zod.coerce.boolean().describe('–ß–∏ —î –¥–µ–Ω—å —Ä–æ–±–æ—á–∏–º'),
  "notes": zod.coerce.string().optional().describe('–ü—Ä–∏–º—ñ—Ç–∫–∏ –¥–æ –¥–Ω—è')
}).strict()),
  "holidays": zod.array(zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "date": zod.coerce.string().date().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "name": zod.coerce.string().describe('–ù–∞–∑–≤–∞ —Å–≤—è—Ç–∞'),
  "isRecurring": zod.coerce.boolean().describe('–ß–∏ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è —â–æ—Ä–æ–∫—É')
}).strict()),
  "timezone": zod.coerce.string().describe('–ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å')
}).strict().optional(),
  "receiptCounter": zod.coerce.number().describe('–ü–æ—Ç–æ—á–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∫–≤–∏—Ç–∞–Ω—Ü—ñ–π'),
  "createdAt": zod.coerce.string().datetime({}).describe('–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è'),
  "updatedAt": zod.coerce.string().datetime({}).describe('–î–∞—Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è'),
  "distance": zod.coerce.number().describe('–í—ñ–¥—Å—Ç–∞–Ω—å –≤ –∫—ñ–ª–æ–º–µ—Ç—Ä–∞—Ö')
}).strict()
export const getNearbyBranches200Response = zod.array(getNearbyBranches200ResponseItem)

export const getNearbyBranches400Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥ (400)'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–ó–∞–≥–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "errors": zod.array(zod.object({
  "field": zod.coerce.string().describe('–ù–∞–∑–≤–∞ –ø–æ–ª—è –∑ –ø–æ–º–∏–ª–∫–æ—é'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "rejectedValue": zod.object({
  "present": zod.coerce.boolean().optional()
}).strict().optional(),
  "code": zod.coerce.string().optional().describe('–ö–æ–¥ –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó')
}).strict()).describe('–°–ø–∏—Å–æ–∫ –ø–æ–º–∏–ª–æ–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø–æ–ª—ñ–≤')
}).strict()


/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Ñ—ñ–ª—ñ—é –∑–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º –∫–æ–¥–æ–º
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ—ñ–ª—ñ—é –∑–∞ –∫–æ–¥–æ–º
 */
export const getBranchByCodePathCodeRegExp = new RegExp('^[A-Z0-9-]+$');


export const getBranchByCodeParams = zod.object({
  "code": zod.coerce.string().regex(getBranchByCodePathCodeRegExp).describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥ —Ñ—ñ–ª—ñ—ó')
}).strict()

export const getBranchByCode200ResponseAddressStreetMin = 0;

export const getBranchByCode200ResponseAddressStreetMax = 200;
export const getBranchByCode200ResponseAddressCityMin = 0;

export const getBranchByCode200ResponseAddressCityMax = 100;
export const getBranchByCode200ResponseAddressRegionMin = 0;

export const getBranchByCode200ResponseAddressRegionMax = 100;
export const getBranchByCode200ResponseAddressPostalCodeMin = 0;

export const getBranchByCode200ResponseAddressPostalCodeMax = 10;
export const getBranchByCode200ResponseAddressCountryMin = 0;

export const getBranchByCode200ResponseAddressCountryMax = 100;


export const getBranchByCode200Response = zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "code": zod.coerce.string().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥ —Ñ—ñ–ª—ñ—ó'),
  "name": zod.coerce.string().describe('–ù–∞–∑–≤–∞ —Ñ—ñ–ª—ñ—ó'),
  "description": zod.coerce.string().describe('–û–ø–∏—Å —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è'),
  "address": zod.object({
  "street": zod.coerce.string().min(getBranchByCode200ResponseAddressStreetMin).max(getBranchByCode200ResponseAddressStreetMax).optional().describe('–í—É–ª–∏—Ü—è —Ç–∞ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É'),
  "city": zod.coerce.string().min(getBranchByCode200ResponseAddressCityMin).max(getBranchByCode200ResponseAddressCityMax).optional().describe('–ú—ñ—Å—Ç–æ'),
  "region": zod.coerce.string().min(getBranchByCode200ResponseAddressRegionMin).max(getBranchByCode200ResponseAddressRegionMax).optional().describe('–û–±–ª–∞—Å—Ç—å/—Ä–µ–≥—ñ–æ–Ω'),
  "postalCode": zod.coerce.string().min(getBranchByCode200ResponseAddressPostalCodeMin).max(getBranchByCode200ResponseAddressPostalCodeMax).optional().describe('–ü–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å'),
  "country": zod.coerce.string().min(getBranchByCode200ResponseAddressCountryMin).max(getBranchByCode200ResponseAddressCountryMax).optional().describe('–ö—Ä–∞—ó–Ω–∞')
}).strict(),
  "contactInfo": zod.object({
  "phone": zod.coerce.string().describe('–û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω'),
  "alternativePhone": zod.coerce.string().optional().describe('–î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω'),
  "email": zod.coerce.string().describe('Email —Ñ—ñ–ª—ñ—ó'),
  "managerName": zod.coerce.string().describe('–Ü–º\'—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞')
}).strict(),
  "coordinates": zod.object({
  "latitude": zod.coerce.number().optional().describe('–®–∏—Ä–æ—Ç–∞'),
  "longitude": zod.coerce.number().optional().describe('–î–æ–≤–≥–æ—Ç–∞'),
  "mapUrl": zod.coerce.string().url().optional().describe('–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞—Ä—Ç—É')
}).strict().optional(),
  "status": zod.enum(['ACTIVE', 'INACTIVE', 'TEMPORARILY_CLOSED', 'UNDER_RENOVATION']),
  "workingSchedule": zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "branchId": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "workingDays": zod.array(zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "dayOfWeek": zod.enum(['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY']),
  "openTime": zod.coerce.string().optional().describe('–ß–∞—Å –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è'),
  "closeTime": zod.coerce.string().optional().describe('–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è'),
  "isWorkingDay": zod.coerce.boolean().describe('–ß–∏ —î –¥–µ–Ω—å —Ä–æ–±–æ—á–∏–º'),
  "notes": zod.coerce.string().optional().describe('–ü—Ä–∏–º—ñ—Ç–∫–∏ –¥–æ –¥–Ω—è')
}).strict()),
  "holidays": zod.array(zod.object({
  "id": zod.coerce.string().uuid().describe('–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (UUID v4)'),
  "date": zod.coerce.string().date().describe('–î–∞—Ç–∞ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç—ñ'),
  "name": zod.coerce.string().describe('–ù–∞–∑–≤–∞ —Å–≤—è—Ç–∞'),
  "isRecurring": zod.coerce.boolean().describe('–ß–∏ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è —â–æ—Ä–æ–∫—É')
}).strict()),
  "timezone": zod.coerce.string().describe('–ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å')
}).strict().optional(),
  "receiptCounter": zod.coerce.number().describe('–ü–æ—Ç–æ—á–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∫–≤–∏—Ç–∞–Ω—Ü—ñ–π'),
  "createdAt": zod.coerce.string().datetime({}).describe('–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è'),
  "updatedAt": zod.coerce.string().datetime({}).describe('–î–∞—Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è')
}).strict()

export const getBranchByCode404Response = zod.object({
  "timestamp": zod.coerce.string().datetime({}).describe('–ß–∞—Å –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏'),
  "status": zod.coerce.number().describe('HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥'),
  "error": zod.coerce.string().describe('–¢–∏–ø –ø–æ–º–∏–ª–∫–∏'),
  "message": zod.coerce.string().describe('–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏'),
  "path": zod.coerce.string().describe('–®–ª—è—Ö –∑–∞–ø–∏—Ç—É'),
  "traceId": zod.coerce.string().optional().describe('–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏')
}).strict()
