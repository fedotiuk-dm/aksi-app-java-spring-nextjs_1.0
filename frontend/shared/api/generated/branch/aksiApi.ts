/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * AKSI API
 * API –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–ª—ñ–Ω—ñ–Ω–≥–æ–≤–æ—é –∫–æ–º–ø–∞–Ω—ñ—î—é AKSI
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  BranchLocationCreateRequest,
  BranchLocationDTO,
  BranchLocationUpdateRequest,
  DeleteBranchLocation204,
  ErrorResponse,
  GetAllBranchLocationsParams,
  SetActiveStatusParams
} from './aksiApi.schemas';

import orvalFetcher from '../../../../lib/api/orval-fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –ø—É–Ω–∫—Ç –ø—Ä–∏–π–æ–º—É –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–æ–º
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—É–Ω–∫—Ç –ø—Ä–∏–π–æ–º—É –∑–∞ ID
 */
export const getBranchLocationById = (
    id: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<BranchLocationDTO>(
      {url: `/branch-locations/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetBranchLocationByIdQueryKey = (id: string,) => {
    return [`/branch-locations/${id}`] as const;
    }

    
export const getGetBranchLocationByIdQueryOptions = <TData = Awaited<ReturnType<typeof getBranchLocationById>>, TError = ErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchLocationById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBranchLocationByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBranchLocationById>>> = ({ signal }) => getBranchLocationById(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBranchLocationById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBranchLocationByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getBranchLocationById>>>
export type GetBranchLocationByIdQueryError = ErrorResponse


export function useGetBranchLocationById<TData = Awaited<ReturnType<typeof getBranchLocationById>>, TError = ErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchLocationById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBranchLocationById>>,
          TError,
          Awaited<ReturnType<typeof getBranchLocationById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBranchLocationById<TData = Awaited<ReturnType<typeof getBranchLocationById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchLocationById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBranchLocationById>>,
          TError,
          Awaited<ReturnType<typeof getBranchLocationById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBranchLocationById<TData = Awaited<ReturnType<typeof getBranchLocationById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchLocationById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—É–Ω–∫—Ç –ø—Ä–∏–π–æ–º—É –∑–∞ ID
 */

export function useGetBranchLocationById<TData = Awaited<ReturnType<typeof getBranchLocationById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchLocationById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBranchLocationByIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –û–Ω–æ–≤–ª—é—î —ñ—Å–Ω—É—é—á–∏–π –ø—É–Ω–∫—Ç –ø—Ä–∏–π–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω—å
 * @summary –û–Ω–æ–≤–∏—Ç–∏ –ø—É–Ω–∫—Ç –ø—Ä–∏–π–æ–º—É
 */
export const updateBranchLocation = (
    id: string,
    branchLocationUpdateRequest: BranchLocationUpdateRequest,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<BranchLocationDTO>(
      {url: `/branch-locations/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: branchLocationUpdateRequest
    },
      options);
    }
  


export const getUpdateBranchLocationMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateBranchLocation>>, TError,{id: string;data: BranchLocationUpdateRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof updateBranchLocation>>, TError,{id: string;data: BranchLocationUpdateRequest}, TContext> => {

const mutationKey = ['updateBranchLocation'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateBranchLocation>>, {id: string;data: BranchLocationUpdateRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updateBranchLocation(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateBranchLocationMutationResult = NonNullable<Awaited<ReturnType<typeof updateBranchLocation>>>
    export type UpdateBranchLocationMutationBody = BranchLocationUpdateRequest
    export type UpdateBranchLocationMutationError = ErrorResponse

    /**
 * @summary –û–Ω–æ–≤–∏—Ç–∏ –ø—É–Ω–∫—Ç –ø—Ä–∏–π–æ–º—É
 */
export const useUpdateBranchLocation = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateBranchLocation>>, TError,{id: string;data: BranchLocationUpdateRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateBranchLocation>>,
        TError,
        {id: string;data: BranchLocationUpdateRequest},
        TContext
      > => {

      const mutationOptions = getUpdateBranchLocationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –í–∏–¥–∞–ª—è—î –ø—É–Ω–∫—Ç –ø—Ä–∏–π–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω—å
 * @summary –í–∏–¥–∞–ª–∏—Ç–∏ –ø—É–Ω–∫—Ç –ø—Ä–∏–π–æ–º—É
 */
export const deleteBranchLocation = (
    id: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<DeleteBranchLocation204>(
      {url: `/branch-locations/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteBranchLocationMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteBranchLocation>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteBranchLocation>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteBranchLocation'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteBranchLocation>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteBranchLocation(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteBranchLocationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteBranchLocation>>>
    
    export type DeleteBranchLocationMutationError = ErrorResponse

    /**
 * @summary –í–∏–¥–∞–ª–∏—Ç–∏ –ø—É–Ω–∫—Ç –ø—Ä–∏–π–æ–º—É
 */
export const useDeleteBranchLocation = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteBranchLocation>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteBranchLocation>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteBranchLocationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ó–º—ñ–Ω—é—î —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –ø—É–Ω–∫—Ç—É –ø—Ä–∏–π–æ–º—É
 * @summary –ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
 */
export const setActiveStatus = (
    id: string,
    params: SetActiveStatusParams,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<BranchLocationDTO>(
      {url: `/branch-locations/${id}/active`, method: 'PUT',
        params
    },
      options);
    }
  


export const getSetActiveStatusMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof setActiveStatus>>, TError,{id: string;params: SetActiveStatusParams}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof setActiveStatus>>, TError,{id: string;params: SetActiveStatusParams}, TContext> => {

const mutationKey = ['setActiveStatus'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof setActiveStatus>>, {id: string;params: SetActiveStatusParams}> = (props) => {
          const {id,params} = props ?? {};

          return  setActiveStatus(id,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SetActiveStatusMutationResult = NonNullable<Awaited<ReturnType<typeof setActiveStatus>>>
    
    export type SetActiveStatusMutationError = ErrorResponse

    /**
 * @summary –ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
 */
export const useSetActiveStatus = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof setActiveStatus>>, TError,{id: string;params: SetActiveStatusParams}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof setActiveStatus>>,
        TError,
        {id: string;params: SetActiveStatusParams},
        TContext
      > => {

      const mutationOptions = getSetActiveStatusMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –ø—É–Ω–∫—Ç—ñ–≤ –ø—Ä–∏–π–æ–º—É, —è–∫—â–æ active=true - —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø—É–Ω–∫—Ç–∏ –ø—Ä–∏–π–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω—å
 */
export const getAllBranchLocations = (
    params?: GetAllBranchLocationsParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<BranchLocationDTO>(
      {url: `/branch-locations`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllBranchLocationsQueryKey = (params?: GetAllBranchLocationsParams,) => {
    return [`/branch-locations`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllBranchLocationsQueryOptions = <TData = Awaited<ReturnType<typeof getAllBranchLocations>>, TError = ErrorResponse>(params?: GetAllBranchLocationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllBranchLocations>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllBranchLocationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllBranchLocations>>> = ({ signal }) => getAllBranchLocations(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllBranchLocations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllBranchLocationsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllBranchLocations>>>
export type GetAllBranchLocationsQueryError = ErrorResponse


export function useGetAllBranchLocations<TData = Awaited<ReturnType<typeof getAllBranchLocations>>, TError = ErrorResponse>(
 params: undefined |  GetAllBranchLocationsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllBranchLocations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllBranchLocations>>,
          TError,
          Awaited<ReturnType<typeof getAllBranchLocations>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllBranchLocations<TData = Awaited<ReturnType<typeof getAllBranchLocations>>, TError = ErrorResponse>(
 params?: GetAllBranchLocationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllBranchLocations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllBranchLocations>>,
          TError,
          Awaited<ReturnType<typeof getAllBranchLocations>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllBranchLocations<TData = Awaited<ReturnType<typeof getAllBranchLocations>>, TError = ErrorResponse>(
 params?: GetAllBranchLocationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllBranchLocations>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø—É–Ω–∫—Ç–∏ –ø—Ä–∏–π–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω—å
 */

export function useGetAllBranchLocations<TData = Awaited<ReturnType<typeof getAllBranchLocations>>, TError = ErrorResponse>(
 params?: GetAllBranchLocationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllBranchLocations>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllBranchLocationsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –ø—É–Ω–∫—Ç –ø—Ä–∏–π–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω—å
 * @summary –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø—É–Ω–∫—Ç –ø—Ä–∏–π–æ–º—É
 */
export const createBranchLocation = (
    branchLocationCreateRequest: BranchLocationCreateRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<BranchLocationDTO>(
      {url: `/branch-locations`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: branchLocationCreateRequest, signal
    },
      options);
    }
  


export const getCreateBranchLocationMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createBranchLocation>>, TError,{data: BranchLocationCreateRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof createBranchLocation>>, TError,{data: BranchLocationCreateRequest}, TContext> => {

const mutationKey = ['createBranchLocation'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createBranchLocation>>, {data: BranchLocationCreateRequest}> = (props) => {
          const {data} = props ?? {};

          return  createBranchLocation(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateBranchLocationMutationResult = NonNullable<Awaited<ReturnType<typeof createBranchLocation>>>
    export type CreateBranchLocationMutationBody = BranchLocationCreateRequest
    export type CreateBranchLocationMutationError = ErrorResponse

    /**
 * @summary –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø—É–Ω–∫—Ç –ø—Ä–∏–π–æ–º—É
 */
export const useCreateBranchLocation = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createBranchLocation>>, TError,{data: BranchLocationCreateRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createBranchLocation>>,
        TError,
        {data: BranchLocationCreateRequest},
        TContext
      > => {

      const mutationOptions = getCreateBranchLocationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –ø—É–Ω–∫—Ç –ø—Ä–∏–π–æ–º—É –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º –∫–æ–¥–æ–º
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—É–Ω–∫—Ç –ø—Ä–∏–π–æ–º—É –∑–∞ –∫–æ–¥–æ–º
 */
export const getBranchLocationByCode = (
    code: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<BranchLocationDTO>(
      {url: `/branch-locations/code/${code}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetBranchLocationByCodeQueryKey = (code: string,) => {
    return [`/branch-locations/code/${code}`] as const;
    }

    
export const getGetBranchLocationByCodeQueryOptions = <TData = Awaited<ReturnType<typeof getBranchLocationByCode>>, TError = ErrorResponse>(code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchLocationByCode>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBranchLocationByCodeQueryKey(code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBranchLocationByCode>>> = ({ signal }) => getBranchLocationByCode(code, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBranchLocationByCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBranchLocationByCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getBranchLocationByCode>>>
export type GetBranchLocationByCodeQueryError = ErrorResponse


export function useGetBranchLocationByCode<TData = Awaited<ReturnType<typeof getBranchLocationByCode>>, TError = ErrorResponse>(
 code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchLocationByCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBranchLocationByCode>>,
          TError,
          Awaited<ReturnType<typeof getBranchLocationByCode>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBranchLocationByCode<TData = Awaited<ReturnType<typeof getBranchLocationByCode>>, TError = ErrorResponse>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchLocationByCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBranchLocationByCode>>,
          TError,
          Awaited<ReturnType<typeof getBranchLocationByCode>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBranchLocationByCode<TData = Awaited<ReturnType<typeof getBranchLocationByCode>>, TError = ErrorResponse>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchLocationByCode>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—É–Ω–∫—Ç –ø—Ä–∏–π–æ–º—É –∑–∞ –∫–æ–¥–æ–º
 */

export function useGetBranchLocationByCode<TData = Awaited<ReturnType<typeof getBranchLocationByCode>>, TError = ErrorResponse>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchLocationByCode>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBranchLocationByCodeQueryOptions(code,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




