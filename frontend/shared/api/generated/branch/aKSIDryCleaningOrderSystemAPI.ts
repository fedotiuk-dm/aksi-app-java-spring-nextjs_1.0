/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AKSI Dry Cleaning Order System API
 * API –¥–ª—è –æ–¥–Ω–æ—Å—Ç–æ—Ä—ñ–Ω–∫–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å —Ö—ñ–º—á–∏—Å—Ç–∫–∏ –∑ DDD –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–æ—é
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  BranchComparisonResponse,
  BranchOpenStatusResponse,
  BranchResponse,
  BranchStatisticsResponse,
  BranchWithDistanceResponse,
  CompareBranchStatisticsParams,
  CreateBranchRequest,
  ErrorResponse,
  GenerateReceiptNumberRequest,
  GetBranchNextWorkingDayParams,
  GetBranchOpenStatusParams,
  GetBranchStatisticsParams,
  GetBranchesParams,
  GetNearbyBranchesParams,
  NextWorkingDayResponse,
  ParseReceiptNumberRequest,
  ReceiptNumberParseResponse,
  ReceiptNumberResponse,
  ReceiptValidationResponse,
  UpdateBranchRequest,
  UpdateWorkingScheduleRequest,
  ValidateReceiptNumberRequest,
  ValidationErrorResponse,
  WorkingScheduleResponse
} from './aKSIDryCleaningOrderSystemAPI.schemas';

import orvalFetcher from '../../../../lib/api/orval-fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ—ñ–ª—ñ—é
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ—ñ–ª—ñ—é –∑–∞ ID
 */
export const getBranchById = (
    id: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<BranchResponse>(
      {url: `/api/branches/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetBranchByIdQueryKey = (id: string,) => {
    return [`/api/branches/${id}`] as const;
    }

    
export const getGetBranchByIdQueryOptions = <TData = Awaited<ReturnType<typeof getBranchById>>, TError = ErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBranchByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBranchById>>> = ({ signal }) => getBranchById(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBranchById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBranchByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getBranchById>>>
export type GetBranchByIdQueryError = ErrorResponse


export function useGetBranchById<TData = Awaited<ReturnType<typeof getBranchById>>, TError = ErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBranchById>>,
          TError,
          Awaited<ReturnType<typeof getBranchById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBranchById<TData = Awaited<ReturnType<typeof getBranchById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBranchById>>,
          TError,
          Awaited<ReturnType<typeof getBranchById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBranchById<TData = Awaited<ReturnType<typeof getBranchById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ—ñ–ª—ñ—é –∑–∞ ID
 */

export function useGetBranchById<TData = Awaited<ReturnType<typeof getBranchById>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBranchByIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –û–Ω–æ–≤–ª—é—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ—ñ–ª—ñ—é
 * @summary –û–Ω–æ–≤–∏—Ç–∏ —Ñ—ñ–ª—ñ—é
 */
export const updateBranch = (
    id: string,
    updateBranchRequest: UpdateBranchRequest,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<BranchResponse>(
      {url: `/api/branches/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateBranchRequest
    },
      options);
    }
  


export const getUpdateBranchMutationOptions = <TError = ValidationErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateBranch>>, TError,{id: string;data: UpdateBranchRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof updateBranch>>, TError,{id: string;data: UpdateBranchRequest}, TContext> => {

const mutationKey = ['updateBranch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateBranch>>, {id: string;data: UpdateBranchRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updateBranch(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateBranchMutationResult = NonNullable<Awaited<ReturnType<typeof updateBranch>>>
    export type UpdateBranchMutationBody = UpdateBranchRequest
    export type UpdateBranchMutationError = ValidationErrorResponse | ErrorResponse

    /**
 * @summary –û–Ω–æ–≤–∏—Ç–∏ —Ñ—ñ–ª—ñ—é
 */
export const useUpdateBranch = <TError = ValidationErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateBranch>>, TError,{id: string;data: UpdateBranchRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateBranch>>,
        TError,
        {id: string;data: UpdateBranchRequest},
        TContext
      > => {

      const mutationOptions = getUpdateBranchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –î–µ–∞–∫—Ç–∏–≤—É—î —Ñ—ñ–ª—ñ—é (–Ω–µ –≤–∏–¥–∞–ª—è—î, –∞ —Ä–æ–±–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—é)
 * @summary –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Ñ—ñ–ª—ñ—é
 */
export const deleteBranch = (
    id: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<void>(
      {url: `/api/branches/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteBranchMutationOptions = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteBranch>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteBranch>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteBranch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteBranch>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteBranch(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteBranchMutationResult = NonNullable<Awaited<ReturnType<typeof deleteBranch>>>
    
    export type DeleteBranchMutationError = ErrorResponse

    /**
 * @summary –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Ñ—ñ–ª—ñ—é
 */
export const useDeleteBranch = <TError = ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteBranch>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteBranch>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteBranchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Ñ—ñ–ª—ñ—ó
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ —Ñ—ñ–ª—ñ—ó
 */
export const getBranchSchedule = (
    id: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<WorkingScheduleResponse>(
      {url: `/api/branches/${id}/schedule`, method: 'GET', signal
    },
      options);
    }
  

export const getGetBranchScheduleQueryKey = (id: string,) => {
    return [`/api/branches/${id}/schedule`] as const;
    }

    
export const getGetBranchScheduleQueryOptions = <TData = Awaited<ReturnType<typeof getBranchSchedule>>, TError = ErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchSchedule>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBranchScheduleQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBranchSchedule>>> = ({ signal }) => getBranchSchedule(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBranchSchedule>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBranchScheduleQueryResult = NonNullable<Awaited<ReturnType<typeof getBranchSchedule>>>
export type GetBranchScheduleQueryError = ErrorResponse


export function useGetBranchSchedule<TData = Awaited<ReturnType<typeof getBranchSchedule>>, TError = ErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchSchedule>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBranchSchedule>>,
          TError,
          Awaited<ReturnType<typeof getBranchSchedule>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBranchSchedule<TData = Awaited<ReturnType<typeof getBranchSchedule>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchSchedule>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBranchSchedule>>,
          TError,
          Awaited<ReturnType<typeof getBranchSchedule>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBranchSchedule<TData = Awaited<ReturnType<typeof getBranchSchedule>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchSchedule>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ —Ñ—ñ–ª—ñ—ó
 */

export function useGetBranchSchedule<TData = Awaited<ReturnType<typeof getBranchSchedule>>, TError = ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchSchedule>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBranchScheduleQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –û–Ω–æ–≤–ª—é—î –≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ —Ñ—ñ–ª—ñ—ó
 * @summary –û–Ω–æ–≤–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏
 */
export const updateBranchSchedule = (
    id: string,
    updateWorkingScheduleRequest: UpdateWorkingScheduleRequest,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<WorkingScheduleResponse>(
      {url: `/api/branches/${id}/schedule`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateWorkingScheduleRequest
    },
      options);
    }
  


export const getUpdateBranchScheduleMutationOptions = <TError = ValidationErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateBranchSchedule>>, TError,{id: string;data: UpdateWorkingScheduleRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof updateBranchSchedule>>, TError,{id: string;data: UpdateWorkingScheduleRequest}, TContext> => {

const mutationKey = ['updateBranchSchedule'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateBranchSchedule>>, {id: string;data: UpdateWorkingScheduleRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updateBranchSchedule(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateBranchScheduleMutationResult = NonNullable<Awaited<ReturnType<typeof updateBranchSchedule>>>
    export type UpdateBranchScheduleMutationBody = UpdateWorkingScheduleRequest
    export type UpdateBranchScheduleMutationError = ValidationErrorResponse | ErrorResponse

    /**
 * @summary –û–Ω–æ–≤–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏
 */
export const useUpdateBranchSchedule = <TError = ValidationErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateBranchSchedule>>, TError,{id: string;data: UpdateWorkingScheduleRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateBranchSchedule>>,
        TError,
        {id: string;data: UpdateWorkingScheduleRequest},
        TContext
      > => {

      const mutationOptions = getUpdateBranchScheduleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç—É –Ω–æ–º–µ—Ä–∞ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 * @summary –í–∞–ª—ñ–¥—É–≤–∞—Ç–∏ –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 */
export const validateReceiptNumber = (
    validateReceiptNumberRequest: ValidateReceiptNumberRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<ReceiptValidationResponse>(
      {url: `/api/receipt-numbers/validate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: validateReceiptNumberRequest, signal
    },
      options);
    }
  


export const getValidateReceiptNumberMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof validateReceiptNumber>>, TError,{data: ValidateReceiptNumberRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof validateReceiptNumber>>, TError,{data: ValidateReceiptNumberRequest}, TContext> => {

const mutationKey = ['validateReceiptNumber'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof validateReceiptNumber>>, {data: ValidateReceiptNumberRequest}> = (props) => {
          const {data} = props ?? {};

          return  validateReceiptNumber(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ValidateReceiptNumberMutationResult = NonNullable<Awaited<ReturnType<typeof validateReceiptNumber>>>
    export type ValidateReceiptNumberMutationBody = ValidateReceiptNumberRequest
    export type ValidateReceiptNumberMutationError = unknown

    /**
 * @summary –í–∞–ª—ñ–¥—É–≤–∞—Ç–∏ –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 */
export const useValidateReceiptNumber = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof validateReceiptNumber>>, TError,{data: ValidateReceiptNumberRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof validateReceiptNumber>>,
        TError,
        {data: ValidateReceiptNumberRequest},
        TContext
      > => {

      const mutationOptions = getValidateReceiptNumberMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –†–æ–∑–±–∏—Ä–∞—î –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
 * @summary –†–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 */
export const parseReceiptNumber = (
    parseReceiptNumberRequest: ParseReceiptNumberRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<ReceiptNumberParseResponse>(
      {url: `/api/receipt-numbers/parse`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: parseReceiptNumberRequest, signal
    },
      options);
    }
  


export const getParseReceiptNumberMutationOptions = <TError = ValidationErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof parseReceiptNumber>>, TError,{data: ParseReceiptNumberRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof parseReceiptNumber>>, TError,{data: ParseReceiptNumberRequest}, TContext> => {

const mutationKey = ['parseReceiptNumber'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof parseReceiptNumber>>, {data: ParseReceiptNumberRequest}> = (props) => {
          const {data} = props ?? {};

          return  parseReceiptNumber(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ParseReceiptNumberMutationResult = NonNullable<Awaited<ReturnType<typeof parseReceiptNumber>>>
    export type ParseReceiptNumberMutationBody = ParseReceiptNumberRequest
    export type ParseReceiptNumberMutationError = ValidationErrorResponse

    /**
 * @summary –†–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 */
export const useParseReceiptNumber = <TError = ValidationErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof parseReceiptNumber>>, TError,{data: ParseReceiptNumberRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof parseReceiptNumber>>,
        TError,
        {data: ParseReceiptNumberRequest},
        TContext
      > => {

      const mutationOptions = getParseReceiptNumberMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó –¥–ª—è —Ñ—ñ–ª—ñ—ó
 * @summary –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 */
export const generateReceiptNumber = (
    generateReceiptNumberRequest: GenerateReceiptNumberRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<ReceiptNumberResponse>(
      {url: `/api/receipt-numbers/generate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: generateReceiptNumberRequest, signal
    },
      options);
    }
  


export const getGenerateReceiptNumberMutationOptions = <TError = ValidationErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof generateReceiptNumber>>, TError,{data: GenerateReceiptNumberRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof generateReceiptNumber>>, TError,{data: GenerateReceiptNumberRequest}, TContext> => {

const mutationKey = ['generateReceiptNumber'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof generateReceiptNumber>>, {data: GenerateReceiptNumberRequest}> = (props) => {
          const {data} = props ?? {};

          return  generateReceiptNumber(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GenerateReceiptNumberMutationResult = NonNullable<Awaited<ReturnType<typeof generateReceiptNumber>>>
    export type GenerateReceiptNumberMutationBody = GenerateReceiptNumberRequest
    export type GenerateReceiptNumberMutationError = ValidationErrorResponse | ErrorResponse

    /**
 * @summary –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 */
export const useGenerateReceiptNumber = <TError = ValidationErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof generateReceiptNumber>>, TError,{data: GenerateReceiptNumberRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof generateReceiptNumber>>,
        TError,
        {data: GenerateReceiptNumberRequest},
        TContext
      > => {

      const mutationOptions = getGenerateReceiptNumberMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —Ñ—ñ–ª—ñ–π –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ñ—ñ–ª—ñ–π
 */
export const getBranches = (
    params?: GetBranchesParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<BranchResponse[]>(
      {url: `/api/branches`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetBranchesQueryKey = (params?: GetBranchesParams,) => {
    return [`/api/branches`, ...(params ? [params]: [])] as const;
    }

    
export const getGetBranchesQueryOptions = <TData = Awaited<ReturnType<typeof getBranches>>, TError = unknown>(params?: GetBranchesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranches>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBranchesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBranches>>> = ({ signal }) => getBranches(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBranches>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBranchesQueryResult = NonNullable<Awaited<ReturnType<typeof getBranches>>>
export type GetBranchesQueryError = unknown


export function useGetBranches<TData = Awaited<ReturnType<typeof getBranches>>, TError = unknown>(
 params: undefined |  GetBranchesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranches>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBranches>>,
          TError,
          Awaited<ReturnType<typeof getBranches>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBranches<TData = Awaited<ReturnType<typeof getBranches>>, TError = unknown>(
 params?: GetBranchesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranches>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBranches>>,
          TError,
          Awaited<ReturnType<typeof getBranches>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBranches<TData = Awaited<ReturnType<typeof getBranches>>, TError = unknown>(
 params?: GetBranchesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranches>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ñ—ñ–ª—ñ–π
 */

export function useGetBranches<TData = Awaited<ReturnType<typeof getBranches>>, TError = unknown>(
 params?: GetBranchesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranches>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBranchesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É —Ñ—ñ–ª—ñ—é —Ö—ñ–º—á–∏—Å—Ç–∫–∏
 * @summary –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É —Ñ—ñ–ª—ñ—é
 */
export const createBranch = (
    createBranchRequest: CreateBranchRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<BranchResponse>(
      {url: `/api/branches`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createBranchRequest, signal
    },
      options);
    }
  


export const getCreateBranchMutationOptions = <TError = ValidationErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createBranch>>, TError,{data: CreateBranchRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof createBranch>>, TError,{data: CreateBranchRequest}, TContext> => {

const mutationKey = ['createBranch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createBranch>>, {data: CreateBranchRequest}> = (props) => {
          const {data} = props ?? {};

          return  createBranch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateBranchMutationResult = NonNullable<Awaited<ReturnType<typeof createBranch>>>
    export type CreateBranchMutationBody = CreateBranchRequest
    export type CreateBranchMutationError = ValidationErrorResponse | ErrorResponse

    /**
 * @summary –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É —Ñ—ñ–ª—ñ—é
 */
export const useCreateBranch = <TError = ValidationErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createBranch>>, TError,{data: CreateBranchRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createBranch>>,
        TError,
        {data: CreateBranchRequest},
        TContext
      > => {

      const mutationOptions = getCreateBranchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–º–æ–≤–ª–µ–Ω—å —Ç–∞ –¥–æ—Ö–æ–¥—ñ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Ñ—ñ–ª—ñ—ó
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ—ñ–ª—ñ—ó
 */
export const getBranchStatistics = (
    id: string,
    params: GetBranchStatisticsParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<BranchStatisticsResponse>(
      {url: `/api/branches/${id}/statistics`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetBranchStatisticsQueryKey = (id: string,
    params: GetBranchStatisticsParams,) => {
    return [`/api/branches/${id}/statistics`, ...(params ? [params]: [])] as const;
    }

    
export const getGetBranchStatisticsQueryOptions = <TData = Awaited<ReturnType<typeof getBranchStatistics>>, TError = ValidationErrorResponse | ErrorResponse>(id: string,
    params: GetBranchStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchStatistics>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBranchStatisticsQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBranchStatistics>>> = ({ signal }) => getBranchStatistics(id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBranchStatistics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBranchStatisticsQueryResult = NonNullable<Awaited<ReturnType<typeof getBranchStatistics>>>
export type GetBranchStatisticsQueryError = ValidationErrorResponse | ErrorResponse


export function useGetBranchStatistics<TData = Awaited<ReturnType<typeof getBranchStatistics>>, TError = ValidationErrorResponse | ErrorResponse>(
 id: string,
    params: GetBranchStatisticsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchStatistics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBranchStatistics>>,
          TError,
          Awaited<ReturnType<typeof getBranchStatistics>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBranchStatistics<TData = Awaited<ReturnType<typeof getBranchStatistics>>, TError = ValidationErrorResponse | ErrorResponse>(
 id: string,
    params: GetBranchStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchStatistics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBranchStatistics>>,
          TError,
          Awaited<ReturnType<typeof getBranchStatistics>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBranchStatistics<TData = Awaited<ReturnType<typeof getBranchStatistics>>, TError = ValidationErrorResponse | ErrorResponse>(
 id: string,
    params: GetBranchStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchStatistics>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ—ñ–ª—ñ—ó
 */

export function useGetBranchStatistics<TData = Awaited<ReturnType<typeof getBranchStatistics>>, TError = ValidationErrorResponse | ErrorResponse>(
 id: string,
    params: GetBranchStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchStatistics>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBranchStatisticsQueryOptions(id,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä–æ–±–æ—á–∏–π –¥–µ–Ω—å —Ñ—ñ–ª—ñ—ó
 * @summary –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä–æ–±–æ—á–∏–π –¥–µ–Ω—å
 */
export const getBranchNextWorkingDay = (
    id: string,
    params?: GetBranchNextWorkingDayParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<NextWorkingDayResponse>(
      {url: `/api/branches/${id}/next-working-day`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetBranchNextWorkingDayQueryKey = (id: string,
    params?: GetBranchNextWorkingDayParams,) => {
    return [`/api/branches/${id}/next-working-day`, ...(params ? [params]: [])] as const;
    }

    
export const getGetBranchNextWorkingDayQueryOptions = <TData = Awaited<ReturnType<typeof getBranchNextWorkingDay>>, TError = ErrorResponse>(id: string,
    params?: GetBranchNextWorkingDayParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchNextWorkingDay>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBranchNextWorkingDayQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBranchNextWorkingDay>>> = ({ signal }) => getBranchNextWorkingDay(id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBranchNextWorkingDay>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBranchNextWorkingDayQueryResult = NonNullable<Awaited<ReturnType<typeof getBranchNextWorkingDay>>>
export type GetBranchNextWorkingDayQueryError = ErrorResponse


export function useGetBranchNextWorkingDay<TData = Awaited<ReturnType<typeof getBranchNextWorkingDay>>, TError = ErrorResponse>(
 id: string,
    params: undefined |  GetBranchNextWorkingDayParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchNextWorkingDay>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBranchNextWorkingDay>>,
          TError,
          Awaited<ReturnType<typeof getBranchNextWorkingDay>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBranchNextWorkingDay<TData = Awaited<ReturnType<typeof getBranchNextWorkingDay>>, TError = ErrorResponse>(
 id: string,
    params?: GetBranchNextWorkingDayParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchNextWorkingDay>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBranchNextWorkingDay>>,
          TError,
          Awaited<ReturnType<typeof getBranchNextWorkingDay>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBranchNextWorkingDay<TData = Awaited<ReturnType<typeof getBranchNextWorkingDay>>, TError = ErrorResponse>(
 id: string,
    params?: GetBranchNextWorkingDayParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchNextWorkingDay>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä–æ–±–æ—á–∏–π –¥–µ–Ω—å
 */

export function useGetBranchNextWorkingDay<TData = Awaited<ReturnType<typeof getBranchNextWorkingDay>>, TError = ErrorResponse>(
 id: string,
    params?: GetBranchNextWorkingDayParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchNextWorkingDay>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBranchNextWorkingDayQueryOptions(id,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø—Ä–∞—Ü—é—î —Ñ—ñ–ª—ñ—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —á–∞—Å
 * @summary –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –≤—ñ–¥–∫—Ä–∏—Ç–∞ —Ñ—ñ–ª—ñ—è
 */
export const getBranchOpenStatus = (
    id: string,
    params?: GetBranchOpenStatusParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<BranchOpenStatusResponse>(
      {url: `/api/branches/${id}/is-open`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetBranchOpenStatusQueryKey = (id: string,
    params?: GetBranchOpenStatusParams,) => {
    return [`/api/branches/${id}/is-open`, ...(params ? [params]: [])] as const;
    }

    
export const getGetBranchOpenStatusQueryOptions = <TData = Awaited<ReturnType<typeof getBranchOpenStatus>>, TError = ErrorResponse>(id: string,
    params?: GetBranchOpenStatusParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchOpenStatus>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBranchOpenStatusQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBranchOpenStatus>>> = ({ signal }) => getBranchOpenStatus(id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBranchOpenStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBranchOpenStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getBranchOpenStatus>>>
export type GetBranchOpenStatusQueryError = ErrorResponse


export function useGetBranchOpenStatus<TData = Awaited<ReturnType<typeof getBranchOpenStatus>>, TError = ErrorResponse>(
 id: string,
    params: undefined |  GetBranchOpenStatusParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchOpenStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBranchOpenStatus>>,
          TError,
          Awaited<ReturnType<typeof getBranchOpenStatus>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBranchOpenStatus<TData = Awaited<ReturnType<typeof getBranchOpenStatus>>, TError = ErrorResponse>(
 id: string,
    params?: GetBranchOpenStatusParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchOpenStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBranchOpenStatus>>,
          TError,
          Awaited<ReturnType<typeof getBranchOpenStatus>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBranchOpenStatus<TData = Awaited<ReturnType<typeof getBranchOpenStatus>>, TError = ErrorResponse>(
 id: string,
    params?: GetBranchOpenStatusParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchOpenStatus>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –≤—ñ–¥–∫—Ä–∏—Ç–∞ —Ñ—ñ–ª—ñ—è
 */

export function useGetBranchOpenStatus<TData = Awaited<ReturnType<typeof getBranchOpenStatus>>, TError = ErrorResponse>(
 id: string,
    params?: GetBranchOpenStatusParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchOpenStatus>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBranchOpenStatusQueryOptions(id,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ä—ñ–≤–Ω—è–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å—ñ—Ö —Ñ—ñ–ª—ñ–π –∑–∞ –ø–µ—Ä—ñ–æ–¥
 * @summary –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ—ñ–ª—ñ–π
 */
export const compareBranchStatistics = (
    params: CompareBranchStatisticsParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<BranchComparisonResponse[]>(
      {url: `/api/branches/statistics/compare`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCompareBranchStatisticsQueryKey = (params: CompareBranchStatisticsParams,) => {
    return [`/api/branches/statistics/compare`, ...(params ? [params]: [])] as const;
    }

    
export const getCompareBranchStatisticsQueryOptions = <TData = Awaited<ReturnType<typeof compareBranchStatistics>>, TError = ValidationErrorResponse>(params: CompareBranchStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof compareBranchStatistics>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCompareBranchStatisticsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof compareBranchStatistics>>> = ({ signal }) => compareBranchStatistics(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof compareBranchStatistics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CompareBranchStatisticsQueryResult = NonNullable<Awaited<ReturnType<typeof compareBranchStatistics>>>
export type CompareBranchStatisticsQueryError = ValidationErrorResponse


export function useCompareBranchStatistics<TData = Awaited<ReturnType<typeof compareBranchStatistics>>, TError = ValidationErrorResponse>(
 params: CompareBranchStatisticsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof compareBranchStatistics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof compareBranchStatistics>>,
          TError,
          Awaited<ReturnType<typeof compareBranchStatistics>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCompareBranchStatistics<TData = Awaited<ReturnType<typeof compareBranchStatistics>>, TError = ValidationErrorResponse>(
 params: CompareBranchStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof compareBranchStatistics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof compareBranchStatistics>>,
          TError,
          Awaited<ReturnType<typeof compareBranchStatistics>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCompareBranchStatistics<TData = Awaited<ReturnType<typeof compareBranchStatistics>>, TError = ValidationErrorResponse>(
 params: CompareBranchStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof compareBranchStatistics>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ—ñ–ª—ñ–π
 */

export function useCompareBranchStatistics<TData = Awaited<ReturnType<typeof compareBranchStatistics>>, TError = ValidationErrorResponse>(
 params: CompareBranchStatisticsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof compareBranchStatistics>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCompareBranchStatisticsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Ñ—ñ–ª—ñ—ó –≤ —Ä–∞–¥—ñ—É—Å—ñ –≤—ñ–¥ –∑–∞–¥–∞–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
 * @summary –ó–Ω–∞–π—Ç–∏ –Ω–∞–π–±–ª–∏–∂—á—ñ —Ñ—ñ–ª—ñ—ó
 */
export const getNearbyBranches = (
    params: GetNearbyBranchesParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<BranchWithDistanceResponse[]>(
      {url: `/api/branches/nearby`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetNearbyBranchesQueryKey = (params: GetNearbyBranchesParams,) => {
    return [`/api/branches/nearby`, ...(params ? [params]: [])] as const;
    }

    
export const getGetNearbyBranchesQueryOptions = <TData = Awaited<ReturnType<typeof getNearbyBranches>>, TError = ValidationErrorResponse>(params: GetNearbyBranchesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNearbyBranches>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNearbyBranchesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNearbyBranches>>> = ({ signal }) => getNearbyBranches(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNearbyBranches>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetNearbyBranchesQueryResult = NonNullable<Awaited<ReturnType<typeof getNearbyBranches>>>
export type GetNearbyBranchesQueryError = ValidationErrorResponse


export function useGetNearbyBranches<TData = Awaited<ReturnType<typeof getNearbyBranches>>, TError = ValidationErrorResponse>(
 params: GetNearbyBranchesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNearbyBranches>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNearbyBranches>>,
          TError,
          Awaited<ReturnType<typeof getNearbyBranches>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetNearbyBranches<TData = Awaited<ReturnType<typeof getNearbyBranches>>, TError = ValidationErrorResponse>(
 params: GetNearbyBranchesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNearbyBranches>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNearbyBranches>>,
          TError,
          Awaited<ReturnType<typeof getNearbyBranches>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetNearbyBranches<TData = Awaited<ReturnType<typeof getNearbyBranches>>, TError = ValidationErrorResponse>(
 params: GetNearbyBranchesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNearbyBranches>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ó–Ω–∞–π—Ç–∏ –Ω–∞–π–±–ª–∏–∂—á—ñ —Ñ—ñ–ª—ñ—ó
 */

export function useGetNearbyBranches<TData = Awaited<ReturnType<typeof getNearbyBranches>>, TError = ValidationErrorResponse>(
 params: GetNearbyBranchesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNearbyBranches>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetNearbyBranchesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Ñ—ñ–ª—ñ—é –∑–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º –∫–æ–¥–æ–º
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ—ñ–ª—ñ—é –∑–∞ –∫–æ–¥–æ–º
 */
export const getBranchByCode = (
    code: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<BranchResponse>(
      {url: `/api/branches/code/${code}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetBranchByCodeQueryKey = (code: string,) => {
    return [`/api/branches/code/${code}`] as const;
    }

    
export const getGetBranchByCodeQueryOptions = <TData = Awaited<ReturnType<typeof getBranchByCode>>, TError = ErrorResponse>(code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchByCode>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBranchByCodeQueryKey(code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBranchByCode>>> = ({ signal }) => getBranchByCode(code, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBranchByCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBranchByCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getBranchByCode>>>
export type GetBranchByCodeQueryError = ErrorResponse


export function useGetBranchByCode<TData = Awaited<ReturnType<typeof getBranchByCode>>, TError = ErrorResponse>(
 code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchByCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBranchByCode>>,
          TError,
          Awaited<ReturnType<typeof getBranchByCode>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBranchByCode<TData = Awaited<ReturnType<typeof getBranchByCode>>, TError = ErrorResponse>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchByCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBranchByCode>>,
          TError,
          Awaited<ReturnType<typeof getBranchByCode>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBranchByCode<TData = Awaited<ReturnType<typeof getBranchByCode>>, TError = ErrorResponse>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchByCode>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ—ñ–ª—ñ—é –∑–∞ –∫–æ–¥–æ–º
 */

export function useGetBranchByCode<TData = Awaited<ReturnType<typeof getBranchByCode>>, TError = ErrorResponse>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchByCode>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBranchByCodeQueryOptions(code,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




