/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * AKSI Dry Cleaning Order System API
 * API for dry cleaning order management system with Domain-Driven Design architecture. The system includes 13 domains: Auth, User, Customer, Branch, Employee, Order, OrderItem, Service, Garment, Pricing, Payment, Notification, and Analytics.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  BranchInfo,
  BranchListResponse,
  CreateBranchRequest,
  ErrorResponse,
  ListBranchesParams,
  UpdateBranchRequest
} from './aKSIDryCleaningOrderSystemAPI.schemas';

import orvalFetcher from '../../../../lib/api/orval-fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Get detailed branch information
 * @summary Get branch details
 */
export const getBranchById = (
    branchId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<BranchInfo>(
      {url: `/api/branches/${branchId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetBranchByIdQueryKey = (branchId?: string,) => {
    return [`/api/branches/${branchId}`] as const;
    }

    
export const getGetBranchByIdQueryOptions = <TData = Awaited<ReturnType<typeof getBranchById>>, TError = ErrorResponse | ErrorResponse>(branchId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBranchByIdQueryKey(branchId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBranchById>>> = ({ signal }) => getBranchById(branchId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(branchId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBranchById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBranchByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getBranchById>>>
export type GetBranchByIdQueryError = ErrorResponse | ErrorResponse


export function useGetBranchById<TData = Awaited<ReturnType<typeof getBranchById>>, TError = ErrorResponse | ErrorResponse>(
 branchId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBranchById>>,
          TError,
          Awaited<ReturnType<typeof getBranchById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBranchById<TData = Awaited<ReturnType<typeof getBranchById>>, TError = ErrorResponse | ErrorResponse>(
 branchId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBranchById>>,
          TError,
          Awaited<ReturnType<typeof getBranchById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBranchById<TData = Awaited<ReturnType<typeof getBranchById>>, TError = ErrorResponse | ErrorResponse>(
 branchId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get branch details
 */

export function useGetBranchById<TData = Awaited<ReturnType<typeof getBranchById>>, TError = ErrorResponse | ErrorResponse>(
 branchId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBranchById>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBranchByIdQueryOptions(branchId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Update an existing branch (admin only)
 * @summary Update branch
 */
export const updateBranch = (
    branchId: string,
    updateBranchRequest: UpdateBranchRequest,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<BranchInfo>(
      {url: `/api/branches/${branchId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateBranchRequest
    },
      options);
    }
  


export const getUpdateBranchMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateBranch>>, TError,{branchId: string;data: UpdateBranchRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof updateBranch>>, TError,{branchId: string;data: UpdateBranchRequest}, TContext> => {

const mutationKey = ['updateBranch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateBranch>>, {branchId: string;data: UpdateBranchRequest}> = (props) => {
          const {branchId,data} = props ?? {};

          return  updateBranch(branchId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateBranchMutationResult = NonNullable<Awaited<ReturnType<typeof updateBranch>>>
    export type UpdateBranchMutationBody = UpdateBranchRequest
    export type UpdateBranchMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Update branch
 */
export const useUpdateBranch = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateBranch>>, TError,{branchId: string;data: UpdateBranchRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateBranch>>,
        TError,
        {branchId: string;data: UpdateBranchRequest},
        TContext
      > => {

      const mutationOptions = getUpdateBranchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Delete a branch (admin only)
 * @summary Delete branch
 */
export const deleteBranch = (
    branchId: string,
 options?: SecondParameter<typeof orvalFetcher>,) => {
      
      
      return orvalFetcher<null>(
      {url: `/api/branches/${branchId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteBranchMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteBranch>>, TError,{branchId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteBranch>>, TError,{branchId: string}, TContext> => {

const mutationKey = ['deleteBranch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteBranch>>, {branchId: string}> = (props) => {
          const {branchId} = props ?? {};

          return  deleteBranch(branchId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteBranchMutationResult = NonNullable<Awaited<ReturnType<typeof deleteBranch>>>
    
    export type DeleteBranchMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Delete branch
 */
export const useDeleteBranch = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteBranch>>, TError,{branchId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteBranch>>,
        TError,
        {branchId: string},
        TContext
      > => {

      const mutationOptions = getDeleteBranchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Get list of branches
 * @summary List branches
 */
export const listBranches = (
    params?: ListBranchesParams,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<BranchListResponse>(
      {url: `/api/branches`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getListBranchesQueryKey = (params?: ListBranchesParams,) => {
    return [`/api/branches`, ...(params ? [params]: [])] as const;
    }

    
export const getListBranchesQueryOptions = <TData = Awaited<ReturnType<typeof listBranches>>, TError = ErrorResponse>(params?: ListBranchesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listBranches>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListBranchesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listBranches>>> = ({ signal }) => listBranches(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listBranches>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListBranchesQueryResult = NonNullable<Awaited<ReturnType<typeof listBranches>>>
export type ListBranchesQueryError = ErrorResponse


export function useListBranches<TData = Awaited<ReturnType<typeof listBranches>>, TError = ErrorResponse>(
 params: undefined |  ListBranchesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listBranches>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listBranches>>,
          TError,
          Awaited<ReturnType<typeof listBranches>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListBranches<TData = Awaited<ReturnType<typeof listBranches>>, TError = ErrorResponse>(
 params?: ListBranchesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listBranches>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listBranches>>,
          TError,
          Awaited<ReturnType<typeof listBranches>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListBranches<TData = Awaited<ReturnType<typeof listBranches>>, TError = ErrorResponse>(
 params?: ListBranchesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listBranches>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List branches
 */

export function useListBranches<TData = Awaited<ReturnType<typeof listBranches>>, TError = ErrorResponse>(
 params?: ListBranchesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listBranches>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListBranchesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Create a new branch (admin only)
 * @summary Create new branch
 */
export const createBranch = (
    createBranchRequest: CreateBranchRequest,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<BranchInfo>(
      {url: `/api/branches`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createBranchRequest, signal
    },
      options);
    }
  


export const getCreateBranchMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createBranch>>, TError,{data: CreateBranchRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof createBranch>>, TError,{data: CreateBranchRequest}, TContext> => {

const mutationKey = ['createBranch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createBranch>>, {data: CreateBranchRequest}> = (props) => {
          const {data} = props ?? {};

          return  createBranch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateBranchMutationResult = NonNullable<Awaited<ReturnType<typeof createBranch>>>
    export type CreateBranchMutationBody = CreateBranchRequest
    export type CreateBranchMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Create new branch
 */
export const useCreateBranch = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createBranch>>, TError,{data: CreateBranchRequest}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createBranch>>,
        TError,
        {data: CreateBranchRequest},
        TContext
      > => {

      const mutationOptions = getCreateBranchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Deactivate an active branch (admin only)
 * @summary Deactivate branch
 */
export const deactivateBranch = (
    branchId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<BranchInfo>(
      {url: `/api/branches/${branchId}/deactivate`, method: 'POST', signal
    },
      options);
    }
  


export const getDeactivateBranchMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deactivateBranch>>, TError,{branchId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof deactivateBranch>>, TError,{branchId: string}, TContext> => {

const mutationKey = ['deactivateBranch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deactivateBranch>>, {branchId: string}> = (props) => {
          const {branchId} = props ?? {};

          return  deactivateBranch(branchId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeactivateBranchMutationResult = NonNullable<Awaited<ReturnType<typeof deactivateBranch>>>
    
    export type DeactivateBranchMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Deactivate branch
 */
export const useDeactivateBranch = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deactivateBranch>>, TError,{branchId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deactivateBranch>>,
        TError,
        {branchId: string},
        TContext
      > => {

      const mutationOptions = getDeactivateBranchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Activate a deactivated branch (admin only)
 * @summary Activate branch
 */
export const activateBranch = (
    branchId: string,
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<BranchInfo>(
      {url: `/api/branches/${branchId}/activate`, method: 'POST', signal
    },
      options);
    }
  


export const getActivateBranchMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof activateBranch>>, TError,{branchId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof activateBranch>>, TError,{branchId: string}, TContext> => {

const mutationKey = ['activateBranch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof activateBranch>>, {branchId: string}> = (props) => {
          const {branchId} = props ?? {};

          return  activateBranch(branchId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ActivateBranchMutationResult = NonNullable<Awaited<ReturnType<typeof activateBranch>>>
    
    export type ActivateBranchMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Activate branch
 */
export const useActivateBranch = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof activateBranch>>, TError,{branchId: string}, TContext>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof activateBranch>>,
        TError,
        {branchId: string},
        TContext
      > => {

      const mutationOptions = getActivateBranchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Get all active branches for dropdowns (no pagination)
 * @summary Get all active branches
 */
export const getAllActiveBranches = (
    
 options?: SecondParameter<typeof orvalFetcher>,signal?: AbortSignal
) => {
      
      
      return orvalFetcher<BranchInfo[]>(
      {url: `/api/branches/active`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAllActiveBranchesQueryKey = () => {
    return [`/api/branches/active`] as const;
    }

    
export const getGetAllActiveBranchesQueryOptions = <TData = Awaited<ReturnType<typeof getAllActiveBranches>>, TError = ErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllActiveBranches>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllActiveBranchesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllActiveBranches>>> = ({ signal }) => getAllActiveBranches(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllActiveBranches>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllActiveBranchesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllActiveBranches>>>
export type GetAllActiveBranchesQueryError = ErrorResponse


export function useGetAllActiveBranches<TData = Awaited<ReturnType<typeof getAllActiveBranches>>, TError = ErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllActiveBranches>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllActiveBranches>>,
          TError,
          Awaited<ReturnType<typeof getAllActiveBranches>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllActiveBranches<TData = Awaited<ReturnType<typeof getAllActiveBranches>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllActiveBranches>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllActiveBranches>>,
          TError,
          Awaited<ReturnType<typeof getAllActiveBranches>>
        > , 'initialData'
      >, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllActiveBranches<TData = Awaited<ReturnType<typeof getAllActiveBranches>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllActiveBranches>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all active branches
 */

export function useGetAllActiveBranches<TData = Awaited<ReturnType<typeof getAllActiveBranches>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllActiveBranches>>, TError, TData>>, request?: SecondParameter<typeof orvalFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllActiveBranchesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




