/**
 * @fileoverview Orval Transformer –¥–ª—è –ø—Ä–µ–æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö API
 *
 * –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö –¥–æ/–ø—ñ—Å–ª—è API –≤–∏–∫–ª–∏–∫—ñ–≤:
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∞—Ç –∑ ISO strings –≤ Date –æ–±'—î–∫—Ç–∏
 * - –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è null/undefined –∑–Ω–∞—á–µ–Ω—å
 * - –ü—Ä–µ–æ–±—Ä–æ–±–∫–∞ –≤–∫–ª–∞–¥–µ–Ω–∏—Ö –æ–±'—î–∫—Ç—ñ–≤
 * - –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
 */

import dayjs from 'dayjs';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';

// üîß –¢–∏–ø–∏ –¥–ª—è transformer'–∞
interface TransformContext {
  isRequest: boolean;
  isResponse: boolean;
  endpoint: string;
  method: string;
}

interface TransformOptions {
  transformDates?: boolean;
  normalizeNulls?: boolean;
  trimStrings?: boolean;
  validateRequired?: boolean;
}

// üìÖ –ü–∞—Ç—Ç–µ—Ä–Ω–∏ –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –¥–∞—Ç
const DATE_PATTERNS = [
  /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}/, // ISO datetime
  /^\d{4}-\d{2}-\d{2}$/, // ISO date
  /createdAt|updatedAt|date|time/i, // –ø–æ–ª—è –∑ –¥–∞—Ç–∞–º–∏
];

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Å—Ç—Ä–æ–∫–∞ —î –¥–∞—Ç–æ—é
 */
function isDateString(value: string, key?: string): boolean {


  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞ –Ω–∞–∑–≤–æ—é –ø–æ–ª—è
  if (
    key &&
    DATE_PATTERNS.some((pattern) =>
      typeof pattern === 'object' ? pattern.test(key) : pattern === key
    )
  ) {
    return true;
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞ —Ñ–æ—Ä–º–∞—Ç–æ–º
  return DATE_PATTERNS.some((pattern) =>
    typeof pattern === 'object' ? pattern.test(value) : false
  );
}

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º—É—î –æ–±'—î–∫—Ç
 */
function transformObject(
  obj: any,
  options: TransformOptions = {},
  context: Partial<TransformContext> = {}
): any {
  if (obj === null || obj === undefined) {
    return options.normalizeNulls ? null : obj;
  }

  if (Array.isArray(obj)) {
    return obj.map((item) => transformObject(item, options, context));
  }

  if (typeof obj === 'object' && obj.constructor === Object) {
    const transformed: any = {};

    for (const [key, value] of Object.entries(obj)) {
      transformed[key] = transformValue(value, key, options, context);
    }

    return transformed;
  }

  return obj;
}

/**
 * –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º—É—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
 */
function transformValue(
  value: any,
  key: string,
  options: TransformOptions,
  context: Partial<TransformContext>
): any {
  // –û–±—Ä–æ–±–∫–∞ –¥–∞—Ç
  if (options.transformDates && typeof value === 'string' && isDateString(value, key)) {
    if (context.isRequest) {
      // –ü—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ: Date -> ISO string
      return dayjs(value).isValid() ? dayjs(value).toISOString() : value;
    } else {
      // –ü—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ: ISO string -> Date
      return dayjs(value).isValid() ? dayjs(value).toDate() : value;
    }
  }

  // –û–±—Ä–æ–±–∫–∞ —Å—Ç—Ä–æ–∫
  if (options.trimStrings && typeof value === 'string') {
    return value.trim();
  }

  // –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è null/undefined
  if (options.normalizeNulls) {
    if (value === '' || value === 'null' || value === 'undefined') {
      return null;
    }
  }

  // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –æ–±'—î–∫—Ç—ñ–≤
  if (typeof value === 'object') {
    return transformObject(value, options, context);
  }

  return value;
}

/**
 * üöÄ –û—Å–Ω–æ–≤–Ω–∏–π transformer –¥–ª—è request data
 */
export function transformRequestData(data: any, config: AxiosRequestConfig): any {
  const options: TransformOptions = {
    transformDates: true,
    normalizeNulls: true,
    trimStrings: true,
    validateRequired: true,
  };

  const context: TransformContext = {
    isRequest: true,
    isResponse: false,
    endpoint: config.url || '',
    method: (config.method || 'GET').toUpperCase(),
  };

  // –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤ development
  if (process.env.NODE_ENV === 'development') {
    console.log(`üîÑ Transform Request [${context.method} ${context.endpoint}]:`, {
      original: data,
      transformed: transformObject(data, options, context),
    });
  }

  return transformObject(data, options, context);
}

/**
 * üéØ –û—Å–Ω–æ–≤–Ω–∏–π transformer –¥–ª—è response data
 */
export function transformResponseData(data: any, response: AxiosResponse): any {
  const options: TransformOptions = {
    transformDates: true,
    normalizeNulls: true,
    trimStrings: false, // –ù–µ –æ–±—Ä—ñ–∑–∞—î–º–æ —Å—Ç—Ä–æ–∫–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—è—Ö
    validateRequired: false,
  };

  const context: TransformContext = {
    isRequest: false,
    isResponse: true,
    endpoint: response.config.url || '',
    method: (response.config.method || 'GET').toUpperCase(),
  };

  // –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤ development
  if (process.env.NODE_ENV === 'development') {
    console.log(`üéØ Transform Response [${context.method} ${context.endpoint}]:`, {
      status: response.status,
      original: data,
      transformed: transformObject(data, options, context),
    });
  }

  return transformObject(data, options, context);
}

/**
 * üîß –ö–∞—Å—Ç–æ–º–Ω–∏–π transformer –¥–ª—è —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö endpoint'—ñ–≤
 */
export function createCustomTransformer(customOptions: Partial<TransformOptions>) {
  return {
    request: (data: any, config: AxiosRequestConfig) => {
      const options = {
        transformDates: true,
        normalizeNulls: true,
        trimStrings: true,
        validateRequired: true,
        ...customOptions,
      };

      return transformObject(data, options, {
        isRequest: true,
        isResponse: false,
        endpoint: config.url || '',
        method: (config.method || 'GET').toUpperCase(),
      });
    },

    response: (data: any, response: AxiosResponse) => {
      const options = {
        transformDates: true,
        normalizeNulls: true,
        trimStrings: false,
        validateRequired: false,
        ...customOptions,
      };

      return transformObject(data, options, {
        isRequest: false,
        isResponse: true,
        endpoint: response.config.url || '',
        method: (response.config.method || 'GET').toUpperCase(),
      });
    },
  };
}

/**
 * üéØ Transformer –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –¥–æ–º–µ–Ω—ñ–≤
 */
export const domainTransformers = {
  // –ö–ª—ñ—î–Ω—Ç–∏: –ø—Ä–µ–æ–±—Ä–æ–±–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏—Ö –¥–∞–Ω–∏—Ö
  client: createCustomTransformer({
    transformDates: true,
    normalizeNulls: true,
    trimStrings: true,
  }),

  // –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: —Ä–æ–±–æ—Ç–∞ –∑ –¥–∞—Ç–∞–º–∏ —Ç–∞ —Å—Ç–∞—Ç—É—Å–∞–º–∏
  order: createCustomTransformer({
    transformDates: true,
    normalizeNulls: false, // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ null –¥–ª—è –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏—Ö –ø–æ–ª—ñ–≤
    trimStrings: true,
  }),

  // –¶—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è: —á–∏—Å–ª–æ–≤—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏
  pricing: createCustomTransformer({
    transformDates: false, // –ú—ñ–Ω—ñ–º—É–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ–π –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç—ñ
    normalizeNulls: false,
    trimStrings: false,
  }),
};

// Default export –¥–ª—è Orval
export default transformResponseData;
