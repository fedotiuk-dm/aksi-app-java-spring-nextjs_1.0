import axios, { AxiosError } from 'axios';

import { OpenAPI } from './generated';

import type { AxiosInstance } from 'axios';

/**
 * –§—ñ–∫—Å–æ–≤–∞–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö OpenAPI –∑–∞–ø–∏—Ç—ñ–≤
 * –ù–ï–ó–ê–õ–ï–ñ–ù–û –≤—ñ–¥ —ñ–Ω—à–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —á–∏ —Ä–µ–∂–∏–º—ñ–≤ —Ä–æ–±–æ—Ç–∏
 */

/**
 * –í–ê–ñ–õ–ò–í–û: Spring Boot –º–∞—î –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π —à–ª—è—Ö /api
 * –¢–æ–º—É –≤—Å—ñ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—ñ –∑–∞–ø–∏—Ç–∏ –º–∞—é—Ç—å –π—Ç–∏ –Ω–∞ `${SERVER_API_URL}/api`
 * –ù–µ –¥–æ–¥–∞–≤–∞–π—Ç–µ /api –≤ —à–ª—è—Ö–∞—Ö OpenAPI –∫–ª—ñ—î–Ω—Ç—ñ–≤, —Ü–µ –≤–∂–µ –≤—Ä–∞—Ö–æ–≤–∞–Ω–æ –≤ OpenAPI.BASE
 */

/**
 * –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø API –î–õ–Ø –†–û–ë–û–¢–ò –ó TRAEFIK
 *
 * –î–ª—è –∫–ª—ñ—î–Ω—Ç—Å—å–∫–æ–≥–æ –∫–æ–¥—É —Ç–µ–ø–µ—Ä –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –ø—Ä–µ—Ñ—ñ–∫—Å '/api',
 * —è–∫–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –º–∞—Ä—à—Ä—É—Ç–∏–∑—É—î—Ç—å—Å—è Traefik –Ω–∞ –±–µ–∫–µ–Ω–¥.
 * –¶–µ —Å–ø—Ä–æ—â—É—î –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä—É —ñ –∑–º–µ–Ω—à—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º.
 */

// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π URL –¥–ª—è –≤—Å—ñ—Ö API –∑–∞–ø–∏—Ç—ñ–≤ - —Ü–µ –≥–∞—Ä–∞–Ω—Ç—É—î, —â–æ –≤—Å—ñ –∑–∞–ø–∏—Ç–∏ –π—Ç–∏–º—É—Ç—å —á–µ—Ä–µ–∑ Traefik

// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ–≥–æ URL –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∂–∏–º—É —Ä–æ–±–æ—Ç–∏
const BASE_API_URL =
  process.env.NODE_ENV === 'production'
    ? 'http://localhost/api' // –í –ø—Ä–æ–¥–∞–∫—à–Ω —á–µ—Ä–µ–∑ Traefik
    : 'http://localhost:8080/api'; // –õ–æ–∫–∞–ª—å–Ω–∞ —Ä–æ–∑—Ä–æ–±–∫–∞ –∑ –ø—Ä—è–º–∏–º –¥–æ—Å—Ç—É–ø–æ–º –¥–æ –±–µ–∫–µ–Ω–¥—É

OpenAPI.BASE = BASE_API_URL; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ–≤–Ω–∏–π URL –¥–æ –±–µ–∫–µ–Ω–¥—É

// –ö—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:
OpenAPI.WITH_CREDENTIALS = true; // –î–æ–∑–≤–æ–ª—è—î –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ cookies –∑ —Ç–æ–∫–µ–Ω–∞–º–∏
OpenAPI.CREDENTIALS = 'include'; // –î–æ–∑–≤–æ–ª—è—î –≤–∫–ª—é—á–∞—Ç–∏ cookies –≤ –∫—Ä–æ—Å-–¥–æ–º–µ–Ω–Ω—ñ –∑–∞–ø–∏—Ç–∏

// –ê–∫—Ç–∏–≤—É—î–º–æ —Ä–µ–∂–∏–º –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è –¥–ª—è OpenAPI –∑–∞–ø–∏—Ç—ñ–≤
const DEBUG_API = true;

// –ö–µ—à –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
let cachedToken: string | undefined;
let tokenExpiryTime: number = 0;

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è JWT —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API —Ä–æ—É—Ç
const getAuthToken = async (): Promise<string | undefined> => {
  // –Ø–∫—â–æ –º–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ undefined
  if (typeof window === 'undefined') return undefined;

  // –Ø–∫—â–æ —É –Ω–∞—Å —î –∫–µ—à–æ–≤–∞–Ω–∏–π —Ç–æ–∫–µ–Ω —ñ –≤—ñ–Ω –Ω–µ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π
  const currentTime = Date.now();
  if (cachedToken && currentTime < tokenExpiryTime) {
    return cachedToken;
  }

  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API —Ä–æ—É—Ç
    const response = await fetch('/api/auth/token');

    if (!response.ok) {
      console.warn('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–∫–µ–Ω–∞:', response.statusText);
      return undefined;
    }

    const data = await response.json();

    if (data.token) {
      cachedToken = data.token;
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–∫–µ–Ω –≤ –∫–µ—à—ñ –Ω–∞ 10 —Ö–≤–∏–ª–∏–Ω
      tokenExpiryTime = currentTime + 10 * 60 * 1000; // 10 —Ö–≤–∏–ª–∏–Ω
      return data.token;
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–∫–µ–Ω–∞:', error);
  }

  return undefined;
};

// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤ OpenAPI
OpenAPI.HEADERS = async () => {
  const headers: Record<string, string> = {
    'Content-Type': 'application/json',
    Accept: 'application/json',
    'X-Requested-With': 'XMLHttpRequest', // –î–æ–¥–∞—î–º–æ –¥–ª—è CORS
  };

  // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ API —Ä–æ—É—Ç
  const token = await getAuthToken();
  if (token) {
    // –ö—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–æ: –¥–æ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization
    headers['Authorization'] = `Bearer ${token}`;
    if (DEBUG_API) console.log('JWT —Ç–æ–∫–µ–Ω –¥–æ–¥–∞–Ω–æ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–ø–∏—Ç—É');
  } else {
    if (DEBUG_API) console.warn('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ JWT —Ç–æ–∫–µ–Ω - –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é');
  }

  return headers;
};

// –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–∫—Ä–µ–º–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä axios –¥–ª—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤ OpenAPI
const axiosInstance = axios.create({
  baseURL: OpenAPI.BASE, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ CLIENT_API_URL
  withCredentials: true, // –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ –ø–µ—Ä–µ–¥–∞—á—É cookies –≤ —É—Å—ñ—Ö –∑–∞–ø–∏—Ç–∞—Ö
  headers: {
    'Content-Type': 'application/json',
    Accept: 'application/json',
    'X-Requested-With': 'XMLHttpRequest',
  },
});

// –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ—Ö–æ–ø–ª—é–≤–∞—á –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
axiosInstance.interceptors.request.use(
  (config) => {
    if (DEBUG_API) {
      console.log(`üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê API –ó–ê–ü–ò–¢–£:`);
      console.log(`- URL: ${config.url}`);
      console.log(`- –ú–µ—Ç–æ–¥: ${config.method?.toUpperCase()}`);
      console.log(`- –ó–∞–≥–æ–ª–æ–≤–∫–∏:`, config.headers);
      if (config.data) {
        try {
          console.log(
            `- –î–∞–Ω—ñ:`,
            typeof config.data === 'string' ? JSON.parse(config.data) : config.data
          );
        } catch (e) {
          console.log(`- –î–∞–Ω—ñ:`, config.data);
        }
      }
    }
    return config;
  },
  (error) => {
    if (DEBUG_API) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É:`, error);
    }
    return Promise.reject(error);
  }
);

// –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ—Ö–æ–ø–ª—é–≤–∞—á –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
axiosInstance.interceptors.response.use(
  (response) => {
    if (DEBUG_API) {
      console.log(`‚úÖ –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê API –í–Ü–î–ü–û–í–Ü–î–Ü:`);
      console.log(`- URL: ${response.config.url}`);
      console.log(`- –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
      console.log(`- –ó–∞–≥–æ–ª–æ–≤–∫–∏:`, response.headers);
      if (response.data) {
        console.log(`- –î–∞–Ω—ñ:`, response.data);
      }
    }
    return response;
  },
  (error: AxiosError) => {
    logApiError(error);
    handleAuthError(error);
    handleBadRequestError(error);
    return Promise.reject(error);
  }
);

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ API
const logApiError = (error: AxiosError): void => {
  if (!DEBUG_API) return;

  console.error(`‚ùå –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê API –ü–û–ú–ò–õ–ö–ò:`);
  console.error(`- URL: ${error.config?.url}`);
  console.error(`- –ú–µ—Ç–æ–¥: ${error.config?.method?.toUpperCase()}`);

  if (error.response) {
    console.error(`- –°—Ç–∞—Ç—É—Å: ${error.response.status} ${error.response.statusText}`);
    console.error(`- –î–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:`, error.response.data);
  } else {
    console.error(`- –ü–æ–º–∏–ª–∫–∞ –±–µ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:`, error.message);
  }

  console.error(`- –°—Ç–µ–∫:`, error.stack);
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
const handleAuthError = (error: AxiosError): void => {
  if (!error.response || error.response.status !== 403) return;

  console.error(
    '–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (403). –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∞–±–æ –∑–∞–Ω–æ–≤–æ —É–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.'
  );

  // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
  // –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑–∞–ø–∏—Ç –Ω–∞ '/api/auth/refresh-token'

  if (typeof window !== 'undefined') {
    console.log('URL –∑–∞–ø–∏—Ç—É, —â–æ –≤–∏–∫–ª–∏–∫–∞–≤ 403:', error.config?.url);
  }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ Bad Request –ø–æ–º–∏–ª–æ–∫
const handleBadRequestError = (error: AxiosError): void => {
  if (!error.response || error.response.status !== 400) return;

  console.error('–ü–æ–º–∏–ª–∫–∞ 400 Bad Request - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—ñ–≤ –¥–∞–Ω–∏—Ö:');

  try {
    const requestData = parseRequestData(error);

    console.error('- –ó–∞–ø–∏—Ç:', requestData);
    console.error('- –í—ñ–¥–ø–æ–≤—ñ–¥—å:', error.response.data);

    logRequestDataTypes(requestData);
  } catch (e) {
    console.error('- –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –¥–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—É:', e);
  }
};

// –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—É
const parseRequestData = (error: AxiosError): any => {
  if (!error.config?.data) return null;

  return typeof error.config.data === 'string' ? JSON.parse(error.config.data) : error.config.data;
};

// –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—É
const logRequestDataTypes = (requestData: any): void => {
  if (!requestData) return;

  console.error('- –¢–∏–ø–∏ –¥–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—É:');
  Object.entries(requestData).forEach(([key, value]) => {
    console.error(`  ${key}: ${typeof value} (${value})`);
  });
};

// –î–æ–¥–∞—Ç–∏ axios —ñ–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
axios.interceptors.response.use(
  (response) => response,
  (error) => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –ø–æ–º–∏–ª–∫–∞ –∑ –º–µ—Ç–æ–¥–æ–º HTTP
    if (error.response && error.response.status === 405) {
      console.error('–ü–æ–º–∏–ª–∫–∞ HTTP 405: –ú–µ—Ç–æ–¥ –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π', {
        url: error.config?.url,
        method: error.config?.method,
        message: error.response?.data?.message || error.message,
      });
    }

    // –î–ª—è –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è —É —Ä–æ–∑—Ä–æ–±—Ü—ñ
    if (process.env.NODE_ENV === 'development') {
      console.error('API –∑–∞–ø–∏—Ç –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é:', {
        url: error.config?.url,
        method: error.config?.method,
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
      });
    }

    return Promise.reject(error);
  }
);

// –¢–∏–ø–∏ –¥–ª—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó axios
interface AxiosConfig {
  url?: string;
  method?: string;
  data?: unknown;
  headers?: Record<string, string>;
}

interface ExtendedWindow extends Window {
  axios: AxiosInstance;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—É
const processRequestData = (config: AxiosConfig): void => {
  if (config.data) {
    if (typeof config.data === 'string') {
      try {
        const parsedData = JSON.parse(config.data);
        if (!parsedData.quantity) {
          parsedData.quantity = 1;
          config.data = JSON.stringify(parsedData);
        }
      } catch {
        // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥—É
      }
    } else if (typeof config.data === 'object') {
      const data = config.data as { quantity?: number };
      if (!data.quantity) {
        data.quantity = 1;
      }
    }
  } else if (!config.data && config.method === 'post') {
    config.data = { quantity: 1 };
  }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
const processHeaders = (config: AxiosConfig): void => {
  if (!config.headers) {
    config.headers = {};
  }
  if (!config.headers['Content-Type']) {
    config.headers['Content-Type'] = 'application/json';
  }
};

// –î–æ–¥–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –ø–µ—Ä–µ—Ö–æ–ø–ª—é–≤–∞—á –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑ API
axios.interceptors.request.use(
  (config) => {
    if (config.url?.includes('/price-calculation/calculate')) {
      config.method = 'post';
      processRequestData(config);
      processHeaders(config);
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –ø–µ—Ä–µ—Ö–æ–ø–ª—é–≤–∞—á –¥–ª—è axiosInstance (–¥–ª—è OpenAPI)
axiosInstance.interceptors.request.use(
  (config) => {
    if (config.url?.includes('/price-calculation/calculate')) {
      config.method = 'post';
      processRequestData(config);
    }

    // –î–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º –∑ –ø–æ—à—É–∫–æ–º –∫–ª—ñ—î–Ω—Ç—ñ–≤
    if (config.url?.includes('/clients/search')) {
      if (DEBUG_API) {
        console.log(`üîé –ü–û–®–£–ö –ö–õ–Ü–Ñ–ù–¢–Ü–í - –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê:`);
        console.log(`- URL: ${config.url}`);
        console.log(`- –ú–µ—Ç–æ–¥: ${config.method?.toUpperCase()}`);

        try {
          const requestData =
            typeof config.data === 'string' ? JSON.parse(config.data) : config.data;
          console.log(`- –î–∞–Ω—ñ –∑–∞–ø–∏—Ç—É:`, requestData);

          // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö page —ñ size
          if (requestData) {
            console.log(`- –¢–∏–ø–∏ –¥–∞–Ω–∏—Ö —É –∑–∞–ø–∏—Ç—ñ:`);
            Object.entries(requestData).forEach(([key, value]) => {
              console.log(`  ${key}: ${typeof value} (${value})`);
            });
          }
        } catch (e) {
          console.log(`- –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –¥–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—É:`, e);
        }
      }
    }

    return config;
  },
  (error) => Promise.reject(error)
);

// –ó–∞–º—ñ–Ω—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π axios –Ω–∞ –Ω–∞—à –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
if (typeof window !== 'undefined') {
  (window as unknown as ExtendedWindow).axios = axiosInstance;
}

// –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ OpenAPI
// @ts-ignore
OpenAPI.axios = axiosInstance;

// –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—ñ –≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ —Ñ–∞–π–ª–∏ OpenAPI
export * from './generated';
