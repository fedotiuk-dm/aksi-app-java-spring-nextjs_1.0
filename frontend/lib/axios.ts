'use client';

import axios from 'axios';

import { useAuthStore } from '@/features/auth/store';

import type { AxiosError } from 'axios';
import type { AxiosResponse, AxiosRequestConfig } from 'axios';

/**
 * –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø–æ–º–∏–ª–∫–∏ –∑ –±–µ–∫–µ–Ω–¥—É
 */
export interface ApiErrorResponse {
  timestamp?: string;
  status: number;
  message: string;
  errorType?: string;
  path?: string;
  method?: string;
  errorId?: string;
  errors?: Record<string, string>;
  stackTrace?: string[];
}

/**
 * –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –∫–ª–∞—Å –ø–æ–º–∏–ª–∫–∏ API
 */
export class ApiError extends Error {
  status: number;
  errorId?: string;
  timestamp?: string;
  path?: string;
  method?: string;
  errors?: Record<string, string>;
  stackTrace?: string[];
  errorType?: string;

  constructor(error: ApiErrorResponse) {
    super(error.message);
    this.name = error.errorType || 'ApiError';
    this.status = error.status;
    this.errorId = error.errorId;
    this.timestamp = error.timestamp;
    this.path = error.path;
    this.method = error.method;
    this.errors = error.errors;
    this.stackTrace = error.stackTrace;
    this.errorType = error.errorType;
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤ –∫–æ–Ω—Å–æ–ª—å
   */
  getConsoleData(): Record<string, unknown> {
    const consoleData: Record<string, unknown> = {
      message: this.message,
      status: this.status,
    };

    if (this.errorId) consoleData.errorId = this.errorId;
    if (this.path) consoleData.path = this.path;
    if (this.method) consoleData.method = this.method;
    if (this.errorType) consoleData.errorType = this.errorType;
    if (this.errors) consoleData.validationErrors = this.errors;
    if (this.stackTrace) consoleData.stackTrace = this.stackTrace;

    return consoleData;
  }

  /**
   * –í–∏–≤–µ—Å—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–º–∏–ª–∫—É —É –∫–æ–Ω—Å–æ–ª—å
   */
  logToConsole(): void {
    console.error(
      `üî¥ API Error [${this.status}] ${this.errorId || ''}: ${this.message}`
    );
    console.error(this.getConsoleData());
  }

  /**
   * –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î –ø–æ–º–∏–ª–∫—É Axios –≤ ApiError
   */
  static fromAxiosError(error: AxiosError): ApiError {
    if (error.response?.data) {
      // –Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—É –ø–æ–º–∏–ª–∫—É
      const responseData = error.response.data as Partial<ApiErrorResponse>;

      return new ApiError({
        status: error.response.status,
        message:
          responseData.message ||
          error.message ||
          "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º",
        errorId: responseData.errorId,
        errorType: responseData.errorType,
        path: responseData.path,
        method: responseData.method,
        errors: responseData.errors,
        stackTrace: responseData.stackTrace,
      });
    }

    // –Ø–∫—â–æ –Ω–µ–º–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    return new ApiError({
      status: error.response?.status || 500,
      message: error.message || "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º",
    });
  }
}

/**
 * –§—É–Ω–∫—Ü—ñ—è-—É—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ –≤ —Ä–µ–∞–∫—Ç-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
 */
export const handleApiError = (error: unknown): ApiError => {
  if (error instanceof ApiError) {
    return error;
  }

  if (axios.isAxiosError(error)) {
    return ApiError.fromAxiosError(error);
  }

  return new ApiError({
    status: 500,
    message: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞',
  });
};

// –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–∑–æ–≤–∏–π URL API –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
const baseURL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080';

console.log('[axios.ts] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ API URL:', baseURL); // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è URL

/**
 * –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ç–æ–∫–µ–Ω–æ–º —É non-React –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
 * –ü—Ä–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ HttpOnly cookies - —Ç–æ–∫–µ–Ω–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –∫–ª—ñ—î–Ω—Ç—Å—å–∫–æ–º—É JS
 * —Ç–æ–º—É –∑–∞–ª–∏—à–∞—î–º–æ —Ü–µ–π –∫–ª–∞—Å –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ, –∞–ª–µ —Ç–æ–∫–µ–Ω–∏ –±—É–¥—É—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
 * –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏—Å—è –∑ –±—Ä–∞—É–∑–µ—Ä–∞ –∑ withCredentials: true
 */
const authTokenManager = {
  // –¢–æ–∫–µ–Ω–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ HttpOnly cookies, —Ç–æ–º—É JS –Ω–µ –º–æ–∂–µ —ó—Ö –ø—Ä–æ—á–∏—Ç–∞—Ç–∏
  // –¶—ñ –º–µ—Ç–æ–¥–∏ –∑–∞–ª–∏—à–µ–Ω—ñ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
  getToken: (): string | undefined => {
    // –†–µ–∞–ª—å–Ω–∏–π —Ç–æ–∫–µ–Ω –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –≤ HttpOnly cookies —ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è JS
    return undefined;
  },
  getRefreshToken: (): string | undefined => {
    // –†–µ–∞–ª—å–Ω–∏–π refreshToken –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –≤ HttpOnly cookies —ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è JS
    return undefined;
  },
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  setTokens: (..._args: string[]): void => {
    // –£ –Ω–æ–≤—ñ–π –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä—ñ —Ç–æ–∫–µ–Ω–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—é—Ç—å—Å—è —á–µ—Ä–µ–∑ API –º–∞—Ä—à—Ä—É—Ç–∏
    console.log('Token management handled by server-side API routes');
  },
  clearTokens: (): void => {
    // –í–∏–∫–ª–∏–∫–∞—î–º–æ logout –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    useAuthStore.getState().logout();
  },
};

export const apiClient = axios.create({
  baseURL,
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  },
  timeout: 10000, // –¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Ç—É 10 —Å–µ–∫—É–Ω–¥
  withCredentials: true, // –ó–∞–≤–∂–¥–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ cookies –≤ –∑–∞–ø–∏—Ç–∞—Ö
});

// –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
apiClient.interceptors.request.use(
  (config) => {
    console.log(
      '[axios.ts] API Request:',
      config.method?.toUpperCase(),
      config.url,
      'Full URL:',
      `${config.baseURL}${config.url || ''}`,
      config.data
    );

    // –ù–µ –¥–æ–¥–∞—î–º–æ Authorization –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑ JS,
    // –æ—Å–∫—ñ–ª—å–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ HttpOnly cookies, —è–∫—ñ
    // –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è –∑ –±—Ä–∞—É–∑–µ—Ä–∞ –ø—Ä–∏ withCredentials: true
    // –¶–µ–π —Ç–æ–∫–µ–Ω –±—É–¥–µ –ø–æ—Ä–æ–∂–Ω—ñ–º, —Ç–æ–º—É —â–æ –≤—ñ–Ω —É HttpOnly cookies
    return config;
  },
  (error) => Promise.reject(error)
);

// –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—é —Ç–æ–∫–µ–Ω–∞
let isRefreshing = false;

// –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —á–µ—Ä–≥–∏ –∑–∞–ø–∏—Ç—ñ–≤
interface QueueItem {
  resolve: (value: unknown) => void;
  reject: (reason?: unknown) => void;
  originalRequest: AxiosRequestConfig;
}

// –ß–µ—Ä–≥–∞ –∑–∞–ø–∏—Ç—ñ–≤, —â–æ –æ—á—ñ–∫—É—é—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
let failedQueue: QueueItem[] = [];

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
async function handleTokenRefresh() {
  const refreshToken = authTokenManager.getRefreshToken();
  
  if (!refreshToken) {
    return null;
  }
  
  try {
    const response = await apiClient.post(
      '/auth/refresh-token',
      refreshToken,
      {
        headers: {
          'Content-Type': 'text/plain',
        },
      }
    );

    // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏
    const {
      token,
      refreshToken: newRefreshToken,
      expiresAt,
    } = response.data;

    // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω–∏
    authTokenManager.setTokens(token, newRefreshToken, expiresAt);
    
    return token;
  } catch {
    // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫—É, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ null –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó
    return null;
  }
}

// –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤ —É —á–µ—Ä–∑—ñ –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
function processQueue(token: string | null) {
  if (!token) {
    // –í—ñ–¥—Ö–∏–ª—è—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Ç–∏ —É —á–µ—Ä–∑—ñ, —è–∫—â–æ —Ç–æ–∫–µ–Ω –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ
    failedQueue.forEach((req) => {
      req.reject(new Error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞'));
    });
  } else {
    // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞ –≤–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç–∏
    failedQueue.forEach((req) => {
      if (req.originalRequest.headers) {
        req.originalRequest.headers.Authorization = `Bearer ${token}`;
      }
      req.resolve(apiClient(req.originalRequest));
    });
  }
  
  // –û—á–∏—â—É—î–º–æ —á–µ—Ä–≥—É
  failedQueue = [];
}

// –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ API
function logApiError(error: AxiosError) {
  if (!error.response?.data) {
    if (error.request) {
      // –ó–∞–ø–∏—Ç –±—É–≤ –∑—Ä–æ–±–ª–µ–Ω–∏–π, –∞–ª–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ–º–∞—î
      console.error('–ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞', {
        url: error.config?.url,
        method: error.config?.method?.toUpperCase(),
        message: error.message,
      });
    } else {
      // –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
      console.error('–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É:', error.message);
    }
    return;
  }
  
  // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–º–∏–ª–∫–∏
  const errorData = error.response.data as Partial<ApiErrorResponse>;
  console.error('–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:', {
    status: error.response.status,
    message: errorData.message || '–ü–æ–º–∏–ª–∫–∞ –±–µ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è',
    errorId: errorData.errorId,
    path: errorData.path || error.config?.url,
    method: errorData.method || error.config?.method?.toUpperCase(),
    errors: errorData.errors,
    timestamp: errorData.timestamp,
  });

  // –í–∏–≤–æ–¥–∏–º–æ —Å—Ç–µ–∫ —Ç—Ä–µ–π—Å —É —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏
  if (process.env.NEXT_PUBLIC_DEBUG === 'true' && errorData.stackTrace) {
    console.error('–°—Ç–µ–∫ —Ç—Ä–µ–π—Å –ø–æ–º–∏–ª–∫–∏:', errorData.stackTrace);
  }
}

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
apiClient.interceptors.response.use(
  (response: AxiosResponse) => {
    console.log('API Response:', response.status, response.config.url);
    console.log('Response data:', JSON.stringify(response.data));
    return response;
  },
  async (error: AxiosError) => {
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω—É –ø–æ–º–∏–ª–∫—É API –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    const apiError = ApiError.fromAxiosError(error);

    // –ë–∞–∑–æ–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
    if (process.env.NEXT_PUBLIC_DEBUG === 'true') {
      apiError.logToConsole();
    } else {
      console.error('API Error:', error.message, error.config?.url);
    }

    // –ë–µ–∑ –¥–æ—Å—Ç—É–ø—É –¥–æ window –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ä–µ—à—Ç—É –æ–±—Ä–æ–±–∫–∏
    if (typeof window === 'undefined') {
      return Promise.reject(error);
    }

    const originalRequest = error.config;
    if (!originalRequest) {
      return Promise.reject(error);
    }
    
    // –û–±—Ä–æ–±–∫–∞ HTTP-—Å—Ç–∞—Ç—É—Å—ñ–≤
    return handleErrorByStatus(error, originalRequest);
  }
);

/**
 * –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –∑–∞ HTTP —Å—Ç–∞—Ç—É—Å–∞–º–∏
 */
async function handleErrorByStatus(error: AxiosError, originalRequest: AxiosRequestConfig) {
  // –û–±—Ä–æ–±–∫–∞ 401 Unauthorized –ø–æ–º–∏–ª–∫–∏
  if (error.response?.status === 401) {
    return handleUnauthorizedError(error, originalRequest);
  }

  // –û–±—Ä–æ–±–∫–∞ 403 Forbidden
  if (error.response?.status === 403) {
    const callbackUrl = window.location.pathname + window.location.search;
    window.location.href = `/login?callbackUrl=${encodeURIComponent(callbackUrl)}`;
  }

  // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–º–∏–ª–∫–∏
  logApiError(error);

  return Promise.reject(error);
}

/**
 * –û–±—Ä–æ–±–∫–∞ 401 Unauthorized –ø–æ–º–∏–ª–∫–∏
 */
async function handleUnauthorizedError(error: AxiosError, originalRequest: AxiosRequestConfig) {
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –Ω–µ –∑–∞–ø–∏—Ç –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
  if (originalRequest.url?.includes('refresh-token')) {
    authTokenManager.clearTokens();
    window.location.href = '/login';
    return Promise.reject(error);
  }
  
  // –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Ç –¥–æ —á–µ—Ä–≥–∏, —è–∫—â–æ –≤–∂–µ –π–¥–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
  if (isRefreshing) {
    return new Promise((resolve, reject) => {
      failedQueue.push({ resolve, reject, originalRequest });
    });
  }
  
  // –ü–æ—á–∏–Ω–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
  isRefreshing = true;
  
  try {
    const token = await handleTokenRefresh();
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
    if (token && originalRequest.headers) {
      originalRequest.headers.Authorization = `Bearer ${token}`;
    }
    
    // –û–±—Ä–æ–±–ª—è—î–º–æ —á–µ—Ä–≥—É –∑–∞–ø–∏—Ç—ñ–≤
    processQueue(token);
    
    // –ü–æ–≤—Ç–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç –∞–±–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –ª–æ–≥—ñ–Ω
    if (token) {
      return apiClient(originalRequest);
    } 
    
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –ª–æ–≥—ñ–Ω
    authTokenManager.clearTokens();
    window.location.href = '/login';
    return Promise.reject(error);
  } catch (refreshError) {
    processQueue(null);
    authTokenManager.clearTokens();
    window.location.href = '/login';
    return Promise.reject(refreshError);
  } finally {
    isRefreshing = false;
  }
}

// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ API
export const api = {
  get: <T>(url: string, params?: Record<string, unknown>) =>
    apiClient.get<T>(url, { params }).then((response) => response.data),

  post: <T>(url: string, data?: Record<string, unknown>) =>
    apiClient.post<T>(url, data).then((response) => response.data),

  put: <T>(url: string, data?: Record<string, unknown>) =>
    apiClient.put<T>(url, data).then((response) => response.data),

  delete: <T>(url: string) =>
    apiClient.delete<T>(url).then((response) => response.data),
};

export default apiClient;
