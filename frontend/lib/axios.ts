'use client';

import axios from 'axios';
import type { AxiosError, AxiosResponse, AxiosRequestConfig, AxiosInstance } from 'axios';

import { useAuthStore } from '@/features/auth';


// –†–æ–∑—à–∏—Ä—é—î–º–æ —Ç–∏–ø AxiosRequestConfig –¥–ª—è –≤–ª–∞—Å–Ω–∏—Ö –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π
interface ExtendedAxiosRequestConfig extends AxiosRequestConfig {
  _retry?: boolean;
}

/**
 * –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø–æ–º–∏–ª–∫–∏ –∑ –±–µ–∫–µ–Ω–¥—É
 */
export interface ApiErrorResponse {
  timestamp?: string;
  status: number;
  message: string;
  errorType?: string;
  path?: string;
  method?: string;
  errorId?: string;
  errors?: Record<string, string>;
  stackTrace?: string[];
}

/**
 * –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –∫–ª–∞—Å –ø–æ–º–∏–ª–∫–∏ API
 */
export class ApiError extends Error {
  status: number;
  errorId?: string;
  timestamp?: string;
  path?: string;
  method?: string;
  errors?: Record<string, string>;
  stackTrace?: string[];
  errorType?: string;

  constructor(error: ApiErrorResponse) {
    super(error.message);
    this.name = error.errorType || 'ApiError';
    this.status = error.status;
    this.errorId = error.errorId;
    this.timestamp = error.timestamp;
    this.path = error.path;
    this.method = error.method;
    this.errors = error.errors;
    this.stackTrace = error.stackTrace;
    this.errorType = error.errorType;
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤ –∫–æ–Ω—Å–æ–ª—å
   */
  getConsoleData(): Record<string, unknown> {
    const consoleData: Record<string, unknown> = {
      message: this.message,
      status: this.status,
    };

    if (this.errorId) consoleData.errorId = this.errorId;
    if (this.path) consoleData.path = this.path;
    if (this.method) consoleData.method = this.method;
    if (this.errorType) consoleData.errorType = this.errorType;
    if (this.errors) consoleData.validationErrors = this.errors;
    if (this.stackTrace) consoleData.stackTrace = this.stackTrace;

    return consoleData;
  }

  /**
   * –í–∏–≤–µ—Å—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–º–∏–ª–∫—É —É –∫–æ–Ω—Å–æ–ª—å
   */
  logToConsole(): void {
    console.error(`üî¥ API Error [${this.status}] ${this.errorId || ''}: ${this.message}`);
    console.error(this.getConsoleData());
  }

  /**
   * –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î –ø–æ–º–∏–ª–∫—É Axios –≤ ApiError
   */
  static fromAxiosError(error: AxiosError): ApiError {
    if (error.response?.data) {
      // –Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—É –ø–æ–º–∏–ª–∫—É
      const responseData = error.response.data as Partial<ApiErrorResponse>;

      return new ApiError({
        status: error.response.status,
        message: responseData.message || error.message || "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º",
        errorId: responseData.errorId,
        errorType: responseData.errorType,
        path: responseData.path,
        method: responseData.method,
        errors: responseData.errors,
        stackTrace: responseData.stackTrace,
      });
    }

    // –Ø–∫—â–æ –Ω–µ–º–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    return new ApiError({
      status: error.response?.status || 500,
      message: error.message || "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º",
    });
  }
}

/**
 * –§—É–Ω–∫—Ü—ñ—è-—É—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ –≤ —Ä–µ–∞–∫—Ç-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
 */
export const handleApiError = (error: unknown): ApiError => {
  if (error instanceof ApiError) {
    return error;
  }

  if (axios.isAxiosError(error)) {
    return ApiError.fromAxiosError(error);
  }

  return new ApiError({
    status: 500,
    message: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞',
  });
};

// –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–∑–æ–≤–∏–π URL API –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
const baseURL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080';

console.log('üîß Axios baseURL:', baseURL);

/**
 * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –µ–∫–∑–µ–º–ø–ª—è—Ä—É Axios –∑ –±–∞–∑–æ–≤–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
 */
export const apiClient: AxiosInstance = axios.create({
  baseURL,
  headers: {
    'Content-Type': 'application/json',
    Accept: 'application/json',
  },
  timeout: 10000, // –¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Ç—É 10 —Å–µ–∫—É–Ω–¥
  withCredentials: true, // –ó–∞–≤–∂–¥–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ cookies –≤ –∑–∞–ø–∏—Ç–∞—Ö
});

// –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ —É —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏
if (process.env.NODE_ENV === 'development') {
  apiClient.interceptors.request.use((config) => {
    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —á—É—Ç–ª–∏–≤—ñ –º–∞—Ä—à—Ä—É—Ç–∏
    const url = config.url || '';
    const isSensitive = url.includes('/auth/') || url.includes('/users/');

    if (!isSensitive) {
      console.log(`[API Request] ${config.method?.toUpperCase()} ${config.url}`);
    }
    return config;
  });

  apiClient.interceptors.response.use((response) => {
    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —á—É—Ç–ª–∏–≤—ñ –º–∞—Ä—à—Ä—É—Ç–∏
    const url = response.config.url || '';
    const isSensitive = url.includes('/auth/') || url.includes('/users/');

    if (!isSensitive) {
      console.log(`[API Response] ${response.status} ${response.config.url}`);
    }
    return response;
  });
}

// –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—é —Ç–æ–∫–µ–Ω–∞
let isRefreshing = false;

// –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —á–µ—Ä–≥–∏ –∑–∞–ø–∏—Ç—ñ–≤
interface QueueItem {
  resolve: (value: unknown) => void;
  reject: (reason?: unknown) => void;
  originalRequest: AxiosRequestConfig;
}

// –ß–µ—Ä–≥–∞ –∑–∞–ø–∏—Ç—ñ–≤, —â–æ –æ—á—ñ–∫—É—é—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
let failedQueue: QueueItem[] = [];

/**
 * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ API —Ä–æ—É—Ç
 */
async function refreshToken(): Promise<boolean> {
  try {
    // –í–∏–∫–ª–∏–∫–∞—î–º–æ backend API –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
    await apiClient.post('/api/auth/refresh-token', {});
    return true;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞:', error);
    return false;
  }
}

/**
 * –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤ —É —á–µ—Ä–∑—ñ –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
 */
function processQueue(success: boolean) {
  failedQueue.forEach((item) => {
    if (success) {
      item.resolve(apiClient(item.originalRequest));
    } else {
      item.reject(new Error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞'));
    }
  });

  failedQueue = [];
}

/**
 * –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ API
 */
function logApiError(error: AxiosError) {
  if (!error.response?.data) {
    if (error.request) {
      // –ó–∞–ø–∏—Ç –±—É–≤ –∑—Ä–æ–±–ª–µ–Ω–∏–π, –∞–ª–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ–º–∞—î
      console.error('–ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞', {
        url: error.config?.url,
        method: error.config?.method?.toUpperCase(),
        message: error.message,
      });
    } else {
      // –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
      console.error('–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É:', error.message);
    }
    return;
  }

  // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–º–∏–ª–∫–∏
  const errorData = error.response.data as Partial<ApiErrorResponse>;
  console.error('–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:', {
    status: error.response.status,
    message: errorData.message || '–ü–æ–º–∏–ª–∫–∞ –±–µ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è',
    errorId: errorData.errorId,
    path: errorData.path || error.config?.url,
    method: errorData.method || error.config?.method?.toUpperCase(),
    errors: errorData.errors,
    timestamp: errorData.timestamp,
  });

  // –í–∏–≤–æ–¥–∏–º–æ —Å—Ç–µ–∫ —Ç—Ä–µ–π—Å —É —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏
  if (process.env.NODE_ENV === 'development' && errorData.stackTrace) {
    console.error('–°—Ç–µ–∫ —Ç—Ä–µ–π—Å –ø–æ–º–∏–ª–∫–∏:', errorData.stackTrace);
  }
}

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
apiClient.interceptors.response.use(
  (response: AxiosResponse) => response,
  async (error: AxiosError) => {
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω—É –ø–æ–º–∏–ª–∫—É API –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    const apiError = ApiError.fromAxiosError(error);

    // –õ–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫—É —É —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏
    if (process.env.NODE_ENV === 'development') {
      apiError.logToConsole();
    }

    // –ë–µ–∑ –¥–æ—Å—Ç—É–ø—É –¥–æ window –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ä–µ—à—Ç—É –æ–±—Ä–æ–±–∫–∏
    if (typeof window === 'undefined') {
      return Promise.reject(error);
    }

    const originalRequest = error.config as ExtendedAxiosRequestConfig;
    if (!originalRequest) {
      return Promise.reject(error);
    }

    // –û–±—Ä–æ–±–∫–∞ 401 Unauthorized –ø–æ–º–∏–ª–∫–∏ - —Å–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω
    if (error.response?.status === 401 && !originalRequest._retry) {
      // –Ü–≥–Ω–æ—Ä—É—î–º–æ, —è–∫—â–æ —Ü–µ –≤–∂–µ –∑–∞–ø–∏—Ç –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
      if (originalRequest.url?.includes('/api/auth/refresh-token')) {
        useAuthStore.getState().logout();
        window.location.href = '/login';
        return Promise.reject(error);
      }

      // –Ø–∫—â–æ –≤–∂–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞, –¥–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Ç —É —á–µ—Ä–≥—É
      if (isRefreshing) {
        return new Promise((resolve, reject) => {
          failedQueue.push({ resolve, reject, originalRequest });
        });
      }

      // –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ –∑–∞–ø–∏—Ç –≤–∂–µ –±—É–≤ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É
      originalRequest._retry = true;
      isRefreshing = true;

      try {
        // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API —Ä–æ—É—Ç
        const success = await refreshToken();

        // –û–±—Ä–æ–±–ª—è—î–º–æ —á–µ—Ä–≥—É –∑–∞–ø–∏—Ç—ñ–≤
        processQueue(success);

        if (success) {
          // –ü–æ–≤—Ç–æ—Ä—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç
          return apiClient(originalRequest);
        } else {
          // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –ª–æ–≥—ñ–Ω
          useAuthStore.getState().logout();
          const callbackUrl = window.location.pathname + window.location.search;
          window.location.href = `/login?callbackUrl=${encodeURIComponent(callbackUrl)}`;
          return Promise.reject(error);
        }
      } catch (refreshError) {
        processQueue(false);
        useAuthStore.getState().logout();
        window.location.href = '/login';
        return Promise.reject(refreshError);
      } finally {
        isRefreshing = false;
      }
    }

    // –û–±—Ä–æ–±–∫–∞ 403 Forbidden
    if (error.response?.status === 403) {
      useAuthStore.getState().logout();
      const callbackUrl = window.location.pathname + window.location.search;
      window.location.href = `/login?callbackUrl=${encodeURIComponent(callbackUrl)}`;
    }

    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–º–∏–ª–∫–∏
    logApiError(error);

    return Promise.reject(error);
  }
);

/**
 * –¢–∏–ø—ñ–∑–æ–≤–∞–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –∑—Ä—É—á–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –∑ API
 */
export const api = {
  get: <T>(
    url: string,
    params?: Record<string, unknown>,
    config: Omit<AxiosRequestConfig, 'params'> = {}
  ) => apiClient.get<T>(url, { params, ...config }).then((response) => response.data),

  post: <T>(url: string, data?: unknown, config: AxiosRequestConfig = {}) =>
    apiClient.post<T>(url, data, config).then((response) => response.data),

  put: <T>(url: string, data?: unknown, config: AxiosRequestConfig = {}) =>
    apiClient.put<T>(url, data, config).then((response) => response.data),

  delete: <T>(url: string, config: AxiosRequestConfig = {}) =>
    apiClient.delete<T>(url, config).then((response) => response.data),

  patch: <T>(url: string, data?: unknown, config: AxiosRequestConfig = {}) =>
    apiClient.patch<T>(url, data, config).then((response) => response.data),

  /**
   * –°—Ç–≤–æ—Ä—é—î –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É —Ç–∞ —Ç–æ–∫–µ–Ω
   * @returns { AbortController, signal } - –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä —ñ —Å–∏–≥–Ω–∞–ª –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
   */
  createAbortController: () => {
    const controller = new AbortController();
    return {
      controller,
      signal: controller.signal,
    };
  },
};

export default apiClient;
