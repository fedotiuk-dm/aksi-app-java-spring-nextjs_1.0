/**
 * @fileoverview –î–æ–º–µ–Ω–Ω–∏–π —Ö—É–∫ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ API –∫–ª—ñ—î–Ω—Ç—ñ–≤
 *
 * –Ü–Ω–∫–∞–ø—Å—É–ª—é—î –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ Orval API —Ö—É–∫–∏ —Ç–∞ –¥–æ–¥–∞—î –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫—É:
 * - –ê–¥–∞–ø—Ç–∞—Ü—ñ—è API –ø—ñ–¥ –ø–æ—Ç—Ä–µ–±–∏ UI
 * - –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ —Ç–∞ —Å—Ç–∞–Ω—ñ–≤
 * - –ö–µ—à—É–≤–∞–Ω–Ω—è —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è
 * - –í–∞–ª—ñ–¥–∞—Ü—ñ—è —á–µ—Ä–µ–∑ Zod —Å—Ö–µ–º–∏
 */

import { useQueryClient } from '@tanstack/react-query';
import { useCallback, useMemo } from 'react';

import {
  useGetAllClients,
  useSearchClients,
  useCreateClient,
  useUpdateClient,
  useDeleteClient,
  useGetClientById,
  useSearchClientsWithPagination,
  type CreateClientRequest,
  type UpdateClientRequest,
  type ClientResponse,
  type SearchClientsParams,
  type ClientSearchRequest,
} from '@/shared/api/generated/client';
import {
  safeValidate,
  validateOrThrow,
  createPartialSchema,
  z,
  createClientBody,
  updateClientBody,
  searchClientsWithPaginationBody,
} from '@/shared/api/generated/client/zod';

import {
  ClientValidationService,
  type ClientFormData,
  clientFormSchema,
} from '../../services/stage-1-client-and-order/client-management/client-validation.service';
import { useWizardBase } from '../base.hook';

/**
 * üéØ –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ –¥–ª—è UI
 */
export interface ClientSearchState {
  searchTerm: string;
  isSearching: boolean;
  searchResults: ClientResponse[];
  hasSearched: boolean;
  searchError: string | null;
}

export interface ClientOperationsState {
  selectedClient: ClientResponse | null;
  isCreating: boolean;
  isUpdating: boolean;
  isDeleting: boolean;
  operationError: string | null;
}

/**
 * üöÄ –î–æ–º–µ–Ω–Ω–∏–π —Ö—É–∫ –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ Orval —Ö—É–∫–∏ + –¥–æ–º–µ–Ω–Ω–∞ –ª–æ–≥—ñ–∫–∞
 */
export function useClientApiOperations() {
  const { logInfo, logError, logWarning } = useWizardBase();
  const queryClient = useQueryClient();
  const validationService = useMemo(() => new ClientValidationService(), []);

  // üìã –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ (–∑ —Ç–∏–ø—ñ–∑–æ–≤–∞–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
  const allClientsQuery = useGetAllClients(
    undefined, // –ó–º—ñ–Ω—é—î–º–æ –Ω–∞ undefined
    {
      query: {
        enabled: false, // –í–∏–º–∏–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        staleTime: 5 * 60 * 1000, // 5 —Ö–≤–∏–ª–∏–Ω –∫–µ—à
      },
    }
  );

  // üìã –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–∫—Ä–µ–º–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –ø–æ ID (–Ω–æ–≤–∏–π —Ö—É–∫)
  const getClientByIdQuery = useGetClientById;

  // üîç –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ (–∑ —Ç–∏–ø—ñ–∑–æ–≤–∞–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
  const searchClientsQuery = useSearchClients(
    { keyword: '' } as SearchClientsParams, // –¢–∏–ø—ñ–∑–æ–≤–∞–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    {
      query: {
        enabled: false, // –í–∏–º–∏–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        staleTime: 2 * 60 * 1000, // 2 —Ö–≤–∏–ª–∏–Ω–∏ –∫–µ—à –¥–ª—è –ø–æ—à—É–∫—É
      },
    }
  );

  // üîç –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é (—Ü–µ mutation)
  const searchWithPaginationMutation = useSearchClientsWithPagination({
    mutation: {
      onError: (error: Error) => {
        logError('–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é:', error);
      },
      onSuccess: (data) => {
        logInfo('–ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é —É—Å–ø—ñ—à–Ω–∏–π:', data);
      },
    },
  });

  // ‚ûï –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
  const createMutation = useCreateClient({
    mutation: {
      onMutate: (variables) => {
        logInfo('–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞...', variables);
      },
      onSuccess: (data, variables) => {
        logInfo('–ö–ª—ñ—î–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ:', {
          clientId: data.id,
          clientName: `${data.firstName} ${data.lastName}`,
          originalData: variables.data,
        });

        // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à —Å–ø–∏—Å–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤
        queryClient.invalidateQueries({ queryKey: ['getAllClients'] });

        // –î–æ–¥–∞—î–º–æ –¥–æ –∫–µ—à—É –æ–∫—Ä–µ–º–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
        if (data.id) {
          queryClient.setQueryData(['getClientById', data.id], data);
        }
      },
      onError: (error: Error, variables) => {
        logError('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞:', error, variables);
      },
    },
  });

  // ‚úèÔ∏è –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
  const updateMutation = useUpdateClient({
    mutation: {
      onMutate: async (variables) => {
        logInfo('–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞...', variables);

        // –û–ø—Ç–∏–º—ñ—Å—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        const previousClient = queryClient.getQueryData(['getClientById', variables.id]);

        if (previousClient) {
          queryClient.setQueryData(['getClientById', variables.id], {
            ...previousClient,
            ...variables.data,
          });
        }

        return { previousClient };
      },
      onSuccess: (data, variables) => {
        logInfo('–ö–ª—ñ—î–Ω—Ç –æ–Ω–æ–≤–ª–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ:', data);

        // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
        queryClient.invalidateQueries({ queryKey: ['getAllClients'] });
        queryClient.setQueryData(['getClientById', variables.id], data);
      },
      onError: (error: Error, variables, context) => {
        logError('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞:', error);

        // –í—ñ–¥–∫–æ—á—É—î–º–æ –æ–ø—Ç–∏–º—ñ—Å—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        if (context?.previousClient) {
          queryClient.setQueryData(['getClientById', variables.id], context.previousClient);
        }
      },
    },
  });

  // üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
  const deleteMutation = useDeleteClient({
    mutation: {
      onMutate: (variables) => {
        logInfo('–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞...', variables);
      },
      onSuccess: (data, variables) => {
        logInfo('–ö–ª—ñ—î–Ω—Ç –≤–∏–¥–∞–ª–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ:', variables.id);

        // –í–∏–¥–∞–ª—è—î–º–æ –∑ –∫–µ—à—É
        queryClient.removeQueries({ queryKey: ['getClientById', variables.id] });
        queryClient.invalidateQueries({ queryKey: ['getAllClients'] });
      },
      onError: (error: Error, variables) => {
        logError('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞:', error, variables);
      },
    },
  });

  /**
   * üìã –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –ø–æ ID (—É—Ç–∏–ª—ñ—Ç–∞)
   */
  const getClientById = useCallback(
    (id: string, options?: { enabled?: boolean }) => {
      return getClientByIdQuery(id, {
        query: {
          enabled: options?.enabled ?? !!id,
          staleTime: 10 * 60 * 1000, // 10 —Ö–≤–∏–ª–∏–Ω –∫–µ—à –¥–ª—è –æ–∫—Ä–µ–º–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
        },
      });
    },
    [getClientByIdQuery]
  );

  /**
   * üîç –ú'—è–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è (–±–µ–∑ –≤–∏–∫–∏–¥–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫)
   */
  const validateClientDataSoft = useCallback((clientData: ClientFormData) => {
    // –ú'—è–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è —á–µ—Ä–µ–∑ safeValidate
    const apiValidation = safeValidate(createClientBody, clientData);
    const formValidation = safeValidate(clientFormSchema, clientData);

    return {
      isApiValid: apiValidation.success,
      isFormValid: formValidation.success,
      apiErrors: apiValidation.success ? [] : apiValidation.errors,
      formErrors: formValidation.success ? [] : formValidation.errors,
    };
  }, []);

  /**
   * üîç –ü—Ä–æ—Å—Ç–∏–π –ø–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ (–ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –∑ –º'—è–∫–æ—é –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é)
   */
  const searchClients = useCallback(
    async (keyword: string) => {
      // –ú'—è–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –ø–æ—à—É–∫—É
      const searchSchema = z.object({
        keyword: z.string().min(1, '–í–≤–µ–¥—ñ—Ç—å –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç'),
      });

      const validation = safeValidate(searchSchema, { keyword });
      if (!validation.success) {
        logWarning('–ù–µ–≤–∞–ª—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É:', validation.errors);
        return { data: [], error: validation.errors.join(', ') };
      }

      try {
        // –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—à—É–∫ —á–µ—Ä–µ–∑ refetch –∑ –Ω–æ–≤–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        const result = await queryClient.fetchQuery({
          queryKey: ['searchClients', keyword],
          queryFn: () => searchClientsQuery.refetch(),
          staleTime: 2 * 60 * 1000,
        });
        return { data: result.data || [], error: null };
      } catch (error) {
        logWarning('–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É:', error);
        return { data: [], error: String(error) };
      }
    },
    [searchClientsQuery, queryClient, logWarning]
  );

  /**
   * üîç –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é (–∑ –º'—è–∫–æ—é –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é)
   */
  const searchClientsWithPagination = useCallback(
    async (searchParams: { query: string; page?: number; size?: number }) => {
      // –ú'—è–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è —á–µ—Ä–µ–∑ safeValidate
      const validation = safeValidate(searchClientsWithPaginationBody, searchParams);
      if (!validation.success) {
        logError('API –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ—à—É–∫—É –Ω–µ –ø—Ä–æ–π—à–ª–∞:', validation.errors);
        throw new Error(validation.errors.join(', '));
      }

      const searchRequest: ClientSearchRequest = {
        query: searchParams.query,
        page: searchParams.page || 0,
        size: searchParams.size || 20,
      };

      return searchWithPaginationMutation.mutateAsync({ data: searchRequest });
    },
    [searchWithPaginationMutation, logError]
  );

  /**
   * ‚ûï –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é
   */
  const createClient = useCallback(
    async (clientData: ClientFormData) => {
      try {
        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —á–µ—Ä–µ–∑ –¥–æ–º–µ–Ω–Ω–∏–π —Å–µ—Ä–≤—ñ—Å
        const validation = validationService.validateClientData(clientData);
        if (!validation.isValid) {
          throw new Error(validation.errors.join(', '));
        }

        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —á–µ—Ä–µ–∑ clientFormSchema –∑ validateOrThrow
        validateOrThrow(clientFormSchema, clientData);

        // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è —á–µ—Ä–µ–∑ API —Å—Ö–µ–º—É
        validateOrThrow(createClientBody, clientData);

        // –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è UI –¥–∞–Ω–∏—Ö –≤ API —Ñ–æ—Ä–º–∞—Ç
        const apiData: CreateClientRequest = {
          firstName: clientData.firstName,
          lastName: clientData.lastName,
          phone: clientData.phone,
          email: clientData.email || undefined,
          address: clientData.address,
          source: clientData.source,
          sourceDetails: clientData.sourceDetails,
          structuredAddress: clientData.structuredAddress,
          communicationChannels: clientData.communicationChannels,
        };

        return createMutation.mutateAsync({ data: apiData });
      } catch (error) {
        logError('–í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ –Ω–µ –ø—Ä–æ–π—à–ª–∞:', error);
        throw error;
      }
    },
    [createMutation, validationService, logError]
  );

  /**
   * ‚úèÔ∏è –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é —Ç–∞ —á–∞—Å—Ç–∫–æ–≤–∏–º–∏ —Å—Ö–µ–º–∞–º–∏
   */
  const updateClient = useCallback(
    async (id: string, clientData: Partial<ClientFormData>) => {
      try {
        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —á–µ—Ä–µ–∑ –¥–æ–º–µ–Ω–Ω–∏–π —Å–µ—Ä–≤—ñ—Å
        const validation = validationService.validateUpdateClientData(clientData as ClientFormData);
        if (!validation.isValid) {
          throw new Error(validation.errors.join(', '));
        }

        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —á–µ—Ä–µ–∑ —á–∞—Å—Ç–∫–æ–≤—É API —Å—Ö–µ–º—É –∑ createPartialSchema
        const partialUpdateSchema = createPartialSchema(updateClientBody);
        validateOrThrow(partialUpdateSchema, clientData);

        // –ë–µ–∑–ø–µ—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è API –¥–∞–Ω–∏—Ö –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø–æ–ª—ñ–≤
        const apiData: UpdateClientRequest = {
          firstName: clientData.firstName || '',
          lastName: clientData.lastName || '',
          phone: clientData.phone || '',
          email: clientData.email,
          address: clientData.address,
          source: clientData.source,
          sourceDetails: clientData.sourceDetails,
          structuredAddress: clientData.structuredAddress,
          communicationChannels: clientData.communicationChannels,
        };

        return updateMutation.mutateAsync({ id, data: apiData });
      } catch (error) {
        logError('–í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –Ω–µ –ø—Ä–æ–π—à–ª–∞:', error);
        throw error;
      }
    },
    [updateMutation, validationService, logError]
  );

  /**
   * üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º
   */
  const deleteClient = useCallback(
    async (id: string, confirm = false) => {
      if (!confirm) {
        throw new Error('–ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞');
      }

      return deleteMutation.mutateAsync({ id });
    },
    [deleteMutation]
  );

  /**
   * üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É –∫–ª—ñ—î–Ω—Ç—ñ–≤
   */
  const refreshClients = useCallback(() => {
    queryClient.invalidateQueries({ queryKey: ['getAllClients'] });
    logInfo('–ö–µ—à –∫–ª—ñ—î–Ω—Ç—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ');
  }, [queryClient, logInfo]);

  /**
   * üìã –†—É—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
   */
  const loadAllClients = useCallback(() => {
    return allClientsQuery.refetch();
  }, [allClientsQuery]);

  /**
   * üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü—ñ–π
   */
  const getOperationsState = useCallback(
    (): ClientOperationsState => ({
      selectedClient: null, // –ë—É–¥–µ –∫–µ—Ä—É–≤–∞—Ç–∏—Å—è –æ–∫—Ä–µ–º–∏–º —Ö—É–∫–æ–º
      isCreating: createMutation.isPending,
      isUpdating: updateMutation.isPending,
      isDeleting: deleteMutation.isPending,
      operationError:
        createMutation.error?.message ||
        updateMutation.error?.message ||
        deleteMutation.error?.message ||
        null,
    }),
    [createMutation, updateMutation, deleteMutation]
  );

  return {
    // –î–∞–Ω—ñ
    allClients: allClientsQuery.data || [],
    isLoadingClients: allClientsQuery.isLoading,
    clientsError: allClientsQuery.error?.message || null,

    // –ü–æ—à—É–∫
    searchResults: searchWithPaginationMutation.data?.content || [],
    isSearching: searchWithPaginationMutation.isPending || searchClientsQuery.isFetching,
    searchError:
      searchWithPaginationMutation.error?.message || searchClientsQuery.error?.message || null,

    // –û–ø–µ—Ä–∞—Ü—ñ—ó
    ...getOperationsState(),

    // –ú–µ—Ç–æ–¥–∏
    getClientById,
    validateClientDataSoft,
    searchClients,
    searchClientsWithPagination,
    createClient,
    updateClient,
    deleteClient,
    refreshClients,
    loadAllClients,

    // –£—Ç–∏–ª—ñ—Ç–∏
    clearSearchResults: () => searchWithPaginationMutation.reset(),
    clearErrors: () => {
      createMutation.reset();
      updateMutation.reset();
      deleteMutation.reset();
      searchWithPaginationMutation.reset();
    },

    // React Query —É—Ç–∏–ª—ñ—Ç–∏
    queryClient,
  };
}
