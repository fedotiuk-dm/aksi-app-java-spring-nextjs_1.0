/**
 * @fileoverview –ü—Ä–æ—Å—Ç–∏–π —Ö—É–∫ –¥–ª—è Order Wizard
 *
 * –ü—Ä–∏–Ω—Ü–∏–ø: Spring State Machine –∫–µ—Ä—É—î –í–°–Ü–ú
 * - –ë–µ–∫–µ–Ω–¥ State Machine: –≤—Å—è –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∞ + —Å—Ç–∞–Ω–∏ + –¥–∞–Ω—ñ (–∫–ª—ñ—î–Ω—Ç–∏, —Ñ—ñ–ª—ñ—ó, –ø—Ä–∞–π—Å–∏)
 * - –§—Ä–æ–Ω—Ç–µ–Ω–¥: —Ç—ñ–ª—å–∫–∏ UI + –≤–∏–∫–ª–∏–∫–∏ –¥–æ Order Wizard API
 * - –ù—ñ—è–∫–∏—Ö –æ–∫—Ä–µ–º–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤ –¥–æ —ñ–Ω—à–∏—Ö API!
 */

import { useState } from 'react';

import { submitClientData } from '@/shared/api/generated/full';
import {
  useCreateWizard,
  useGetWizardState,
  useExecuteAction,
  useCancelWizard,
  type OrderWizardSessionResponse,
  type ExecuteActionBody,
  type ClientResponse,
} from '@/shared/api/generated/order-wizard';

// –Ü–º–ø–æ—Ä—Ç submitClientData –∑ full API

// –Ü–º–ø–æ—Ä—Ç —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ–≥–æ API –¥–ª—è Stage 1

/**
 * üéØ –ü—Ä–æ—Å—Ç–∏–π —Ö—É–∫ –¥–ª—è Order Wizard
 *
 * –í—Å—è –ª–æ–≥—ñ–∫–∞ –≤ Spring State Machine, —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î UI
 */
export function useOrderWizard() {
  // –õ–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω wizard ID
  const [wizardId, setWizardId] = useState<string | null>(null);

  // üöÄ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è wizard —Å–µ—Å—ñ—ó
  const createWizardMutation = useCreateWizard({
    mutation: {
      onSuccess: (data) => {
        console.log('‚úÖ Wizard —Å—Ç–≤–æ—Ä–µ–Ω–æ:', data.wizardId);
        if (data.wizardId) {
          setWizardId(data.wizardId);
          console.log('üîß Wizard ID –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ —Å—Ç–∞–Ω:', data.wizardId);
        }
      },
      onError: (error) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è wizard:', error);
      },
    },
  });

  // üìã –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—É wizard (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î wizardId)
  const wizardStateQuery = useGetWizardState(wizardId || '', {
    query: {
      enabled: !!wizardId,
      refetchInterval: 5000, // –æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
    },
  });

  // üîß –í–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ–π –≤ State Machine
  const executeActionMutation = useExecuteAction({
    mutation: {
      onSuccess: (data, variables) => {
        console.log('‚úÖ –î—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞:', variables.actionName);
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω wizard
        wizardStateQuery.refetch();
      },
      onError: (error, variables) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥—ñ—ó:', variables.actionName, error);
      },
    },
  });

  // üóëÔ∏è –°–∫–∞—Å—É–≤–∞–Ω–Ω—è wizard
  const cancelWizardMutation = useCancelWizard({
    mutation: {
      onSuccess: () => {
        console.log('‚úÖ Wizard —Å–∫–∞—Å–æ–≤–∞–Ω–æ');
        setWizardId(null);
      },
      onError: (error) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è:', error);
      },
    },
  });

  /**
   * üöÄ –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π wizard
   */
  const createWizard = async (): Promise<OrderWizardSessionResponse> => {
    return createWizardMutation.mutateAsync();
  };

  /**
   * üë§ –í–∏–±—Ä–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π API –¥–ª—è Stage 1)
   */
  const selectClient = async (clientData: ClientResponse) => {
    if (!wizardId) throw new Error('Wizard –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ');

    try {
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π API endpoint –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
      const result = await submitClientData(wizardId, clientData);

      console.log('‚úÖ –ö–ª—ñ—î–Ω—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ:', result);

      // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω wizard –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
      wizardStateQuery.refetch();

      return result;
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞:', error);
      throw error;
    }
  };

  /**
   * üìù –ó–±–µ—Ä–µ–≥—Ç–∏ –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–Ω–∞–¥—Å–∏–ª–∞—î –ø–æ–¥—ñ—é ORDER_INFO_COMPLETED)
   */
  const saveOrderInfo = async (branchId: string, uniqueTag?: string) => {
    if (!wizardId) throw new Error('Wizard –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ');

    const actionData: ExecuteActionBody = {
      orderBasicInfo: { branchId, uniqueTag },
    };

    return executeActionMutation.mutateAsync({
      wizardId,
      actionName: 'ORDER_INFO_COMPLETED',
      data: actionData,
    });
  };

  /**
   * üóëÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏ wizard
   */
  const cancelWizard = async () => {
    if (!wizardId) return;

    return cancelWizardMutation.mutateAsync({ wizardId });
  };

  // –í–∏—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ –∑—ñ —Å—Ç–∞–Ω—É
  const session = wizardStateQuery.data?.session;
  const currentState = session?.currentState;
  const sessionData = wizardStateQuery.data?.data;

  // Debug logging
  if (process.env.NODE_ENV === 'development') {
    console.log('üéØ useOrderWizard return:', {
      wizardId,
      currentState,
      isCreating: createWizardMutation.isPending,
      isLoadingState: wizardStateQuery.isLoading,
      queryEnabled: !!wizardId,
      queryData: wizardStateQuery.data,
    });
  }

  return {
    // –û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ
    wizardId,
    currentState,
    session,
    sessionData,

    // –ú–µ—Ç–æ–¥–∏
    createWizard,
    selectClient,
    saveOrderInfo,
    cancelWizard,

    // –°—Ç–∞–Ω–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    isCreating: createWizardMutation.isPending,
    isExecutingAction: executeActionMutation.isPending,
    isCancelling: cancelWizardMutation.isPending,
    isLoadingState: wizardStateQuery.isLoading,

    // –ü–æ–º–∏–ª–∫–∏
    createError: createWizardMutation.error,
    actionError: executeActionMutation.error,
    cancelError: cancelWizardMutation.error,
    stateError: wizardStateQuery.error,

    // –£—Ç–∏–ª—ñ—Ç–∏
    refetchState: wizardStateQuery.refetch,
    resetErrors: () => {
      createWizardMutation.reset();
      executeActionMutation.reset();
      cancelWizardMutation.reset();
    },
  };
}

export type OrderWizardHook = ReturnType<typeof useOrderWizard>;
