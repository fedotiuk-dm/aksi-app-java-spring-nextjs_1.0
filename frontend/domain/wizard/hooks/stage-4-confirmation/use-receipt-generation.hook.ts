/**
 * @fileoverview –•—É–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–≤–∏—Ç–∞–Ω—Ü—ñ–π (–∫—Ä–æ–∫ 4.2)
 * @module domain/wizard/hooks/stage-4
 */

import { useMutation } from '@tanstack/react-query';
import { useCallback, useMemo } from 'react';

import { useWizardStore } from '../../store';

/**
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 */
interface Receipt {
  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  header: {
    companyName: string;
    companyAddress: string;
    companyPhone: string;
    branchName: string;
    operatorName: string;
  };

  // –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  orderInfo: {
    receiptNumber: string;
    uniqueLabel: string;
    creationDate: Date;
    estimatedDate: Date;
  };

  // –ö–ª—ñ—î–Ω—Ç
  clientInfo: {
    fullName: string;
    phone: string;
    email?: string;
    address?: string;
    contactMethods: string[];
  };

  // –ü—Ä–µ–¥–º–µ—Ç–∏
  items: any[];

  // –§—ñ–Ω–∞–Ω—Å–∏
  financial: {
    itemsTotal: number;
    urgencyAmount: number;
    discountAmount: number;
    finalTotal: number;
    paidAmount: number;
    debtAmount: number;
    paymentMethod: string;
  };

  // –Æ—Ä–∏–¥–∏—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
  legal: {
    terms: string[];
    riskWarnings: string[];
    hasClientSignature: boolean;
  };
}

/**
 * –•—É–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–≤–∏—Ç–∞–Ω—Ü—ñ–π
 * üßæ –ö–æ–º–ø–æ–∑–∏—Ü—ñ—è: –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è + —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è + –¥—Ä—É–∫
 */
export const useReceiptGeneration = () => {
  // üè™ Zustand - –æ—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ
  const {
    selectedClient,
    selectedBranch,
    orderItems,
    executionParams,
    selectedDiscount,
    addError,
    addWarning,
  } = useWizardStore();

  // üßæ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
  const generateReceiptData = useCallback((): Receipt | null => {
    if (!selectedClient || !selectedBranch || !orderItems) {
      return null;
    }

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏
    const itemsTotal = orderItems.reduce(
      (sum: number, item: any) => sum + (item.finalPrice || 0),
      0
    );
    const urgencyAmount = executionParams?.urgencyPricing?.additionalCost || 0;
    const discountAmount = selectedDiscount?.amount || 0;
    const finalTotal = itemsTotal + urgencyAmount - discountAmount;

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–º–µ—Ä–∞ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó (–º–æ–∫ –ª–æ–≥—ñ–∫–∞)
    const receiptNumber = `RC-${Date.now().toString().slice(-6)}`;
    const uniqueLabel = `UL-${Date.now().toString().slice(-4)}`;

    return {
      header: {
        companyName: '–•—ñ–º—á–∏—Å—Ç–∫–∞ –ê–öSI',
        companyAddress: '–º. –ö–∏—ó–≤, –≤—É–ª. –ü—Ä–∏–∫–ª–∞–¥–Ω–∞ 1',
        companyPhone: '+380 44 000 00 00',
        branchName: selectedBranch.name || '–ì–æ–ª–æ–≤–Ω–∏–π –æ—Ñ—ñ—Å',
        operatorName: '–û–ø–µ—Ä–∞—Ç–æ—Ä',
      },

      orderInfo: {
        receiptNumber,
        uniqueLabel,
        creationDate: new Date(),
        estimatedDate: executionParams?.executionDate || new Date(),
      },

      clientInfo: {
        fullName: selectedClient.fullName || '',
        phone: selectedClient.phone || '',
        email: selectedClient.email,
        address: selectedClient.address,
        contactMethods: ['—Ç–µ–ª–µ—Ñ–æ–Ω'],
      },

      items: orderItems,

      financial: {
        itemsTotal,
        urgencyAmount,
        discountAmount,
        finalTotal,
        paidAmount: 0, // –±—É–¥–µ –æ–Ω–æ–≤–ª–µ–Ω–æ –∑ payment processing
        debtAmount: finalTotal,
        paymentMethod: '–≥–æ—Ç—ñ–≤–∫–∞',
      },

      legal: {
        terms: [
          '–ü–æ—Å–ª—É–≥–∏ –Ω–∞–¥–∞—é—Ç—å—Å—è –∑–≥—ñ–¥–Ω–æ –∑ –¥–µ—Ä–∂–∞–≤–Ω–∏–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏',
          '–ö–æ–º–ø–∞–Ω—ñ—è –Ω–µ –Ω–µ—Å–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ –∑–∞ –ø—Ä–µ–¥–º–µ—Ç–∏ –∑ –ø—Ä–∏—Ä–æ–¥–Ω–∏–º–∏ –¥–µ—Ñ–µ–∫—Ç–∞–º–∏',
          '–¢–µ—Ä–º—ñ–Ω –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–∏—Ö –≤–∏—Ä–æ–±—ñ–≤ - 30 –¥–Ω—ñ–≤',
        ],
        riskWarnings: orderItems
          .filter(
            (item: any) =>
              item.defects?.includes('–±–µ–∑_–≥–∞—Ä–∞–Ω—Ç—ñ–π') || item.risks?.includes('—Ä–∏–∑–∏–∫–∏_–∑–º—ñ–Ω–∏_–∫–æ–ª—å–æ—Ä—É')
          )
          .map((item: any) => `–ü—Ä–µ–¥–º–µ—Ç "${item.name}" –º–∞—î –ø—ñ–¥–≤–∏—â–µ–Ω—ñ —Ä–∏–∑–∏–∫–∏`),
        hasClientSignature: false,
      },
    };
  }, [selectedClient, selectedBranch, orderItems, executionParams, selectedDiscount]);

  // üßæ –ú—É—Ç–∞—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
  const generateReceiptMutation = useMutation({
    mutationFn: async (): Promise<Receipt> => {
      const receiptData = generateReceiptData();
      if (!receiptData) {
        throw new Error("–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—é - –≤—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –¥–∞–Ω—ñ");
      }

      // –ú–æ–∫ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è —ñ–º—ñ—Ç–∞—Ü—ñ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
      await new Promise((resolve) => setTimeout(resolve, 1000));

      return receiptData;
    },
    onSuccess: () => {
      addWarning('–ö–≤–∏—Ç–∞–Ω—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞');
    },
    onError: (error) => {
      addError(`–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó: ${error.message}`);
    },
  });

  // üñ®Ô∏è –ú—É—Ç–∞—Ü—ñ—è –¥–ª—è –¥—Ä—É–∫—É –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
  const printReceiptMutation = useMutation({
    mutationFn: async (receipt: Receipt): Promise<void> => {
      // –ú–æ–∫ –ª–æ–≥—ñ–∫–∞ –¥—Ä—É–∫—É
      await new Promise((resolve) => setTimeout(resolve, 2000));

      // –¢—É—Ç –±—É–¥–µ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º
      console.log('–î—Ä—É–∫ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó:', receipt);
    },
    onSuccess: () => {
      addWarning('–ö–≤–∏—Ç–∞–Ω—Ü—ñ—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –Ω–∞ –¥—Ä—É–∫');
    },
    onError: (error) => {
      addError(`–ü–æ–º–∏–ª–∫–∞ –¥—Ä—É–∫—É: ${error.message}`);
    },
  });

  // üìß –ú—É—Ç–∞—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ PDF
  const sendPdfMutation = useMutation({
    mutationFn: async ({ receipt, email }: { receipt: Receipt; email: string }): Promise<void> => {
      if (!email) {
        throw new Error('Email –Ω–µ –≤–∫–∞–∑–∞–Ω–æ');
      }

      // –ú–æ–∫ –ª–æ–≥—ñ–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
      await new Promise((resolve) => setTimeout(resolve, 1500));

      console.log(`–í—ñ–¥–ø—Ä–∞–≤–∫–∞ PDF –Ω–∞ ${email}:`, receipt);
    },
    onSuccess: (_, { email }) => {
      addWarning(`PDF –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${email}`);
    },
    onError: (error) => {
      addError(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ PDF: ${error.message}`);
    },
  });

  // üîß –ú–µ—Ç–æ–¥–∏ —Ä–æ–±–æ—Ç–∏ –∑ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—è–º–∏
  const generateAndPrint = useCallback(async () => {
    try {
      const receipt = await generateReceiptMutation.mutateAsync();
      await printReceiptMutation.mutateAsync(receipt);
      return receipt;
    } catch (error) {
      addError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–∞ –Ω–∞–¥—Ä—É–∫—É–≤–∞—Ç–∏ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—é');
      throw error;
    }
  }, [generateReceiptMutation, printReceiptMutation, addError]);

  const generateAndEmail = useCallback(
    async (email: string) => {
      try {
        const receipt = await generateReceiptMutation.mutateAsync();
        await sendPdfMutation.mutateAsync({ receipt, email });
        return receipt;
      } catch (error) {
        addError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—é');
        throw error;
      }
    },
    [generateReceiptMutation, sendPdfMutation, addError]
  );

  // üìä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é
  const generationInfo = useMemo(
    () => ({
      canGenerate: !!(selectedClient && selectedBranch && orderItems && orderItems.length > 0),
      isGenerating: generateReceiptMutation.isPending,
      isPrinting: printReceiptMutation.isPending,
      isSending: sendPdfMutation.isPending,
      isAnyOperation:
        generateReceiptMutation.isPending ||
        printReceiptMutation.isPending ||
        sendPdfMutation.isPending,
    }),
    [
      selectedClient,
      selectedBranch,
      orderItems,
      generateReceiptMutation.isPending,
      printReceiptMutation.isPending,
      sendPdfMutation.isPending,
    ]
  );

  // üîç –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
  const getReceiptPreview = useCallback(() => {
    return generateReceiptData();
  }, [generateReceiptData]);

  return {
    // üßæ –î–∞–Ω—ñ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
    getReceiptPreview,
    generationInfo,

    // üîÑ –û–ø–µ—Ä–∞—Ü—ñ—ó
    generateReceipt: generateReceiptMutation.mutateAsync,
    printReceipt: printReceiptMutation.mutateAsync,
    sendPdfReceipt: sendPdfMutation.mutateAsync,

    // üîß –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω—ñ –º–µ—Ç–æ–¥–∏
    generateAndPrint,
    generateAndEmail,

    // üîÑ –°—Ç–∞–Ω–∏
    isGenerating: generateReceiptMutation.isPending,
    isPrinting: printReceiptMutation.isPending,
    isSending: sendPdfMutation.isPending,
  };
};
