/**
 * @fileoverview –•—É–∫ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º (–∫—Ä–æ–∫ 4.1)
 * @module domain/wizard/hooks/stage-4
 */

import { useQuery } from '@tanstack/react-query';
import { useCallback, useMemo } from 'react';

import { useWizardStore } from '../../store';

/**
 * –¢–∏–ø –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
 */
interface ValidationError {
  section: 'client' | 'branch' | 'items' | 'execution' | 'payment';
  field: string;
  message: string;
  severity: 'error' | 'warning';
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
 */
interface ValidationResult {
  isValid: boolean;
  errors: ValidationError[];
  warnings: ValidationError[];
  completeness: number; // –≤—ñ–¥—Å–æ—Ç–æ–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ 0-100
}

// üîç –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
const validateClient = (selectedClient: any): ValidationError[] => {
  const errors: ValidationError[] = [];

  if (!selectedClient) {
    errors.push({
      section: 'client',
      field: 'selectedClient',
      message: '–ù–µ –≤–∏–±—Ä–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞',
      severity: 'error',
    });
    return errors;
  }

  if (!selectedClient.phone || selectedClient.phone.length < 10) {
    errors.push({
      section: 'client',
      field: 'phone',
      message: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–ª—ñ—î–Ω—Ç–∞',
      severity: 'error',
    });
  }

  if (!selectedClient.fullName || selectedClient.fullName.length < 3) {
    errors.push({
      section: 'client',
      field: 'fullName',
      message: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º'—è –∫–ª—ñ—î–Ω—Ç–∞",
      severity: 'error',
    });
  }

  return errors;
};

const validateItems = (
  orderItems: any[]
): { errors: ValidationError[]; warnings: ValidationError[] } => {
  const errors: ValidationError[] = [];
  const warnings: ValidationError[] = [];

  if (!orderItems || orderItems.length === 0) {
    errors.push({
      section: 'items',
      field: 'orderItems',
      message: '–ù–µ–º–∞—î –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ',
      severity: 'error',
    });
    return { errors, warnings };
  }

  orderItems.forEach((item: any, index: number) => {
    if (!item.name || !item.category) {
      errors.push({
        section: 'items',
        field: `item-${index}`,
        message: `–ü—Ä–µ–¥–º–µ—Ç ${index + 1}: –≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞–∑–≤–∞ –∞–±–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è`,
        severity: 'error',
      });
    }
    if (!item.finalPrice || item.finalPrice <= 0) {
      errors.push({
        section: 'items',
        field: `item-${index}-price`,
        message: `–ü—Ä–µ–¥–º–µ—Ç ${index + 1}: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Ü—ñ–Ω–∞`,
        severity: 'error',
      });
    }
  });

  // –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ —Ä–∏–∑–∏–∫–∏
  const riskyItems = orderItems.filter(
    (item: any) =>
      item.defects?.includes('–±–µ–∑_–≥–∞—Ä–∞–Ω—Ç—ñ–π') || item.risks?.includes('—Ä–∏–∑–∏–∫–∏_–∑–º—ñ–Ω–∏_–∫–æ–ª—å–æ—Ä—É')
  );
  if (riskyItems.length > 0) {
    warnings.push({
      section: 'items',
      field: 'risks',
      message: `${riskyItems.length} –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –∑ –ø—ñ–¥–≤–∏—â–µ–Ω–∏–º–∏ —Ä–∏–∑–∏–∫–∞–º–∏`,
      severity: 'warning',
    });
  }

  return { errors, warnings };
};

const validateExecution = (executionParams: any): ValidationError[] => {
  const errors: ValidationError[] = [];

  if (!executionParams?.executionDate) {
    errors.push({
      section: 'execution',
      field: 'executionDate',
      message: '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–∞—Ç—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è',
      severity: 'error',
    });
    return errors;
  }

  const today = new Date();
  const minDate = new Date(today);
  minDate.setDate(today.getDate() + 1);

  if (executionParams.executionDate < minDate) {
    errors.push({
      section: 'execution',
      field: 'executionDate',
      message: '–î–∞—Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —Ä–∞–Ω—ñ—à–µ –∑–∞–≤—Ç—Ä–∞',
      severity: 'error',
    });
  }

  return errors;
};

/**
 * –•—É–∫ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * ‚úÖ –ö–æ–º–ø–æ–∑–∏—Ü—ñ—è: –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Å—ñ—Ö –µ—Ç–∞–ø—ñ–≤ + –±—ñ–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞
 */
export const useOrderValidation = () => {
  // üè™ Zustand - –æ—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ
  const {
    selectedClient,
    selectedBranch,
    orderItems,
    executionParams,
    selectedDiscount,
    errors,
    warnings,
  } = useWizardStore();

  // ‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  const {
    data: validationResult,
    isLoading: isValidating,
    refetch: revalidate,
  } = useQuery({
    queryKey: [
      'order-validation',
      selectedClient?.id,
      selectedBranch?.id,
      orderItems?.length,
      executionParams?.executionDate?.toISOString(),
    ],
    queryFn: (): ValidationResult => {
      const validationErrors: ValidationError[] = [];
      const validationWarnings: ValidationError[] = [];

      // 1Ô∏è‚É£ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞
      validationErrors.push(...validateClient(selectedClient));

      // 2Ô∏è‚É£ –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ—ñ–ª—ñ—ó
      if (!selectedBranch) {
        validationErrors.push({
          section: 'branch',
          field: 'selectedBranch',
          message: '–ù–µ –≤–∏–±—Ä–∞–Ω–æ —Ñ—ñ–ª—ñ—é',
          severity: 'error',
        });
      }

      // 3Ô∏è‚É£ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
      const itemValidation = validateItems(orderItems || []);
      validationErrors.push(...itemValidation.errors);
      validationWarnings.push(...itemValidation.warnings);

      // 4Ô∏è‚É£ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
      validationErrors.push(...validateExecution(executionParams));

      // 5Ô∏è‚É£ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∑–Ω–∏–∂–æ–∫ (—Ç—ñ–ª—å–∫–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è)
      if (selectedDiscount && selectedDiscount.excludedItems?.length > 0) {
        validationWarnings.push({
          section: 'payment',
          field: 'discount',
          message: `–ó–Ω–∏–∂–∫–∞ –Ω–µ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ ${selectedDiscount.excludedItems.length} –ø—Ä–µ–¥–º–µ—Ç—ñ–≤`,
          severity: 'warning',
        });
      }

      // üìä –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–≤–Ω–æ—Ç–∏
      const completenessChecks = [
        !!selectedClient,
        !!selectedBranch,
        !!(orderItems && orderItems.length > 0),
        !!executionParams?.executionDate,
        true, // –ø–ª–∞—Ç–µ–∂—ñ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ
      ];
      const completeness =
        (completenessChecks.filter(Boolean).length / completenessChecks.length) * 100;

      return {
        isValid: validationErrors.length === 0,
        errors: validationErrors,
        warnings: validationWarnings,
        completeness,
      };
    },
    staleTime: 30000, // 30 —Å–µ–∫—É–Ω–¥
    gcTime: 60000,
  });

  // üîç –ú–µ—Ç–æ–¥–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –æ–∫—Ä–µ–º–∏—Ö —Å–µ–∫—Ü—ñ–π
  const validateSection = useCallback(
    (section: ValidationResult['errors'][0]['section']) => {
      if (!validationResult) return { isValid: true, errors: [], warnings: [] };

      const sectionErrors = validationResult.errors.filter((error) => error.section === section);
      const sectionWarnings = validationResult.warnings.filter(
        (warning) => warning.section === section
      );

      return {
        isValid: sectionErrors.length === 0,
        errors: sectionErrors,
        warnings: sectionWarnings,
      };
    },
    [validationResult]
  );

  // üìä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é
  const validationInfo = useMemo(
    () => ({
      isValidating,
      hasGlobalErrors: errors.length > 0,
      hasGlobalWarnings: warnings.length > 0,
      totalErrors: (validationResult?.errors.length || 0) + errors.length,
      totalWarnings: (validationResult?.warnings.length || 0) + warnings.length,
      completeness: validationResult?.completeness || 0,
      isReadyForConfirmation:
        validationResult?.isValid &&
        errors.length === 0 &&
        (validationResult?.completeness || 0) >= 80,
    }),
    [
      isValidating,
      errors.length,
      warnings.length,
      validationResult?.errors.length,
      validationResult?.warnings.length,
      validationResult?.completeness,
      validationResult?.isValid,
    ]
  );

  return {
    // ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
    validationResult,
    validationInfo,

    // üîÑ –°—Ç–∞–Ω–∏
    isValidating,

    // üîç –ú–µ—Ç–æ–¥–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
    validateSection,
    revalidate,
  };
};
