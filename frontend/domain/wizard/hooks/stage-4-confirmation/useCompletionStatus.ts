/**
 * @fileoverview –•—É–∫ –¥–ª—è –µ—Ç–∞–ø—É 4.4 - –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É (–ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É)
 *
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å:
 * - –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å—É —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –∫–æ–ø—ñ—ó –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
 * - –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –¥–∞—Ç—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ
 * - –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –¥–æ –Ω–æ–≤–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ —Å–ø–∏—Å–∫—É –∑–∞–º–æ–≤–ª–µ–Ω—å
 */

import { useState, useCallback, useMemo, useEffect } from 'react';

import { useGetOrderById } from '@/shared/api/generated/full/aksiApi';

import type { OrderDTO } from '@/shared/api/generated/full/aksiApi.schemas';

// ===================================
// –¢–∏–ø–∏ –¥–ª—è —Ö—É–∫–∞
// ===================================

export interface CompletionStatus {
  // –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  orderId: string | null;
  orderNumber: string | null;
  isSuccess: boolean;
  completedAt: string | null;

  // –î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ
  expectedCompletionDate: string | null;
  formattedCompletionDate: string | null; // "–ø—ñ—Å–ª—è 14:00 23.12.2024"

  // –ö–æ–ø—ñ—ó –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
  receiptSent: {
    printed: boolean;
    emailed: boolean;
    emailAddress?: string;
  };

  // –î–µ—Ç–∞–ª—ñ –∫–ª—ñ—î–Ω—Ç–∞
  clientInfo: {
    name: string;
    phone: string;
    email?: string;
  } | null;

  // –§—ñ–Ω–∞–Ω—Å–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
  financialSummary: {
    totalAmount: number;
    prepaymentAmount: number;
    balanceAmount: number;
    paymentMethod: string;
  } | null;
}

export interface UseCompletionStatusReturn {
  // –°—Ç–∞–Ω
  status: CompletionStatus;
  isLoading: boolean;
  error: string | null;

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
  isValidCompletion: boolean;

  // –î—ñ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
  goToNewOrder: () => void;
  goToOrdersList: () => void;
  goToOrderDetail: () => void;

  // –î–∞–Ω—ñ –¥–ª—è –ø–æ–∫–∞–∑—É
  completionMessages: {
    success: string;
    emailStatus: string;
    printStatus: string;
    reminderDate: string;
  };

  // –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
  formatCompletionDate: (date: string) => string;
  getEmailStatusMessage: () => string;
  getPrintStatusMessage: () => string;
}

/**
 * –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –µ—Ç–∞–ø–æ–º 4.4 - –ø–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 *
 * @example
 * ```tsx
 * const {
 *   status,
 *   isValidCompletion,
 *   completionMessages,
 *   goToNewOrder,
 *   goToOrdersList
 * } = useCompletionStatus(orderId);
 *
 * if (status.isSuccess) {
 *   return (
 *     <div>
 *       <h2>{completionMessages.success}</h2>
 *       <p>{completionMessages.emailStatus}</p>
 *       <p>{completionMessages.reminderDate}</p>
 *       <Button onClick={goToNewOrder}>–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</Button>
 *     </div>
 *   );
 * }
 * ```
 */
export function useCompletionStatus(orderId?: string): UseCompletionStatusReturn {
  // =====================================
  // –õ–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
  // =====================================

  const [status, setStatus] = useState<CompletionStatus>({
    orderId: null,
    orderNumber: null,
    isSuccess: false,
    completedAt: null,
    expectedCompletionDate: null,
    formattedCompletionDate: null,
    receiptSent: {
      printed: false,
      emailed: false,
    },
    clientInfo: null,
    financialSummary: null,
  });

  const [error, setError] = useState<string | null>(null);

  // =====================================
  // API —Ö—É–∫–∏
  // =====================================

  const {
    data: orderData,
    isLoading,
    error: orderError,
  } = useGetOrderById(orderId || '', {
    query: {
      enabled: !!orderId,
    },
  });

  // =====================================
  // –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
  // =====================================

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç–∏
   */
  const getPaymentMethodDisplay = useCallback((order: OrderDTO): string => {
    // –Ø–∫—â–æ —î –ø–æ–≤–Ω–∞ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∞, —Ç–æ –Ω–µ –≤–∞–∂–ª–∏–≤–æ —è–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º
    if (order.balanceAmount === 0) {
      return '–ü–æ–≤–Ω—ñ—Å—Ç—é —Å–ø–ª–∞—á–µ–Ω–æ';
    }

    // –Ø–∫—â–æ —î —á–∞—Å—Ç–∏–Ω–∞ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∏
    if ((order.prepaymentAmount || 0) > 0) {
      return '–ß–∞—Å—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∞';
    }

    // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    return '–ü—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ';
  }, []);

  const formatCompletionDateInternal = useCallback((dateString: string): string => {
    try {
      const date = new Date(dateString);
      const day = date.getDate().toString().padStart(2, '0');
      const month = (date.getMonth() + 1).toString().padStart(2, '0');
      const year = date.getFullYear();

      return `–ø—ñ—Å–ª—è 14:00 ${day}.${month}.${year}`;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏:', error);
      return dateString;
    }
  }, []);

  // =====================================
  // –ï—Ñ–µ–∫—Ç–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
  // =====================================

  useEffect(() => {
    if (orderData && orderId) {
      const order = orderData as OrderDTO;

      setStatus({
        orderId,
        orderNumber: order.receiptNumber || null,
        isSuccess: true,
        completedAt: order.finalizedAt || new Date().toISOString(),
        expectedCompletionDate: order.expectedCompletionDate || null,
        formattedCompletionDate: order.expectedCompletionDate
          ? formatCompletionDateInternal(order.expectedCompletionDate)
          : null,
        receiptSent: {
          printed: order.printed || false,
          emailed: order.emailed || false,
          emailAddress: order.client?.email,
        },
        clientInfo: order.client
          ? {
              name: `${order.client.firstName || ''} ${order.client.lastName || ''}`.trim(),
              phone: order.client.phone || '',
              email: order.client.email,
            }
          : null,
        financialSummary: {
          totalAmount: order.finalAmount || 0,
          prepaymentAmount: order.prepaymentAmount || 0,
          balanceAmount: order.balanceAmount || 0,
          paymentMethod: getPaymentMethodDisplay(order),
        },
      });

      setError(null);
    }
  }, [orderData, orderId, formatCompletionDateInternal, getPaymentMethodDisplay]);

  useEffect(() => {
    if (orderError) {
      setError('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
    }
  }, [orderError]);

  // =====================================
  // –û–±—á–∏—Å–ª—é–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
  // =====================================

  const getEmailStatusMessageInternal = useCallback((): string => {
    if (status.receiptSent.emailed && status.receiptSent.emailAddress) {
      return `‚úÖ –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∫–æ–ø—ñ—é –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ ${status.receiptSent.emailAddress}`;
    } else if (status.clientInfo?.email) {
      return `üìß –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∫–æ–ø—ñ—é –º–æ–∂–Ω–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞ ${status.clientInfo.email}`;
    } else {
      return 'üìß Email –∞–¥—Ä–µ—Å–∞ –∫–ª—ñ—î–Ω—Ç–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞';
    }
  }, [status.receiptSent, status.clientInfo]);

  const getPrintStatusMessageInternal = useCallback((): string => {
    if (status.receiptSent.printed) {
      return 'üñ®Ô∏è –ö–≤–∏—Ç–∞–Ω—Ü—ñ—é –Ω–∞–¥—Ä—É–∫–æ–≤–∞–Ω–æ';
    } else {
      return 'üñ®Ô∏è –ö–≤–∏—Ç–∞–Ω—Ü—ñ—è –≥–æ—Ç–æ–≤–∞ –¥–æ –¥—Ä—É–∫—É';
    }
  }, [status.receiptSent.printed]);

  const isValidCompletion = useMemo(() => {
    return (
      status.isSuccess &&
      status.orderId !== null &&
      status.orderNumber !== null &&
      status.clientInfo !== null
    );
  }, [status]);

  const completionMessages = useMemo(() => {
    const clientName = status.clientInfo?.name || '–ö–ª—ñ—î–Ω—Ç';
    const orderNumber = status.orderNumber || '';

    return {
      success: `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ${orderNumber} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è ${clientName}`,
      emailStatus: getEmailStatusMessageInternal(),
      printStatus: getPrintStatusMessageInternal(),
      reminderDate: status.formattedCompletionDate
        ? `–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –¥–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ: ${status.formattedCompletionDate}`
        : '',
    };
  }, [status, getEmailStatusMessageInternal, getPrintStatusMessageInternal]);

  // =====================================
  // –î—ñ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
  // =====================================

  const goToNewOrder = useCallback(() => {
    // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Ç–∞ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –Ω–æ–≤–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    window.location.href = '/order-wizard';
  }, []);

  const goToOrdersList = useCallback(() => {
    // –ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Å–ø–∏—Å–∫—É –∑–∞–º–æ–≤–ª–µ–Ω—å
    window.location.href = '/orders';
  }, []);

  const goToOrderDetail = useCallback(() => {
    if (status.orderId) {
      // –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –¥–µ—Ç–∞–ª–µ–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
      window.location.href = `/orders/${status.orderId}`;
    }
  }, [status.orderId]);

  // =====================================
  // –ü—É–±–ª—ñ—á–Ω—ñ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
  // =====================================

  const formatCompletionDate = useCallback(
    (date: string): string => {
      return formatCompletionDateInternal(date);
    },
    [formatCompletionDateInternal]
  );

  const getEmailStatusMessage = useCallback((): string => {
    return getEmailStatusMessageInternal();
  }, [getEmailStatusMessageInternal]);

  const getPrintStatusMessage = useCallback((): string => {
    return getPrintStatusMessageInternal();
  }, [getPrintStatusMessageInternal]);

  // =====================================
  // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
  // =====================================

  return {
    // –°—Ç–∞–Ω
    status,
    isLoading,
    error,

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    isValidCompletion,

    // –î—ñ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    goToNewOrder,
    goToOrdersList,
    goToOrderDetail,

    // –î–∞–Ω—ñ –¥–ª—è –ø–æ–∫–∞–∑—É
    completionMessages,

    // –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    formatCompletionDate,
    getEmailStatusMessage,
    getPrintStatusMessage,
  };
}
