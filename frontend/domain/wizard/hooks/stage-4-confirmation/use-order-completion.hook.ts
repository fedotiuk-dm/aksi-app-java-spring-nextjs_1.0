/**
 * @fileoverview –•—É–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–∫—Ä–æ–∫ 4.3)
 * @module domain/wizard/hooks/stage-4
 */

import { useMutation } from '@tanstack/react-query';
import { useCallback, useMemo } from 'react';

import { useWizardStore } from '../../store';

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
interface OrderCompletionResult {
  orderId: string;
  receiptNumber: string;
  createdAt: Date;
  estimatedCompletionDate: Date;
  status: 'completed' | 'pending_signature' | 'payment_required';
}

/**
 * –•—É–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * ‚úÖ –ö–æ–º–ø–æ–∑–∏—Ü—ñ—è: –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è + –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è + –æ—á–∏—â–µ–Ω–Ω—è
 */
export const useOrderCompletion = () => {
  // üè™ Zustand - –æ—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ —Ç–∞ –º–µ—Ç–æ–¥–∏
  const {
    selectedClient,
    selectedBranch,
    orderItems,
    executionParams,
    selectedDiscount,
    completeWizard,
    resetWizard,
    addError,
    addWarning,
  } = useWizardStore();

  // üíæ –ú—É—Ç–∞—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  const saveOrderMutation = useMutation({
    mutationFn: async (): Promise<OrderCompletionResult> => {
      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
      if (!selectedClient || !selectedBranch || !orderItems || orderItems.length === 0) {
        throw new Error("–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è");
      }

      if (!executionParams?.executionDate) {
        throw new Error('–ù–µ –≤–∫–∞–∑–∞–Ω–æ –¥–∞—Ç—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è');
      }

      // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
      const orderData = {
        client: selectedClient,
        branch: selectedBranch,
        items: orderItems,
        execution: executionParams,
        discount: selectedDiscount,
        createdAt: new Date(),
      };

      // –ú–æ–∫ –ª–æ–≥—ñ–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è (—Ç—É—Ç –±—É–¥–µ API –≤–∏–∫–ª–∏–∫)
      await new Promise((resolve) => setTimeout(resolve, 2000));

      // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
      const orderId = `ORD-${Date.now().toString().slice(-8)}`;
      const receiptNumber = `RC-${Date.now().toString().slice(-6)}`;

      return {
        orderId,
        receiptNumber,
        createdAt: new Date(),
        estimatedCompletionDate: executionParams.executionDate,
        status: 'completed',
      };
    },
    onSuccess: (result) => {
      addWarning(`–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ${result.orderId} —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ`);
    },
    onError: (error) => {
      addError(`–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${error.message}`);
    },
  });

  // üéØ –ú—É—Ç–∞—Ü—ñ—è –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
  const completeOrderMutation = useMutation({
    mutationFn: async (): Promise<OrderCompletionResult> => {
      // –°–ø–æ—á–∞—Ç–∫—É –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
      const result = await saveOrderMutation.mutateAsync();

      // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥—ñ—ó –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è (–º–æ–∫ –ª–æ–≥—ñ–∫–∞)
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω wizard
      completeWizard();

      return result;
    },
    onSuccess: (result) => {
      addWarning(`–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ${result.orderId} –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
    },
    onError: (error) => {
      addError(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${error.message}`);
    },
  });

  // üîÑ –ú–µ—Ç–æ–¥–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å–æ–º
  const completeAndReset = useCallback(async () => {
    try {
      const result = await completeOrderMutation.mutateAsync();

      // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–±–∞—á–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      setTimeout(() => {
        resetWizard();
      }, 2000);

      return result;
    } catch (error) {
      addError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç–∞ —Å–∫–∏–Ω—É—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
      throw error;
    }
  }, [completeOrderMutation, resetWizard, addError]);

  const saveWithoutCompletion = useCallback(async () => {
    try {
      const result = await saveOrderMutation.mutateAsync();
      addWarning('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ —á–µ—Ä–Ω–µ—Ç–∫–∞');
      return result;
    } catch (error) {
      addError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
      throw error;
    }
  }, [saveOrderMutation, addError, addWarning]);

  // üìä –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
  const getOrderSummary = useCallback(() => {
    if (!selectedClient || !selectedBranch || !orderItems) {
      return null;
    }

    const itemsTotal = orderItems.reduce(
      (sum: number, item: any) => sum + (item.finalPrice || 0),
      0
    );
    const urgencyAmount = executionParams?.urgencyPricing?.additionalCost || 0;
    const discountAmount = selectedDiscount?.amount || 0;
    const finalTotal = itemsTotal + urgencyAmount - discountAmount;

    return {
      clientName: selectedClient.fullName,
      branchName: selectedBranch.name,
      itemsCount: orderItems.length,
      financial: {
        itemsTotal,
        urgencyAmount,
        discountAmount,
        finalTotal,
      },
      executionDate: executionParams?.executionDate,
      urgencyLevel: executionParams?.urgencyLevel,
    };
  }, [selectedClient, selectedBranch, orderItems, executionParams, selectedDiscount]);

  // ‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
  const completionValidation = useMemo(() => {
    const errors: string[] = [];
    const warnings: string[] = [];

    if (!selectedClient) errors.push('–ù–µ –≤–∏–±—Ä–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞');
    if (!selectedBranch) errors.push('–ù–µ –≤–∏–±—Ä–∞–Ω–æ —Ñ—ñ–ª—ñ—é');
    if (!orderItems || orderItems.length === 0) errors.push('–ù–µ–º–∞—î –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ');
    if (!executionParams?.executionDate) errors.push('–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–∞—Ç—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è');

    // –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
    if (orderItems?.some((item: any) => item.defects?.includes('–±–µ–∑_–≥–∞—Ä–∞–Ω—Ç—ñ–π'))) {
      warnings.push('–Ñ –ø—Ä–µ–¥–º–µ—Ç–∏ –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç—ñ–π');
    }

    if (!selectedDiscount && orderItems && orderItems.length > 5) {
      warnings.push('–ú–æ–∂–ª–∏–≤–æ –≤–∞—Ä—Ç–æ –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –∑–Ω–∏–∂–∫—É –¥–ª—è –≤–µ–ª–∏–∫–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
    }

    return {
      canComplete: errors.length === 0,
      errors,
      warnings,
      readinessPercentage: errors.length === 0 ? 100 : Math.max(0, 100 - errors.length * 25),
    };
  }, [selectedClient, selectedBranch, orderItems, executionParams, selectedDiscount]);

  // üìä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
  const completionInfo = useMemo(
    () => ({
      isSaving: saveOrderMutation.isPending,
      isCompleting: completeOrderMutation.isPending,
      isAnyOperation: saveOrderMutation.isPending || completeOrderMutation.isPending,
      canComplete: completionValidation.canComplete,
      hasWarnings: completionValidation.warnings.length > 0,
      orderSummary: getOrderSummary(),
    }),
    [
      saveOrderMutation.isPending,
      completeOrderMutation.isPending,
      completionValidation.canComplete,
      completionValidation.warnings.length,
      getOrderSummary,
    ]
  );

  return {
    // üìä –î–∞–Ω—ñ
    completionValidation,
    completionInfo,
    getOrderSummary,

    // üíæ –û–ø–µ—Ä–∞—Ü—ñ—ó –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    saveOrder: saveOrderMutation.mutateAsync,
    completeOrder: completeOrderMutation.mutateAsync,

    // üîß –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω—ñ –º–µ—Ç–æ–¥–∏
    completeAndReset,
    saveWithoutCompletion,

    // üîÑ –°—Ç–∞–Ω–∏
    isSaving: saveOrderMutation.isPending,
    isCompleting: completeOrderMutation.isPending,
  };
};
