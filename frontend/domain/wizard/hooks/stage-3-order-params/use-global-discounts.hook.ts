/**
 * @fileoverview –•—É–∫ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –∑–Ω–∏–∂–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–∫—Ä–æ–∫ 3.2)
 * @module domain/wizard/hooks/stage-3
 */

import { useQuery, useMutation } from '@tanstack/react-query';
import { useCallback, useMemo } from 'react';

import { GlobalDiscountsService } from '../../services/stage-3-order-params';
import { useWizardStore } from '../../store';

/**
 * –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–Ω–∏–∂–∫–∏
 */
interface DiscountOption {
  id: string;
  name: string;
  percentage: number;
  isActive: boolean;
  excludedCategories: string[];
  description?: string;
}

/**
 * –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ—ó –∑–Ω–∏–∂–∫–∏
 */
interface AppliedDiscount {
  discountId: string;
  percentage: number;
  amount: number;
  applicableItems: string[];
  excludedItems: string[];
}

/**
 * –•—É–∫ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –∑–Ω–∏–∂–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * üè∑Ô∏è –ö–æ–º–ø–æ–∑–∏—Ü—ñ—è: TanStack Query + Zustand + GlobalDiscountsService
 */
export const useGlobalDiscounts = () => {
  // üè™ Zustand - –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
  const { orderItems, selectedDiscount, setSelectedDiscount, addError, addWarning } =
    useWizardStore();

  // ‚öôÔ∏è –°–µ—Ä–≤—ñ—Å
  const discountsService = useMemo(() => new GlobalDiscountsService(), []);

  // üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–Ω–∏–∂–æ–∫ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–ø—Ü—ñ—ó –∑ —Å–µ—Ä–≤—ñ—Å—É)
  const {
    data: availableDiscounts = [],
    isLoading: isLoadingDiscounts,
    error: discountsError,
  } = useQuery({
    queryKey: ['available-discounts'],
    queryFn: () => {
      // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –æ–ø—Ü—ñ—ó –∑ —Å–µ—Ä–≤—ñ—Å—É –≤ DiscountOption —Ñ–æ—Ä–º–∞—Ç
      const options = discountsService.getDiscountTypeOptions();
      return options.map((option, index) => ({
        id: option.value,
        name: option.label,
        percentage: option.percent || 0,
        isActive: true,
        excludedCategories: discountsService.getExcludedCategories(),
        description: option.label,
      }));
    },
    staleTime: 1800000, // 30 —Ö–≤–∏–ª–∏–Ω –∫–µ—à
    gcTime: 3600000, // 1 –≥–æ–¥–∏–Ω–∞ –≤ –∫–µ—à—ñ
  });

  // üßÆ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–Ω–∏–∂–∫–∏ (–º–æ–∫ –ª–æ–≥—ñ–∫–∞)
  const calculateDiscountMutation = useMutation({
    mutationFn: async ({
      discountId,
      items,
    }: {
      discountId: string;
      items: any[];
    }): Promise<AppliedDiscount> => {
      const discount = availableDiscounts.find((d: DiscountOption) => d.id === discountId);
      if (!discount) throw new Error('–ó–Ω–∏–∂–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');

      const eligibleItems = items.filter(
        (item: any) => !discount.excludedCategories.includes(item.category)
      );
      const excludedItems = items.filter((item: any) =>
        discount.excludedCategories.includes(item.category)
      );

      const totalEligibleAmount = eligibleItems.reduce(
        (sum: number, item: any) => sum + (item.finalPrice || 0),
        0
      );
      const discountAmount = totalEligibleAmount * (discount.percentage / 100);

      return {
        discountId,
        percentage: discount.percentage,
        amount: discountAmount,
        applicableItems: eligibleItems.map((item: any) => item.id),
        excludedItems: excludedItems.map((item: any) => item.id),
      };
    },
    onError: (error) => {
      addError(`–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∑–Ω–∏–∂–∫–∏: ${error.message}`);
    },
  });

  // üè∑Ô∏è –ú–µ—Ç–æ–¥–∏ —Ä–æ–±–æ—Ç–∏ –∑—ñ –∑–Ω–∏–∂–∫–∞–º–∏
  const selectDiscount = useCallback(
    async (discountId: string | null) => {
      if (!discountId) {
        setSelectedDiscount(null);
        return;
      }

      if (!orderItems || orderItems.length === 0) {
        addError('–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –∑–Ω–∏–∂–∫—É –¥–æ –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
        return;
      }

      try {
        const appliedDiscount = await calculateDiscountMutation.mutateAsync({
          discountId,
          items: orderItems,
        });

        setSelectedDiscount(appliedDiscount);

        if (appliedDiscount.excludedItems.length > 0) {
          addWarning(
            `–ó–Ω–∏–∂–∫–∞ –Ω–µ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ ${appliedDiscount.excludedItems.length} –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ —á–µ—Ä–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π`
          );
        }

        if (appliedDiscount.amount > 0) {
          addWarning(
            `–ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –∑–Ω–∏–∂–∫—É: -${appliedDiscount.amount} –≥—Ä–Ω (${appliedDiscount.percentage}%)`
          );
        }
      } catch (error) {
        addError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –∑–Ω–∏–∂–∫—É');
      }
    },
    [orderItems, calculateDiscountMutation, setSelectedDiscount, addError, addWarning]
  );

  // ‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∑–Ω–∏–∂–æ–∫
  const validateDiscountEligibility = useCallback(
    (discountId: string): { isEligible: boolean; reason?: string } => {
      const discount = availableDiscounts.find((d: DiscountOption) => d.id === discountId);
      if (!discount) {
        return { isEligible: false, reason: '–ó–Ω–∏–∂–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' };
      }

      if (!discount.isActive) {
        return { isEligible: false, reason: '–ó–Ω–∏–∂–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞' };
      }

      if (!orderItems || orderItems.length === 0) {
        return { isEligible: false, reason: '–ù–µ–º–∞—î –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ' };
      }

      const eligibleItems = orderItems.filter(
        (item: any) => !discount.excludedCategories.includes(item.category)
      );
      if (eligibleItems.length === 0) {
        return {
          isEligible: false,
          reason: '–í—Å—ñ –ø—Ä–µ–¥–º–µ—Ç–∏ –≤–∏–∫–ª—é—á–µ–Ω—ñ –∑ –¥—ñ—ó –∑–Ω–∏–∂–∫–∏',
        };
      }

      return { isEligible: true };
    },
    [availableDiscounts, orderItems]
  );

  // üîç –£—Ç–∏–ª—ñ—Ç–∏
  const getDiscountPreview = useCallback(
    (discountId: string) => {
      if (!orderItems || orderItems.length === 0) return null;

      const discount = availableDiscounts.find((d: DiscountOption) => d.id === discountId);
      if (!discount) return null;

      const eligibleItems = orderItems.filter(
        (item: any) => !discount.excludedCategories.includes(item.category)
      );
      const totalEligibleAmount = eligibleItems.reduce(
        (sum: number, item: any) => sum + (item.finalPrice || 0),
        0
      );
      const discountAmount = totalEligibleAmount * (discount.percentage / 100);

      return {
        discount,
        eligibleItemsCount: eligibleItems.length,
        totalEligibleAmount,
        discountAmount,
      };
    },
    [orderItems, availableDiscounts]
  );

  const formatDiscountAmount = useCallback((amount: number) => {
    return `${amount.toFixed(2)} –≥—Ä–Ω`;
  }, []);

  const getDiscountDescription = useCallback(
    (discountId: string): string => {
      const discount = availableDiscounts.find((d: DiscountOption) => d.id === discountId);
      return discount?.description || discount?.name || '';
    },
    [availableDiscounts]
  );

  // üìä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–Ω–∏–∂–∫–∏
  const discountInfo = useMemo(() => {
    const totalDiscount = selectedDiscount?.amount || 0;
    const applicableItemsCount = selectedDiscount?.applicableItems.length || 0;
    const excludedItemsCount = selectedDiscount?.excludedItems.length || 0;

    return {
      hasAvailableDiscounts: availableDiscounts.length > 0,
      hasSelectedDiscount: !!selectedDiscount,
      totalDiscount,
      applicableItemsCount,
      excludedItemsCount,
      discountPercentage: selectedDiscount?.percentage || 0,
      isCalculating: calculateDiscountMutation.isPending,
    };
  }, [availableDiscounts, selectedDiscount, calculateDiscountMutation.isPending]);

  // üîß –î–æ–ø–æ–º—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏
  const clearDiscount = useCallback(() => {
    setSelectedDiscount(null);
  }, [setSelectedDiscount]);

  const isDiscountApplicable = useCallback(
    (discountId: string): boolean => {
      return validateDiscountEligibility(discountId).isEligible;
    },
    [validateDiscountEligibility]
  );

  return {
    // üìã –î–∞–Ω—ñ
    availableDiscounts,
    selectedDiscount,
    discountInfo,

    // üîÑ –°—Ç–∞–Ω–∏
    isLoadingDiscounts,
    discountsError,

    // üè∑Ô∏è –ú–µ—Ç–æ–¥–∏ –∑–Ω–∏–∂–æ–∫
    selectDiscount,
    clearDiscount,
    validateDiscountEligibility,
    isDiscountApplicable,

    // üîç –£—Ç–∏–ª—ñ—Ç–∏
    getDiscountPreview,
    formatDiscountAmount,
    getDiscountDescription,
  };
};
