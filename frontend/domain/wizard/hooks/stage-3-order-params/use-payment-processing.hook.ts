/**
 * @fileoverview –•—É–∫ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç–µ–∂—ñ–≤ (–∫—Ä–æ–∫ 3.3)
 * @module domain/wizard/hooks/stage-3
 */

import { useMutation } from '@tanstack/react-query';
import { useCallback, useMemo, useState } from 'react';

import { useWizardStore } from '../../store';

/**
 * –°–ø–æ—Å–æ–±–∏ –æ–ø–ª–∞—Ç–∏
 */
type PaymentMethod = '–≥–æ—Ç—ñ–≤–∫–∞' | '—Ç–µ—Ä–º—ñ–Ω–∞–ª' | '–Ω–∞_—Ä–∞—Ö—É–Ω–æ–∫';

/**
 * –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–ª–∞—Ç—ñ–∂–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
 */
interface PaymentInfo {
  paymentMethod: PaymentMethod;
  totalAmount: number;
  paidAmount: number;
  debtAmount: number;
  isFullyPaid: boolean;
}

/**
 * –•—É–∫ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç–µ–∂—ñ–≤
 * üí∞ –ö–æ–º–ø–æ–∑–∏—Ü—ñ—è: Zustand + –≤–∞–ª—ñ–¥–∞—Ü—ñ—è + —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏
 */
export const usePaymentProcessing = () => {
  // üè™ Zustand - –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
  const { orderItems, executionParams, selectedDiscount, addError, addWarning } = useWizardStore();

  // üí∞ –õ–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –ø–ª–∞—Ç–µ–∂—É
  const [paymentMethod, setPaymentMethod] = useState<PaymentMethod>('–≥–æ—Ç—ñ–≤–∫–∞');
  const [paidAmount, setPaidAmount] = useState<number>(0);

  // üßÆ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏
  const calculateTotalAmount = useCallback(() => {
    if (!orderItems || orderItems.length === 0) return 0;

    // –ë–∞–∑–æ–≤–∞ —Å—É–º–∞ –≤—Å—ñ—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
    const itemsTotal = orderItems.reduce(
      (sum: number, item: any) => sum + (item.finalPrice || 0),
      0
    );

    // –î–æ–¥–∞—î–º–æ –Ω–∞—Ü—ñ–Ω–∫—É –∑–∞ —Ç–µ—Ä–º—ñ–Ω–æ–≤—ñ—Å—Ç—å
    let urgencyAmount = 0;
    if (executionParams?.urgencyPricing?.additionalCost) {
      urgencyAmount = executionParams.urgencyPricing.additionalCost;
    }

    // –í—ñ–¥–Ω—ñ–º–∞—î–º–æ –∑–Ω–∏–∂–∫—É
    const discountAmount = selectedDiscount?.amount || 0;

    const total = itemsTotal + urgencyAmount - discountAmount;
    return Math.max(0, total); // –ù–µ –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–º
  }, [orderItems, executionParams, selectedDiscount]);

  // üí∞ –ú—É—Ç–∞—Ü—ñ—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É –æ–ø–ª–∞—Ç–∏
  const processPaymentMutation = useMutation({
    mutationFn: async ({ amount, method }: { amount: number; method: PaymentMethod }) => {
      // –ú–æ–∫ –ª–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç–µ–∂—É
      await new Promise((resolve) => setTimeout(resolve, 1000));

      if (amount < 0) {
        throw new Error('–°—É–º–∞ –ø–ª–∞—Ç–µ–∂—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ—é');
      }

      const totalAmount = calculateTotalAmount();
      if (amount > totalAmount) {
        throw new Error('–°—É–º–∞ –ø–ª–∞—Ç–µ–∂—É –ø–µ—Ä–µ–≤–∏—â—É—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å');
      }

      return {
        success: true,
        paidAmount: amount,
        method,
        processedAt: new Date(),
      };
    },
    onSuccess: (result, variables) => {
      setPaidAmount(variables.amount);
      addWarning(`–û–ø–ª–∞—á–µ–Ω–æ ${variables.amount} –≥—Ä–Ω —á–µ—Ä–µ–∑ ${variables.method}`);
    },
    onError: (error) => {
      addError(`–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç–µ–∂—É: ${error.message}`);
    },
  });

  // üí∞ –ú–µ—Ç–æ–¥–∏ —Ä–æ–±–æ—Ç–∏ –∑ –ø–ª–∞—Ç–µ–∂–∞–º–∏
  const processPayment = useCallback(
    async (amount: number) => {
      if (amount <= 0) {
        addError('–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É –¥–ª—è –æ–ø–ª–∞—Ç–∏');
        return;
      }

      await processPaymentMutation.mutateAsync({
        amount,
        method: paymentMethod,
      });
    },
    [paymentMethod, processPaymentMutation, addError]
  );

  const setFullPayment = useCallback(() => {
    const totalAmount = calculateTotalAmount();
    setPaidAmount(totalAmount);
  }, [calculateTotalAmount]);

  const clearPayment = useCallback(() => {
    setPaidAmount(0);
  }, []);

  // üìä –ü–ª–∞—Ç—ñ–∂–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
  const paymentInfo: PaymentInfo = useMemo(() => {
    const totalAmount = calculateTotalAmount();
    const debtAmount = Math.max(0, totalAmount - paidAmount);

    return {
      paymentMethod,
      totalAmount,
      paidAmount,
      debtAmount,
      isFullyPaid: debtAmount === 0,
    };
  }, [paymentMethod, paidAmount, calculateTotalAmount]);

  // üìã –û–ø—Ü—ñ—ó —Å–ø–æ—Å–æ–±—ñ–≤ –æ–ø–ª–∞—Ç–∏
  const paymentMethodOptions = useMemo(
    () => [
      { value: '–≥–æ—Ç—ñ–≤–∫–∞' as PaymentMethod, label: '–ì–æ—Ç—ñ–≤–∫–∞' },
      { value: '—Ç–µ—Ä–º—ñ–Ω–∞–ª' as PaymentMethod, label: '–¢–µ—Ä–º—ñ–Ω–∞–ª' },
      { value: '–Ω–∞_—Ä–∞—Ö—É–Ω–æ–∫' as PaymentMethod, label: '–ù–∞ —Ä–∞—Ö—É–Ω–æ–∫' },
    ],
    []
  );

  // ‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è
  const validatePayment = useCallback(
    (amount: number): { isValid: boolean; error?: string } => {
      if (amount < 0) {
        return { isValid: false, error: '–°—É–º–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ—é' };
      }

      const totalAmount = calculateTotalAmount();
      if (amount > totalAmount) {
        return { isValid: false, error: '–°—É–º–∞ –ø–µ—Ä–µ–≤–∏—â—É—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å' };
      }

      return { isValid: true };
    },
    [calculateTotalAmount]
  );

  // üßÆ –†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –¥–ª—è UI
  const getPaymentBreakdown = useCallback(() => {
    if (!orderItems || orderItems.length === 0) return null;

    const itemsTotal = orderItems.reduce(
      (sum: number, item: any) => sum + (item.finalPrice || 0),
      0
    );
    const urgencyAmount = executionParams?.urgencyPricing?.additionalCost || 0;
    const discountAmount = selectedDiscount?.amount || 0;

    return {
      itemsTotal,
      urgencyAmount,
      discountAmount,
      finalTotal: itemsTotal + urgencyAmount - discountAmount,
    };
  }, [orderItems, executionParams, selectedDiscount]);

  return {
    // üí∞ –°—Ç–∞–Ω –ø–ª–∞—Ç–µ–∂—É
    paymentInfo,
    paymentMethodOptions,

    // üîÑ –°—Ç–∞–Ω–∏ –æ–ø–µ—Ä–∞—Ü—ñ–π
    isProcessing: processPaymentMutation.isPending,

    // üí∞ –ú–µ—Ç–æ–¥–∏ –ø–ª–∞—Ç–µ–∂—É
    setPaymentMethod,
    setPaidAmount,
    processPayment,
    setFullPayment,
    clearPayment,

    // ‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    validatePayment,

    // üßÆ –†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏
    calculateTotalAmount,
    getPaymentBreakdown,
  };
};
