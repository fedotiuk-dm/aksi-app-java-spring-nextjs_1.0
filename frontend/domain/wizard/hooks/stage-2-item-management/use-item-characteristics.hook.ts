/**
 * @fileoverview –•—É–∫ –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ (–∫—Ä–æ–∫ 2.2)
 * @module domain/wizard/hooks/stage-2
 */

import { useQuery } from '@tanstack/react-query';
import { useCallback, useMemo } from 'react';

import { CharacteristicsService } from '../../services/stage-2-item-management';
import { useWizardStore } from '../../store';

/**
 * –•—É–∫ –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
 * üß¨ –ö–æ–º–ø–æ–∑–∏—Ü—ñ—è: TanStack Query + Zustand + CharacteristicsService
 */
export const useItemCharacteristics = () => {
  // üè™ Zustand - –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
  const { addError } = useWizardStore();

  // ‚öôÔ∏è –°–µ—Ä–≤—ñ—Å
  const characteristicsService = useMemo(() => new CharacteristicsService(), []);

  // üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤
  const {
    data: materials = [],
    isLoading: isLoadingMaterials,
    error: materialsError,
  } = useQuery({
    queryKey: ['materials'],
    queryFn: () => characteristicsService.getAllMaterials(),
    staleTime: 3600000, // 1 –≥–æ–¥–∏–Ω–∞ –∫–µ—à
    gcTime: 7200000, // 2 –≥–æ–¥–∏–Ω–∏ –≤ –∫–µ—à—ñ
  });

  // üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—ñ–≤
  const {
    data: colors = [],
    isLoading: isLoadingColors,
    error: colorsError,
  } = useQuery({
    queryKey: ['colors'],
    queryFn: () => characteristicsService.getAvailableColors(),
    staleTime: 1800000, // 30 —Ö–≤–∏–ª–∏–Ω –∫–µ—à
    gcTime: 3600000, // 1 –≥–æ–¥–∏–Ω–∞ –≤ –∫–µ—à—ñ
  });

  // üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤ –Ω–∞–ø–æ–≤–Ω—é–≤–∞—á—ñ–≤
  const {
    data: fillerTypes = [],
    isLoading: isLoadingFillerTypes,
    error: fillerTypesError,
  } = useQuery({
    queryKey: ['filler-types'],
    queryFn: () => characteristicsService.getFillerTypesEnum(),
    staleTime: 3600000, // 1 –≥–æ–¥–∏–Ω–∞ –∫–µ—à
    gcTime: 7200000, // 2 –≥–æ–¥–∏–Ω–∏ –≤ –∫–µ—à—ñ
  });

  // üîç –ú–µ—Ç–æ–¥–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
  const searchMaterials = useCallback(
    (searchTerm: string) => {
      return materials.filter((material: any) =>
        material.name?.toLowerCase().includes(searchTerm.toLowerCase())
      );
    },
    [materials]
  );

  const searchColors = useCallback(
    (searchTerm: string) => {
      return colors.filter((color: any) =>
        color.name?.toLowerCase().includes(searchTerm.toLowerCase())
      );
    },
    [colors]
  );

  // üîß –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
  const validateMaterial = useCallback(
    (materialData: unknown) => {
      return characteristicsService.validateMaterialSelection(materialData);
    },
    [characteristicsService]
  );

  const validateColor = useCallback(
    (colorData: unknown) => {
      return characteristicsService.validateColorInput(colorData);
    },
    [characteristicsService]
  );

  // üìä –°—Ç–∞—Ç—É—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  const loadingStatus = useMemo(
    () => ({
      isLoading: isLoadingMaterials || isLoadingColors || isLoadingFillerTypes,
      hasErrors: !!(materialsError || colorsError || fillerTypesError),
      errors: [materialsError, colorsError, fillerTypesError].filter(Boolean),
    }),
    [
      isLoadingMaterials,
      isLoadingColors,
      isLoadingFillerTypes,
      materialsError,
      colorsError,
      fillerTypesError,
    ]
  );

  return {
    // üìã –î–∞–Ω—ñ
    materials,
    colors,
    fillerTypes,

    // üîÑ –°—Ç–∞–Ω–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    isLoadingMaterials,
    isLoadingColors,
    isLoadingFillerTypes,
    loadingStatus,

    // ‚ùå –ü–æ–º–∏–ª–∫–∏
    materialsError,
    colorsError,
    fillerTypesError,

    // üîç –ú–µ—Ç–æ–¥–∏ –ø–æ—à—É–∫—É
    searchMaterials,
    searchColors,

    // ‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    validateMaterial,
    validateColor,
  };
};
