/**
 * @fileoverview –•—É–∫ –ø—ñ–¥–≤—ñ–∑–∞—Ä–¥—É –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è/—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
 * @module domain/wizard/hooks/stage-2
 */

import { useMemo, useCallback, useState, useEffect } from 'react';

import { useItemWizardNavigation } from './use-item-wizard-navigation.hook';
import { usePricingCalculator } from './use-pricing-calculator.hook';
import { useWizardStore } from '../../store';
import { ItemWizardStep } from '../../types';

import type { WizardOrderItem } from '../../adapters/order';

/**
 * –°—Ç–∞–Ω —Ñ–æ—Ä–º–∏ –ø—ñ–¥–≤—ñ–∑–∞—Ä–¥—É
 */
interface ItemWizardFormState {
  // –ö—Ä–æ–∫ 2.1: –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
  categoryId: string;
  itemName: string;
  quantity: number;
  unit: string;

  // –ö—Ä–æ–∫ 2.2: –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  material: string;
  color: string;
  filling?: string;
  wearLevel?: number;

  // –ö—Ä–æ–∫ 2.3: –î–µ—Ñ–µ–∫—Ç–∏ —Ç–∞ –ø–ª—è–º–∏
  stains: string[];
  defects: string[];
  riskFactors: string[];
  defectNotes?: string;

  // –ö—Ä–æ–∫ 2.4: –¶—ñ–Ω–∞ —Ç–∞ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏
  basePrice: number;
  appliedModifiers: string[];
  finalPrice: number;

  // –ö—Ä–æ–∫ 2.5: –§–æ—Ç–æ
  photos: string[];
}

/**
 * –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω —Ñ–æ—Ä–º–∏
 */
const initialFormState: ItemWizardFormState = {
  categoryId: '',
  itemName: '',
  quantity: 1,
  unit: '—à—Ç',
  material: '',
  color: '',
  stains: [],
  defects: [],
  riskFactors: [],
  appliedModifiers: [],
  basePrice: 0,
  finalPrice: 0,
  photos: [],
};

/**
 * –†–µ–∂–∏–º–∏ —Ä–æ–±–æ—Ç–∏ –ø—ñ–¥–≤—ñ–∑–∞—Ä–¥—É
 */
type WizardMode = 'add' | 'edit';

/**
 * –•—É–∫ –¥–ª—è –ø—ñ–¥–≤—ñ–∑–∞—Ä–¥—É –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
 * üßô‚Äç‚ôÇÔ∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä: Navigation + PricingCalculator + Form State
 */
export const useItemWizard = () => {
  // üè™ Zustand - –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
  const {
    isItemWizardActive,
    currentSubStep,
    completeItemWizard,
    addError,
    addWarning,
    markUnsavedChanges,
  } = useWizardStore();

  // üß≠ –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –ø–æ –ø—ñ–¥–≤—ñ–∑–∞—Ä–¥—É
  const navigation = useItemWizardNavigation();

  // üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ü—ñ–Ω
  const pricing = usePricingCalculator();

  // üìù –õ–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω —Ñ–æ—Ä–º–∏
  const [formState, setFormState] = useState<ItemWizardFormState>(initialFormState);
  const [mode, setMode] = useState<WizardMode>('add');
  const [editingItemId, setEditingItemId] = useState<string | null>(null);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);

  // üìù –ú–µ—Ç–æ–¥–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ñ–æ—Ä–º–æ—é
  const updateFormField = useCallback(
    <K extends keyof ItemWizardFormState>(field: K, value: ItemWizardFormState[K]) => {
      setFormState((prev) => ({ ...prev, [field]: value }));
      setHasUnsavedChanges(true);
      markUnsavedChanges();
    },
    [markUnsavedChanges]
  );

  const updateMultipleFields = useCallback(
    (updates: Partial<ItemWizardFormState>) => {
      setFormState((prev) => ({ ...prev, ...updates }));
      setHasUnsavedChanges(true);
      markUnsavedChanges();
    },
    [markUnsavedChanges]
  );

  const resetForm = useCallback(() => {
    setFormState(initialFormState);
    setHasUnsavedChanges(false);
    setEditingItemId(null);
    setMode('add');
  }, []);

  // üßÆ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ —Ü—ñ–Ω–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ñ–æ—Ä–º–∏
  useEffect(() => {
    if (formState.categoryId && formState.itemName && formState.quantity > 0) {
      const quickPrice = pricing.calculateQuickPrice({
        categoryId: formState.categoryId,
        itemName: formState.itemName,
        quantity: formState.quantity,
        material: formState.material,
        modifiers: formState.appliedModifiers,
      });

      if (quickPrice !== formState.finalPrice) {
        setFormState((prev) => ({ ...prev, finalPrice: quickPrice }));
      }
    }
  }, [
    formState.categoryId,
    formState.itemName,
    formState.quantity,
    formState.material,
    formState.appliedModifiers,
    pricing,
    formState.finalPrice,
  ]);

  // üßô‚Äç‚ôÇÔ∏è –ú–µ—Ç–æ–¥–∏ –ø—ñ–¥–≤—ñ–∑–∞—Ä–¥—É
  const startAddingItem = useCallback(() => {
    resetForm();
    setMode('add');
    navigation.navigateToFirstStep();
  }, [resetForm, navigation]);

  const startEditingItem = useCallback(
    (item: WizardOrderItem) => {
      // –ó–∞–ø–æ–≤–Ω—é—î–º–æ —Ñ–æ—Ä–º—É –¥–∞–Ω–∏–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
      setFormState({
        categoryId: item.categoryId || '',
        itemName: item.itemName || '',
        quantity: item.quantity || 1,
        unit: item.unit || '—à—Ç',
        material: item.material || '',
        color: item.color || '',
        filling: item.filling,
        wearLevel: item.wearLevel,
        stains: item.stains || [],
        defects: item.defects || [],
        riskFactors: item.riskFactors || [],
        defectNotes: item.defectNotes,
        basePrice: item.basePrice || 0,
        appliedModifiers: item.modifiers || [],
        finalPrice: item.finalPrice || 0,
        photos: item.photos || [],
      });

      setEditingItemId(item.id || null);
      setMode('edit');
      setHasUnsavedChanges(false);
      navigation.navigateToFirstStep();
    },
    [navigation]
  );

  const cancelWizard = useCallback(() => {
    if (hasUnsavedChanges) {
      // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
      addWarning('–ù–µ–∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∑–º—ñ–Ω–∏ –±—É–¥—É—Ç—å –≤—Ç—Ä–∞—á–µ–Ω—ñ');
    }
    resetForm();
    completeItemWizard();
  }, [hasUnsavedChanges, resetForm, completeItemWizard, addWarning]);

  const completeWizard = useCallback(() => {
    // –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞
    // –ë—É–¥–µ –≤–∏–∫–ª–∏–∫–∞–Ω–æ –≤ use-item-manager –ø—Ä–∏ —É—Å–ø—ñ—à–Ω–æ–º—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ
    resetForm();
    completeItemWizard();
  }, [resetForm, completeItemWizard]);

  // ‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫—Ä–æ–∫—ñ–≤
  const stepValidation = useMemo(() => {
    return {
      [ItemWizardStep.BASIC_INFO]: {
        isValid: !!(formState.categoryId && formState.itemName && formState.quantity > 0),
        errors: [
          !formState.categoryId && '–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é',
          !formState.itemName && '–û–±–µ—Ä—ñ—Ç—å –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è',
          formState.quantity <= 0 && '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0',
        ].filter(Boolean) as string[],
      },
      [ItemWizardStep.PROPERTIES]: {
        isValid: !!(formState.material && formState.color),
        errors: [
          !formState.material && '–û–±–µ—Ä—ñ—Ç—å –º–∞—Ç–µ—Ä—ñ–∞–ª',
          !formState.color && '–í–∫–∞–∂—ñ—Ç—å –∫–æ–ª—ñ—Ä',
        ].filter(Boolean) as string[],
      },
      [ItemWizardStep.DEFECTS]: {
        isValid: true, // –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –∫—Ä–æ–∫
        errors: [],
      },
      [ItemWizardStep.PRICING]: {
        isValid: formState.finalPrice > 0,
        errors: formState.finalPrice <= 0 ? ['–¶—ñ–Ω–∞ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0'] : [],
      },
      [ItemWizardStep.PHOTOS]: {
        isValid: true, // –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –∫—Ä–æ–∫
        errors: [],
      },
    };
  }, [formState]);

  // üìä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—Ç–∞–Ω –ø—ñ–¥–≤—ñ–∑–∞—Ä–¥—É
  const wizardInfo = useMemo(() => {
    const currentStepValidation = currentSubStep ? stepValidation[currentSubStep] : null;
    const canProceedFromCurrentStep = currentStepValidation?.isValid ?? false;
    const allStepsValid = Object.values(stepValidation).every((step) => step.isValid);

    return {
      isActive: isItemWizardActive,
      mode,
      editingItemId,
      hasUnsavedChanges,
      currentStepValidation,
      canProceedFromCurrentStep,
      canCompleteWizard: allStepsValid,
      completionProgress:
        (Object.values(stepValidation).filter((step) => step.isValid).length /
          Object.keys(stepValidation).length) *
        100,
    };
  }, [isItemWizardActive, mode, editingItemId, hasUnsavedChanges, currentSubStep, stepValidation]);

  // üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —É WizardOrderItem –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
  const convertToOrderItem = useCallback((): Partial<WizardOrderItem> => {
    return {
      categoryId: formState.categoryId,
      itemName: formState.itemName,
      quantity: formState.quantity,
      unit: formState.unit,
      material: formState.material,
      color: formState.color,
      filling: formState.filling,
      wearLevel: formState.wearLevel,
      stains: formState.stains,
      defects: formState.defects,
      riskFactors: formState.riskFactors,
      defectNotes: formState.defectNotes,
      basePrice: formState.basePrice,
      modifiers: formState.appliedModifiers,
      finalPrice: formState.finalPrice,
      photos: formState.photos,
    };
  }, [formState]);

  return {
    // üìù –°—Ç–∞–Ω —Ñ–æ—Ä–º–∏
    formState,
    mode,
    editingItemId,

    // üß≠ –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
    navigation,

    // üßÆ –¶—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è
    pricing,

    // üìä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—Ç–∞–Ω
    wizardInfo,
    stepValidation,

    // üßô‚Äç‚ôÇÔ∏è –ú–µ—Ç–æ–¥–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
    startAddingItem,
    startEditingItem,
    cancelWizard,
    completeWizard,

    // üìù –ú–µ—Ç–æ–¥–∏ —Ñ–æ—Ä–º–∏
    updateFormField,
    updateMultipleFields,
    resetForm,
    convertToOrderItem,
  };
};
