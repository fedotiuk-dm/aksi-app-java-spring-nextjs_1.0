/**
 * @fileoverview –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ñ–æ—Ç–æ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ (–∫—Ä–æ–∫ 2.5)
 * @module domain/wizard/hooks/stage-2
 */

import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { useCallback, useMemo, useState } from 'react';

import { PhotoManagementService } from '../../services/stage-2-item-management';
import { useWizardStore } from '../../store';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –¥—É–±–ª—é–≤–∞–Ω–Ω—è
const QUERY_KEY_ITEM_PHOTOS = ['item-photos'] as const;

/**
 * –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ñ–æ—Ç–æ
 */
interface PhotoInfo {
  id: string;
  filename: string;
  url: string;
  thumbnailUrl?: string;
  size: number;
  type: string;
  uploadedAt: Date;
}

/**
 * –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ñ–æ—Ç–æ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
 * üì∏ –ö–æ–º–ø–æ–∑–∏—Ü—ñ—è: TanStack Query + Zustand + PhotoManagementService
 */
export const useItemPhotos = () => {
  const queryClient = useQueryClient();

  // üè™ Zustand - –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
  const { addError, addWarning, markUnsavedChanges } = useWizardStore();

  // ‚öôÔ∏è –°–µ—Ä–≤—ñ—Å
  const photoService = useMemo(() => new PhotoManagementService(), []);

  // üì∏ –õ–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  const [uploadProgress, setUploadProgress] = useState<Record<string, number>>({});
  const [selectedFiles, setSelectedFiles] = useState<FileList | null>(null);

  // üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö —Ñ–æ—Ç–æ (—è–∫—â–æ —Ä–µ–¥–∞–≥—É—î–º–æ –ø—Ä–µ–¥–º–µ—Ç)
  const {
    data: photos = [],
    isLoading: isLoadingPhotos,
    error: photosError,
  } = useQuery({
    queryKey: QUERY_KEY_ITEM_PHOTOS,
    queryFn: () => photoService.getItemPhotos(''), // itemId –±—É–¥–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –¥–∏–Ω–∞–º—ñ—á–Ω–æ
    enabled: false, // –ê–∫—Ç–∏–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ
    staleTime: 300000, // 5 —Ö–≤–∏–ª–∏–Ω –∫–µ—à
    gcTime: 600000, // 10 —Ö–≤–∏–ª–∏–Ω –≤ –∫–µ—à—ñ
  });

  // üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ
  const uploadPhotoMutation = useMutation({
    mutationFn: ({ file, itemId }: { file: File; itemId?: string }) => {
      const uploadData = photoService.createPhotoUploadData(itemId || '', file);
      return photoService.uploadPhoto(uploadData);
    },
    onSuccess: (result, variables) => {
      if (result) {
        queryClient.invalidateQueries({ queryKey: QUERY_KEY_ITEM_PHOTOS });
        addWarning(`–§–æ—Ç–æ "${variables.file.name}" –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ`);
        markUnsavedChanges();

        // –û—á–∏—â—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –¥–ª—è —Ü—å–æ–≥–æ —Ñ–∞–π–ª—É
        setUploadProgress((prev) => {
          const updated = { ...prev };
          delete updated[variables.file.name];
          return updated;
        });
      }
    },
    onError: (error, variables) => {
      addError(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ "${variables.file.name}": ${error.message}`);

      // –û—á–∏—â—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –¥–ª—è —Ü—å–æ–≥–æ —Ñ–∞–π–ª—É
      setUploadProgress((prev) => {
        const updated = { ...prev };
        delete updated[variables.file.name];
        return updated;
      });
    },
  });

  // üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ
  const deletePhotoMutation = useMutation({
    mutationFn: ({ photoId, itemId }: { photoId: string; itemId?: string }) =>
      photoService.deletePhoto(itemId || '', photoId),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: QUERY_KEY_ITEM_PHOTOS });
      addWarning('–§–æ—Ç–æ –≤–∏–¥–∞–ª–µ–Ω–æ');
      markUnsavedChanges();
    },
    onError: (error) => {
      addError(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ: ${error.message}`);
    },
  });

  // üì∏ –ú–µ—Ç–æ–¥–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ñ–æ—Ç–æ
  const selectFiles = useCallback((files: FileList | null) => {
    setSelectedFiles(files);
  }, []);

  const uploadSelectedFiles = useCallback(
    async (itemId?: string) => {
      if (!selectedFiles || selectedFiles.length === 0) {
        addError('–û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª–∏ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
        return;
      }

      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–∞–π–ª—ñ–≤
      const validationResult = photoService.validatePhotoList(Array.from(selectedFiles));
      if (!validationResult.success) {
        addError(`–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ñ–∞–π–ª—ñ–≤: ${validationResult.error.errors[0]?.message}`);
        return;
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—ñ–≤
      if (!photoService.checkPhotoLimits(photos.length, selectedFiles.length)) {
        addError('–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π (–º–∞–∫—Å–∏–º—É–º 5 –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç)');
        return;
      }

      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª–∏ –ø–æ –æ–¥–Ω–æ–º—É
      for (const file of Array.from(selectedFiles)) {
        try {
          setUploadProgress((prev) => ({ ...prev, [file.name]: 0 }));
          await uploadPhotoMutation.mutateAsync({ file, itemId });
        } catch (error) {
          // –ü–æ–º–∏–ª–∫–∞ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞ –≤ onError –º—É—Ç–∞—Ü—ñ—ó
          break;
        }
      }

      // –û—á–∏—â—É—î–º–æ –≤–∏–±—Ä–∞–Ω—ñ —Ñ–∞–π–ª–∏
      setSelectedFiles(null);
    },
    [selectedFiles, photoService, uploadPhotoMutation, addError, photos.length]
  );

  const deletePhoto = useCallback(
    (photoId: string, itemId?: string) => {
      deletePhotoMutation.mutate({ photoId, itemId });
    },
    [deletePhotoMutation]
  );

  // üì∑ –ó–π–æ–º–∫–∞ –∑ –∫–∞–º–µ—Ä–∏ (Web API)
  const captureFromCamera = useCallback(async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        video: { facingMode: 'environment' }, // –ó–∞–¥–Ω—è –∫–∞–º–µ—Ä–∞ –Ω–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö
      });

      // –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—É video —Ç–∞ canvas –¥–ª—è –∑–π–æ–º–∫–∏
      // –ü–æ–∫–∏ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ mock
      addWarning('–§—É–Ω–∫—Ü—ñ—è –∑–π–æ–º–∫–∏ –∑ –∫–∞–º–µ—Ä–∏ –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞');

      // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø–æ—Ç—ñ–∫
      stream.getTracks().forEach((track) => track.stop());
    } catch (error) {
      addError('–ù–µ –≤–¥–∞—î—Ç—å—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –∫–∞–º–µ—Ä–∏');
    }
  }, [addError, addWarning]);

  // üìä –°—Ç–∞—Ç—É—Å —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
  const photoStatus = useMemo(() => {
    const totalPhotos = photos.length + (selectedFiles?.length || 0);
    const hasSelectedFiles = selectedFiles && selectedFiles.length > 0;
    const isUploading = uploadPhotoMutation.isPending;
    const maxPhotos = 5; // –û–±–º–µ–∂–µ–Ω–Ω—è –∑ —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è

    return {
      totalPhotos,
      hasSelectedFiles,
      isUploading,
      canUploadMore: totalPhotos < maxPhotos,
      photosRemaining: Math.max(0, maxPhotos - totalPhotos),
      isAtLimit: totalPhotos >= maxPhotos,
    };
  }, [photos.length, selectedFiles, uploadPhotoMutation.isPending]);

  return {
    // üì∏ –°—Ç–∞–Ω —Ñ–æ—Ç–æ
    photos,
    selectedFiles,
    uploadProgress,

    // üîÑ –°—Ç–∞–Ω–∏ –æ–ø–µ—Ä–∞—Ü—ñ–π
    isLoadingPhotos,
    isUploading: uploadPhotoMutation.isPending,
    isDeleting: deletePhotoMutation.isPending,

    // ‚ùå –ü–æ–º–∏–ª–∫–∏
    photosError,

    // üì∏ –ú–µ—Ç–æ–¥–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
    selectFiles,
    uploadSelectedFiles,
    deletePhoto,
    captureFromCamera,

    // üìä –°—Ç–∞—Ç—É—Å
    photoStatus,
  };
};
