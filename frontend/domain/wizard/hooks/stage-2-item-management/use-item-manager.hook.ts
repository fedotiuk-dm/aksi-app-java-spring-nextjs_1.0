/**
 * @fileoverview –•—É–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä CRUD –æ–ø–µ—Ä–∞—Ü—ñ–π
 * @module domain/wizard/hooks/stage-2
 */

import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useCallback, useMemo } from 'react';

import { ItemManagerService } from '../../services/stage-2-item-management';
import { useWizardStore } from '../../store';

import type { WizardOrderItem } from '../../adapters/order';

// üîë –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è query keys —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
const QUERY_KEY_ORDER_ITEMS = 'wizard-order-items';
const ERROR_NO_ORDER_ID = '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è';

/**
 * –°—Ç–∞–Ω —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞
 */
interface ItemEditingState {
  isEditing: boolean;
  editingItemId: string | null;
  editingItemData: WizardOrderItem | null;
}

/**
 * –•—É–∫ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
 * üóÇÔ∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä: TanStack Query + Zustand + ItemManagerService
 */
export const useItemManager = () => {
  const queryClient = useQueryClient();

  // üè™ Zustand - –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
  const {
    selectedClient,
    selectedBranch,
    isItemWizardActive,
    startItemWizard,
    completeItemWizard,
    addError,
    addWarning,
    markUnsavedChanges,
  } = useWizardStore();

  // ‚öôÔ∏è –°–µ—Ä–≤—ñ—Å
  const itemManagerService = useMemo(() => new ItemManagerService(), []);

  // üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ (—è–∫—â–æ —î —á–µ—Ä–Ω–µ—Ç–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è)
  const {
    data: items = [],
    isLoading: isLoadingItems,
    error: itemsError,
    refetch: refetchItems,
  } = useQuery({
    queryKey: [QUERY_KEY_ORDER_ITEMS, selectedClient?.id],
    queryFn: () => {
      if (!selectedClient?.id) return [];
      return itemManagerService.getOrderItems(selectedClient.id);
    },
    enabled: !!selectedClient?.id,
    staleTime: 30000, // 30 —Å–µ–∫—É–Ω–¥ –∫–µ—à
    gcTime: 300000, // 5 —Ö–≤–∏–ª–∏–Ω –≤ –∫–µ—à—ñ
  });

  // ‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
  const addItemMutation = useMutation({
    mutationFn: ({ orderId, itemData }: { orderId: string; itemData: Partial<WizardOrderItem> }) =>
      itemManagerService.addItem(orderId, itemData),
    onSuccess: (newItem) => {
      if (newItem) {
        queryClient.invalidateQueries({ queryKey: [QUERY_KEY_ORDER_ITEMS] });
        addWarning('–ü—Ä–µ–¥–º–µ—Ç –¥–æ–¥–∞–Ω–æ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
        markUnsavedChanges();
        completeItemWizard(); // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø—ñ–¥–≤—ñ–∑–∞—Ä–¥
      }
    },
    onError: (error) => {
      addError(`–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞: ${error.message}`);
    },
  });

  // ‚úèÔ∏è –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞
  const updateItemMutation = useMutation({
    mutationFn: ({
      orderId,
      itemId,
      itemData,
    }: {
      orderId: string;
      itemId: string;
      itemData: Partial<WizardOrderItem>;
    }) => itemManagerService.updateItem(orderId, itemId, itemData),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: [QUERY_KEY_ORDER_ITEMS] });
      addWarning('–ü—Ä–µ–¥–º–µ—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ');
      markUnsavedChanges();
      completeItemWizard(); // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø—ñ–¥–≤—ñ–∑–∞—Ä–¥
    },
    onError: (error) => {
      addError(`–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞: ${error.message}`);
    },
  });

  // üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞
  const deleteItemMutation = useMutation({
    mutationFn: ({ orderId, itemId }: { orderId: string; itemId: string }) =>
      itemManagerService.deleteItem(orderId, itemId),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: [QUERY_KEY_ORDER_ITEMS] });
      addWarning('–ü—Ä–µ–¥–º–µ—Ç –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
      markUnsavedChanges();
    },
    onError: (error) => {
      addError(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞: ${error.message}`);
    },
  });

  // üóÇÔ∏è –ú–µ—Ç–æ–¥–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
  const startAddingItem = useCallback(() => {
    startItemWizard();
  }, [startItemWizard]);

  const startEditingItem = useCallback(
    (item: WizardOrderItem) => {
      // TODO: Set editing item data in wizard store or local state
      startItemWizard();
    },
    [startItemWizard]
  );

  const cancelItemOperation = useCallback(() => {
    completeItemWizard();
  }, [completeItemWizard]);

  const addItem = useCallback(
    (itemData: Partial<WizardOrderItem>) => {
      const orderId = selectedClient?.id;
      if (!orderId) {
        addError(ERROR_NO_ORDER_ID);
        return;
      }
      addItemMutation.mutate({ orderId, itemData });
    },
    [addItemMutation, selectedClient?.id, addError]
  );

  const updateItem = useCallback(
    (itemId: string, itemData: Partial<WizardOrderItem>) => {
      const orderId = selectedClient?.id;
      if (!orderId) {
        addError(ERROR_NO_ORDER_ID);
        return;
      }
      updateItemMutation.mutate({ orderId, itemId, itemData });
    },
    [updateItemMutation, selectedClient?.id, addError]
  );

  const deleteItem = useCallback(
    (itemId: string) => {
      const orderId = selectedClient?.id;
      if (!orderId) {
        addError(ERROR_NO_ORDER_ID);
        return;
      }
      deleteItemMutation.mutate({ orderId, itemId });
    },
    [deleteItemMutation, selectedClient?.id, addError]
  );

  // üìä –†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const calculations = useMemo(() => {
    const totalItems = items.length;
    const totalAmount = items.reduce((sum, item) => sum + (item.finalPrice || 0), 0);
    const averageItemPrice = totalItems > 0 ? totalAmount / totalItems : 0;

    return {
      totalItems,
      totalAmount,
      averageItemPrice,
      hasMinimumItems: totalItems >= 1, // –ú—ñ–Ω—ñ–º—É–º 1 –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è
    };
  }, [items]);

  // ‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç–∞–Ω—É
  const validationState = useMemo(() => {
    const isValid = calculations.hasMinimumItems && !!selectedBranch;

    return {
      isValid,
      canProceed: isValid && !isItemWizardActive,
      errors: !calculations.hasMinimumItems
        ? ['–î–æ–¥–∞–π—Ç–µ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è']
        : !selectedBranch
          ? ['–û–±–µ—Ä—ñ—Ç—å —Ñ—ñ–ª—ñ—é –ø–µ—Ä–µ–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º –ø—Ä–µ–¥–º–µ—Ç—ñ–≤']
          : [],
      warnings: isItemWizardActive ? ['–ó–∞–≤–µ—Ä—à—ñ—Ç—å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è'] : [],
    };
  }, [calculations.hasMinimumItems, selectedBranch, isItemWizardActive]);

  return {
    // üìã –°—Ç–∞–Ω –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
    items,
    isLoadingItems,
    itemsError,

    // üîÑ –°—Ç–∞–Ω–∏ –æ–ø–µ—Ä–∞—Ü—ñ–π
    isAddingItem: addItemMutation.isPending,
    isUpdatingItem: updateItemMutation.isPending,
    isDeletingItem: deleteItemMutation.isPending,
    isItemWizardActive,

    // üóÇÔ∏è –ú–µ—Ç–æ–¥–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
    startAddingItem,
    startEditingItem,
    cancelItemOperation,
    addItem,
    updateItem,
    deleteItem,
    refetchItems,

    // üìä –†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏
    calculations,

    // ‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    validationState,
  };
};
