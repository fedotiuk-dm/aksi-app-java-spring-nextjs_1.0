/**
 * @fileoverview –ë–∞–∑–æ–≤–∏–π —Ö—É–∫ –¥–ª—è wizard –¥–æ–º–µ–Ω—É
 *
 * –ó–∞–±–µ–∑–ø–µ—á—É—î –∑–∞–≥–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –¥–ª—è –≤—Å—ñ—Ö —Ö—É–∫—ñ–≤ wizard:
 * - –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º domain
 * - –ó–∞–≥–∞–ª—å–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏ —Ç–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
 * - Base typing –¥–ª—è wizard –æ–ø–µ—Ä–∞—Ü—ñ–π
 */

import { useCallback } from 'react';

/**
 * üéØ –ë–∞–∑–æ–≤–∏–π —Ö—É–∫ –¥–ª—è wizard –¥–æ–º–µ–Ω—É
 */
export function useWizardBase() {
  const logInfo = useCallback((message: string, ...args: unknown[]) => {
    console.info(`[WizardDomain] ${message}`, ...args);
  }, []);

  const logError = useCallback((message: string, ...args: unknown[]) => {
    console.error(`[WizardDomain] ${message}`, ...args);
  }, []);

  const logWarning = useCallback((message: string, ...args: unknown[]) => {
    console.warn(`[WizardDomain] ${message}`, ...args);
  }, []);

  const logDebug = useCallback((message: string, ...args: unknown[]) => {
    console.debug(`[WizardDomain] ${message}`, ...args);
  }, []);

  return {
    logInfo,
    logError,
    logWarning,
    logDebug,
  };
}

/**
 * üéØ –¢–∏–ø–∏ –¥–ª—è wizard –æ–ø–µ—Ä–∞—Ü—ñ–π
 */
export interface WizardStepBase {
  isValid: boolean;
  errors: string[];
  warnings?: string[];
}

export interface WizardOperationState {
  isLoading: boolean;
  error: string | null;
  isSuccess: boolean;
}
