/**
 * @fileoverview –ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è wizard - —Ç—ñ–ª—å–∫–∏ –∫—Ä–æ–∫ –∑–∞ –∫—Ä–æ–∫–æ–º
 * @module domain/wizard/machines/wizard-navigation
 */

import { WizardStep, ItemWizardStep } from '../types';

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó
 */
export interface NavigationResult {
  success: boolean;
  currentStep: WizardStep;
  currentSubStep?: ItemWizardStep;
  canProceed: boolean;
  canGoBack: boolean;
}

/**
 * –ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è wizard
 * üö¶ –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –¢–Ü–õ–¨–ö–ò –∑–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –∫—Ä–æ–∫ –∑–∞ –∫—Ä–æ–∫–æ–º
 *
 * –ü—Ä–∏–Ω—Ü–∏–ø –º—ñ–Ω—ñ–º–∞–ª—ñ–∑–º—É: —Ç—ñ–ª—å–∫–∏ –ª–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤ –º—ñ–∂ –∫—Ä–æ–∫–∞–º–∏
 */
export class WizardNavigationService {
  /**
   * –ü–µ—Ä–µ—Ö–æ–¥–∏ –º—ñ–∂ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ –∫—Ä–æ–∫–∞–º–∏ wizard
   */
  static getNextStep(currentStep: WizardStep): WizardStep | null {
    const stepOrder: WizardStep[] = [
      WizardStep.CLIENT_SELECTION,
      WizardStep.BRANCH_SELECTION,
      WizardStep.ITEM_MANAGER,
      WizardStep.ORDER_PARAMETERS,
      WizardStep.CONFIRMATION,
    ];

    const currentIndex = stepOrder.indexOf(currentStep);
    const nextIndex = currentIndex + 1;

    return nextIndex < stepOrder.length ? stepOrder[nextIndex] : null;
  }

  static getPreviousStep(currentStep: WizardStep): WizardStep | null {
    const stepOrder: WizardStep[] = [
      WizardStep.CLIENT_SELECTION,
      WizardStep.BRANCH_SELECTION,
      WizardStep.ITEM_MANAGER,
      WizardStep.ORDER_PARAMETERS,
      WizardStep.CONFIRMATION,
    ];

    const currentIndex = stepOrder.indexOf(currentStep);
    const prevIndex = currentIndex - 1;

    return prevIndex >= 0 ? stepOrder[prevIndex] : null;
  }

  /**
   * –ü–µ—Ä–µ—Ö–æ–¥–∏ –º—ñ–∂ –ø—ñ–¥–∫—Ä–æ–∫–∞–º–∏ Item Wizard
   */
  static getNextSubStep(currentSubStep: ItemWizardStep): ItemWizardStep | null {
    const subStepOrder: ItemWizardStep[] = [
      ItemWizardStep.BASIC_INFO,
      ItemWizardStep.PROPERTIES,
      ItemWizardStep.DEFECTS,
      ItemWizardStep.PRICING,
      ItemWizardStep.PHOTOS,
    ];

    const currentIndex = subStepOrder.indexOf(currentSubStep);
    const nextIndex = currentIndex + 1;

    return nextIndex < subStepOrder.length ? subStepOrder[nextIndex] : null;
  }

  static getPreviousSubStep(currentSubStep: ItemWizardStep): ItemWizardStep | null {
    const subStepOrder: ItemWizardStep[] = [
      ItemWizardStep.BASIC_INFO,
      ItemWizardStep.PROPERTIES,
      ItemWizardStep.DEFECTS,
      ItemWizardStep.PRICING,
      ItemWizardStep.PHOTOS,
    ];

    const currentIndex = subStepOrder.indexOf(currentSubStep);
    const prevIndex = currentIndex - 1;

    return prevIndex >= 0 ? subStepOrder[prevIndex] : null;
  }

  /**
   * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–æ–≥—Ä–µ—Å—É wizard
   */
  static calculateProgress(currentStep: WizardStep): {
    percent: number;
    stepIndex: number;
    totalSteps: number;
  } {
    const mainSteps = [
      WizardStep.CLIENT_SELECTION,
      WizardStep.BRANCH_SELECTION,
      WizardStep.ITEM_MANAGER,
      WizardStep.ORDER_PARAMETERS,
      WizardStep.CONFIRMATION,
    ];

    const currentIndex = mainSteps.indexOf(currentStep);
    const totalSteps = mainSteps.length;
    const percent = Math.round((currentIndex / (totalSteps - 1)) * 100);

    return {
      percent,
      stepIndex: currentIndex,
      totalSteps,
    };
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –ø–µ—Ä–µ—Ö–æ–¥—É
   */
  static canNavigateNext(currentStep: WizardStep): boolean {
    return this.getNextStep(currentStep) !== null;
  }

  static canNavigateBack(currentStep: WizardStep): boolean {
    return this.getPreviousStep(currentStep) !== null;
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –∫—Ä–æ–∫—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∫—Ä–æ–∫—ñ–≤
   */
  static isStepAccessible(targetStep: WizardStep, completedSteps: WizardStep[]): boolean {
    const stepOrder: WizardStep[] = [
      WizardStep.CLIENT_SELECTION,
      WizardStep.BRANCH_SELECTION,
      WizardStep.ITEM_MANAGER,
      WizardStep.ORDER_PARAMETERS,
      WizardStep.CONFIRMATION,
    ];

    const targetIndex = stepOrder.indexOf(targetStep);
    if (targetIndex === -1) return false;

    // –ü–µ—Ä—à–∏–π –∫—Ä–æ–∫ –∑–∞–≤–∂–¥–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π
    if (targetIndex === 0) return true;

    // –ö—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏–π —è–∫—â–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π
    const previousStep = stepOrder[targetIndex - 1];
    return completedSteps.includes(previousStep);
  }
}
