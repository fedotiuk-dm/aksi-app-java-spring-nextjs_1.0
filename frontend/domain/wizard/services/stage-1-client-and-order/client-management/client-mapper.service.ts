import { z } from 'zod';

import { BaseWizardService } from '../../base.service';

import type { ClientFormData, ContactMethod } from './client-validation.service';
import type {
  ClientResponse,
  CreateClientRequest,
  UpdateClientRequest,
  ClientResponseCommunicationChannelsItem,
  ClientResponseSource,
} from '@/shared/api/generated/client';

// Zod —Å—Ö–µ–º–∏ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –º–∞–ø–ø—ñ–Ω–≥—É
const phoneNormalizationSchema = z.string().min(10, '–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 10 —Ü–∏—Ñ—Ä');

const structuredAddressMapSchema = z.object({
  street: z.string().optional(),
  city: z.string().optional(),
  postalCode: z.string().optional(),
  building: z.string().optional(),
  apartment: z.string().optional(),
});

const wizardClientSchema = z.object({
  id: z.string().min(1, "ID –∫–ª—ñ—î–Ω—Ç–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π"),
  firstName: z.string().min(1, "–Ü–º'—è –æ–±–æ–≤'—è–∑–∫–æ–≤–µ"),
  lastName: z.string().min(1, "–ü—Ä—ñ–∑–≤–∏—â–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ"),
  fullName: z.string().min(1, "–ü–æ–≤–Ω–µ —ñ–º'—è –æ–±–æ–≤'—è–∑–∫–æ–≤–µ"),
  phone: z.string().min(10, "–¢–µ–ª–µ—Ñ–æ–Ω –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π"),
  email: z.string().email().optional(),
  address: z.string().optional(),
  structuredAddress: z
    .object({
      street: z.string(),
      city: z.string(),
      zipCode: z.string().optional(),
      country: z.string(),
    })
    .optional(),
  communicationChannels: z.array(z.enum(['PHONE', 'SMS', 'VIBER'])),
  source: z.enum(['INSTAGRAM', 'GOOGLE', 'RECOMMENDATION', 'OTHER']).optional(),
  sourceDetails: z.string().optional(),
  createdAt: z.string().datetime(),
  updatedAt: z.string().datetime(),
  orderCount: z.number().int().min(0).optional(),
});

const createClientRequestSchema = z.object({
  firstName: z.string().min(1, "–Ü–º'—è –æ–±–æ–≤'—è–∑–∫–æ–≤–µ").trim(),
  lastName: z.string().min(1, "–ü—Ä—ñ–∑–≤–∏—â–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ").trim(),
  phone: z.string().min(10, "–¢–µ–ª–µ—Ñ–æ–Ω –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π"),
  email: z.string().email().optional().or(z.literal(undefined)),
  address: z.string().optional().or(z.literal(undefined)),
  structuredAddress: structuredAddressMapSchema.optional(),
  communicationChannels: z.array(z.enum(['PHONE', 'SMS', 'VIBER'])),
  source: z.enum(['INSTAGRAM', 'GOOGLE', 'RECOMMENDATION', 'OTHER']),
  sourceDetails: z.string().optional().or(z.literal(undefined)),
});

export type ValidatedWizardClient = z.infer<typeof wizardClientSchema>;
export type ValidatedCreateClientRequest = z.infer<typeof createClientRequestSchema>;

/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ (SOLID: SRP - —Ç—ñ–ª—å–∫–∏ mapping)
 *
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å:
 * - –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è Orval —Ç–∏–ø—ñ–≤ –≤ UI-–∑—Ä—É—á–Ω—ñ —Ç–∏–ø–∏
 * - –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è UI —Ç–∏–ø—ñ–≤ –≤ Orval —Ç–∏–ø–∏ –¥–ª—è API
 * - –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è API –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –≤ Wizard —Ç–∏–ø–∏
 * - –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
 * - –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –ø—Ä–∏ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—ñ (Zod)
 */

export interface InformationSource {
  type: ClientResponseSource;
  details?: string;
}

// üî• Proper —Ç–∏–ø –¥–ª—è Wizard Client –∑–∞–º—ñ—Å—Ç—å any
export interface WizardClient {
  id: string;
  firstName: string;
  lastName: string;
  fullName: string;
  phone: string;
  email?: string;
  address?: string;
  structuredAddress?: {
    street: string;
    city: string;
    zipCode?: string;
    country: string;
  };
  communicationChannels: ClientResponseCommunicationChannelsItem[];
  source?: ClientResponseSource;
  sourceDetails?: string;
  createdAt: string;
  updatedAt: string;
  orderCount?: number;
}

export class ClientMapperService extends BaseWizardService {
  protected readonly serviceName = 'ClientMapperService';

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç–∞ –∑ API –ø–µ—Ä–µ–¥ –º–∞–ø–ø—ñ–Ω–≥–æ–º
   */
  private validateApiResponse(data: unknown): ClientResponse {
    // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–ª—è API –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    if (!data || typeof data !== 'object') {
      this.logWarning('–ù–µ–≤–∞–ª—ñ–¥–Ω–∞ API –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–ª—ñ—î–Ω—Ç–∞');
      throw new Error('–ù–µ–≤–∞–ª—ñ–¥–Ω–∞ API –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–ª—ñ—î–Ω—Ç–∞');
    }
    return data as ClientResponse;
  }

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è CreateClientRequest –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é
   */
  private validateCreateRequest(data: unknown): ValidatedCreateClientRequest {
    const result = createClientRequestSchema.safeParse(data);
    if (!result.success) {
      this.logError('–ù–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞:', result.error.errors);
      throw new Error(`–í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞: ${result.error.errors[0]?.message}`);
    }
    return result.data;
  }

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó
   */
  private validatePhone(phone: unknown): string {
    const result = phoneNormalizationSchema.safeParse(phone);
    if (!result.success) {
      this.logWarning('–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó:', result.error.errors);
      return String(phone || '');
    }
    return result.data;
  }

  /**
   * –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è Orval —Ç–∏–ø—É –≤ UI-–∑—Ä—É—á–Ω–∏–π —Ç–∏–ø
   */
  mapApiToForm(clientResponse: ClientResponse): ClientFormData {
    const validatedResponse = this.validateApiResponse(clientResponse);

    // –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤–∏–π –æ–±'—î–∫—Ç –∑ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è ClientFormData
    const formData: ClientFormData = {
      firstName: validatedResponse.firstName || '',
      lastName: validatedResponse.lastName || '',
      phone: validatedResponse.phone || '',
      email: validatedResponse.email || undefined,
      address: validatedResponse.address || undefined,
      structuredAddress: validatedResponse.structuredAddress,
      communicationChannels: validatedResponse.communicationChannels,
      source: validatedResponse.source || 'RECOMMENDATION',
      sourceDetails: validatedResponse.sourceDetails,
      // informationSourceOther –∑–∞–ø–æ–≤–Ω—é—î—Ç—å—Å—è –æ–∫—Ä–µ–º–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ
    };

    return formData;
  }

  /**
   * –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è UI —Ñ–æ—Ä–º–∏ –≤ Orval —Ç–∏–ø –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
   */
  mapFormToCreateRequest(clientData: ClientFormData): CreateClientRequest {
    const mappedData = {
      firstName: clientData.firstName.trim(),
      lastName: clientData.lastName.trim(),
      phone: this.normalizePhoneNumber(clientData.phone),
      email: clientData.email?.trim() || undefined,
      address: clientData.address?.trim() || undefined,
      structuredAddress: clientData.structuredAddress,
      communicationChannels: clientData.communicationChannels || [],
      source: clientData.source || 'RECOMMENDATION',
      sourceDetails: clientData.informationSourceOther?.trim() || clientData.sourceDetails,
    };

    // –í–∞–ª—ñ–¥—É—î–º–æ –ø–µ—Ä–µ–¥ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º
    const validated = this.validateCreateRequest(mappedData);
    return validated as CreateClientRequest;
  }

  /**
   * –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è UI —Ñ–æ—Ä–º–∏ –≤ Orval —Ç–∏–ø –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
   */
  mapFormToUpdateRequest(clientData: ClientFormData): UpdateClientRequest {
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ –∂ –¥–∞–Ω—ñ —â–æ —ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    const createData = this.mapFormToCreateRequest(clientData);
    return createData as UpdateClientRequest;
  }

  /**
   * –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è ClientResponse –∑ API –≤ ClientSearchResult –¥–ª—è wizard
   */
  mapApiToWizardClient(client: ClientResponse): WizardClient {
    const validatedResponse = this.validateApiResponse(client);

    const mappedClient = {
      id: validatedResponse.id || '',
      firstName: validatedResponse.firstName || '',
      lastName: validatedResponse.lastName || '',
      fullName: this.formatClientFullName(validatedResponse),
      phone: validatedResponse.phone || '',
      email: validatedResponse.email,
      address: validatedResponse.address,
      structuredAddress: validatedResponse.structuredAddress
        ? {
            street: validatedResponse.structuredAddress.street || '',
            city: validatedResponse.structuredAddress.city || '',
            zipCode: validatedResponse.structuredAddress.postalCode,
            country: '–£–∫—Ä–∞—ó–Ω–∞',
          }
        : undefined,
      communicationChannels: validatedResponse.communicationChannels || [],
      source: validatedResponse.source,
      sourceDetails: validatedResponse.sourceDetails,
      createdAt: validatedResponse.createdAt || new Date().toISOString(),
      updatedAt: validatedResponse.updatedAt || new Date().toISOString(),
      orderCount: validatedResponse.orderCount,
    };

    // –í–∞–ª—ñ–¥—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞–ø–ø—ñ–Ω–≥—É
    const validationResult = wizardClientSchema.safeParse(mappedClient);
    if (!validationResult.success) {
      this.logWarning('–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞–ø–ø—ñ–Ω–≥—É WizardClient:', validationResult.error.errors);
      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —è–∫ —î, –∞–ª–µ –ª–æ–≥—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
    }

    return mappedClient;
  }

  /**
   * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞
   */
  formatClientFullName(client: ClientResponse): string {
    const validatedResponse = this.validateApiResponse(client);
    return (
      validatedResponse.fullName ||
      `${validatedResponse.lastName || ''} ${validatedResponse.firstName || ''}`.trim()
    );
  }

  // === –ü–†–ò–í–ê–¢–ù–Ü –ú–ï–¢–û–î–ò –ü–ï–†–ï–¢–í–û–†–ï–ù–ù–Ø ===

  /**
   * –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É
   */
  private normalizePhoneNumber(phone: string): string {
    const validPhone = this.validatePhone(phone);

    // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –Ω–µ-—Ü–∏—Ñ—Ä–æ–≤—ñ —Å–∏–º–≤–æ–ª–∏ –∫—Ä—ñ–º +
    let normalized = validPhone.replace(/[^\d+]/g, '');

    // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
    if (normalized.startsWith('0')) {
      normalized = '+38' + normalized;
    } else if (normalized.startsWith('380')) {
      normalized = '+' + normalized;
    } else if (!normalized.startsWith('+380')) {
      normalized = '+380' + normalized.replace(/^\+?/, '');
    }

    // –§—ñ–Ω–∞–ª—å–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    const finalValidation = z
      .string()
      .regex(/^\+380\d{9}$/, '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É')
      .safeParse(normalized);
    if (!finalValidation.success) {
      this.logWarning('–ù–µ–º–æ–∂–ª–∏–≤–æ –Ω–æ—Ä–º–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω:', finalValidation.error.errors);
      return validPhone; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª
    }

    return finalValidation.data;
  }

  /**
   * –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–æ—Å–æ–±—ñ–≤ –∑–≤'—è–∑–∫—É –∑ API —Ñ–æ—Ä–º–∞—Ç—É
   */
  private mapContactMethods(
    apiMethods?: ClientResponseCommunicationChannelsItem[]
  ): ContactMethod[] {
    if (!apiMethods) return [];

    // –í–∞–ª—ñ–¥—É—î–º–æ –∫–æ–∂–µ–Ω –º–µ—Ç–æ–¥
    const validMethods = apiMethods.filter((method) => {
      const validation = z.enum(['PHONE', 'SMS', 'VIBER']).safeParse(method);
      if (!validation.success) {
        this.logWarning("–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Å–ø–æ—Å—ñ–± –∑–≤'—è–∑–∫—É:", method);
        return false;
      }
      return true;
    });

    return validMethods.map((method) => ({
      type: method,
      value: '', // –ó–Ω–∞—á–µ–Ω–Ω—è –º–∞—î –≤—Å—Ç–∞–Ω–æ–≤–ª—é–≤–∞—Ç–∏—Å—è –æ–∫—Ä–µ–º–æ –∞–±–æ —á–µ—Ä–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤—É –ª–æ–≥—ñ–∫—É
      preferred: false,
    }));
  }

  /**
   * –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–æ—Å–æ–±—ñ–≤ –∑–≤'—è–∑–∫—É –≤ API —Ñ–æ—Ä–º–∞—Ç
   */
  private mapContactMethodsToApi(
    methods?: ContactMethod[]
  ): ClientResponseCommunicationChannelsItem[] {
    if (!methods) return [];

    // –í–∞–ª—ñ–¥—É—î–º–æ —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –º–µ—Ç–æ–¥–∏
    const validMethods = methods
      .map((method) => method.type)
      .filter((type) => {
        const validation = z.enum(['PHONE', 'SMS', 'VIBER']).safeParse(type);
        if (!validation.success) {
          this.logWarning("–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ç–∏–ø –∑–≤'—è–∑–∫—É –ø—Ä–∏ –º–∞–ø–ø—ñ–Ω–≥—É:", type);
          return false;
        }
        return true;
      });

    return validMethods as ClientResponseCommunicationChannelsItem[];
  }
}
