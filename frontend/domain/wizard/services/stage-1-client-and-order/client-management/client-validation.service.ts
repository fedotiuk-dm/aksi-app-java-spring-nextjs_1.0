import { z, ZodError } from 'zod';

import {
  createClientBody,
  updateClientBody,
  getClientById200Response,
} from '@/shared/api/generated/client/zod/aksiApi';

import { BaseWizardService } from '../../base.service';

import type {
  ClientResponseCommunicationChannelsItem,
  AddressDTO,
} from '@/shared/api/generated/client';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –¥—É–±–ª—é–≤–∞–Ω–Ω—è
const INVALID_PHONE_ERROR = '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É';
const INVALID_EMAIL_ERROR = '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email';
const OTHER_SOURCE_ERROR_MESSAGE = '–í–∫–∞–∂—ñ—Ç—å –¥–∂–µ—Ä–µ–ª–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –≤ –ø–æ–ª—ñ "–Ü–Ω—à–µ"';

// Zod —Å—Ö–µ–º–∏ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
const phoneValidationSchema = z
  .string()
  .regex(/^\+380[0-9]{9}$/, '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (+380XXXXXXXXX)');

const emailValidationSchema = z.string().email('–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π email –∞–¥—Ä–µ—Å—É');

const addressFieldSchema = z.object({
  city: z
    .string()
    .min(2, '–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏')
    .max(100, '–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –±—ñ–ª—å—à–µ 100 —Å–∏–º–≤–æ–ª—ñ–≤')
    .regex(/^[\p{L}\s.,\-']+$/u, '–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏')
    .optional(),
  street: z
    .string()
    .min(2, '–ù–∞–∑–≤–∞ –≤—É–ª–∏—Ü—ñ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏')
    .max(150, '–ù–∞–∑–≤–∞ –≤—É–ª–∏—Ü—ñ –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –±—ñ–ª—å—à–µ 150 —Å–∏–º–≤–æ–ª—ñ–≤')
    .regex(/^[\p{L}\s0-9.,\-']+$/u, '–ù–∞–∑–≤–∞ –≤—É–ª–∏—Ü—ñ –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏')
    .optional(),
  building: z.string().max(20, '–ù–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –±—ñ–ª—å—à–µ 20 —Å–∏–º–≤–æ–ª—ñ–≤').optional(),
  apartment: z.string().max(20, '–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏ –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –±—ñ–ª—å—à–µ 20 —Å–∏–º–≤–æ–ª—ñ–≤').optional(),
  postalCode: z
    .string()
    .max(10, '–ü–æ—à—Ç–æ–≤–∏–π –∫–æ–¥ –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –±—ñ–ª—å—à–µ 10 —Å–∏–º–≤–æ–ª—ñ–≤')
    .regex(/^[0-9\-]+$/, '–ü–æ—à—Ç–æ–≤–∏–π –∫–æ–¥ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏ —Ç–∞ –¥–µ—Ñ—ñ—Å–∏')
    .optional(),
  fullAddress: z
    .string()
    .min(5, '–ü–æ–≤–Ω–∞ –∞–¥—Ä–µ—Å–∞ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 5 —Å–∏–º–≤–æ–ª—ñ–≤')
    .max(500, '–ü–æ–≤–Ω–∞ –∞–¥—Ä–µ—Å–∞ –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –±—ñ–ª—å—à–µ 500 —Å–∏–º–≤–æ–ª—ñ–≤')
    .optional(),
});

const contactMethodSchema = z.object({
  type: z.enum(['PHONE', 'SMS', 'VIBER']),
  value: z.string().min(1, "–ó–Ω–∞—á–µ–Ω–Ω—è —Å–ø–æ—Å–æ–±—É –∑–≤'—è–∑–∫—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º"),
  preferred: z.boolean().optional(),
});

const contactMethodsArraySchema = z.array(contactMethodSchema).refine(
  (methods) => {
    const preferredMethods = methods.filter((m) => m.preferred);
    return preferredMethods.length <= 1;
  },
  {
    message: "–ú–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω –æ—Å–Ω–æ–≤–Ω–∏–π —Å–ø–æ—Å—ñ–± –∑–≤'—è–∑–∫—É",
  }
);

/**
 * –°–µ—Ä–≤—ñ—Å –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ (SOLID: SRP - —Ç—ñ–ª—å–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è)
 *
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å:
 * - –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç–∞ —á–µ—Ä–µ–∑ Orval + Zod —Å—Ö–µ–º–∏
 * - –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏—Ö –¥–∞–Ω–∏—Ö
 * - –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏—Ö –∞–¥—Ä–µ—Å
 * - –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å–ø–æ—Å–æ–±—ñ–≤ –∑–≤'—è–∑–∫—É
 * - –î–æ–¥–∞—Ç–∫–æ–≤–∞ –±—ñ–∑–Ω–µ—Å-–≤–∞–ª—ñ–¥–∞—Ü—ñ—è —á–µ—Ä–µ–∑ –≤–ª–∞—Å–Ω—ñ Zod —Å—Ö–µ–º–∏
 */

// === ZOD –°–•–ï–ú–ê –î–õ–Ø UI –§–û–†–ú–ò ===

/**
 * Zod —Å—Ö–µ–º–∞ –¥–ª—è —Ñ–æ—Ä–º–∏ –∫–ª—ñ—î–Ω—Ç–∞ (UI-friendly)
 * –û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ API —Å—Ö–µ–º—ñ –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è UI
 */
export const clientFormSchema = createClientBody
  .extend({
    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ UI –ø–æ–ª—è –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ —Ñ–æ—Ä–º–∏
    informationSourceOther: z.string().optional(),
  })
  .refine(
    (data) => {
      // –Ø–∫—â–æ –¥–∂–µ—Ä–µ–ª–æ "OTHER", —Ç–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ
      return !(data.source === 'OTHER' && !data.sourceDetails?.trim());
    },
    {
      message: OTHER_SOURCE_ERROR_MESSAGE,
      path: ['sourceDetails'],
    }
  );

// === –¢–ò–ü–ò ===

export interface ClientValidationResult {
  isValid: boolean;
  errors: string[];
  warnings?: string[];
}

export interface ContactMethod {
  type: ClientResponseCommunicationChannelsItem;
  value: string;
  preferred?: boolean;
}

// UI-–∑—Ä—É—á–Ω–∏–π —Ç–∏–ø –¥–ª—è —Ñ–æ—Ä–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ Zod —Å—Ö–µ–º
export type ClientFormData = z.infer<typeof clientFormSchema>;

export class ClientValidationService extends BaseWizardService {
  protected readonly serviceName = 'ClientValidationService';

  /**
   * üî• –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç–∞ —á–µ—Ä–µ–∑ Orval + Zod —Å—Ö–µ–º–∏
   */
  validateClientData(clientData: ClientFormData): ClientValidationResult {
    const errors: string[] = [];
    const warnings: string[] = [];

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —á–µ—Ä–µ–∑ Orval Zod —Å—Ö–µ–º—É
    const zodValidation = this.validateWithZodSchema(clientFormSchema, clientData);
    errors.push(...zodValidation.errors);

    // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –±—ñ–∑–Ω–µ—Å-–≤–∞–ª—ñ–¥–∞—Ü—ñ—è
    const businessValidation = this.performBusinessValidation(clientData);
    errors.push(...businessValidation.errors);
    warnings.push(...businessValidation.warnings);

    return {
      isValid: errors.length === 0,
      errors,
      warnings: warnings.length > 0 ? warnings : undefined,
    };
  }

  /**
   * üî• –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ —á–µ—Ä–µ–∑ Orval + Zod —Å—Ö–µ–º–∏
   */
  validateUpdateClientData(clientData: ClientFormData): ClientValidationResult {
    const errors: string[] = [];
    const warnings: string[] = [];

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —á–µ—Ä–µ–∑ Orval Zod —Å—Ö–µ–º—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    const zodValidation = this.validateWithZodSchema(updateClientBody, clientData);
    errors.push(...zodValidation.errors);

    // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –±—ñ–∑–Ω–µ—Å-–≤–∞–ª—ñ–¥–∞—Ü—ñ—è (—Ç–∞ –∂ —Å–∞–º–∞ —è–∫ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è)
    const businessValidation = this.performBusinessValidation(clientData);
    errors.push(...businessValidation.errors);
    warnings.push(...businessValidation.warnings);

    return {
      isValid: errors.length === 0,
      errors,
      warnings: warnings.length > 0 ? warnings : undefined,
    };
  }

  /**
   * üî• –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API —á–µ—Ä–µ–∑ Zod —Å—Ö–µ–º—É
   */
  validateClientResponse(responseData: unknown): ClientValidationResult {
    const errors: string[] = [];

    try {
      getClientById200Response.parse(responseData);
      return { isValid: true, errors: [] };
    } catch (zodError) {
      if (zodError instanceof ZodError) {
        zodError.errors.forEach((error) => {
          const field = error.path.join('.');
          errors.push(`API Response ${field}: ${error.message}`);
        });
      } else {
        errors.push('–ù–µ–≤—ñ—Ä–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞');
      }
    }

    return {
      isValid: false,
      errors,
    };
  }

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ—ó –∞–¥—Ä–µ—Å–∏
   */
  validateStructuredAddress(address: AddressDTO): ClientValidationResult {
    return this.validateStructuredAddressWithZod(address);
  }

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ—ó –∞–¥—Ä–µ—Å–∏ —á–µ—Ä–µ–∑ Zod —Å—Ö–µ–º–∏
   */
  private validateStructuredAddressWithZod(address: AddressDTO): ClientValidationResult {
    const errors: string[] = [];
    const warnings: string[] = [];

    try {
      addressFieldSchema.parse(address);
    } catch (zodError) {
      if (zodError instanceof ZodError) {
        zodError.errors.forEach((error) => {
          const field = error.path.join('.');
          errors.push(`–ê–¥—Ä–µ—Å–∞ ${field}: ${error.message}`);
        });
      } else {
        errors.push('–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ –∞–¥—Ä–µ—Å–∏');
      }
    }

    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
    const addressWarnings = this.getAddressWarnings(address);
    warnings.push(...addressWarnings);

    return {
      isValid: errors.length === 0,
      errors,
      warnings: warnings.length > 0 ? warnings : undefined,
    };
  }

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å–ø–æ—Å–æ–±—ñ–≤ –∑–≤'—è–∑–∫—É —á–µ—Ä–µ–∑ Zod
   */
  validateContactMethodsWithZod(methods: ContactMethod[]): ClientValidationResult {
    const errors: string[] = [];
    const warnings: string[] = [];

    try {
      contactMethodsArraySchema.parse(methods);
    } catch (zodError) {
      if (zodError instanceof ZodError) {
        zodError.errors.forEach((error) => {
          const field = error.path.join('.');
          errors.push(`–°–ø–æ—Å–æ–±–∏ –∑–≤'—è–∑–∫—É ${field}: ${error.message}`);
        });
      } else {
        errors.push("–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ —Å–ø–æ—Å–æ–±—ñ–≤ –∑–≤'—è–∑–∫—É");
      }
    }

    // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤
    methods.forEach((method, index) => {
      const phoneValidation = this.validatePhoneNumber(method.value);
      if (!phoneValidation.isValid) {
        errors.push(`–°–ø–æ—Å—ñ–± –∑–≤'—è–∑–∫—É ${index + 1}: ${phoneValidation.error}`);
      }
    });

    return {
      isValid: errors.length === 0,
      errors,
      warnings: warnings.length > 0 ? warnings : undefined,
    };
  }

  // === –ü–†–ò–í–ê–¢–ù–Ü –ú–ï–¢–û–î–ò –í–ê–õ–Ü–î–ê–¶–Ü–á ===

  /**
   * –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è —á–µ—Ä–µ–∑ Zod —Å—Ö–µ–º—É
   */
  private validateWithZodSchema(schema: z.ZodType, data: unknown): { errors: string[] } {
    const errors: string[] = [];

    try {
      schema.parse(data);
    } catch (zodError) {
      if (zodError instanceof ZodError) {
        zodError.errors.forEach((error) => {
          const field = error.path.join('.');
          errors.push(`${field}: ${error.message}`);
        });
      } else {
        errors.push('–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ —Ñ–æ—Ä–º–∏');
      }
    }

    return { errors };
  }

  /**
   * –î–æ–¥–∞—Ç–∫–æ–≤–∞ –±—ñ–∑–Ω–µ—Å-–≤–∞–ª—ñ–¥–∞—Ü—ñ—è
   */
  private performBusinessValidation(clientData: ClientFormData): {
    errors: string[];
    warnings: string[];
  } {
    const errors: string[] = [];
    const warnings: string[] = [];

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–µ–ª–µ—Ñ–æ–Ω—É
    const phoneValidation = this.validatePhoneNumber(clientData.phone);
    if (!phoneValidation.isValid) {
      errors.push(phoneValidation.error || INVALID_PHONE_ERROR);
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è email
    if (clientData.email?.trim()) {
      const emailValidation = this.validateEmail(clientData.email);
      if (!emailValidation.isValid) {
        errors.push(emailValidation.error || INVALID_EMAIL_ERROR);
      }
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∞–¥—Ä–µ—Å–∏
    if (clientData.structuredAddress) {
      const addressValidation = this.validateStructuredAddressWithZod(clientData.structuredAddress);
      errors.push(...addressValidation.errors);
      if (addressValidation.warnings) {
        warnings.push(...addressValidation.warnings);
      }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∂–µ—Ä–µ–ª–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
    if (clientData.source === 'OTHER' && !clientData.informationSourceOther?.trim()) {
      warnings.push(OTHER_SOURCE_ERROR_MESSAGE);
    }

    return { errors, warnings };
  }

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É —á–µ—Ä–µ–∑ Zod
   */
  private validatePhoneNumber(phone: string): { isValid: boolean; error?: string } {
    const normalized = this.normalizePhoneNumber(phone);

    const result = phoneValidationSchema.safeParse(normalized);
    if (!result.success) {
      this.logWarning('–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω:', result.error.errors);
      return {
        isValid: false,
        error: result.error.errors[0]?.message || '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É',
      };
    }

    return { isValid: true };
  }

  /**
   * –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É —á–µ—Ä–µ–∑ Zod
   */
  private normalizePhoneNumber(phone: string): string {
    const inputValidation = z.string().min(1).safeParse(phone);
    if (!inputValidation.success) {
      this.logWarning('–ü–æ—Ä–æ–∂–Ω—ñ–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó');
      return '';
    }

    // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –Ω–µ-—Ü–∏—Ñ—Ä–æ–≤—ñ —Å–∏–º–≤–æ–ª–∏ –∫—Ä—ñ–º +
    let normalized = inputValidation.data.replace(/[^\d+]/g, '');

    // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
    if (normalized.startsWith('0')) {
      normalized = '+38' + normalized;
    } else if (normalized.startsWith('380')) {
      normalized = '+' + normalized;
    } else if (!normalized.startsWith('+380')) {
      normalized = '+380' + normalized.replace(/^\+?/, '');
    }

    return normalized;
  }

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è email —á–µ—Ä–µ–∑ Zod
   */
  private validateEmail(email: string): { isValid: boolean; error?: string } {
    const result = emailValidationSchema.safeParse(email);
    if (!result.success) {
      this.logWarning('–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π email:', result.error.errors);
      return {
        isValid: false,
        error: result.error.errors[0]?.message || '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email',
      };
    }

    return { isValid: true };
  }

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–ª—è –ø–æ–≤–Ω–æ—ó –∞–¥—Ä–µ—Å–∏ —á–µ—Ä–µ–∑ Zod
   */
  private validateFullAddress(fullAddress?: string): string[] {
    if (!fullAddress) return [];

    const result = z
      .string()
      .min(5, '–ü–æ–≤–Ω–∞ –∞–¥—Ä–µ—Å–∞ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 5 —Å–∏–º–≤–æ–ª—ñ–≤')
      .max(500, '–ü–æ–≤–Ω–∞ –∞–¥—Ä–µ—Å–∞ –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –±—ñ–ª—å—à–µ 500 —Å–∏–º–≤–æ–ª—ñ–≤')
      .safeParse(fullAddress);

    if (!result.success) {
      this.logWarning('–ù–µ–≤–∞–ª—ñ–¥–Ω–∞ –ø–æ–≤–Ω–∞ –∞–¥—Ä–µ—Å–∞:', result.error.errors);
      return result.error.errors.map((e) => e.message);
    }

    return [];
  }

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–∫—Ä–µ–º–∏—Ö –ø–æ–ª—ñ–≤ –∞–¥—Ä–µ—Å–∏ —á–µ—Ä–µ–∑ Zod
   */
  private validateAddressFields(address: AddressDTO): string[] {
    const result = addressFieldSchema.safeParse(address);

    if (!result.success) {
      this.logWarning('–ù–µ–≤–∞–ª—ñ–¥–Ω—ñ –ø–æ–ª—è –∞–¥—Ä–µ—Å–∏:', result.error.errors);
      return result.error.errors.map((e) => `${e.path.join('.')}: ${e.message}`);
    }

    return [];
  }

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–ª—è –º—ñ—Å—Ç–∞ —á–µ—Ä–µ–∑ Zod
   */
  private validateCityField(city: string): string[] {
    const result = z
      .string()
      .min(2, '–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 2 –¥–æ 100 —Å–∏–º–≤–æ–ª—ñ–≤')
      .max(100, '–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 2 –¥–æ 100 —Å–∏–º–≤–æ–ª—ñ–≤')
      .regex(/^[\p{L}\s.,\-']+$/u, '–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏')
      .safeParse(city);

    if (!result.success) {
      this.logWarning('–ù–µ–≤–∞–ª—ñ–¥–Ω–µ –º—ñ—Å—Ç–æ:', result.error.errors);
      return result.error.errors.map((e) => e.message);
    }

    return [];
  }

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–ª—è –≤—É–ª–∏—Ü—ñ —á–µ—Ä–µ–∑ Zod
   */
  private validateStreetField(street: string): string[] {
    const result = z
      .string()
      .min(2, '–ù–∞–∑–≤–∞ –≤—É–ª–∏—Ü—ñ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 2 –¥–æ 150 —Å–∏–º–≤–æ–ª—ñ–≤')
      .max(150, '–ù–∞–∑–≤–∞ –≤—É–ª–∏—Ü—ñ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 2 –¥–æ 150 —Å–∏–º–≤–æ–ª—ñ–≤')
      .regex(/^[\p{L}\s0-9.,\-']+$/u, '–ù–∞–∑–≤–∞ –≤—É–ª–∏—Ü—ñ –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏')
      .safeParse(street);

    if (!result.success) {
      this.logWarning('–ù–µ–≤–∞–ª—ñ–¥–Ω–∞ –≤—É–ª–∏—Ü—è:', result.error.errors);
      return result.error.errors.map((e) => e.message);
    }

    return [];
  }

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ—à—Ç–æ–≤–æ–≥–æ –∫–æ–¥—É —á–µ—Ä–µ–∑ Zod
   */
  private validatePostalCode(postalCode: string): string[] {
    const result = z
      .string()
      .max(10, '–ü–æ—à—Ç–æ–≤–∏–π –∫–æ–¥ –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –±—ñ–ª—å—à–µ 10 —Å–∏–º–≤–æ–ª—ñ–≤')
      .regex(/^[0-9\-]+$/, '–ü–æ—à—Ç–æ–≤–∏–π –∫–æ–¥ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏ —Ç–∞ –¥–µ—Ñ—ñ—Å–∏')
      .safeParse(postalCode);

    if (!result.success) {
      this.logWarning('–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π –ø–æ—à—Ç–æ–≤–∏–π –∫–æ–¥:', result.error.errors);
      return result.error.errors.map((e) => e.message);
    }

    return [];
  }

  /**
   * –ó–±—ñ—Ä –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å –¥–ª—è –∞–¥—Ä–µ—Å–∏
   */
  private getAddressWarnings(address: AddressDTO): string[] {
    const warnings: string[] = [];

    if (address.city && !address.street) {
      warnings.push('–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∫–∞–∑–∞—Ç–∏ –≤—É–ª–∏—Ü—é');
    }

    if (address.street && !address.building) {
      warnings.push('–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∫–∞–∑–∞—Ç–∏ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É');
    }

    return warnings;
  }
}
