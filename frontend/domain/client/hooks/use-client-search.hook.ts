import { useCallback, useEffect } from 'react';

import { ClientResponse, ClientPageResponse } from '@/lib/api';

import { useDebounce } from './use-debounce.hook';
import { useClientSearchStore } from '../store/client-search.store';
import { CommunicationChannel, ClientSource } from '../types/client-enums';
import { Client } from '../types/client.types';


// üî• OpenAPI Integration: –ø—Ä—è–º–∏–π —ñ–º–ø–æ—Ä—Ç —è–∫ single source of truth

/**
 * –í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ —Ö—É–∫–∞ –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤
 */
interface UseClientSearchProps {
  initialSearchTerm?: string;
  debounceDelay?: number;
  autoSearch?: boolean;
  onResultsChange?: (results: Client[]) => void;
  onApiResponse?: (response: ClientPageResponse) => void; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø –∑ OpenAPI
}

/**
 * –•—É–∫ –¥–ª—è –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤
 *
 * DDD SOLID –ø—Ä–∏–Ω—Ü–∏–ø–∏:
 * - Single Responsibility: –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –¢–Ü–õ–¨–ö–ò –∑–∞ –ø–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤
 * - Open/Closed: —Ä–æ–∑—à–∏—Ä—é—î—Ç—å—Å—è —á–µ—Ä–µ–∑ props —Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É
 * - Dependency Inversion: –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –∞–±—Å—Ç—Ä–∞–∫—Ü—ñ–π (store, debounce)
 * - Interface Segregation: –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π, —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
 *
 * üî• OpenAPI —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è —è–∫ single source of truth:
 * - –í—Å—ñ –¥–∞–Ω—ñ –∑ lib/api —á–µ—Ä–µ–∑ ClientRepository
 * - ClientResponse ‚Üí Client —á–µ—Ä–µ–∑ ClientAdapter
 * - Type-safe –ø–æ—à—É–∫–æ–≤—ñ –∑–∞–ø–∏—Ç–∏ –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é
 * - –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—è –∑–≥—ñ–¥–Ω–æ API –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
 * - –ü—Ä—è–º–∏–π –¥–æ—Å—Ç—É–ø –¥–æ raw API response –¥–ª—è debugging
 */
export const useClientSearch = (props: UseClientSearchProps = {}) => {
  const {
    initialSearchTerm = '',
    debounceDelay = 500,
    autoSearch = true,
    onResultsChange,
    onApiResponse,
  } = props;

  const {
    searchTerm,
    results,
    isLoading,
    error,
    pagination,
    setSearchTerm,
    search,
    loadMore,
    clearSearch,
  } = useClientSearchStore();

  /**
   * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ—à—É–∫—É
   * Domain validation + OpenAPI integration
   */
  const performSearch = useCallback(
    async (query: string): Promise<void> => {
      const trimmedQuery = query.trim();

      // Domain validation rule: –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏ –¥–ª—è –ø–æ—à—É–∫—É
      if (trimmedQuery.length < 2) {
        clearSearch();
        return;
      }

      setSearchTerm(trimmedQuery);

      // üî• OpenAPI Integration: –≤–∏–∫–æ–Ω—É—î–º–æ –ø–æ—à—É–∫ —á–µ—Ä–µ–∑ store
      // Store –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î ClientRepository ‚Üí lib/api
      await search({ keyword: trimmedQuery, page: 0 });
    },
    [setSearchTerm, search, clearSearch]
  );

  /**
   * –í—ñ–¥–∫–ª–∞–¥–µ–Ω–∏–π –ø–æ—à—É–∫ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –¥–µ–±–∞—É–Ω—Å—É
   * Performance optimization –¥–ª—è UX
   */
  const {
    value: searchQuery,
    handleChange: setSearchQuery,
    isProcessing: isDebouncing,
  } = useDebounce(performSearch, debounceDelay);

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –ø–æ—à—É–∫–æ–≤–æ–≥–æ —Ç–µ—Ä–º—ñ–Ω—É
   * Lifecycle management
   */
  useEffect(() => {
    if (initialSearchTerm && autoSearch) {
      setSearchQuery(initialSearchTerm);
    }
  }, [initialSearchTerm, autoSearch, setSearchQuery]);

  /**
   * –í–∏–∫–ª–∏–∫ callback –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
   * Event notification pattern
   */
  useEffect(() => {
    if (onResultsChange) {
      onResultsChange(results);
    }
  }, [results, onResultsChange]);

  /**
   * üî• OpenAPI Integration: –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –¥–æ–º–µ–Ω–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–∞–∑–∞–¥ –≤ API —Ñ–æ—Ä–º–∞—Ç
   * –¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è callback onApiResponse
   */
  const getApiResponseFormat = useCallback((): ClientPageResponse | null => {
    if (results.length === 0 && pagination.totalElements === 0) return null;

    // –ú–∞–ø—ñ–Ω–≥ –¥–æ–º–µ–Ω–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤ –≤ API —Ñ–æ—Ä–º–∞—Ç
    const mapCommunicationChannelsToApi = (
      channels: CommunicationChannel[]
    ): ('PHONE' | 'SMS' | 'VIBER')[] => {
      const apiChannelMap: Record<CommunicationChannel, 'PHONE' | 'SMS' | 'VIBER' | null> = {
        [CommunicationChannel.PHONE]: 'PHONE',
        [CommunicationChannel.SMS]: 'SMS',
        [CommunicationChannel.VIBER]: 'VIBER',
        [CommunicationChannel.EMAIL]: null, // EMAIL –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤ API
        [CommunicationChannel.TELEGRAM]: null, // TELEGRAM –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤ API
      };

      return channels
        .map((channel) => apiChannelMap[channel])
        .filter((channel): channel is 'PHONE' | 'SMS' | 'VIBER' => channel !== null);
    };

    // –ú–∞–ø—ñ–Ω–≥ –¥–æ–º–µ–Ω–Ω–æ–≥–æ ClientSource –≤ API ClientResponse.source —Ñ–æ—Ä–º–∞—Ç
    const mapClientSourceToApi = (
      domainSource: ClientSource | undefined
    ): ClientResponse.source | undefined => {
      if (!domainSource) return undefined;

      const apiSourceMap: Record<ClientSource, ClientResponse.source> = {
        [ClientSource.INSTAGRAM]: ClientResponse.source.INSTAGRAM,
        [ClientSource.GOOGLE]: ClientResponse.source.GOOGLE,
        [ClientSource.RECOMMENDATION]: ClientResponse.source.RECOMMENDATION,
        [ClientSource.FACEBOOK]: ClientResponse.source.OTHER, // FACEBOOK –º–∞–ø–∏–º–æ –≤ OTHER
        [ClientSource.PASSING_BY]: ClientResponse.source.OTHER, // PASSING_BY –º–∞–ø–∏–º–æ –≤ OTHER
        [ClientSource.OTHER]: ClientResponse.source.OTHER,
      };

      return apiSourceMap[domainSource];
    };

    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –¥–æ–º–µ–Ω–Ω—ñ Client[] –Ω–∞–∑–∞–¥ –≤ ClientResponse[] –¥–ª—è API —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    const clientResponses: ClientResponse[] = results.map((client) => ({
      id: client.id,
      firstName: client.firstName,
      lastName: client.lastName,
      phone: client.phone,
      email: client.email || undefined,
      address: client.address || undefined,
      source: mapClientSourceToApi(client.source) || ClientResponse.source.OTHER,
      sourceDetails: client.sourceDetails || undefined,
      communicationChannels: mapCommunicationChannelsToApi(client.communicationChannels || []),
      createdAt: client.createdAt ? client.createdAt.toISOString() : undefined,
      updatedAt: client.updatedAt ? client.updatedAt.toISOString() : undefined,
    }));

    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–≥—ñ–¥–Ω–æ ClientPageResponse
    return {
      content: clientResponses,
      totalElements: pagination.totalElements,
      totalPages: pagination.totalPages,
      pageNumber: pagination.page, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ pageNumber –∑–∞–º—ñ—Å—Ç—å number
      pageSize: pagination.size,
      hasPrevious: pagination.page > 0,
      hasNext: pagination.hasMore,
    };
  }, [results, pagination]);

  /**
   * –í–∏–∫–ª–∏–∫ callback –¥–ª—è OpenAPI –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
   */
  useEffect(() => {
    if (onApiResponse && results.length > 0) {
      const apiResponse = getApiResponseFormat();
      if (apiResponse) {
        onApiResponse(apiResponse);
      }
    }
  }, [results, onApiResponse, getApiResponseFormat]);

  /**
   * –û–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
   * Pagination handling —á–µ—Ä–µ–∑ OpenAPI
   */
  const handlePageChange = useCallback(
    async (page: number) => {
      await search({ keyword: searchTerm, page });
    },
    [search, searchTerm]
  );

  /**
   * –û–±—Ä–æ–±–Ω–∏–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±—ñ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
   * Infinite scroll pattern –∑ OpenAPI –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
   */
  const handleLoadMore = useCallback(async () => {
    await loadMore();
  }, [loadMore]);

  /**
   * –û–±—Ä–æ–±–Ω–∏–∫ –æ—á–∏—â–µ–Ω–Ω—è –ø–æ—à—É–∫—É
   * State reset operation
   */
  const handleClear = useCallback(() => {
    clearSearch();
    setSearchQuery('');
  }, [clearSearch, setSearchQuery]);

  /**
   * –û–±—Ä–æ–±–Ω–∏–∫ –ø—Ä—è–º–æ–≥–æ –ø–æ—à—É–∫—É (–±–µ–∑ –¥–µ–±–∞—É–Ω—Å—É)
   * Immediate search for user actions
   */
  const handleDirectSearch = useCallback(
    async (query?: string) => {
      const searchKeyword = query !== undefined ? query : searchQuery;
      await performSearch(searchKeyword);
    },
    [performSearch, searchQuery]
  );

  return {
    // –î–∞–Ω—ñ –ø–æ—à—É–∫—É (Read-only –¥–ª—è UI)
    searchQuery,
    searchTerm,
    results, // Domain Client[] objects
    pagination,

    // –°—Ç–∞–Ω (Computed properties)
    isLoading: isLoading || isDebouncing,
    isDebouncing,
    error,
    isEmpty: results.length === 0 && !isLoading && searchTerm.length > 0,
    hasResults: results.length > 0,
    hasMore: pagination.hasMore,

    // –ú–µ—Ç–æ–¥–∏ (Write operations)
    setSearchQuery,
    handleDirectSearch,
    handlePageChange,
    handleLoadMore,
    handleClear,

    // üî• OpenAPI Integration: –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –º–µ—Ç–æ–¥–∏
    getApiResponseFormat, // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ API —Ñ–æ—Ä–º–∞—Ç
    getRawResults: () => results, // –ü—Ä—è–º–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –¥–æ–º–µ–Ω–Ω–∏—Ö –æ–±'—î–∫—Ç—ñ–≤

    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —É—Ç–∏–ª—ñ—Ç–∞—Ä–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
    canLoadMore: pagination.hasMore && !isLoading,
    totalResults: pagination.totalElements,
    currentPage: pagination.page,
    totalPages: pagination.totalPages,

    // Metadata
    searchType: 'client' as const,
    apiIntegration: 'lib/api' as const, // –ü–æ–∑–Ω–∞—á–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ OpenAPI
  };
};
