import { ClientResponse, CreateClientRequest, UpdateClientRequest } from '@/lib/api';

import { ClientEntity } from '../entities';
import { Client, CreateClientFormData, UpdateClientFormData } from '../types';
import { CommunicationChannel, ClientSource } from '../types/client-enums';

/**
 * –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ–∂ API —Ç–∏–ø–∞–º–∏ —Ç–∞ –¥–æ–º–µ–Ω–Ω–∏–º–∏ —Ç–∏–ø–∞–º–∏
 * –†–µ–∞–ª—ñ–∑—É—î Adapter Pattern —Ç–∞ Dependency Inversion Principle
 * –í–∏—Ä—ñ—à—É—î –ø—Ä–æ–±–ª–µ–º—É –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É —Ç–∏–ø—ñ–≤ –º—ñ–∂ API —Ç–∞ –¥–æ–º–µ–Ω–æ–º
 */
export class ClientAdapter {
  /**
   * –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î ClientResponse –∑ API –Ω–∞ –¥–æ–º–µ–Ω–Ω—É —Å—É—Ç–Ω—ñ—Å—Ç—å ClientEntity
   */
  static toDomainEntity(apiResponse: ClientResponse): ClientEntity {
    return new ClientEntity({
      id: apiResponse.id,
      firstName: apiResponse.firstName,
      lastName: apiResponse.lastName,
      phone: apiResponse.phone,
      email: apiResponse.email || undefined,
      address: apiResponse.address || undefined,
      structuredAddress: apiResponse.structuredAddress,
      source: this.adaptSourceToDomain(apiResponse.source),
      sourceDetails: apiResponse.sourceDetails || undefined,
      communicationChannels: this.adaptChannelsToDomain(apiResponse.communicationChannels),
      createdAt: apiResponse.createdAt ? new Date(apiResponse.createdAt) : undefined,
      updatedAt: apiResponse.updatedAt ? new Date(apiResponse.updatedAt) : undefined,
    });
  }

  /**
   * –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î ClientResponse –∑ API –Ω–∞ –¥–æ–º–µ–Ω–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å Client
   */
  static toDomain(apiResponse: ClientResponse): Client {
    return {
      id: apiResponse.id,
      firstName: apiResponse.firstName,
      lastName: apiResponse.lastName,
      fullName: `${apiResponse.firstName || ''} ${apiResponse.lastName || ''}`.trim(),
      phone: apiResponse.phone,
      email: apiResponse.email || undefined,
      address: apiResponse.address || undefined,
      structuredAddress: apiResponse.structuredAddress,
      source: this.adaptSourceToDomain(apiResponse.source),
      sourceDetails: apiResponse.sourceDetails || undefined,
      communicationChannels: this.adaptChannelsToDomain(apiResponse.communicationChannels),
      createdAt: apiResponse.createdAt ? new Date(apiResponse.createdAt) : undefined,
      updatedAt: apiResponse.updatedAt ? new Date(apiResponse.updatedAt) : undefined,
    };
  }

  /**
   * –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î –¥–æ–º–µ–Ω–Ω—É —Å—É—Ç–Ω—ñ—Å—Ç—å ClientEntity –Ω–∞ ClientResponse –¥–ª—è API
   */
  static toApiResponse(entity: ClientEntity): Partial<ClientResponse> {
    return {
      id: entity.id || '',
      firstName: entity.firstName || '',
      lastName: entity.lastName || '',
      phone: entity.phone || '',
      email: entity.email,
      address: entity.address,
      structuredAddress: entity.structuredAddress,
      source: this.adaptSourceToApi(entity.source),
      sourceDetails: entity.sourceDetails,
      communicationChannels: this.adaptChannelsToApi(entity.communicationChannels),
      createdAt: entity.createdAt ? String(entity.createdAt) : undefined,
      updatedAt: entity.updatedAt ? String(entity.updatedAt) : undefined,
    };
  }

  /**
   * –ê–¥–∞–ø—Ç—É—î source –∑ API –¥–æ –¥–æ–º–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø—É
   * –í–∏—Ä—ñ—à—É—î –ø—Ä–æ–±–ª–µ–º—É –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É —Ç–∏–ø—ñ–≤ –µ–Ω—É–º—ñ–≤
   */
  private static adaptSourceToDomain(
    apiSource: CreateClientRequest.source | string | undefined | null
  ): ClientSource | undefined {
    if (!apiSource) return undefined;

    // –ë–µ–∑–ø–µ—á–Ω–∏–π –º–∞–ø—ñ–Ω–≥ –º—ñ–∂ API –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ —Ç–∞ –¥–æ–º–µ–Ω–Ω–∏–º–∏ enum
    const sourceMap: Record<string, ClientSource> = {
      INSTAGRAM: ClientSource.INSTAGRAM,
      FACEBOOK: ClientSource.FACEBOOK,
      GOOGLE: ClientSource.GOOGLE,
      RECOMMENDATION: ClientSource.RECOMMENDATION,
      PASSING_BY: ClientSource.PASSING_BY,
      OTHER: ClientSource.OTHER,
    };

    return sourceMap[String(apiSource)] || ClientSource.OTHER;
  }

  /**
   * –ê–¥–∞–ø—Ç—É—î source –∑ –¥–æ–º–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø—É –¥–æ API
   */
  private static adaptSourceToApi(
    domainSource: ClientSource | undefined
  ): CreateClientRequest.source | undefined {
    if (!domainSource) return undefined;

    // –ú–∞–ø–∏–º–æ –¥–æ–º–µ–Ω–Ω—ñ enum –∑–Ω–∞—á–µ–Ω–Ω—è –≤ API enum –∑–Ω–∞—á–µ–Ω–Ω—è
    const sourceApiMap: Record<ClientSource, CreateClientRequest.source> = {
      [ClientSource.INSTAGRAM]: CreateClientRequest.source.INSTAGRAM,
      [ClientSource.GOOGLE]: CreateClientRequest.source.GOOGLE,
      [ClientSource.RECOMMENDATION]: CreateClientRequest.source.RECOMMENDATION,
      [ClientSource.FACEBOOK]: CreateClientRequest.source.OTHER, // FACEBOOK -> OTHER
      [ClientSource.PASSING_BY]: CreateClientRequest.source.OTHER, // PASSING_BY -> OTHER
      [ClientSource.OTHER]: CreateClientRequest.source.OTHER,
    };

    return sourceApiMap[domainSource];
  }

  /**
   * –ê–¥–∞–ø—Ç—É—î –∫–∞–Ω–∞–ª–∏ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó –∑ API –¥–æ –¥–æ–º–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø—É
   * –í–∏—Ä—ñ—à—É—î –ø—Ä–æ–±–ª–µ–º—É –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É —Ç–∏–ø—ñ–≤ –µ–Ω—É–º—ñ–≤
   */
  private static adaptChannelsToDomain(
    apiChannels: Array<'PHONE' | 'SMS' | 'VIBER'> | undefined | null
  ): CommunicationChannel[] {
    if (!apiChannels || !Array.isArray(apiChannels)) return [];

    const channelMap: Record<string, CommunicationChannel> = {
      PHONE: CommunicationChannel.PHONE,
      EMAIL: CommunicationChannel.EMAIL,
      SMS: CommunicationChannel.SMS,
      VIBER: CommunicationChannel.VIBER,
      TELEGRAM: CommunicationChannel.TELEGRAM,
    };

    return apiChannels
      .map((channel) => channelMap[String(channel)])
      .filter((channel): channel is CommunicationChannel => channel !== undefined);
  }

  /**
   * –ê–¥–∞–ø—Ç—É—î –∫–∞–Ω–∞–ª–∏ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó –∑ –¥–æ–º–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø—É –¥–æ API
   */
  private static adaptChannelsToApi(
    domainChannels: CommunicationChannel[] | undefined
  ): Array<'PHONE' | 'SMS' | 'VIBER'> {
    if (!domainChannels) return [];
    return domainChannels
      .filter(
        (channel): channel is CommunicationChannel =>
          channel === CommunicationChannel.PHONE ||
          channel === CommunicationChannel.SMS ||
          channel === CommunicationChannel.VIBER
      )
      .map((channel) => channel as 'PHONE' | 'SMS' | 'VIBER');
  }

  /**
   * –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î –º–∞—Å–∏–≤ ClientResponse –Ω–∞ –º–∞—Å–∏–≤ ClientEntity
   */
  static toDomainEntities(apiResponses: ClientResponse[]): ClientEntity[] {
    return apiResponses.map((response) => this.toDomainEntity(response));
  }

  /**
   * –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î –º–∞—Å–∏–≤ ClientResponse –Ω–∞ –º–∞—Å–∏–≤ –¥–æ–º–µ–Ω–Ω–∏—Ö —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ–≤ Client
   */
  static toDomainClients(apiResponses: ClientResponse[]): Client[] {
    return apiResponses.map((response) => this.toDomain(response));
  }

  /**
   * –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î CreateClientFormData –≤ CreateClientRequest –¥–ª—è API
   */
  static toCreateRequest(formData: CreateClientFormData): CreateClientRequest {
    return {
      lastName: formData.lastName,
      firstName: formData.firstName,
      phone: formData.phone,
      email: formData.email,
      address: formData.address,
      structuredAddress: formData.structuredAddress,
      communicationChannels: this.adaptChannelsToApi(formData.communicationChannels),
      source: this.adaptSourceToApi(formData.source),
      sourceDetails: formData.sourceDetails,
    };
  }

  /**
   * –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î UpdateClientFormData –≤ UpdateClientRequest –¥–ª—è API
   */
  static toUpdateRequest(formData: UpdateClientFormData): UpdateClientRequest {
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤–∏–π –º–µ—Ç–æ–¥ —ñ –∞–¥–∞–ø—Ç—É—î–º–æ —Ç–∏–ø
    const result = this.toCreateRequest(formData) as UpdateClientRequest;

    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —â–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è –Ω–∞ –±–µ–∫–µ–Ω–¥
    console.log('üîç ClientAdapter.toUpdateRequest:', {
      original: formData,
      structuredAddress: formData.structuredAddress,
      result: result,
      resultStructuredAddress: result.structuredAddress,
    });

    return result;
  }
}
