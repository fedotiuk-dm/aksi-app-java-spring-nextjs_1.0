/**
 * –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è Item Wizard –ø—ñ–¥–≤—ñ–∑–∞—Ä–¥–æ–º
 * –Ü–Ω—Ç–µ–≥—Ä—É—î Item Wizard —Å—Ç–∞–Ω –∑ React —Ç–∞ –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–æ—é
 */

import { useCallback, useMemo } from 'react';

import { useWizard, WizardStep } from '@/domain/wizard';

import { useOrderItems } from './use-order-items.hook';
import { useItemWizardStore, type ItemWizardData } from '../store';

import type { OrderItem } from '../types';

// ItemWizardData —Ç–µ–ø–µ—Ä —ñ–º–ø–æ—Ä—Ç—É—î—Ç—å—Å—è –∑ store

/**
 * –°—Ç–∞–Ω –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—ñ–¥–∫—Ä–æ–∫—É
 */
interface ItemWizardValidation {
  basicInfo: {
    isValid: boolean;
    errors: Record<string, string>;
  };
  properties: {
    isValid: boolean;
    errors: Record<string, string>;
  };
  defectsStains: {
    isValid: boolean;
    errors: Record<string, string>;
  };
  priceCalculator: {
    isValid: boolean;
    errors: Record<string, string>;
  };
  photoDocumentation: {
    isValid: boolean;
    errors: Record<string, string>;
  };
}

/**
 * –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Item Wizard —Ö—É–∫–∞
 */
interface UseItemWizardConfig {
  orderId?: string;
  editingItemId?: string;
  autoSave?: boolean;
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó Item Wizard
 */
export interface ItemWizardOperationResult {
  success: boolean;
  item?: OrderItem;
  error?: string;
}

/**
 * –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è Item Wizard –ø—ñ–¥–≤—ñ–∑–∞—Ä–¥–æ–º
 */
export const useItemWizard = (config: UseItemWizardConfig = {}) => {
  const { orderId, editingItemId, autoSave: _autoSave = false } = config;
  const wizard = useWizard();

  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ useOrderItems –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ (TanStack Query –º—É—Ç–∞—Ü—ñ—ó)
  const { addItem, updateItem } = useOrderItems({ orderId });

  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Zustand store –∑–∞–º—ñ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
  const {
    itemData,
    editingItemId: storeEditingItemId,
    updateBasicInfo: storeUpdateBasicInfo,
    updateProperties: storeUpdateProperties,
    updateDefectsStains: storeUpdateDefectsStains,
    updatePriceModifiers: storeUpdatePriceModifiers,
    updatePhotos: storeUpdatePhotos,
    resetItemData,
  } = useItemWizardStore();

  // === COMPUTED VALUES ===

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ä–µ–¥–∞–≥—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –ø—Ä–µ–¥–º–µ—Ç
   */
  const isEditingComputed = useMemo(
    () => Boolean(editingItemId || storeEditingItemId),
    [editingItemId, storeEditingItemId]
  );

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ Item Wizard –∞–∫—Ç–∏–≤–Ω–∏–π
   */
  const isActive = useMemo(() => wizard.isItemWizardActive, [wizard.isItemWizardActive]);

  /**
   * –ü–æ—Ç–æ—á–Ω–∏–π –ø—ñ–¥–∫—Ä–æ–∫ Item Wizard
   */
  const currentSubStep = useMemo(() => {
    if (!isActive) return null;
    return wizard.currentStep;
  }, [isActive, wizard.currentStep]);

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –ø—Ä–µ–¥–º–µ—Ç–∞
   */
  const validation: ItemWizardValidation = useMemo(() => {
    return {
      basicInfo: validateBasicInfo(itemData),
      properties: validateProperties(itemData),
      defectsStains: validateDefectsStains(itemData),
      priceCalculator: validatePriceCalculator(itemData),
      photoDocumentation: validatePhotoDocumentation(itemData),
    };
  }, [itemData]);

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø—ñ–¥–∫—Ä–æ–∫—É
   */
  const canProceed = useMemo(() => {
    switch (currentSubStep) {
      case WizardStep.ITEM_BASIC_INFO:
        return validation.basicInfo.isValid;
      case WizardStep.ITEM_PROPERTIES:
        return validation.properties.isValid;
      case WizardStep.DEFECTS_STAINS:
        return validation.defectsStains.isValid;
      case WizardStep.PRICE_CALCULATOR:
        return validation.priceCalculator.isValid;
      case WizardStep.PHOTO_DOCUMENTATION:
        return validation.photoDocumentation.isValid;
      default:
        return false;
    }
  }, [currentSubStep, validation]);

  /**
   * –ó–∞–≥–∞–ª—å–Ω–∞ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
   */
  const isReadyToSave = useMemo(() => {
    return (
      validation.basicInfo.isValid &&
      validation.properties.isValid &&
      validation.defectsStains.isValid &&
      validation.priceCalculator.isValid &&
      validation.photoDocumentation.isValid
    );
  }, [validation]);

  // === –ü–£–ë–õ–Ü–ß–ù–Ü –ú–ï–¢–û–î–ò ===

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó (–ø—ñ–¥–∫—Ä–æ–∫ 2.1)
   */
  const updateBasicInfo = useCallback(
    (
      updates: Partial<
        Pick<
          ItemWizardData,
          'name' | 'category' | 'quantity' | 'unitOfMeasure' | 'unitPrice' | 'description'
        >
      >
    ) => {
      console.log('üîç updateBasicInfo –≤–∏–∫–ª–∏–∫–∞–Ω–æ –∑ updates:', updates);
      console.log('üîç –ø–æ—Ç–æ—á–Ω–∏–π itemData –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º:', itemData);
      storeUpdateBasicInfo(updates);

      // –õ–æ–≥—É—î–º–æ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (–º–æ–∂–ª–∏–≤–æ –±—É–¥–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
      setTimeout(() => {
        console.log('üîç itemData –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', itemData);
      }, 0);
    },
    [storeUpdateBasicInfo, itemData]
  );

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–ø—ñ–¥–∫—Ä–æ–∫ 2.2)
   */
  const updateProperties = useCallback(
    (
      updates: Partial<
        Pick<
          ItemWizardData,
          'material' | 'color' | 'fillerType' | 'fillerCompressed' | 'wearDegree'
        >
      >
    ) => {
      console.log('üîç updateProperties –≤–∏–∫–ª–∏–∫–∞–Ω–æ –∑ updates:', updates);
      console.log('üîç –ø–æ—Ç–æ—á–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –¥–ª—è –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤:', itemData.category);
      storeUpdateProperties(updates);
    },
    [storeUpdateProperties, itemData.category]
  );

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–µ—Ñ–µ–∫—Ç—ñ–≤ —Ç–∞ –ø–ª—è–º (–ø—ñ–¥–∫—Ä–æ–∫ 2.3)
   */
  const updateDefectsStains = useCallback(
    (
      updates: Partial<
        Pick<
          ItemWizardData,
          'defects' | 'stains' | 'defectsNotes' | 'noWarranty' | 'noWarrantyReason'
        >
      >
    ) => {
      storeUpdateDefectsStains(updates);
    },
    [storeUpdateDefectsStains]
  );

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä—ñ–≤ —Ü—ñ–Ω–∏ (–ø—ñ–¥–∫—Ä–æ–∫ 2.4)
   */
  const updatePriceModifiers = useCallback(
    (
      updates: Partial<
        Pick<
          ItemWizardData,
          'childSized' | 'manualCleaning' | 'heavilySoiled' | 'heavilySoiledPercentage'
        >
      >
    ) => {
      storeUpdatePriceModifiers(updates);
    },
    [storeUpdatePriceModifiers]
  );

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ (–ø—ñ–¥–∫—Ä–æ–∫ 2.5)
   */
  const updatePhotos = useCallback(
    (updates: Partial<Pick<ItemWizardData, 'photos' | 'hasPhotos'>>) => {
      storeUpdatePhotos(updates);
    },
    [storeUpdatePhotos]
  );

  /**
   * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ü—ñ–Ω–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
   */
  const calculatePrice = useCallback(async () => {
    try {
      // TODO: –î–æ–¥–∞—Ç–∏ –º–µ—Ç–æ–¥ calculatePrice –≤ useOrderItems –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –æ–∫—Ä–µ–º–∏–π —Ö—É–∫
      console.log('calculatePrice –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ useOrderItems');
      return null;
    } catch (error) {
      console.error('Error calculating price:', error);
      return null;
    }
  }, [itemData]);

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞
   */
  const saveItem = useCallback(async (): Promise<ItemWizardOperationResult> => {
    console.log('üîç saveItem –≤–∏–∫–ª–∏–∫–∞–Ω–æ. –°—Ç–∞–Ω –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º:', {
      orderId,
      isReadyToSave,
      itemData,
      validation,
    });

    if (!orderId) {
      console.error('‚ùå Order ID –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      return { success: false, error: "Order ID –æ–±–æ–≤'—è–∑–∫–æ–≤–µ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞" };
    }

    if (!isReadyToSave) {
      console.error('‚ùå –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–µ –ø—Ä–æ–π—à–ª–∞. –î–µ—Ç–∞–ª—ñ:');
      console.error('basicInfo:', validation.basicInfo);
      console.error('properties:', validation.properties);
      console.error('defectsStains:', validation.defectsStains);
      console.error('priceCalculator:', validation.priceCalculator);
      console.error('photoDocumentation:', validation.photoDocumentation);
      console.error('itemData:', itemData);
      return { success: false, error: '–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –≥–æ—Ç–æ–≤–∏–π –¥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è - —î –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó' };
    }

    try {
      console.log('‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ, –ø–æ—á–∏–Ω–∞—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è...');

      // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ ItemWizardData –≤ OrderItem
      const orderItem: Partial<OrderItem> = {
        id: editingItemId,
        orderId,
        name: itemData.name,
        category: itemData.category,
        quantity: itemData.quantity,
        unitOfMeasure: itemData.unitOfMeasure,
        unitPrice: itemData.unitPrice,
        description: itemData.description,
        material: itemData.material,
        color: itemData.color,
        // TODO: –¥–æ–¥–∞—Ç–∏ —ñ–Ω—à—ñ –ø–æ–ª—è
      };

      console.log('üîç –ü—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–π orderItem –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', orderItem);

      let result;
      if (isEditingComputed) {
        if (!editingItemId) {
          console.error('‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π ID –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è');
          return { success: false, error: '–í—ñ–¥—Å—É—Ç–Ω—ñ–π ID –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è' };
        }
        console.log('üìù –†–µ–¥–∞–≥—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –ø—Ä–µ–¥–º–µ—Ç –∑ ID:', editingItemId);
        result = await updateItem(editingItemId, orderItem);
      } else {
        console.log('‚ûï –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –ø—Ä–µ–¥–º–µ—Ç –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', orderId);
        result = await addItem(orderItem);
      }

      console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ useOrderItems:', result);

      if (result.success) {
        console.log('‚úÖ –ü—Ä–µ–¥–º–µ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ —á–µ—Ä–µ–∑ useOrderItems –º—É—Ç–∞—Ü—ñ—é');
        console.log('‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç:', result.item);

        // –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        console.log('üßπ –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω Item Wizard –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
        resetItemData();
        return { success: true, item: result.item };
      } else {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ useOrderItems:', result.error);
        return { success: false, error: result.error };
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è';
      console.error('‚ùå Exception –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∞:', error);
      return { success: false, error: errorMessage };
    }
  }, [
    orderId,
    editingItemId,
    isEditingComputed,
    isReadyToSave,
    itemData,
    validation,
    addItem,
    updateItem,
    resetItemData,
  ]);

  /**
   * –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
   */
  const cancelWizard = useCallback(() => {
    resetItemData();
  }, [resetItemData]);

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
   */
  const loadItemForEditing = useCallback(
    async (itemId: string) => {
      if (!orderId) return;

      try {
        // TODO: –î–æ–¥–∞—Ç–∏ –º–µ—Ç–æ–¥ getOrderItem –≤ useOrderItems –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ findItemById
        console.log('loadItemForEditing –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ useOrderItems');
        // –¢–∏–º—á–∞—Å–æ–≤–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ findItemById —è–∫—â–æ –ø—Ä–µ–¥–º–µ—Ç –≤–∂–µ –≤ –∫–µ—à—ñ
        // const item = findItemById(itemId);
        // if (item) {
        //   startEditing(itemId, {
        //     // –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ OrderItem –≤ ItemWizardData
        //   });
        // }
      } catch (error) {
        console.error('Error loading item for editing:', error);
      }
    },
    [orderId]
  );

  return {
    // === –î–ê–ù–Ü ===
    itemData,
    validation,
    currentSubStep,

    // === –°–¢–ê–ù ===
    isActive,
    isEditing: isEditingComputed,
    canProceed,
    isReadyToSave,

    // === –ú–ï–¢–û–î–ò –û–ù–û–í–õ–ï–ù–ù–Ø ===
    updateBasicInfo,
    updateProperties,
    updateDefectsStains,
    updatePriceModifiers,
    updatePhotos,

    // === –£–¢–ò–õ–Ü–¢–ò ===
    calculatePrice,
    saveItem,
    cancelWizard,
    loadItemForEditing,

    // === WIZARD –ù–ê–í–Ü–ì–ê–¶–Ü–Ø ===
    wizard,
  };
};

// === –í–ê–õ–Ü–î–ê–¶–Ü–Ø –ü–Ü–î–ö–†–û–ö–Ü–í ===

/**
 * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ—Å–Ω–æ–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó (2.1)
 */
function validateBasicInfo(data: ItemWizardData) {
  const errors: Record<string, string> = {};

  if (!data.name.trim()) {
    errors.name = "–ù–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∞";
  }

  if (!data.category.trim()) {
    errors.category = "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –ø–æ—Å–ª—É–≥–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤–∞";
  }

  if (data.quantity <= 0) {
    errors.quantity = '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0';
  }

  if (data.unitPrice < 0) {
    errors.unitPrice = "–¶—ñ–Ω–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–æ—é";
  }

  return {
    isValid: Object.keys(errors).length === 0,
    errors,
  };
}

/**
 * –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (2.2)
 */
function validateProperties(data: ItemWizardData) {
  const errors: Record<string, string> = {};

  console.log('üîç validateProperties –≤–∏–∫–ª–∏–∫–∞–Ω–æ:', {
    material: data.material,
    category: data.category,
    color: data.color,
  });

  // –ú–∞—Ç–µ—Ä—ñ–∞–ª –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π –¥–ª—è –±—ñ–ª—å—à–æ—Å—Ç—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
  if (
    !data.material &&
    data.category &&
    !['–ø—Ä–∞–Ω–Ω—è', '–ø—Ä–∞—Å—É–≤–∞–Ω–Ω—è'].includes(data.category.toLowerCase())
  ) {
    errors.material = "–ú–∞—Ç–µ—Ä—ñ–∞–ª –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π –¥–ª—è —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó";
    console.log("‚ùå validateProperties: –ú–∞—Ç–µ—Ä—ñ–∞–ª –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π", {
      category: data.category,
      material: data.material,
    });
  }

  if (!data.color?.trim()) {
    errors.color = "–ö–æ–ª—ñ—Ä –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π";
    console.log("‚ùå validateProperties: –ö–æ–ª—ñ—Ä –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π", {
      color: data.color,
    });
  }

  const isValid = Object.keys(errors).length === 0;
  console.log('üîç validateProperties —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', {
    isValid,
    errors,
    data: {
      material: data.material,
      category: data.category,
      color: data.color,
    },
  });

  return {
    isValid,
    errors,
  };
}

/**
 * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–µ—Ñ–µ–∫—Ç—ñ–≤ —Ç–∞ –ø–ª—è–º (2.3)
 */
function validateDefectsStains(data: ItemWizardData) {
  const errors: Record<string, string> = {};

  // –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ "–±–µ–∑ –≥–∞—Ä–∞–Ω—Ç—ñ–π", —Ç—Ä–µ–±–∞ –≤–∫–∞–∑–∞—Ç–∏ –ø—Ä–∏—á–∏–Ω—É
  if (data.noWarranty && !data.noWarrantyReason?.trim()) {
    errors.noWarrantyReason = '–í–∫–∞–∂—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥–º–æ–≤–∏ –≤—ñ–¥ –≥–∞—Ä–∞–Ω—Ç—ñ–π';
  }

  if (data.defectsNotes && data.defectsNotes.length > 1000) {
    errors.defectsNotes = '–ü—Ä–∏–º—ñ—Ç–∫–∏ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥—ñ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª—ñ–≤)';
  }

  return {
    isValid: Object.keys(errors).length === 0,
    errors,
  };
}

/**
 * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Ü—ñ–Ω–∏ (2.4)
 */
function validatePriceCalculator(data: ItemWizardData) {
  const errors: Record<string, string> = {};

  if (data.heavilySoiled && (data.heavilySoiledPercentage || 0) < 20) {
    errors.heavilySoiledPercentage = '–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –Ω–∞–¥–±–∞–≤–∫–∞ –∑–∞ –∑–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è 20%';
  }

  if (data.heavilySoiledPercentage && data.heavilySoiledPercentage > 100) {
    errors.heavilySoiledPercentage = '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –Ω–∞–¥–±–∞–≤–∫–∞ –∑–∞ –∑–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è 100%';
  }

  return {
    isValid: Object.keys(errors).length === 0,
    errors,
  };
}

/**
 * –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–æ—Ç–æ–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó (2.5)
 */
function validatePhotoDocumentation(data: ItemWizardData) {
  const errors: Record<string, string> = {};

  if (data.photos && data.photos.length > 5) {
    errors.photos = '–ú–∞–∫—Å–∏–º—É–º 5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç';
  }

  return {
    isValid: Object.keys(errors).length === 0,
    errors,
  };
}
