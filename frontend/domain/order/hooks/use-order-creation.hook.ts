/**
 * –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –∑–∞–º–æ–≤–ª–µ–Ω—å –≤ Order Wizard
 * –Ü–Ω–∫–∞–ø—Å—É–ª—é—î –ª–æ–≥—ñ–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –∫–ª—ñ—î–Ω—Ç–∞ —ñ —Ñ—ñ–ª—ñ—ó
 */

import { useState, useCallback } from 'react';

import { useWizardStore } from '../../wizard/store/wizard.store';
import { OrderRepository } from '../repositories/order.repository';
import { ExpediteType } from '../types';

import type { Order, OrderOperationResult } from '../types';

interface OrderCreationState {
  currentOrder: Order | null;
  isCreating: boolean;
  error: string | null;
  creationState: 'idle' | 'creating' | 'success' | 'error';
}

/**
 * –•—É–∫ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ Order Wizard
 */
export const useOrderCreation = () => {
  const [state, setState] = useState<OrderCreationState>({
    currentOrder: null,
    isCreating: false,
    error: null,
    creationState: 'idle',
  });

  /**
   * –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è Order Wizard
   */
  const createOrderForWizard = useCallback(
    async (
      clientId: string,
      branchLocationId: string,
      tagNumber: string
    ): Promise<OrderOperationResult> => {
      console.log('üîç useOrderCreation.createOrderForWizard –≤–∏–∫–ª–∏–∫–∞–Ω–æ:', {
        clientId,
        branchLocationId,
        tagNumber,
      });

      setState((prev) => ({
        ...prev,
        isCreating: true,
        error: null,
        creationState: 'creating',
      }));

      try {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π
        const orderToCreate: Partial<Order> = {
          tagNumber,
          clientId,
          branchLocationId,
          expectedCompletionDate: new Date(Date.now() + 48 * 60 * 60 * 1000),
          customerNotes: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ Order Wizard',
          expediteType: ExpediteType.STANDARD,
          draft: true,
          items: [],
        };

        const orderRepository = new OrderRepository();
        const result = await orderRepository.create(orderToCreate as Order);

        if (result.success && result.order) {
          console.log('‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ:', result.order);

          // –û–Ω–æ–≤–ª—é—î–º–æ orderId –≤ wizard context
          const { updateContext } = useWizardStore.getState();
          updateContext({ orderId: result.order.id });

          setState((prev) => ({
            ...prev,
            currentOrder: result.order || null,
            isCreating: false,
            error: null,
            creationState: 'success',
          }));

          return {
            success: true,
            order: result.order,
            errors: null,
          };
        } else {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', result.errors);

          const errorMessage = result.errors?.general || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è';

          setState((prev) => ({
            ...prev,
            currentOrder: null,
            isCreating: false,
            error: errorMessage,
            creationState: 'error',
          }));

          return {
            success: false,
            order: null,
            errors: result.errors,
          };
        }
      } catch (error) {
        console.error('‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);

        const errorMessage =
          error instanceof Error ? error.message : '–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è';

        setState((prev) => ({
          ...prev,
          currentOrder: null,
          isCreating: false,
          error: errorMessage,
          creationState: 'error',
        }));

        return {
          success: false,
          order: null,
          errors: {
            general: errorMessage,
          },
        };
      }
    },
    []
  );

  /**
   * –°–∫–∏–¥–∞—î —Å—Ç–∞–Ω —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
   */
  const resetCreationState = useCallback(() => {
    console.log('üîÑ –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');

    setState({
      currentOrder: null,
      isCreating: false,
      error: null,
      creationState: 'idle',
    });
  }, []);

  /**
   * –û—á–∏—â–∞—î –ø–æ–º–∏–ª–∫—É
   */
  const clearError = useCallback(() => {
    setState((prev) => ({
      ...prev,
      error: null,
    }));
  }, []);

  return {
    // –°—Ç–∞–Ω
    currentOrder: state.currentOrder,
    isCreating: state.isCreating,
    error: state.error,
    creationState: state.creationState,

    // Computed –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
    hasOrder: state.currentOrder !== null,
    isSuccess: state.creationState === 'success',
    isError: state.creationState === 'error',
    isIdle: state.creationState === 'idle',

    // –ú–µ—Ç–æ–¥–∏
    createOrderForWizard,
    resetCreationState,
    clearError,
  };
};
