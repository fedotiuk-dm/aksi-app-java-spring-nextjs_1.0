'use client';

/**
 * @fileoverview –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è Order Wizard
 *
 * –ü—Ä–∏–∫–ª–∞–¥ "—Ç–æ–Ω–∫–æ–≥–æ" UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∑–≥—ñ–¥–Ω–æ –∑ –ø—Ä–∏–Ω—Ü–∏–ø–æ–º "FSD outside".
 * –í—Å—é –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫—É –æ—Ç—Ä–∏–º—É—î –∑ –¥–æ–º–µ–Ω–Ω–æ–≥–æ —à–∞—Ä—É.
 */

import {
  Box,
  Stepper,
  Step,
  StepLabel,
  Typography,
  Alert,
  LinearProgress,
  Button,
  Paper,
  Container,
  Card,
  CardContent,
  Stack,
} from '@mui/material';
import React from 'react';

// –î–æ–º–µ–Ω wizard/main - –≥–æ–ª–æ–≤–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
import { useMain, WIZARD_STAGES, WIZARD_STAGE_NAMES } from '@/domains/wizard';

// –Ü–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –µ—Ç–∞–ø—ñ–≤
import { Stage1SimplifiedContainer } from './stage1/Stage1SimplifiedContainer';
// import { Stage2ItemManager } from './stage2/Stage2ItemManager';
// import { Stage3OrderParameters } from './stages/Stage3OrderParameters';
// import { Stage4Finalization } from './stages/Stage4Finalization';

export const OrderWizardContainer: React.FC = () => {
  // ========== –î–û–ú–ï–ù–ù–ê –õ–û–ì–Ü–ö–ê ==========
  const { ui, data, loading, actions, computed } = useMain();

  // –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  console.log('üîç OrderWizardContainer state:', {
    hasSession: !!ui.sessionId,
    sessionId: ui.sessionId,
    currentStateSuccess: data.currentState?.success,
    currentStateValue: data.currentState?.currentState,
    currentStateUndefined: data.currentState === undefined,
    computedStage: computed.currentStage,
    canStart: computed.canStart,
    isLoadingState: loading.isLoadingState,
    shouldShowStartButton:
      !ui.sessionId ||
      (ui.sessionId && data.currentState !== undefined && data.currentState.success === false),
  });

  // ========== –í–ò–ß–ò–°–õ–ï–ù–ù–Ø ==========
  // –ü–æ—Ç–æ—á–Ω–∏–π –µ—Ç–∞–ø –≤—ñ–∑–∞—Ä–¥–∞ (–∑ –¥–æ–º–µ–Ω–Ω–æ–≥–æ —à–∞—Ä—É)
  const currentStage = computed.currentStage;

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Å–µ—Å—ñ—ó
  const hasSession = !!ui.sessionId;

  // ========== EVENT HANDLERS ==========

  // –†–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –µ—Ç–∞–ø—É
  const renderCurrentStage = (): React.ReactNode => {
    // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ:
    // 1. –ù–µ–º–∞—î sessionId –≤ —Å—Ç–æ—Ä—ñ –ê–ë–û
    // 2. –Ñ sessionId, –∞–ª–µ API –ø–æ–≤–µ—Ä—Ç–∞—î –ø–æ–º–∏–ª–∫—É (—Å–µ—Å—ñ—è –Ω–µ —ñ—Å–Ω—É—î –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ)
    const shouldShowStartButton =
      !hasSession ||
      (hasSession && data.currentState !== undefined && data.currentState.success === false);

    if (shouldShowStartButton) {
      return (
        <Box sx={{ textAlign: 'center', py: 6 }}>
          <Typography variant="h5" gutterBottom>
            üöÄ –†–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
          </Typography>
          <Typography variant="body1" sx={{ mb: 3 }}>
            –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
          </Typography>
          <Button
            variant="contained"
            size="large"
            onClick={actions.startWizard}
            disabled={!computed.canStart || loading.isStarting}
            sx={{ minWidth: 200 }}
          >
            {loading.isStarting ? '–ó–∞–ø—É—Å–∫...' : '–†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'}
          </Button>

          {/* –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏ */}
          {data.healthStatus && (
            <Alert severity="info" sx={{ mt: 2 }}>
              –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏: {data.healthStatus.status || '–ù–µ–≤—ñ–¥–æ–º–æ'}
            </Alert>
          )}
        </Box>
      );
    }

    // –†–µ–Ω–¥–µ—Ä –µ—Ç–∞–ø—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ currentStage
    switch (currentStage) {
      case WIZARD_STAGES.CLIENT_SELECTION:
        return <Stage1SimplifiedContainer onStageCompleted={() => actions.completeStage1()} />;

      case WIZARD_STAGES.ITEMS_MANAGEMENT:
        return (
          <Typography variant="h6" sx={{ p: 3 }}>
            –ï—Ç–∞–ø 2: –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ (—É —Ä–æ–∑—Ä–æ–±—Ü—ñ)
          </Typography>
        );

      case WIZARD_STAGES.ORDER_PARAMETERS:
        return (
          <Typography variant="h6" sx={{ p: 3 }}>
            –ï—Ç–∞–ø 3: –ó–∞–≥–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (—É —Ä–æ–∑—Ä–æ–±—Ü—ñ)
          </Typography>
        );

      case WIZARD_STAGES.FINALIZATION:
        return (
          <Typography variant="h6" sx={{ p: 3 }}>
            –ï—Ç–∞–ø 4: –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è (—É —Ä–æ–∑—Ä–æ–±—Ü—ñ)
          </Typography>
        );

      default:
        return <Alert severity="error">–ù–µ–≤—ñ–¥–æ–º–∏–π –µ—Ç–∞–ø: {currentStage}</Alert>;
    }
  };

  return (
    <Container maxWidth="lg" sx={{ py: 3 }}>
      <Paper elevation={2} sx={{ p: 3 }}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <Typography variant="h4" component="h1" gutterBottom align="center">
          Order Wizard - –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        </Typography>

        {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Å—ñ—é */}
        {hasSession && (
          <Card sx={{ mb: 2, bgcolor: 'primary.50' }}>
            <CardContent sx={{ py: 1 }}>
              <Typography variant="body2" color="primary.main">
                –°–µ—Å—ñ—è: {ui.sessionId} | –ï—Ç–∞–ø: {currentStage}/4
                {data.healthStatus?.status === 'UP' && ' | ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞'}
              </Typography>
            </CardContent>
          </Card>
        )}

        {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è */}
        {(loading.isStarting || loading.isCompleting || loading.isNavigating) && (
          <Box sx={{ mb: 2 }}>
            <LinearProgress />
            <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
              {loading.isStarting && '–ó–∞–ø—É—Å–∫ Order Wizard...'}
              {loading.isCompleting && '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ç–∞–ø—É...'}
              {loading.isNavigating && '–ù–∞–≤—ñ–≥–∞—Ü—ñ—è...'}
            </Typography>
          </Box>
        )}

        {/* –°—Ç–µ–ø–ø–µ—Ä */}
        {hasSession && data.currentState?.success === true && (
          <Box sx={{ mb: 3 }}>
            <Stepper activeStep={currentStage - 1} alternativeLabel>
              {Object.entries(WIZARD_STAGE_NAMES).map(([stage, name]) => (
                <Step key={stage}>
                  <StepLabel>{name as string}</StepLabel>
                </Step>
              ))}
            </Stepper>
          </Box>
        )}

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Ç–æ—á–Ω–æ–≥–æ –µ—Ç–∞–ø—É */}
        <Box sx={{ minHeight: 400 }}>{renderCurrentStage()}</Box>

        {/* –ö–æ–Ω—Ç—Ä–æ–ª–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó */}
        {hasSession && data.currentState?.success === true && (
          <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 3 }}>
            <Stack direction="row" spacing={2}>
              <Button
                variant="outlined"
                onClick={actions.goBack}
                disabled={!computed.canGoBack || loading.isNavigating}
              >
                –ù–∞–∑–∞–¥
              </Button>

              <Button
                variant="outlined"
                color="error"
                onClick={actions.cancelOrder}
                disabled={!computed.canCancel || loading.isNavigating}
              >
                –°–∫–∞—Å—É–≤–∞—Ç–∏
              </Button>
            </Stack>

            <Stack direction="row" spacing={2}>
              {/* –ö–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ç–∞–ø—ñ–≤ */}
              {currentStage === 1 && (
                <Button
                  variant="contained"
                  onClick={actions.completeStage1}
                  disabled={!computed.canComplete || loading.isCompleting}
                >
                  –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –µ—Ç–∞–ø 1
                </Button>
              )}

              {currentStage === 2 && (
                <Button
                  variant="contained"
                  onClick={actions.completeStage2}
                  disabled={!computed.canComplete || loading.isCompleting}
                >
                  –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –µ—Ç–∞–ø 2
                </Button>
              )}

              {currentStage === 3 && (
                <Button
                  variant="contained"
                  onClick={actions.completeStage3}
                  disabled={!computed.canComplete || loading.isCompleting}
                >
                  –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –µ—Ç–∞–ø 3
                </Button>
              )}

              {currentStage === 4 && (
                <Button
                  variant="contained"
                  color="success"
                  onClick={actions.completeOrder}
                  disabled={!computed.canComplete || loading.isCompleting}
                >
                  –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                </Button>
              )}
            </Stack>
          </Box>
        )}

        {/* Debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è */}
        {ui.showDebugMode && (
          <Card sx={{ mt: 2, bgcolor: 'grey.100' }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                üêõ Debug Info
              </Typography>
              <Typography variant="body2" component="pre" sx={{ fontSize: '0.8rem' }}>
                UI: {JSON.stringify(ui, null, 2)}
                {'\n\n'}
                Data: {JSON.stringify(data, null, 2)}
                {'\n\n'}
                Loading: {JSON.stringify(loading, null, 2)}
                {'\n\n'}
                Computed: {JSON.stringify(computed, null, 2)}
              </Typography>
            </CardContent>
          </Card>
        )}

        {/* –ö–æ–Ω—Ç—Ä–æ–ª–∏ UI */}
        <Box sx={{ mt: 2, display: 'flex', gap: 1 }}>
          <Button size="small" onClick={actions.toggleDebugMode}>
            {ui.showDebugMode ? '–°—Ö–æ–≤–∞—Ç–∏ Debug' : '–ü–æ–∫–∞–∑–∞—Ç–∏ Debug'}
          </Button>
          <Button size="small" onClick={actions.toggleCompactMode}>
            {ui.isCompact ? '–ó–≤–∏—á–∞–π–Ω–∏–π —Ä–µ–∂–∏–º' : '–ö–æ–º–ø–∞–∫—Ç–Ω–∏–π —Ä–µ–∂–∏–º'}
          </Button>
          {ui.showDebugMode && (
            <Button
              size="small"
              onClick={async () => {
                console.log('üßπ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ "–û—á–∏—Å—Ç–∏—Ç–∏ –ø–∞–º\'—è—Ç—å"');
                await actions.clearMemory();
                console.log("‚úÖ –û—á–∏—â–µ–Ω–Ω—è –ø–∞–º'—è—Ç—ñ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
              }}
              color="warning"
              variant="outlined"
            >
              üßπ –û—á–∏—Å—Ç–∏—Ç–∏ –ø–∞–º&apos;—è—Ç—å
            </Button>
          )}
        </Box>
      </Paper>
    </Container>
  );
};
