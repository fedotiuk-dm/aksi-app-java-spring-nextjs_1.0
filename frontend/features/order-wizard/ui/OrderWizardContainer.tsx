'use client';

/**
 * @fileoverview –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è Order Wizard
 *
 * –ü—Ä–∏–∫–ª–∞–¥ "—Ç–æ–Ω–∫–æ–≥–æ" UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∑–≥—ñ–¥–Ω–æ –∑ –ø—Ä–∏–Ω—Ü–∏–ø–æ–º "FSD outside".
 * –í—Å—é –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫—É –æ—Ç—Ä–∏–º—É—î –∑ –¥–æ–º–µ–Ω–Ω–æ–≥–æ —à–∞—Ä—É.
 */

import {
  Box,
  Stepper,
  Step,
  StepLabel,
  Typography,
  Alert,
  LinearProgress,
  Button,
  Paper,
  Container,
  Card,
  CardContent,
} from '@mui/material';
import React from 'react';

// –î–æ–º–µ–Ω wizard/main - –≥–æ–ª–æ–≤–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
import { useOrderWizardMain } from '@/domains/wizard/main';

// –Ü–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –µ—Ç–∞–ø—ñ–≤
import { Stage1ClientSelection } from './stage1/Stage1ClientSelection';
// import { Stage2ItemManager } from './stage2/Stage2ItemManager';
// import { Stage3OrderParameters } from './stages/Stage3OrderParameters';
// import { Stage4Finalization } from './stages/Stage4Finalization';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –µ—Ç–∞–ø—ñ–≤
const WIZARD_STAGES = {
  CLIENT_SELECTION: 1,
  ITEMS_MANAGEMENT: 2,
  ORDER_PARAMETERS: 3,
  FINALIZATION: 4,
} as const;

const WIZARD_STAGE_NAMES = {
  1: '–ö–ª—ñ—î–Ω—Ç —Ç–∞ –±–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è',
  2: '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–µ–¥–º–µ—Ç—ñ–≤',
  3: '–ó–∞–≥–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏',
  4: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è',
} as const;

type WizardStage = 1 | 2 | 3 | 4;

export const OrderWizardContainer: React.FC = () => {
  // ========== –î–û–ú–ï–ù–ù–ê –õ–û–ì–Ü–ö–ê ==========
  const { ui, data, loading, errors, readiness, actions, system, debug } = useOrderWizardMain();

  // ========== EVENT HANDLERS ==========

  // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –º—ñ–∂ –µ—Ç–∞–ø–∞–º–∏
  const handleStageClick = (stage: WizardStage) => {
    if (readiness.canNavigateToStage(stage)) {
      actions.navigateToStage(stage);
    }
  };

  const handleNextStage = () => {
    if (ui.currentStage < 4) {
      actions.navigateToStage((ui.currentStage + 1) as WizardStage);
    }
  };

  const handlePreviousStage = () => {
    if (ui.currentStage > 1) {
      actions.navigateToStage((ui.currentStage - 1) as WizardStage);
    }
  };

  // –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  const handleStartNewOrder = () => {
    actions.startNewOrder();
  };

  // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –µ—Ç–∞–ø—É
  const handleCompleteStage = () => {
    actions.completeCurrentStage();
  };

  // ========== RENDER HELPERS ==========

  // –†–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –µ—Ç–∞–ø—É
  const renderCurrentStage = (): React.ReactNode => {
    if (!ui.isWizardStarted && !ui.sessionId) {
      return (
        <Box sx={{ textAlign: 'center', py: 6 }}>
          <Typography variant="h5" gutterBottom>
            üöÄ –†–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
          </Typography>
          <Typography variant="body1" sx={{ mb: 3 }}>
            –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
          </Typography>
          <Button
            variant="contained"
            size="large"
            onClick={handleStartNewOrder}
            disabled={!readiness.canStartNewOrder || loading.isStarting}
            sx={{ minWidth: 200 }}
          >
            {loading.isStarting ? '–ó–∞–ø—É—Å–∫...' : '–†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'}
          </Button>

          {!ui.isSystemHealthy && (
            <Alert severity="warning" sx={{ mt: 2 }}>
              –°–∏—Å—Ç–µ–º–∞ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.
            </Alert>
          )}
        </Box>
      );
    }

    switch (ui.currentStage) {
      case WIZARD_STAGES.CLIENT_SELECTION:
        return <Stage1ClientSelection />;

      case WIZARD_STAGES.ITEMS_MANAGEMENT:
        return (
          <Typography variant="h6" sx={{ p: 3 }}>
            –ï—Ç–∞–ø 2: –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ (—É —Ä–æ–∑—Ä–æ–±—Ü—ñ)
          </Typography>
        );

      case WIZARD_STAGES.ORDER_PARAMETERS:
        return (
          <Typography variant="h6" sx={{ p: 3 }}>
            –ï—Ç–∞–ø 3: –ó–∞–≥–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (—É —Ä–æ–∑—Ä–æ–±—Ü—ñ)
          </Typography>
        );

      case WIZARD_STAGES.FINALIZATION:
        return (
          <Typography variant="h6" sx={{ p: 3 }}>
            –ï—Ç–∞–ø 4: –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è (—É —Ä–æ–∑—Ä–æ–±—Ü—ñ)
          </Typography>
        );

      default:
        return <Alert severity="error">–ù–µ–≤—ñ–¥–æ–º–∏–π –µ—Ç–∞–ø: {ui.currentStage}</Alert>;
    }
  };

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –¥–ª—è —Å—Ç–µ–ø–ø–µ—Ä–∞
  const getStepStatus = (stage: WizardStage): 'completed' | 'active' | 'disabled' => {
    if (ui.isStageCompleted(stage)) return 'completed';
    if (stage === ui.currentStage) return 'active';
    if (!ui.isStageAvailable(stage)) return 'disabled';
    return 'disabled';
  };

  const canProceedToNextStage =
    ui.currentStage < Object.keys(WIZARD_STAGE_NAMES).length && readiness.canCompleteCurrentStage;
  const isWizardComplete = readiness.isOrderComplete;

  return (
    <Container maxWidth="lg" sx={{ py: 3 }}>
      <Paper elevation={2} sx={{ p: 3 }}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <Typography variant="h4" component="h1" gutterBottom align="center">
          Order Wizard - –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        </Typography>

        {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Å—ñ—é */}
        {ui.sessionId && (
          <Card sx={{ mb: 2, bgcolor: 'primary.50' }}>
            <CardContent sx={{ py: 1 }}>
              <Typography variant="body2" color="primary.main">
                –°–µ—Å—ñ—è: {ui.sessionId} | –ï—Ç–∞–ø: {ui.currentStage}/4
                {system.isHealthy && ' | ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞'}
              </Typography>
            </CardContent>
          </Card>
        )}

        {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è */}
        {loading.isAnyLoading && (
          <Box sx={{ mb: 2 }}>
            <LinearProgress />
            <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
              {loading.isStarting && '–ó–∞–ø—É—Å–∫ Order Wizard...'}
              {loading.isCompletingStage1 && '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ç–∞–ø—É 1...'}
              {loading.isCompletingStage2 && '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ç–∞–ø—É 2...'}
              {loading.isCompletingStage3 && '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ç–∞–ø—É 3...'}
              {loading.isCompletingOrder && '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è...'}
              {loading.isCancelling && '–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è...'}
            </Typography>
          </Box>
        )}

        {/* –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ */}
        {errors.hasAnyError && (
          <Alert severity="error" sx={{ mb: 2 }}>
            <Typography variant="h6">–ü–æ–º–∏–ª–∫–∞:</Typography>
            {errors.startError && <div>–ó–∞–ø—É—Å–∫: {errors.startError.message}</div>}
            {errors.stage1Error && <div>–ï—Ç–∞–ø 1: {errors.stage1Error.message}</div>}
            {errors.stage2Error && <div>–ï—Ç–∞–ø 2: {errors.stage2Error.message}</div>}
            {errors.stage3Error && <div>–ï—Ç–∞–ø 3: {errors.stage3Error.message}</div>}
            {errors.orderError && <div>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: {errors.orderError.message}</div>}
            {errors.cancelError && <div>–°–∫–∞—Å—É–≤–∞–Ω–Ω—è: {errors.cancelError.message}</div>}
          </Alert>
        )}

        {/* –°—Ç–µ–ø–ø–µ—Ä (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–∑–∞—Ä–¥ –∑–∞–ø—É—â–µ–Ω–∏–π) */}
        {ui.isWizardStarted && (
          <Box sx={{ mb: 4 }}>
            <Stepper activeStep={ui.currentStage - 1} orientation="horizontal" sx={{ mb: 3 }}>
              {Object.entries(WIZARD_STAGE_NAMES).map(([stageNumber, stageName]) => {
                const stage = parseInt(stageNumber) as WizardStage;
                const status = getStepStatus(stage);

                return (
                  <Step key={stage} completed={status === 'completed'}>
                    <StepLabel
                      onClick={() => handleStageClick(stage)}
                      sx={{
                        cursor: status !== 'disabled' ? 'pointer' : 'default',
                        opacity: status === 'disabled' ? 0.5 : 1,
                      }}
                    >
                      {stageName}
                    </StepLabel>
                  </Step>
                );
              })}
            </Stepper>
          </Box>
        )}

        {/* –ü–æ—Ç–æ—á–Ω–∏–π –µ—Ç–∞–ø */}
        <Box sx={{ minHeight: 400, mb: 3 }}>{renderCurrentStage()}</Box>

        {/* –ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ –∫–Ω–æ–ø–∫–∏ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∑–∞–ø—É—â–µ–Ω–æ–≥–æ –≤—ñ–∑–∞—Ä–¥–∞) */}
        {ui.isWizardStarted && (
          <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 3 }}>
            <Button
              variant="outlined"
              onClick={handlePreviousStage}
              disabled={ui.currentStage === 1 || loading.isAnyLoading}
            >
              –ù–∞–∑–∞–¥
            </Button>

            <Box sx={{ display: 'flex', gap: 2 }}>
              {!isWizardComplete && (
                <Button
                  variant="contained"
                  onClick={ui.currentStage === 4 ? handleCompleteStage : handleNextStage}
                  disabled={!canProceedToNextStage || loading.isAnyLoading}
                >
                  {ui.currentStage === 4 ? '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' : '–î–∞–ª—ñ'}
                </Button>
              )}

              <Button
                variant="outlined"
                color="error"
                onClick={actions.cancelCurrentOrder}
                disabled={loading.isAnyLoading}
              >
                –°–∫–∞—Å—É–≤–∞—Ç–∏
              </Button>
            </Box>
          </Box>
        )}

        {/* –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è */}
        {isWizardComplete && (
          <Alert severity="success" sx={{ mt: 2 }}>
            <Typography variant="h6">üéâ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!</Typography>
          </Alert>
        )}

        {/* Debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è (—Ç—ñ–ª—å–∫–∏ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ) */}
        {debug && (
          <Box sx={{ mt: 4, p: 2, bgcolor: 'grey.100', borderRadius: 1 }}>
            <Typography variant="h6" gutterBottom>
              Debug Info:
            </Typography>
            <Typography variant="body2" component="pre" sx={{ fontSize: '0.75rem' }}>
              {JSON.stringify(debug, null, 2)}
            </Typography>
          </Box>
        )}
      </Paper>
    </Container>
  );
};
