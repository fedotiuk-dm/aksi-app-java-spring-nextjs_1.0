'use client';

/**
 * @fileoverview –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è Order Wizard
 *
 * –ü—Ä–∏–∫–ª–∞–¥ "—Ç–æ–Ω–∫–æ–≥–æ" UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∑–≥—ñ–¥–Ω–æ –∑ –ø—Ä–∏–Ω—Ü–∏–ø–æ–º "FSD outside".
 * –í—Å—é –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫—É –æ—Ç—Ä–∏–º—É—î –∑ –¥–æ–º–µ–Ω–Ω–æ–≥–æ —à–∞—Ä—É.
 */

import {
  Box,
  Stepper,
  Step,
  StepLabel,
  Typography,
  Alert,
  LinearProgress,
  Button,
  Paper,
  Container,
  Card,
  CardContent,
  Stack,
} from '@mui/material';
import React from 'react';

// –î–æ–º–µ–Ω wizard/main - –≥–æ–ª–æ–≤–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
import { useMainWizard } from '@/domains/wizard/main';
import { MAIN_WIZARD_STATES } from '@/domains/wizard/main/wizard.constants';

// –Ü–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –µ—Ç–∞–ø—ñ–≤
import { Stage1Container } from './stage1/Stage1Container';
import { Stage2Container } from './stage2';
// import { Stage3OrderParameters } from './stages/Stage3OrderParameters';
// import { Stage4Finalization } from './stages/Stage4Finalization';

export const OrderWizardContainer: React.FC = () => {
  // ========== –î–û–ú–ï–ù–ù–ê –õ–û–ì–Ü–ö–ê ==========
  const { ui, data, loading, mutations, queries } = useMainWizard();

  // –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  console.log('üîç OrderWizardContainer state:', {
    hasSession: !!ui.sessionId,
    sessionId: ui.sessionId,
    currentState: ui.currentState,
    currentStage: ui.currentStage,
    canGoBack: ui.canGoBack,
    isNavigating: ui.isNavigating,
    backendState: data.backendState,
    isSyncing: loading.isSyncing,
  });

  // ========== –í–ò–ß–ò–°–õ–ï–ù–ù–Ø ==========
  // –ü–æ—Ç–æ—á–Ω–∏–π –µ—Ç–∞–ø –≤—ñ–∑–∞—Ä–¥–∞ (–∑ –¥–æ–º–µ–Ω–Ω–æ–≥–æ —à–∞—Ä—É)
  const currentStage = ui.currentStage;

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Å–µ—Å—ñ—ó
  const hasSession = !!ui.sessionId;

  // ========== EVENT HANDLERS ==========
  const handleStartWizard = async () => {
    try {
      console.log('–ó–∞–ø—É—Å–∫ wizard...');
      ui.setIsNavigating(true);

      const response = await mutations.startWizard.mutateAsync();

      if (response.sessionId) {
        ui.setSessionId(response.sessionId);
        ui.setCurrentState(MAIN_WIZARD_STATES.CLIENT_SELECTION);
        ui.setCurrentStage(1);
        ui.addActiveSession(response.sessionId);
        console.log('‚úÖ Wizard –∑–∞–ø—É—â–µ–Ω–æ:', response);
      }
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É wizard:', error);
      ui.setLastError('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É wizard');
    } finally {
      ui.setIsNavigating(false);
    }
  };

  const handleGoBack = async () => {
    if (!ui.sessionId) return;

    try {
      console.log('–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥...');
      ui.setIsNavigating(true);

      await mutations.goBack.mutateAsync({
        sessionId: ui.sessionId,
      });

      // –û–Ω–æ–≤–ª—é—î–º–æ UI —Å—Ç–∞–Ω
      const currentStage = ui.currentStage;
      if (currentStage > 1) {
        ui.setCurrentStage(currentStage - 1);
      }
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥:', error);
      ui.setLastError('–ü–æ–º–∏–ª–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥');
    } finally {
      ui.setIsNavigating(false);
    }
  };

  const handleCancelOrder = async () => {
    if (!ui.sessionId) return;

    try {
      console.log('–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è...');
      ui.setIsNavigating(true);

      await mutations.cancelOrder.mutateAsync({
        sessionId: ui.sessionId,
      });

      // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
      ui.resetWizardState();
      console.log('‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
      ui.setLastError('–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
    } finally {
      ui.setIsNavigating(false);
    }
  };

  const handleCompleteStage1 = async () => {
    if (!ui.sessionId) return;

    try {
      console.log('üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ç–∞–ø—É 1 —á–µ—Ä–µ–∑ API...');
      ui.setIsNavigating(true);

      await mutations.completeStage1.mutateAsync({
        sessionId: ui.sessionId,
      });

      console.log('‚úÖ API complete-stage1 —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ');

      // –û–Ω–æ–≤–ª—é—î–º–æ UI —Å—Ç–∞–Ω
      ui.addCompletedStage(1);
      ui.setCurrentStage(2);
      ui.setCurrentState(MAIN_WIZARD_STATES.ITEM_MANAGEMENT);
      console.log('‚úÖ –ï—Ç–∞–ø 1 –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –µ—Ç–∞–ø—É 2');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ç–∞–ø—É 1:', error);
      ui.setLastError('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ç–∞–ø—É 1');
    } finally {
      ui.setIsNavigating(false);
    }
  };

  const handleCompleteStage2 = async () => {
    if (!ui.sessionId) return;

    try {
      console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ç–∞–ø—É 2...');
      ui.setIsNavigating(true);

      await mutations.completeStage2.mutateAsync({
        sessionId: ui.sessionId,
      });

      // –û–Ω–æ–≤–ª—é—î–º–æ UI —Å—Ç–∞–Ω
      ui.addCompletedStage(2);
      ui.setCurrentStage(3);
      ui.setCurrentState(MAIN_WIZARD_STATES.EXECUTION_PARAMS);
      console.log('‚úÖ –ï—Ç–∞–ø 2 –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ç–∞–ø—É 2:', error);
      ui.setLastError('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ç–∞–ø—É 2');
    } finally {
      ui.setIsNavigating(false);
    }
  };

  // –†–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –µ—Ç–∞–ø—É
  const renderCurrentStage = (): React.ReactNode => {
    // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ–º–∞—î —Å–µ—Å—ñ—ó
    const shouldShowStartButton = !hasSession;

    if (shouldShowStartButton) {
      return (
        <Box sx={{ textAlign: 'center', py: 6 }}>
          <Typography variant="h5" gutterBottom>
            üöÄ –†–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
          </Typography>
          <Typography variant="body1" sx={{ mb: 3 }}>
            –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
          </Typography>
          <Button
            variant="contained"
            size="large"
            onClick={handleStartWizard}
            disabled={loading.isStarting || ui.isNavigating}
            sx={{ minWidth: 200 }}
          >
            {loading.isStarting || ui.isNavigating ? '–ó–∞–ø—É—Å–∫...' : '–†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'}
          </Button>
        </Box>
      );
    }

    // –†–µ–Ω–¥–µ—Ä –µ—Ç–∞–ø—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ currentState
    switch (ui.currentState) {
      case MAIN_WIZARD_STATES.CLIENT_SELECTION:
        return (
          <Stage1Container sessionId={ui.sessionId || ''} onStageCompleted={handleCompleteStage1} />
        );

      case MAIN_WIZARD_STATES.ITEM_MANAGEMENT:
        return (
          <Stage2Container
            sessionId={ui.sessionId || ''}
            onStageCompleted={handleCompleteStage2}
            onGoBack={handleGoBack}
          />
        );

      case MAIN_WIZARD_STATES.EXECUTION_PARAMS:
        return (
          <Typography variant="h6" sx={{ p: 3 }}>
            –ï—Ç–∞–ø 3: –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—É —Ä–æ–∑—Ä–æ–±—Ü—ñ)
          </Typography>
        );

      case MAIN_WIZARD_STATES.ORDER_CONFIRMATION:
        return (
          <Typography variant="h6" sx={{ p: 3 }}>
            –ï—Ç–∞–ø 4: –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (—É —Ä–æ–∑—Ä–æ–±—Ü—ñ)
          </Typography>
        );

      default:
        return <Alert severity="error">–ù–µ–≤—ñ–¥–æ–º–∏–π –µ—Ç–∞–ø: {ui.currentState}</Alert>;
    }
  };

  return (
    <Container maxWidth="lg" sx={{ py: 3 }}>
      <Paper elevation={2} sx={{ p: 3 }}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <Typography variant="h4" component="h1" gutterBottom align="center">
          Order Wizard - –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        </Typography>

        {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Å—ñ—é */}
        {hasSession && (
          <Card sx={{ mb: 2, bgcolor: 'primary.50' }}>
            <CardContent sx={{ py: 1 }}>
              <Typography variant="body2" color="primary.main">
                –°–µ—Å—ñ—è: {ui.sessionId} | –ï—Ç–∞–ø: {currentStage}/4
                {loading.isSyncing && ' | –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è...'}
              </Typography>
            </CardContent>
          </Card>
        )}

        {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è */}
        {(ui.isNavigating || loading.isStarting || loading.isGoingBack || loading.isCanceling) && (
          <Box sx={{ mb: 2 }}>
            <LinearProgress />
            <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
              {loading.isStarting && '–ó–∞–ø—É—Å–∫ wizard...'}
              {loading.isGoingBack && '–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥...'}
              {loading.isCanceling && '–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è...'}
              {ui.isNavigating &&
                !loading.isStarting &&
                !loading.isGoingBack &&
                !loading.isCanceling &&
                '–ù–∞–≤—ñ–≥–∞—Ü—ñ—è...'}
            </Typography>
          </Box>
        )}

        {/* –ü–æ–º–∏–ª–∫–∏ */}
        {ui.lastError && (
          <Alert severity="error" sx={{ mb: 2 }} onClose={() => ui.setLastError(null)}>
            {ui.lastError}
          </Alert>
        )}

        {/* –°—Ç–µ–ø–ø–µ—Ä */}
        {hasSession && ui.currentState && (
          <Box sx={{ mb: 3 }}>
            <Stepper activeStep={currentStage - 1} alternativeLabel>
              {Object.entries(MAIN_WIZARD_STATES).map(([stage, name]) => (
                <Step key={stage}>
                  <StepLabel>{name as string}</StepLabel>
                </Step>
              ))}
            </Stepper>
          </Box>
        )}

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Ç–æ—á–Ω–æ–≥–æ –µ—Ç–∞–ø—É */}
        <Box sx={{ minHeight: 400 }}>{renderCurrentStage()}</Box>

        {/* –ö–æ–Ω—Ç—Ä–æ–ª–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó */}
        {hasSession && ui.currentState && (
          <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 3 }}>
            <Stack direction="row" spacing={2}>
              <Button
                variant="outlined"
                onClick={handleGoBack}
                disabled={
                  !ui.canGoBack || ui.isNavigating || loading.isGoingBack || ui.currentStage <= 1
                }
              >
                –ù–∞–∑–∞–¥
              </Button>

              <Button
                variant="outlined"
                color="error"
                onClick={handleCancelOrder}
                disabled={ui.isNavigating || loading.isCanceling}
              >
                –°–∫–∞—Å—É–≤–∞—Ç–∏
              </Button>
            </Stack>

            <Stack direction="row" spacing={2}>
              {/* –ö–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ç–∞–ø—ñ–≤ */}
              {ui.currentState === MAIN_WIZARD_STATES.CLIENT_SELECTION && (
                <Button
                  variant="contained"
                  onClick={handleCompleteStage1}
                  disabled={ui.isNavigating || loading.isCompletingStage}
                >
                  –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –µ—Ç–∞–ø 1
                </Button>
              )}

              {ui.currentState === MAIN_WIZARD_STATES.ITEM_MANAGEMENT && (
                <Button
                  variant="contained"
                  onClick={handleCompleteStage2}
                  disabled={ui.isNavigating || loading.isCompletingStage}
                >
                  –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –µ—Ç–∞–ø 2
                </Button>
              )}

              {ui.currentState === MAIN_WIZARD_STATES.EXECUTION_PARAMS && (
                <Button
                  variant="contained"
                  onClick={() => {
                    // TODO: –î–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—Ä–µ—Ç—å–æ–≥–æ –µ—Ç–∞–ø—É
                    console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—Ä–µ—Ç—å–æ–≥–æ –µ—Ç–∞–ø—É');
                  }}
                  disabled={ui.isNavigating || loading.isCompletingStage}
                >
                  –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –µ—Ç–∞–ø 3
                </Button>
              )}

              {ui.currentState === MAIN_WIZARD_STATES.ORDER_CONFIRMATION && (
                <Button
                  variant="contained"
                  color="success"
                  onClick={() => {
                    // TODO: –î–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                    console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
                  }}
                  disabled={ui.isNavigating || loading.isCompletingStage}
                >
                  –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                </Button>
              )}
            </Stack>
          </Box>
        )}

        {/* Debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è */}
        {ui.compactMode && (
          <Card sx={{ mt: 2, bgcolor: 'grey.100' }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                üêõ Debug Info
              </Typography>
              <Typography variant="body2" component="pre" sx={{ fontSize: '0.8rem' }}>
                UI State:{' '}
                {JSON.stringify(
                  {
                    sessionId: ui.sessionId,
                    currentState: ui.currentState,
                    currentStage: ui.currentStage,
                    canGoBack: ui.canGoBack,
                    isNavigating: ui.isNavigating,
                    completedStages: ui.completedStages,
                    lastError: ui.lastError,
                  },
                  null,
                  2
                )}
                {'\n\n'}
                Backend Data: {JSON.stringify(data.backendState, null, 2)}
                {'\n\n'}
                Loading: {JSON.stringify(loading, null, 2)}
              </Typography>
            </CardContent>
          </Card>
        )}

        {/* –ö–æ–Ω—Ç—Ä–æ–ª–∏ UI */}
        <Box sx={{ mt: 2, display: 'flex', gap: 1 }}>
          <Button size="small" onClick={() => ui.setCompactMode(!ui.compactMode)}>
            {ui.compactMode ? '–°—Ö–æ–≤–∞—Ç–∏ Debug' : '–ü–æ–∫–∞–∑–∞—Ç–∏ Debug'}
          </Button>

          <Button size="small" onClick={() => ui.setShowHints(!ui.showHints)}>
            {ui.showHints ? '–°—Ö–æ–≤–∞—Ç–∏ –ø—ñ–¥–∫–∞–∑–∫–∏' : '–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—ñ–¥–∫–∞–∑–∫–∏'}
          </Button>
        </Box>
      </Paper>
    </Container>
  );
};
