'use client';

/**
 * @fileoverview –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è Order Wizard
 *
 * –ü—Ä–∏–∫–ª–∞–¥ "—Ç–æ–Ω–∫–æ–≥–æ" UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∑–≥—ñ–¥–Ω–æ –∑ –ø—Ä–∏–Ω—Ü–∏–ø–æ–º "FSD outside".
 * –í—Å—é –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫—É –æ—Ç—Ä–∏–º—É—î –∑ –¥–æ–º–µ–Ω–Ω–æ–≥–æ —à–∞—Ä—É.
 */

import {
  Box,
  Stepper,
  Step,
  StepLabel,
  Typography,
  Alert,
  LinearProgress,
  Button,
  Paper,
  Container,
} from '@mui/material';
import React from 'react';

import {
  useOrderWizard,
  WIZARD_STAGES,
  WIZARD_STAGE_NAMES,
  type WizardStage,
} from '@/domains/wizard';

// –Ü–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –µ—Ç–∞–ø—ñ–≤
import { Stage1ClientSelection } from './stages/Stage1ClientSelection';
// import { Stage2ItemsManagement } from './stages/Stage2ItemsManagement';
// import { Stage3OrderParameters } from './stages/Stage3OrderParameters';
// import { Stage4Finalization } from './stages/Stage4Finalization';

export const OrderWizardContainer: React.FC = () => {
  // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—é —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –∑ –¥–æ–º–µ–Ω–Ω–æ–≥–æ —à–∞—Ä—É
  const wizard = useOrderWizard();

  const {
    coordinator: { currentStage, isWizardComplete, workflow, stagesStatus },
    isAnyStageLoading,
    hasAnyError,
    canProceedToNextStage,
    goToStage,
    goToNextStage,
    goToPreviousStage,
  } = wizard;

  // –†–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –µ—Ç–∞–ø—É
  const renderCurrentStage = (): React.ReactNode => {
    switch (currentStage) {
      case WIZARD_STAGES.CLIENT_SELECTION:
        return <Stage1ClientSelection wizard={wizard} />;

      case WIZARD_STAGES.ITEMS_MANAGEMENT:
        return (
          <Typography variant="h6" sx={{ p: 3 }}>
            –ï—Ç–∞–ø 2: –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ (—É —Ä–æ–∑—Ä–æ–±—Ü—ñ)
          </Typography>
        );

      case WIZARD_STAGES.ORDER_PARAMETERS:
        return (
          <Typography variant="h6" sx={{ p: 3 }}>
            –ï—Ç–∞–ø 3: –ó–∞–≥–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (—É —Ä–æ–∑—Ä–æ–±—Ü—ñ)
          </Typography>
        );

      case WIZARD_STAGES.FINALIZATION:
        return (
          <Typography variant="h6" sx={{ p: 3 }}>
            –ï—Ç–∞–ø 4: –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è (—É —Ä–æ–∑—Ä–æ–±—Ü—ñ)
          </Typography>
        );

      default:
        return <Alert severity="error">–ù–µ–≤—ñ–¥–æ–º–∏–π –µ—Ç–∞–ø: {currentStage}</Alert>;
    }
  };

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –¥–ª—è —Å—Ç–µ–ø–ø–µ—Ä–∞
  const getStepStatus = (stage: WizardStage): 'completed' | 'active' | 'disabled' => {
    if (stage < currentStage) return 'completed';
    if (stage === currentStage) return 'active';
    return 'disabled';
  };

  return (
    <Container maxWidth="lg" sx={{ py: 3 }}>
      <Paper elevation={2} sx={{ p: 3 }}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <Typography variant="h4" component="h1" gutterBottom align="center">
          Order Wizard - –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        </Typography>

        {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è */}
        {isAnyStageLoading && (
          <Box sx={{ mb: 2 }}>
            <LinearProgress />
            <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
              –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...
            </Typography>
          </Box>
        )}

        {/* –°—Ç–µ–ø–ø–µ—Ä */}
        <Box sx={{ mb: 4 }}>
          <Stepper activeStep={currentStage - 1} orientation="horizontal" sx={{ mb: 3 }}>
            {Object.entries(WIZARD_STAGE_NAMES).map(([stageNumber, stageName]) => {
              const stage = parseInt(stageNumber) as WizardStage;
              const status = getStepStatus(stage);

              return (
                <Step key={stage} completed={status === 'completed'}>
                  <StepLabel
                    onClick={() => goToStage(stage)}
                    sx={{
                      cursor: status !== 'disabled' ? 'pointer' : 'default',
                      opacity: status === 'disabled' ? 0.5 : 1,
                    }}
                  >
                    {stageName}
                  </StepLabel>
                </Step>
              );
            })}
          </Stepper>
        </Box>

        {/* –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏ */}
        {hasAnyError && (
          <Alert severity="error" sx={{ mb: 3 }}>
            <Typography variant="h6">–í–∏–Ω–∏–∫–ª–∏ –ø–æ–º–∏–ª–∫–∏</Typography>
            <Typography variant="body2">–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑</Typography>
          </Alert>
        )}

        {/* –ü–æ—Ç–æ—á–Ω–∏–π –µ—Ç–∞–ø */}
        <Box sx={{ minHeight: 400, mb: 3 }}>{renderCurrentStage()}</Box>

        {/* –ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ –∫–Ω–æ–ø–∫–∏ */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 3 }}>
          <Button
            variant="outlined"
            onClick={goToPreviousStage}
            disabled={currentStage === 1 || isAnyStageLoading}
          >
            –ù–∞–∑–∞–¥
          </Button>

          <Box sx={{ display: 'flex', gap: 2 }}>
            {!isWizardComplete && (
              <Button
                variant="contained"
                onClick={goToNextStage}
                disabled={!canProceedToNextStage || isAnyStageLoading}
              >
                {currentStage === 4 ? '–ó–∞–≤–µ—Ä—à–∏—Ç–∏' : '–î–∞–ª—ñ'}
              </Button>
            )}

            {isWizardComplete && (
              <Alert severity="success">
                <Typography variant="h6">üéâ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!</Typography>
              </Alert>
            )}
          </Box>
        </Box>

        {/* Debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è (—Ç—ñ–ª—å–∫–∏ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ) */}
        {process.env.NODE_ENV === 'development' && (
          <Box sx={{ mt: 4, p: 2, bgcolor: 'grey.100', borderRadius: 1 }}>
            <Typography variant="h6" gutterBottom>
              Debug Info:
            </Typography>
            <Typography variant="body2">
              Current Stage: {currentStage}
              <br />
              Can Proceed: {canProceedToNextStage ? 'Yes' : 'No'}
              <br />
              Is Loading: {isAnyStageLoading ? 'Yes' : 'No'}
              <br />
              Has Errors: {hasAnyError ? 'Yes' : 'No'}
              <br />
              Is Complete: {isWizardComplete ? 'Yes' : 'No'}
            </Typography>
          </Box>
        )}
      </Paper>
    </Container>
  );
};
