'use client';

import { Person, PersonAdd } from '@mui/icons-material';
import { Box, Typography, Tabs, Tab, Paper, Alert, Fade } from '@mui/material';
import { useState } from 'react';

import { useClientManagement } from '@/domain/wizard';

import { ClientCreateForm } from './client/ClientCreateForm';
import { ClientSearchForm } from './client/ClientSearchForm';
import { ClientSearchResults } from './client/ClientSearchResults';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`client-tabpanel-${index}`}
      aria-labelledby={`client-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  );
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–∏–±–æ—Ä—É –∫–ª—ñ—î–Ω—Ç–∞ (–ï—Ç–∞–ø 1.1)
 * –í–∫–ª—é—á–∞—î –ø–æ—à—É–∫ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ
 */
export const ClientSelectionStep = () => {
  const [tabValue, setTabValue] = useState(0);

  const {
    searchResults,
    selectedClient,
    isSearching,
    isCreating,
    searchError,
    operationError,
    hasSearchResults,
    searchTerm,
  } = useClientManagement();

  // –®–í–ò–î–ö–ò–ô DEBUG: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω
  console.log('üîç –°–¢–ê–ù –ü–û–®–£–ö–£:', {
    searchTerm,
    searchTermLength: searchTerm?.length,
    searchResults: searchResults?.length,
    shouldShow: searchTerm && searchTerm.length >= 2,
  });

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  return (
    <Box>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Typography variant="h5" component="h2" gutterBottom>
        –í–∏–±—ñ—Ä –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
      </Typography>

      <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
        –ó–Ω–∞–π–¥—ñ—Ç—å —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–æ–≥–æ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
      </Typography>

      {/* –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ */}
      {selectedClient && (
        <Fade in={!!selectedClient}>
          <Alert severity="success" sx={{ mb: 3 }}>
            <Typography variant="subtitle2">
              –í–∏–±—Ä–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞: {selectedClient.firstName} {selectedClient.lastName}
            </Typography>
            <Typography variant="body2">
              –¢–µ–ª–µ—Ñ–æ–Ω: {selectedClient.phone}
              {selectedClient.email && ` | Email: ${selectedClient.email}`}
            </Typography>
          </Alert>
        </Fade>
      )}

      {/* –í–∫–ª–∞–¥–∫–∏ */}
      <Paper elevation={1}>
        <Tabs
          value={tabValue}
          onChange={handleTabChange}
          aria-label="client selection tabs"
          sx={{ borderBottom: 1, borderColor: 'divider' }}
        >
          <Tab
            icon={<Person />}
            label="–ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞"
            id="client-tab-0"
            aria-controls="client-tabpanel-0"
          />
          <Tab
            icon={<PersonAdd />}
            label="–ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç"
            id="client-tab-1"
            aria-controls="client-tabpanel-1"
          />
        </Tabs>

        {/* –í–∫–ª–∞–¥–∫–∞ –ø–æ—à—É–∫—É */}
        <TabPanel value={tabValue} index={0}>
          <ClientSearchForm isLoading={isSearching} error={searchError} />

          {/* –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ —î –ø–æ—à—É–∫–æ–≤–∏–π —Ç–µ—Ä–º—ñ–Ω —ñ –ø–æ—à—É–∫ –∞–∫—Ç–∏–≤–Ω–∏–π –∞–±–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π */}
          {searchTerm && searchTerm.length >= 2 && (
            <Box sx={{ mt: 2 }}>
              <ClientSearchResults
                results={searchResults || []}
                selectedClient={selectedClient}
                isLoading={isSearching}
              />
            </Box>
          )}
        </TabPanel>

        {/* –í–∫–ª–∞–¥–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è */}
        <TabPanel value={tabValue} index={1}>
          <ClientCreateForm isLoading={isCreating} error={operationError} />
        </TabPanel>
      </Paper>
    </Box>
  );
};
