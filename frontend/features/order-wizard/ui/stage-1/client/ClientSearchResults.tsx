'use client';

import {
  Box,
  Typography,
  Avatar,
  Chip,
  CircularProgress,
  Alert,
  Card,
  CardContent,
  Button,
} from '@mui/material';

import { useClientManagement } from '@/domain/wizard';

import type { ClientResponse } from '@/shared/api/generated/client/aksiApi.schemas';

interface ClientSearchResultsProps {
  results: ClientResponse[];
  selectedClient: ClientResponse | null;
  isLoading: boolean;
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤
 * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –≤–∏–±–æ—Ä—É
 */
export const ClientSearchResults = ({
  results,
  selectedClient,
  isLoading,
}: ClientSearchResultsProps) => {
  const { selectClient } = useClientManagement();

  // DEBUG: –©–æ –æ—Ç—Ä–∏–º—É—î –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  console.log('üìã ClientSearchResults –û–¢–†–ò–ú–ê–í:', {
    results,
    resultsLength: results?.length,
    resultsArray: Array.isArray(results),
    isLoading,
    selectedClient: selectedClient?.id,
  });

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –¥—É–±–ª—é–≤–∞–Ω–Ω—è
  const BORDER_RADIUS = 1;
  const PRIMARY_LIGHT_COLOR = 'primary.light';
  const PRIMARY_COLOR = 'primary.main';
  const BODY_VARIANT = 'body1';

  const formatContactMethods = (client: ClientResponse) => {
    const methods = [];
    if (client.phone) methods.push('–¢–µ–ª–µ—Ñ–æ–Ω');
    if (client.communicationChannels?.includes('VIBER')) methods.push('Viber');
    if (client.communicationChannels?.includes('SMS')) methods.push('SMS');
    if (client.email) methods.push('Email');
    return methods;
  };

  const getClientInitials = (client: ClientResponse) => {
    const firstName = client.firstName?.charAt(0) || '';
    const lastName = client.lastName?.charAt(0) || '';
    return `${firstName}${lastName}`.toUpperCase() || '??';
  };

  const getFullName = (client: ClientResponse) => {
    return `${client.firstName || ''} ${client.lastName || ''}`.trim() || '–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–ª—ñ—î–Ω—Ç';
  };

  const getClientDisplayInfo = (client: ClientResponse) => {
    const info = [];
    if (client.phone) info.push(`üìû ${client.phone}`);
    if (client.email) info.push(`‚úâÔ∏è ${client.email}`);
    if (client.address) info.push(`üìç ${client.address}`);
    return info;
  };

  const isSelected = (client: ClientResponse) => selectedClient?.id === client.id;

  // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  if (isLoading) {
    return (
      <Card sx={{ mt: 2, border: '3px solid blue', backgroundColor: 'lightblue' }}>
        <CardContent sx={{ p: 3 }}>
          <Typography variant="h6" gutterBottom>
            üîç –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤
          </Typography>
          <Box sx={{ display: 'flex', alignItems: 'center', p: 2 }}>
            <CircularProgress size={24} sx={{ mr: 2 }} />
            <Typography>–ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤...</Typography>
          </Box>
        </CardContent>
      </Card>
    );
  }

  // –Ø–∫—â–æ –Ω–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
  if (!results || !Array.isArray(results) || results.length === 0) {
    return (
      <Card sx={{ mt: 2, border: '3px solid orange', backgroundColor: 'lightyellow' }}>
        <CardContent sx={{ p: 3 }}>
          <Typography variant="h6" gutterBottom>
            üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É
          </Typography>
          <Alert severity="info">
            <Typography>
              –ö–ª—ñ—î–Ω—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—ó –ø–æ—à—É–∫—É –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞.
            </Typography>
          </Alert>
        </CardContent>
      </Card>
    );
  }

  // –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
  return (
    <Card sx={{ mt: 2, border: '3px solid red', backgroundColor: 'yellow' }}>
      <CardContent sx={{ p: 3 }}>
        <Typography variant="h6" gutterBottom>
          üîç –ó–Ω–∞–π–¥–µ–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏
        </Typography>

        <Alert severity="success" sx={{ mb: 2 }}>
          <Typography>‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {results.length} –∫–ª—ñ—î–Ω—Ç—ñ–≤</Typography>
        </Alert>

        {results.map((client, index) => {
          const clientId = client.id || index.toString();
          const selected = isSelected(client);

          return (
            <Card
              key={clientId}
              variant="outlined"
              sx={{
                mb: 2,
                p: 2,
                cursor: 'pointer',
                border: selected ? '3px solid' : '1px solid',
                borderColor: selected ? 'success.main' : 'divider',
                bgcolor: selected ? 'success.light' : 'background.paper',
                '&:hover': {
                  borderColor: PRIMARY_COLOR,
                  bgcolor: 'action.hover',
                },
              }}
              onClick={() => selectClient(client)}
            >
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                <Avatar
                  sx={{
                    bgcolor: selected ? 'success.main' : PRIMARY_COLOR,
                    width: 60,
                    height: 60,
                  }}
                >
                  {getClientInitials(client)}
                </Avatar>

                <Box sx={{ flex: 1 }}>
                  <Typography variant="h6" sx={{ mb: 1 }}>
                    {getFullName(client)}
                    {selected && ' ‚úÖ –í–ò–ë–†–ê–ù–û'}
                  </Typography>

                  {getClientDisplayInfo(client).map((info, idx) => (
                    <Typography key={idx} variant={BODY_VARIANT} sx={{ mb: 0.5 }}>
                      {info}
                    </Typography>
                  ))}

                  {formatContactMethods(client).length > 0 && (
                    <Box sx={{ mt: 1 }}>
                      {formatContactMethods(client).map((method) => (
                        <Chip key={method} label={method} size="small" sx={{ mr: 0.5 }} />
                      ))}
                    </Box>
                  )}
                </Box>

                <Button
                  variant={selected ? 'contained' : 'outlined'}
                  color={selected ? 'success' : 'primary'}
                  size="large"
                  onClick={(e) => {
                    e.stopPropagation();
                    selectClient(client);
                  }}
                >
                  {selected ? '–í–ò–ë–†–ê–ù–û ‚úÖ' : '–í–ò–ë–†–ê–¢–ò'}
                </Button>
              </Box>
            </Card>
          );
        })}
      </CardContent>
    </Card>
  );
};
