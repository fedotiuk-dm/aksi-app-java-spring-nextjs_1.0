'use client';

import React from 'react';
import { 
  Box, 
  TextField, 
  InputAdornment, 
  IconButton, 
  Typography,
  Paper,
  CircularProgress
} from '@mui/material';
import SearchIcon from '@mui/icons-material/Search';
import ClearIcon from '@mui/icons-material/Clear';
import { Client } from '@/features/order-wizard/model/types';
import { useClientSearch } from '@/features/order-wizard/hooks';

interface ClientSearchProps {
  onClientSelect: (client: Client) => void;
  className?: string;
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ö—É–∫ useClientSearch –¥–ª—è –ª–æ–≥—ñ–∫–∏ –ø–æ—à—É–∫—É
 */
export const ClientSearch: React.FC<ClientSearchProps> = ({ 
  onClientSelect,
  className 
}) => {
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ö—É–∫ –¥–ª—è –ª–æ–≥—ñ–∫–∏ –ø–æ—à—É–∫—É
  const {
    searchTerm,
    setSearchTerm,
    isSearching,
    searchResults,
    handleClearSearch,
    handleClientSelect
  } = useClientSearch({
    onClientSelect, // –ü–µ—Ä–µ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∫–ª—ñ—î–Ω—Ç–∞ —É —Ö—É–∫
  });
  
  return (
    <Box className={className}>
      <Typography variant="h6" gutterBottom>
        –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞
      </Typography>
      
      <Typography variant="body2" color="text.secondary" gutterBottom>
        –í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ, —Ç–µ–ª–µ—Ñ–æ–Ω –∞–±–æ email –∫–ª—ñ—î–Ω—Ç–∞ (–º—ñ–Ω—ñ–º—É–º 3 —Å–∏–º–≤–æ–ª–∏)
      </Typography>
      
      <TextField
        fullWidth
        label="–ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞"
        variant="outlined"
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        margin="normal"
        InputProps={{
          startAdornment: (
            <InputAdornment position="start">
              <SearchIcon />
            </InputAdornment>
          ),
          endAdornment: (
            <InputAdornment position="end">
              {isSearching ? (
                <CircularProgress size={20} />
              ) : searchTerm ? (
                <IconButton
                  aria-label="–û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ—à—É–∫"
                  onClick={handleClearSearch}
                  edge="end"
                >
                  <ClearIcon />
                </IconButton>
              ) : null}
            </InputAdornment>
          ),
        }}
        placeholder="–ü—Ä—ñ–∑–≤–∏—â–µ, —Ç–µ–ª–µ—Ñ–æ–Ω –∞–±–æ email"
        disabled={isSearching}
      />
      
      {searchResults.length > 0 && (
        <Paper sx={{ mt: 2, maxHeight: 400, overflow: 'auto', border: '1px solid #1976d2' }}>
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ */}
          <Typography
            variant="subtitle2"
            sx={{
              p: 2,
              bgcolor: 'primary.main',
              color: 'white',
              fontWeight: 'bold',
              fontSize: '1rem',
              boxShadow: '0 1px 3px rgba(0,0,0,0.12)'  
            }}
          >
            –ó–Ω–∞–π–¥–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤: {searchResults.length}
          </Typography>
          
          {/* –°–ø–∏—Å–æ–∫ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ */}
          <Box>
            {searchResults.map((client, index) => (
              <Box 
                key={client.id || `client-${index}`} 
                sx={{ 
                  p: 2, 
                  cursor: 'pointer',
                  bgcolor: index % 2 === 0 ? 'background.paper' : 'grey.50',
                  '&:hover': { bgcolor: 'action.hover' },
                  '&:not(:last-child)': { borderBottom: '1px solid', borderColor: 'divider' },
                  display: 'flex',
                  flexDirection: 'column',
                  gap: 0.5
                }}
                onClick={() => handleClientSelect(client)}
              >
                {/* –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –∫–ª—ñ—î–Ω—Ç–∞ */}
                <Typography variant="subtitle1" fontWeight="bold" color="primary">
                  {client.lastName} {client.firstName}
                </Typography>
                
                {/* –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è */}
                <Box sx={{ mt: 1, display: 'flex', flexDirection: 'column', gap: 0.5 }}>
                  {client.phone && (
                    <Typography variant="body2" sx={{ display: 'flex', alignItems: 'center' }}>
                      <strong>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</strong> {client.phone}
                    </Typography>
                  )}
                  
                  {client.email && (
                    <Typography variant="body2" sx={{ display: 'flex', alignItems: 'center' }}>
                      <strong>‚úâÔ∏è Email:</strong> {client.email}
                    </Typography>
                  )}
                  
                  {(client.address?.city || client.address?.street) && (
                    <Typography variant="body2" sx={{ display: 'flex', alignItems: 'center' }}>
                      <strong>üìç –ê–¥—Ä–µ—Å–∞:</strong> {[client.address.city, client.address.street].filter(Boolean).join(', ')}
                    </Typography>
                  )}
                </Box>
              </Box>
            ))}
          </Box>
        </Paper>
      )}
      
      {searchTerm.length >= 3 && searchResults.length === 0 && !isSearching && (
        <Typography variant="body2" color="text.secondary" sx={{ mt: 2 }}>
          –ö–ª—ñ—î–Ω—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞.
        </Typography>
      )}
    </Box>
  );
};

export default ClientSearch;
