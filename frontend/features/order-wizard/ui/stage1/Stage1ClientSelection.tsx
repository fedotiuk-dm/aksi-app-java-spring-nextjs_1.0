'use client';

/**
 * @fileoverview –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Stage1 –∑ –æ–±'—î–¥–Ω–∞–Ω–∏–º –µ–∫—Ä–∞–Ω–æ–º –≤–∏–±–æ—Ä—É –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞ —Ñ—ñ–ª—ñ—ó
 *
 * –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞: "DDD inside, FSD outside"
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–æ–º–ø–æ–∑–∏—Ü—ñ—è –∑ –æ–∫—Ä–µ–º–∏—Ö –ø–∞–Ω–µ–ª–µ–π
 */

import {
  PersonSearch as PersonSearchIcon,
  Store as StoreIcon,
  ArrowForward as ArrowForwardIcon,
  CheckCircle as CheckCircleIcon,
} from '@mui/icons-material';
import {
  Box,
  Container,
  Typography,
  Stepper,
  Step,
  StepLabel,
  Button,
  Card,
  CardContent,
  Alert,
  CircularProgress,
  Grid,
} from '@mui/material';
import { FC, useState, useEffect } from 'react';

import { useOrderWizardMain } from '@/domains/wizard/main';
import { useBasicOrderInfo } from '@/domains/wizard/stage1/basic-order-info';
import { useClientCreation } from '@/domains/wizard/stage1/client-creation';
import { useClientSearch } from '@/domains/wizard/stage1/client-search';

import { BasicOrderInfoForm } from './BasicOrderInfoForm';
import { BranchSelectionPanel } from './BranchSelectionPanel';
import { ClientSelectionPanel } from './ClientSelectionPanel';
import { CreateClientModal } from './CreateClientModal';

export const Stage1ClientSelection: FC = () => {
  const [selectedClientId, setSelectedClientId] = useState<string | null>(null);
  const [selectedBranchId, setSelectedBranchId] = useState<string | null>(null);
  const [showCreateClientModal, setShowCreateClientModal] = useState(false);

  // –ì–æ–ª–æ–≤–Ω–∏–π Order Wizard —Ö—É–∫
  const orderWizard = useOrderWizardMain();

  // –•—É–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—ñ–¥–µ—Ç–∞–ø—É
  const clientSearch = useClientSearch();
  const clientCreation = useClientCreation();
  const basicOrderInfo = useBasicOrderInfo();

  // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è sessionId –º—ñ–∂ –≥–æ–ª–æ–≤–Ω–∏–º Order Wizard —ñ –¥–æ–º–µ–Ω–∞–º–∏
  useEffect(() => {
    if (orderWizard.ui.sessionId) {
      console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è sessionId:', {
        orderWizardSessionId: orderWizard.ui.sessionId,
        clientSearchSessionId: clientSearch.ui.sessionId,
        basicOrderInfoSessionId: basicOrderInfo.ui.sessionId,
      });

      // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ sessionId –∑ —É—Å—ñ–º–∞ –¥–æ–º–µ–Ω–∞–º–∏
      if (orderWizard.ui.sessionId !== clientSearch.ui.sessionId) {
        console.log('üîÑ –û–Ω–æ–≤–ª—é—î–º–æ sessionId –¥–ª—è client-search');
        clientSearch.actions.setSessionId(orderWizard.ui.sessionId);
      }

      if (orderWizard.ui.sessionId !== basicOrderInfo.ui.sessionId) {
        console.log('üîÑ –û–Ω–æ–≤–ª—é—î–º–æ sessionId –¥–ª—è basic-order-info');
        basicOrderInfo.actions.setSessionId(orderWizard.ui.sessionId);
      }
    }
  }, [
    orderWizard.ui.sessionId,
    clientSearch.ui.sessionId,
    basicOrderInfo.ui.sessionId,
    clientSearch.actions,
    basicOrderInfo.actions,
  ]);

  // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
  const handleClientSelected = (clientId: string) => {
    setSelectedClientId(clientId);
    console.log('–ö–ª—ñ—î–Ω—Ç –æ–±—Ä–∞–Ω–∏–π:', clientId);
  };

  const handleClientCreated = (clientId: string) => {
    setSelectedClientId(clientId);
    console.log('–ö–ª—ñ—î–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π:', clientId);
  };

  const handleBranchSelected = (branchId: string) => {
    setSelectedBranchId(branchId);
    console.log('–§—ñ–ª—ñ—è –æ–±—Ä–∞–Ω–∞:', branchId);
  };

  // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ –¥–æ–º–µ–Ω–Ω–∏–º —Å—Ç–∞–Ω–æ–º
  useEffect(() => {
    if (basicOrderInfo.ui.selectedBranch?.id && !selectedBranchId) {
      setSelectedBranchId(basicOrderInfo.ui.selectedBranch.id);
    }
  }, [basicOrderInfo.ui.selectedBranch, selectedBranchId]);

  const handleCompleteStage1 = () => {
    if (selectedClientId && selectedBranchId && orderWizard.ui.sessionId) {
      orderWizard.actions.completeCurrentStage();
    }
  };

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ç–∞–ø—É
  const canCompleteStage = Boolean(
    selectedClientId &&
      selectedBranchId &&
      orderWizard.ui.sessionId &&
      !orderWizard.loading.isAnyLoading
  );

  // –ö—Ä–æ–∫–∏ –¥–ª—è Stepper
  const steps = ['–í–∏–±—ñ—Ä –∫–ª—ñ—î–Ω—Ç–∞', '–í–∏–±—ñ—Ä —Ñ—ñ–ª—ñ—ó', '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ç–∞–ø—É'];
  const activeStep = selectedClientId ? (selectedBranchId ? 2 : 1) : 0;

  return (
    <Container maxWidth="lg">
      <Box sx={{ py: 3 }}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <Typography variant="h4" gutterBottom>
          –ï—Ç–∞–ø 1: –ö–ª—ñ—î–Ω—Ç —Ç–∞ –±–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        </Typography>

        {/* –°—Ç–∞–Ω —Å–µ—Å—ñ—ó */}
        {!orderWizard.ui.sessionId && (
          <Alert severity="warning" sx={{ mb: 3 }}>
            <Typography variant="body1">
              –î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ Order Wizard
            </Typography>
            <Button
              variant="contained"
              onClick={orderWizard.actions.startNewOrder}
              disabled={orderWizard.loading.isStarting}
              sx={{ mt: 1 }}
            >
              {orderWizard.loading.isStarting ? '–ó–∞–ø—É—Å–∫...' : '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ Order Wizard'}
            </Button>
          </Alert>
        )}

        {/* –ü—Ä–æ–≥—Ä–µ—Å */}
        <Card sx={{ mb: 3 }}>
          <CardContent>
            <Stepper activeStep={activeStep} alternativeLabel>
              {steps.map((label, index) => (
                <Step key={label}>
                  <StepLabel
                    StepIconProps={{
                      icon:
                        index === 0 ? (
                          <PersonSearchIcon />
                        ) : index === 1 ? (
                          <StoreIcon />
                        ) : (
                          <CheckCircleIcon />
                        ),
                    }}
                  >
                    {label}
                  </StepLabel>
                </Step>
              ))}
            </Stepper>
          </CardContent>
        </Card>

        {/* –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        {orderWizard.ui.sessionId && (
          <Grid container spacing={3}>
            {/* –ü–∞–Ω–µ–ª—å –≤–∏–±–æ—Ä—É –∫–ª—ñ—î–Ω—Ç–∞ */}
            <Grid size={{ xs: 12, md: 6 }}>
              <ClientSelectionPanel
                onClientSelected={handleClientSelected}
                onCreateNewClient={() => setShowCreateClientModal(true)}
              />
            </Grid>

            {/* –ü–∞–Ω–µ–ª—å –≤–∏–±–æ—Ä—É —Ñ—ñ–ª—ñ—ó */}
            <Grid size={{ xs: 12, md: 6 }}>
              <BranchSelectionPanel onBranchSelected={handleBranchSelected} />
            </Grid>

            {/* –§–æ—Ä–º–∞ –æ—Å–Ω–æ–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É —Ñ—ñ–ª—ñ—ó) */}
            {selectedBranchId && (
              <Grid size={{ xs: 12 }}>
                <BasicOrderInfoForm onDataUpdated={() => console.log('–î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ')} />
              </Grid>
            )}
          </Grid>
        )}

        {/* –°—Ç–∞—Ç—É—Å –≤–∏–±–æ—Ä—É */}
        {(selectedClientId || selectedBranchId) && (
          <Card sx={{ mt: 3 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
              </Typography>

              {selectedClientId && (
                <Alert severity="success" sx={{ mb: 1 }}>
                  ‚úÖ –ö–ª—ñ—î–Ω—Ç –æ–±—Ä–∞–Ω–∏–π (ID: {selectedClientId})
                </Alert>
              )}

              {selectedBranchId && (
                <Alert severity="success" sx={{ mb: 1 }}>
                  ‚úÖ –§—ñ–ª—ñ—è –æ–±—Ä–∞–Ω–∞: {basicOrderInfo.ui.selectedBranch?.name || selectedBranchId}
                  {basicOrderInfo.ui.selectedBranch?.address && (
                    <Typography variant="body2" sx={{ mt: 0.5 }}>
                      üìç {basicOrderInfo.ui.selectedBranch.address}
                    </Typography>
                  )}
                </Alert>
              )}

              {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ç–∞–ø—É */}
              <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>
                <Button
                  variant="contained"
                  size="large"
                  onClick={handleCompleteStage1}
                  disabled={!canCompleteStage}
                  startIcon={
                    orderWizard.loading.isCompletingStage1 ? (
                      <CircularProgress size={20} />
                    ) : (
                      <ArrowForwardIcon />
                    )
                  }
                >
                  {orderWizard.loading.isCompletingStage1
                    ? '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ç–∞–ø—É...'
                    : '–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ï—Ç–∞–ø—É 2'}
                </Button>
              </Box>
            </CardContent>
          </Card>
        )}

        {/* –ü–æ–º–∏–ª–∫–∏ */}
        {orderWizard.errors.hasAnyError && (
          <Alert severity="error" sx={{ mt: 2 }}>
            <Typography variant="body2">
              –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {orderWizard.errors.stage1Error?.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}
            </Typography>
          </Alert>
        )}

        {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ */}
        <CreateClientModal
          open={showCreateClientModal}
          onClose={() => setShowCreateClientModal(false)}
          onClientCreated={handleClientCreated}
        />

        {/* Debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è (—Ç—ñ–ª—å–∫–∏ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ) */}
        {orderWizard.debug && (
          <Card sx={{ mt: 3, bgcolor: 'grey.100' }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                Debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
              </Typography>
              <pre style={{ fontSize: '12px', overflow: 'auto' }}>
                {JSON.stringify(
                  {
                    sessionId: orderWizard.ui.sessionId,
                    currentStage: orderWizard.ui.currentStage,
                    selectedClientId,
                    selectedBranchId,
                    canCompleteStage,
                    loading: orderWizard.loading,
                    clientSearch: {
                      sessionId: clientSearch.ui.sessionId,
                      searchResults: clientSearch.data.searchResults?.length || 0,
                    },
                    clientCreation: {
                      isFormVisible: clientCreation.ui.isFormVisible,
                      currentStep: clientCreation.ui.currentStep,
                    },
                    basicOrderInfo: {
                      selectedBranch: basicOrderInfo.ui.selectedBranch,
                      branches: (basicOrderInfo.ui.availableBranches || []).length,
                    },
                  },
                  null,
                  2
                )}
              </pre>
            </CardContent>
          </Card>
        )}
      </Box>
    </Container>
  );
};
