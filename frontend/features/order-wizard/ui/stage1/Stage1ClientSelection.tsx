'use client';

/**
 * @fileoverview –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Stage1 –∑ –æ–±'—î–¥–Ω–∞–Ω–∏–º –µ–∫—Ä–∞–Ω–æ–º –≤–∏–±–æ—Ä—É –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞ —Ñ—ñ–ª—ñ—ó
 *
 * –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞: "DDD inside, FSD outside"
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∫–æ–º–ø–æ–∑–∏—Ü—ñ–π–Ω–∏–π —Ö—É–∫ useStage1Workflow
 */

import {
  PersonSearch as PersonSearchIcon,
  Store as StoreIcon,
  ArrowForward as ArrowForwardIcon,
  CheckCircle as CheckCircleIcon,
} from '@mui/icons-material';
import {
  Box,
  Container,
  Typography,
  Stepper,
  Step,
  StepLabel,
  Button,
  Card,
  CardContent,
  Alert,
  CircularProgress,
  Grid,
} from '@mui/material';
import { FC, useState } from 'react';

import { useStage1Workflow } from '@/domains/wizard/stage1';
import { useMain } from '@/domains/wizard/main';
import { useMainStore } from '@/domains/wizard/main/store/main.store';

import { BasicOrderInfoForm } from './BasicOrderInfoForm';
import { BranchSelectionPanel } from './BranchSelectionPanel';
import { ClientSelectionPanel } from './ClientSelectionPanel';
import { CreateClientModal } from './CreateClientModal';

export const Stage1ClientSelection: FC = () => {
  const [showCreateClientModal, setShowCreateClientModal] = useState(false);

  // –ö–æ–º–ø–æ–∑–∏—Ü—ñ–π–Ω–∏–π —Ö—É–∫ –¥–ª—è –≤—Å—å–æ–≥–æ Stage1
  const stage1 = useStage1Workflow();

  // –ì–æ–ª–æ–≤–Ω–∏–π —Ö—É–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ç–∞–ø—É
  const main = useMain();

  // –û—Ç—Ä–∏–º—É—î–º–æ sessionId –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Å—Ç–æ—Ä—É
  const sessionId = useMainStore((state) => state.sessionId);

  // –†–µ–∂–∏–º –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤ –º–∞—î –±—É—Ç–∏ –∑–∞–≤–∂–¥–∏ –∞–∫—Ç–∏–≤–Ω–∏–π

  // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
  const handleClientSelected = (clientId: string) => {
    console.log('–ö–ª—ñ—î–Ω—Ç –æ–±—Ä–∞–Ω–∏–π:', clientId);
    // –õ–æ–≥—ñ–∫–∞ –≤–∏–±–æ—Ä—É –∫–ª—ñ—î–Ω—Ç–∞ –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –≤ –¥–æ–º–µ–Ω–Ω–æ–º—É —Ö—É–∫—É
  };

  const handleClientCreated = (clientId: string) => {
    console.log('–ö–ª—ñ—î–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π:', clientId);
    setShowCreateClientModal(false);
    // –õ–æ–≥—ñ–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –≤ –¥–æ–º–µ–Ω–Ω–æ–º—É —Ö—É–∫—É
  };

  const handleBranchSelected = (branchId: string) => {
    console.log('–§—ñ–ª—ñ—è –æ–±—Ä–∞–Ω–∞:', branchId);
    // –õ–æ–≥—ñ–∫–∞ –≤–∏–±–æ—Ä—É —Ñ—ñ–ª—ñ—ó –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –≤ –¥–æ–º–µ–Ω–Ω–æ–º—É —Ö—É–∫—É
  };

  const handleCompleteStage1 = () => {
    if (stage1.readiness.isStage1Ready) {
      console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è Stage1');
      // –í–∏–∫–ª–∏–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ç–∞–ø—É —á–µ—Ä–µ–∑ –≥–æ–ª–æ–≤–Ω–∏–π —Ö—É–∫
      main.actions.completeStage1();
    }
  };

  // –ö—Ä–æ–∫–∏ –¥–ª—è Stepper –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø—ñ–¥–µ—Ç–∞–ø—ñ–≤
  const steps = ['–ü–æ—à—É–∫/—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞', '–ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ç–∞–ø—É'];

  // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫—Ä–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø—Ä–æ–≥—Ä–µ—Å—É
  const getActiveStep = () => {
    if (!stage1.readiness.isClientSearchCompleted) return 0;
    if (!stage1.readiness.isBasicOrderInfoCompleted) return 1;
    return 2;
  };

  return (
    <Container maxWidth="lg">
      <Box sx={{ py: 3 }}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <Typography variant="h4" gutterBottom>
          –ï—Ç–∞–ø 1: –ö–ª—ñ—î–Ω—Ç —Ç–∞ –±–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        </Typography>

        {/* –°—Ç–∞–Ω —Å–µ—Å—ñ—ó */}
        {!sessionId && (
          <Alert severity="warning" sx={{ mb: 3 }}>
            <Typography variant="body1">
              –î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ Order Wizard
            </Typography>
            <Button
              variant="contained"
              onClick={() => {
                // TODO: –î–æ–¥–∞—Ç–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é —Å–µ—Å—ñ—ó
                console.log('–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Å—ñ—ó');
              }}
              disabled={stage1.loading.isAnyLoading}
              sx={{ mt: 1 }}
            >
              {stage1.loading.isAnyLoading ? '–ó–∞–ø—É—Å–∫...' : '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ Order Wizard'}
            </Button>
          </Alert>
        )}

        {/* –ü—Ä–æ–≥—Ä–µ—Å */}
        <Card sx={{ mb: 3 }}>
          <CardContent>
            <Stepper activeStep={getActiveStep()} alternativeLabel>
              {steps.map((label, index) => (
                <Step key={label}>
                  <StepLabel
                    StepIconProps={{
                      icon:
                        index === 0 ? (
                          <PersonSearchIcon />
                        ) : index === 1 ? (
                          <StoreIcon />
                        ) : (
                          <CheckCircleIcon />
                        ),
                    }}
                  >
                    {label}
                  </StepLabel>
                </Step>
              ))}
            </Stepper>
          </CardContent>
        </Card>

        {/* –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        {sessionId && (
          <Grid container spacing={3}>
            {/* –ü–∞–Ω–µ–ª—å –≤–∏–±–æ—Ä—É –∫–ª—ñ—î–Ω—Ç–∞ */}
            <Grid size={{ xs: 12, md: 6 }}>
              <ClientSelectionPanel
                onClientSelected={handleClientSelected}
                onCreateNewClient={() => setShowCreateClientModal(true)}
              />
            </Grid>

            {/* –ü–∞–Ω–µ–ª—å –≤–∏–±–æ—Ä—É —Ñ—ñ–ª—ñ—ó */}
            <Grid size={{ xs: 12, md: 6 }}>
              <BranchSelectionPanel onBranchSelected={handleBranchSelected} />
            </Grid>

            {/* –ï—Ç–∞–ø 1.3: –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è */}
            <Grid size={{ xs: 12 }}>
              <BasicOrderInfoForm />
            </Grid>
          </Grid>
        )}

        {/* –°—Ç–∞—Ç—É—Å –≤–∏–±–æ—Ä—É */}
        {(stage1.readiness.isClientSearchCompleted ||
          stage1.readiness.isBasicOrderInfoCompleted) && (
          <Card sx={{ mt: 3 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
              </Typography>

              {stage1.readiness.isClientSearchCompleted && (
                <Alert severity="success" sx={{ mb: 1 }}>
                  ‚úÖ –ö–ª—ñ—î–Ω—Ç –æ–±—Ä–∞–Ω–∏–π
                  {stage1.substeps.clientSearch.computed.selectedClient && (
                    <Typography variant="body2" sx={{ mt: 0.5 }}>
                      {stage1.substeps.clientSearch.computed.selectedClient.firstName}{' '}
                      {stage1.substeps.clientSearch.computed.selectedClient.lastName}
                      {stage1.substeps.clientSearch.computed.selectedClient.phone &&
                        ` ‚Ä¢ ${stage1.substeps.clientSearch.computed.selectedClient.phone}`}
                    </Typography>
                  )}
                </Alert>
              )}

              {stage1.readiness.isBasicOrderInfoCompleted && (
                <Alert severity="success" sx={{ mb: 1 }}>
                  ‚úÖ –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–ø–æ–≤–Ω–µ–Ω–∞
                  {stage1.substeps.basicOrderInfo.computed.selectedBranch && (
                    <Typography variant="body2" sx={{ mt: 0.5 }}>
                      üìç {stage1.substeps.basicOrderInfo.computed.selectedBranch.name}
                      {stage1.substeps.basicOrderInfo.computed.selectedBranch.address &&
                        ` ‚Ä¢ ${stage1.substeps.basicOrderInfo.computed.selectedBranch.address}`}
                    </Typography>
                  )}
                  {stage1.substeps.basicOrderInfo.computed.hasReceiptNumber && (
                    <Typography variant="body2" sx={{ mt: 0.5 }}>
                      üßæ –ö–≤–∏—Ç–∞–Ω—Ü—ñ—è –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞
                    </Typography>
                  )}
                </Alert>
              )}

              {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ç–∞–ø—É */}
              <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>
                <Button
                  variant="contained"
                  size="large"
                  onClick={handleCompleteStage1}
                  disabled={!stage1.readiness.isStage1Ready}
                  startIcon={
                    stage1.loading.isAnyLoading ? (
                      <CircularProgress size={20} />
                    ) : (
                      <ArrowForwardIcon />
                    )
                  }
                >
                  {stage1.loading.isAnyLoading ? '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ç–∞–ø—É...' : '–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ï—Ç–∞–ø—É 2'}
                </Button>
              </Box>
            </CardContent>
          </Card>
        )}

        {/* –ü–æ–º–∏–ª–∫–∏ */}
        {stage1.loading.isAnyLoading && (
          <Alert severity="info" sx={{ mt: 2 }}>
            <Typography variant="body2">–û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö...</Typography>
          </Alert>
        )}

        {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ */}
        <CreateClientModal
          open={showCreateClientModal}
          onClose={() => setShowCreateClientModal(false)}
          onClientCreated={handleClientCreated}
        />
      </Box>
    </Container>
  );
};
