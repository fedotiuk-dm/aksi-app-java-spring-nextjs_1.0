'use client';

import {
  Box,
  Stepper,
  Step,
  StepLabel,
  Typography,
  Alert,
  LinearProgress,
  Card,
  CardContent,
} from '@mui/material';
import React, { useEffect } from 'react';

// Workflow —Ö—É–∫
import { useStage1Workflow } from '@/domains/wizard/stage1/workflow';

// UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –∫—Ä–æ–∫—ñ–≤
import { BasicOrderInfoStep } from './BasicOrderInfoStep';
import { ClientCreationStep } from './ClientCreationStep';
import { ClientSearchStep } from './ClientSearchStep';

interface Stage1ContainerProps {
  sessionId: string;
  onStageCompleted: () => void;
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –∫—Ä–æ–∫—ñ–≤
const SUBSTEPS = {
  CLIENT_SEARCH: 'client-search' as const,
  CLIENT_CREATION: 'client-creation' as const,
  BASIC_ORDER_INFO: 'basic-order-info' as const,
};

const stepLabels = {
  [SUBSTEPS.CLIENT_SEARCH]: '–ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞',
  [SUBSTEPS.CLIENT_CREATION]: '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞',
  [SUBSTEPS.BASIC_ORDER_INFO]: '–ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è',
};

export const Stage1Container: React.FC<Stage1ContainerProps> = ({
  sessionId,
  onStageCompleted,
}) => {
  // ========== WORKFLOW –•–£–ö–ò ==========
  const { ui, loading, mutations } = useStage1Workflow();

  // ========== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ==========
  useEffect(() => {
    const initializeWorkflow = () => {
      if (!ui.isInitialized && sessionId) {
        console.log('üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Stage1 workflow –∑ sessionId:', sessionId);
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ workflow –∑ sessionId –≤—ñ–¥ OrderWizardContainer
        ui.initializeWorkflow(sessionId);
        console.log('‚úÖ Stage1 workflow —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑ sessionId');
      }
    };

    initializeWorkflow();
  }, [ui.isInitialized, sessionId, ui]);

  // ========== EVENT HANDLERS ==========
  const handleClientSelected = async (clientId: string) => {
    console.log('üîÑ –í–∏–±—ñ—Ä –∫–ª—ñ—î–Ω—Ç–∞:', clientId);
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–º–ø–æ–∑–∏—Ü—ñ–π–Ω–∏–π –º–µ—Ç–æ–¥ –∑ workflow
    const success = await ui.selectClient(clientId, 'client-search');
    if (success) {
      console.log('‚úÖ –ö–ª—ñ—î–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–∞–Ω–∏–π, –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ basic-order-info');
    } else {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –∫–ª—ñ—î–Ω—Ç–∞');
    }
  };

  const handleCreateNewClient = () => {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ client-creation
    ui.goToSubstep(SUBSTEPS.CLIENT_CREATION);
  };

  const handleClientCreated = async (clientId: string) => {
    console.log('üîÑ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –≤–∏–±—ñ—Ä –∫–ª—ñ—î–Ω—Ç–∞:', clientId);
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–º–ø–æ–∑–∏—Ü—ñ–π–Ω–∏–π –º–µ—Ç–æ–¥ –∑ workflow
    const success = await ui.selectClient(clientId, 'client-creation');
    if (success) {
      console.log('‚úÖ –ö–ª—ñ—î–Ω—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —Ç–∞ –æ–±—Ä–∞–Ω–∏–π, –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ basic-order-info');
    } else {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ/–≤–∏–±–æ—Ä—ñ –∫–ª—ñ—î–Ω—Ç–∞');
    }
  };

  const handleGoBackToSearch = () => {
    ui.goToSubstep(SUBSTEPS.CLIENT_SEARCH);
  };

  const handleGoBackToClient = () => {
    // –Ø–∫—â–æ client-creation –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è —Ç—É–¥–∏
    if (ui.completedSubsteps.has(SUBSTEPS.CLIENT_CREATION)) {
      ui.goToSubstep(SUBSTEPS.CLIENT_CREATION);
    } else {
      // –Ü–Ω–∞–∫—à–µ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –ø–æ—à—É–∫—É
      ui.goToSubstep(SUBSTEPS.CLIENT_SEARCH);
    }
  };

  const handleOrderInfoCompleted = async () => {
    try {
      console.log('üîÑ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è Stage1, sessionId:', ui.sessionId);
      console.log('üîÑ –û–±—Ä–∞–Ω–∏–π –∫–ª—ñ—î–Ω—Ç:', ui.selectedClientId);
      console.log('üîÑ –ü–æ—Ç–æ—á–Ω–∏–π –ø—ñ–¥–µ—Ç–∞–ø:', ui.currentSubstep);

      // –ó–∞–≤–µ—Ä—à—É—î–º–æ basic-order-info
      ui.markSubstepCompleted(SUBSTEPS.BASIC_ORDER_INFO);
      ui.completeWorkflow();

      console.log('‚úÖ Stage1 workflow –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ OrderWizardContainer');
      // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ OrderWizardContainer –ø—Ä–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
      // OrderWizardContainer –≤–∏–∫–ª–∏—á–µ API complete-stage1
      onStageCompleted();
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è Stage1:', error);
      ui.setValidationError('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ç–∞–ø—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  };

  // ========== RENDER HELPERS ==========
  const getCurrentStepIndex = (): number => {
    switch (ui.currentSubstep) {
      case SUBSTEPS.CLIENT_SEARCH:
        return 0;
      case SUBSTEPS.CLIENT_CREATION:
        return 1;
      case SUBSTEPS.BASIC_ORDER_INFO:
        return 2;
      default:
        return 0;
    }
  };

  const renderCurrentStep = (): React.ReactNode => {
    if (!ui.isInitialized) {
      return (
        <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>
          <LinearProgress sx={{ width: '50%' }} />
        </Box>
      );
    }

    switch (ui.currentSubstep) {
      case SUBSTEPS.CLIENT_SEARCH:
        return (
          <ClientSearchStep
            onClientSelected={handleClientSelected}
            onCreateNewClient={handleCreateNewClient}
          />
        );

      case SUBSTEPS.CLIENT_CREATION:
        return (
          <ClientCreationStep
            onClientCreated={handleClientCreated}
            onGoBack={handleGoBackToSearch}
          />
        );

      case SUBSTEPS.BASIC_ORDER_INFO:
        return (
          <BasicOrderInfoStep
            selectedClientId={ui.selectedClientId || ''}
            onOrderInfoCompleted={handleOrderInfoCompleted}
            onGoBack={handleGoBackToClient}
          />
        );

      default:
        return <Alert severity="error">–ù–µ–≤—ñ–¥–æ–º–∏–π –∫—Ä–æ–∫: {ui.currentSubstep}</Alert>;
    }
  };

  // ========== RENDER ==========
  return (
    <Box sx={{ width: '100%' }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Ç–∞–ø—É */}
      <Typography variant="h4" component="h2" gutterBottom align="center">
        –ï—Ç–∞–ø 1: –ö–ª—ñ—î–Ω—Ç —Ç–∞ –±–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
      </Typography>

      <Typography variant="body1" color="text.secondary" align="center" sx={{ mb: 4 }}>
        –û–±–µ—Ä—ñ—Ç—å –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞ –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
      </Typography>

      {/* –°—Ç–µ–ø–ø–µ—Ä */}
      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Stepper activeStep={getCurrentStepIndex()} alternativeLabel>
            <Step completed={ui.completedSubsteps.has(SUBSTEPS.CLIENT_SEARCH)}>
              <StepLabel>–ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞</StepLabel>
            </Step>
            <Step completed={ui.completedSubsteps.has(SUBSTEPS.CLIENT_CREATION)}>
              <StepLabel optional={<Typography variant="caption">–û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ</Typography>}>
                –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
              </StepLabel>
            </Step>
            <Step completed={ui.completedSubsteps.has(SUBSTEPS.BASIC_ORDER_INFO)}>
              <StepLabel>–ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</StepLabel>
            </Step>
          </Stepper>
        </CardContent>
      </Card>

      {/* –ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó */}
      {ui.hasValidationErrors && ui.validationMessage && (
        <Alert severity="error" sx={{ mb: 2 }}>
          {ui.validationMessage}
        </Alert>
      )}

      {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è */}
      {loading.isLoading && (
        <Box sx={{ mb: 2 }}>
          <LinearProgress />
          <Typography variant="body2" color="text.secondary" sx={{ mt: 1, textAlign: 'center' }}>
            {loading.isInitializing && '–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è...'}
            {loading.isCompletingStage && '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ç–∞–ø—É 1...'}
            {loading.isSyncing && '–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è...'}
          </Typography>
        </Box>
      )}

      {/* –ü–æ—Ç–æ—á–Ω–∏–π –∫—Ä–æ–∫ */}
      <Box sx={{ minHeight: 600 }}>{renderCurrentStep()}</Box>

      {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–æ–≥—Ä–µ—Å */}
      <Card sx={{ mt: 3, bgcolor: 'grey.50' }}>
        <CardContent>
          <Typography variant="body2" color="text.secondary" align="center">
            <strong>–ü–æ—Ç–æ—á–Ω–∏–π –∫—Ä–æ–∫:</strong> {stepLabels[ui.currentSubstep]}
            {ui.sessionId && (
              <>
                {' ‚Ä¢ '}
                <strong>Session ID:</strong> {ui.sessionId.slice(0, 8)}...
              </>
            )}
            {ui.hasUnsavedChanges && (
              <>
                {' ‚Ä¢ '}
                <strong>–ù–µ–∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∑–º—ñ–Ω–∏</strong> ‚ö†Ô∏è
              </>
            )}
          </Typography>
        </CardContent>
      </Card>
    </Box>
  );
};
