'use client';

import { LocationOn as LocationIcon, Store as StoreIcon } from '@mui/icons-material';
import {
  Box,
  Card,
  CardContent,
  Typography,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Alert,
  Chip,
  CircularProgress,
} from '@mui/material';
import { FC, useEffect } from 'react';

import { useBasicOrderInfo } from '@/domains/wizard/stage1/basic-order-info';

interface BranchSelectionPanelProps {
  onBranchSelected?: (branchId: string) => void;
}

export const BranchSelectionPanel: FC<BranchSelectionPanelProps> = ({ onBranchSelected }) => {
  const { ui, loading, actions } = useBasicOrderInfo();

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ—ñ–ª—ñ—ó –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ sessionId
  useEffect(() => {
    if (ui.sessionId && (!ui.availableBranches || ui.availableBranches.length === 0)) {
      console.log('üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ—ñ–ª—ñ—ó –¥–ª—è sessionId:', ui.sessionId);
      actions.refreshBranchesData();
    }
  }, [ui.sessionId, ui.availableBranches, actions]);

  const handleBranchChange = async (branchId: string) => {
    try {
      console.log('üè¢ –í–∏–±–∏—Ä–∞—î–º–æ —Ñ—ñ–ª—ñ—é:', branchId);
      await actions.selectBranchForOrder(branchId);
      console.log('‚úÖ –§—ñ–ª—ñ—è –≤–∏–±—Ä–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
      onBranchSelected?.(branchId);
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É —Ñ—ñ–ª—ñ—ó:', error);
    }
  };

  const selectedBranch = ui.selectedBranch;
  const availableBranches = ui.availableBranches || [];

  return (
    <Card>
      <CardContent>
        <Typography
          variant="h6"
          gutterBottom
          sx={{ display: 'flex', alignItems: 'center', gap: 1 }}
        >
          <StoreIcon />
          –í–∏–±—ñ—Ä –ø—É–Ω–∫—Ç—É –ø—Ä–∏–π–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        </Typography>

        <Alert severity="info" sx={{ mb: 2 }}>
          <Typography variant="body2">
            –û–±–µ—Ä—ñ—Ç—å —Ñ—ñ–ª—ñ—é, –¥–µ –±—É–¥–µ –ø—Ä–∏–π–Ω—è—Ç–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –¶–µ –≤–ø–ª–∏–Ω–µ –Ω–∞ –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó —Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É
            —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.
          </Typography>
        </Alert>

        {/* –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ—ñ–ª—ñ–π */}
        {loading.isLoadingBranches && (
          <Box sx={{ display: 'flex', justifyContent: 'center', mb: 2 }}>
            <CircularProgress />
            <Typography variant="body2" sx={{ ml: 2 }}>
              –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ñ—ñ–ª—ñ–π...
            </Typography>
          </Box>
        )}

        {/* –°–µ–ª–µ–∫—Ç–æ—Ä —Ñ—ñ–ª—ñ–π */}
        <FormControl fullWidth sx={{ mb: 2 }} disabled={!ui.sessionId || loading.isLoadingBranches}>
          <InputLabel id="branch-select-label">–§—ñ–ª—ñ—è</InputLabel>
          <Select
            labelId="branch-select-label"
            value={selectedBranch?.id || ''}
            label="–§—ñ–ª—ñ—è"
            onChange={(e) => handleBranchChange(e.target.value)}
          >
            <MenuItem value="">
              <em>–û–±–µ—Ä—ñ—Ç—å —Ñ—ñ–ª—ñ—é</em>
            </MenuItem>
            {availableBranches.map((branch) => (
              <MenuItem key={branch.id} value={branch.id}>
                <Box>
                  <Typography variant="body1" fontWeight="medium">
                    {branch.name}
                  </Typography>
                  <Typography variant="body2" color="textSecondary">
                    {branch.address}
                  </Typography>
                </Box>
              </MenuItem>
            ))}
          </Select>
        </FormControl>

        {/* –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–±—Ä–∞–Ω—É —Ñ—ñ–ª—ñ—é */}
        {selectedBranch && (
          <Card variant="outlined" sx={{ mt: 2 }}>
            <CardContent>
              <Typography
                variant="subtitle1"
                gutterBottom
                sx={{ display: 'flex', alignItems: 'center', gap: 1 }}
              >
                <LocationIcon color="primary" />
                –û–±—Ä–∞–Ω–∞ —Ñ—ñ–ª—ñ—è
              </Typography>

              <Box sx={{ mb: 2 }}>
                <Chip
                  label={selectedBranch.name}
                  color="primary"
                  variant="outlined"
                  sx={{ mb: 1 }}
                />
              </Box>

              <Typography variant="body2" color="textSecondary" gutterBottom>
                <strong>–ê–¥—Ä–µ—Å–∞:</strong> {selectedBranch.address}
              </Typography>

              {selectedBranch.phone && (
                <Typography variant="body2" color="textSecondary" gutterBottom>
                  <strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {selectedBranch.phone}
                </Typography>
              )}

              {selectedBranch.workingHours && (
                <Typography variant="body2" color="textSecondary">
                  <strong>–†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏:</strong> {selectedBranch.workingHours}
                </Typography>
              )}
            </CardContent>
          </Card>
        )}

        {/* –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —è–∫—â–æ —Ñ—ñ–ª—ñ—è –Ω–µ –æ–±—Ä–∞–Ω–∞ */}
        {!selectedBranch && availableBranches.length > 0 && (
          <Alert severity="warning" sx={{ mt: 2 }}>
            –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ñ—ñ–ª—ñ—é –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
          </Alert>
        )}

        {/* –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ñ—ñ–ª—ñ–π */}
        {availableBranches.length === 0 && !loading.isLoadingBranches && ui.sessionId && (
          <Alert severity="error" sx={{ mt: 2 }}>
            –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ñ—ñ–ª—ñ–π. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
          </Alert>
        )}

        {/* Debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è */}
        {process.env.NODE_ENV === 'development' && (
          <Box sx={{ mt: 2, p: 1, bgcolor: 'grey.100', borderRadius: 1 }}>
            <Typography variant="caption" component="div">
              Debug: SessionId: {ui.sessionId || 'null'}, Branches: {availableBranches.length},
              Loading: {loading.isLoadingBranches ? 'true' : 'false'}, Selected:{' '}
              {selectedBranch?.id || 'null'} ({selectedBranch?.name || 'none'})
            </Typography>
          </Box>
        )}
      </CardContent>
    </Card>
  );
};
