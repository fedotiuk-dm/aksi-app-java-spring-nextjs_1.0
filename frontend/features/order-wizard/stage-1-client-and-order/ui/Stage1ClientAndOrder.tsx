/**
 * @fileoverview –ï—Ç–∞–ø 1: –ö–ª—ñ—î–Ω—Ç —Ç–∞ –±–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 *
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–π –∑ Spring State Machine —á–µ—Ä–µ–∑ useOrderWizard
 */

'use client';

import {
  Person as PersonIcon,
  Assignment as AssignmentIcon,
  Cancel as CancelIcon,
} from '@mui/icons-material';
import {
  Box,
  Typography,
  Stepper,
  Step,
  StepLabel,
  StepContent,
  Button,
  Alert,
  Card,
  CardContent,
  Chip,
} from '@mui/material';
import { useEffect, useState } from 'react';

import { ClientSelectionStep } from './components/ClientSelectionStep';
import { OrderBasicInfoStep } from './components/OrderBasicInfoStep';

import type {
  ExecuteAction200,
  CancelWizard200,
  ClientResponse,
} from '@/shared/api/generated/order-wizard';

interface Stage1ClientAndOrderProps {
  wizardId: string | null;
  currentState?: string;
  sessionData?: any;
  isExecutingAction: boolean;
  // –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ —Ö—É–∫–∞ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ —Ç–∏–ø–∞–º–∏
  onSelectClient: (clientData: ClientResponse) => Promise<ExecuteAction200>;
  onSaveOrderInfo: (branchId: string, uniqueTag?: string) => Promise<ExecuteAction200>;
  onCancel: () => Promise<CancelWizard200 | undefined>;
  // –î–æ–¥–∞—î–º–æ —Å—Ç–∞–Ω–∏ –ø–æ–º–∏–ª–æ–∫
  actionError?: Error | null;
  isCancelling?: boolean;
  onResetErrors?: () => void;
}

const SUB_STEPS = [
  {
    label: '1.1. –í–∏–±—ñ—Ä –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞',
    icon: <PersonIcon />,
    states: ['INITIAL', 'CLIENT_SELECTION'],
  },
  {
    label: '1.2. –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
    icon: <AssignmentIcon />,
    states: ['ORDER_INITIALIZATION'],
  },
];

/**
 * üéØ –ï—Ç–∞–ø 1: –ö–ª—ñ—î–Ω—Ç —Ç–∞ –±–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 *
 * –í–∫–ª—é—á–∞—î:
 * 1.1. –í–∏–±—ñ—Ä –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
 * 1.2. –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
export function Stage1ClientAndOrder({
  wizardId,
  currentState,
  sessionData,
  isExecutingAction,
  onSelectClient,
  onSaveOrderInfo,
  onCancel,
  actionError,
  isCancelling,
  onResetErrors,
}: Stage1ClientAndOrderProps) {
  const [currentSubStep, setCurrentSubStep] = useState(0);

  // Debug logging –¥–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏
  if (process.env.NODE_ENV === 'development') {
    console.log('üîç Stage1 Debug (–∑ –ø—Ä–æ–ø—Å–∞–º–∏):', {
      wizardId,
      currentState,
      isExecutingAction,
      hasWizardId: !!wizardId,
      hasCurrentState: !!currentState,
    });
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º—ñ–∂ –ø—ñ–¥–µ—Ç–∞–ø–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ç–∞–Ω—É State Machine
  useEffect(() => {
    console.log('üîÑ –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –ø—ñ–¥–µ—Ç–∞–ø—É –¥–ª—è —Å—Ç–∞–Ω—É:', currentState);

    if (!currentState) return;

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –ø—ñ–¥–µ—Ç–∞–ø –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
    for (let i = 0; i < SUB_STEPS.length; i++) {
      if (SUB_STEPS[i].states.includes(currentState)) {
        console.log(`üìù –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—ñ–¥–µ—Ç–∞–ø: ${i} (${SUB_STEPS[i].label})`);
        setCurrentSubStep(i);
        return;
      }
    }

    console.log('‚úÖ –ï—Ç–∞–ø 1 –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —Å—Ç–∞–Ω:', currentState);
  }, [currentState]);

  // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
  const handleClientSelected = async (clientData: ClientResponse) => {
    try {
      await onSelectClient(clientData);
      console.log('‚úÖ –ö–ª—ñ—î–Ω—Ç –≤–∏–±—Ä–∞–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –∫–ª—ñ—î–Ω—Ç–∞:', error);
    }
  };

  const handleOrderInfoCompleted = async (branchId: string, uniqueTag?: string) => {
    try {
      await onSaveOrderInfo(branchId, uniqueTag);
      console.log('‚úÖ –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞, –µ—Ç–∞–ø 1 –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:', error);
    }
  };

  const handleCancel = async () => {
    try {
      await onCancel();
      console.log('‚úÖ Wizard —Å–∫–∞—Å–æ–≤–∞–Ω–æ');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è:', error);
    }
  };

  // –ü–æ–∫–∞–∑—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–∫–∏ wizard –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
  if (!wizardId) {
    return (
      <Box sx={{ p: 4, textAlign: 'center' }}>
        <Typography variant="h6" gutterBottom>
          –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ Order Wizard
        </Typography>
        <Typography variant="body2" color="text.secondary">
          –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Å—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è...
        </Typography>
      </Box>
    );
  }

  return (
    <Box>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Ç–∞–ø—É */}
      <Box sx={{ mb: 3, textAlign: 'center' }}>
        <Typography variant="h5" component="h1" gutterBottom>
          –ï—Ç–∞–ø 1: –ö–ª—ñ—î–Ω—Ç —Ç–∞ –±–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        </Typography>
        <Box
          sx={{
            display: 'flex',
            gap: 1,
            justifyContent: 'center',
            alignItems: 'center',
            flexWrap: 'wrap',
          }}
        >
          <Chip label={`–°—Ç–∞–Ω: ${currentState}`} variant="outlined" size="small" />
          <Chip
            label={`–ü—ñ–¥–µ—Ç–∞–ø: ${SUB_STEPS[currentSubStep]?.label}`}
            color="primary"
            size="small"
          />
        </Box>
      </Box>

      {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥—ñ–π */}
      {isExecutingAction && (
        <Alert severity="info" sx={{ mb: 3 }}>
          –û–±—Ä–æ–±–∫–∞ –¥—ñ—ó...
        </Alert>
      )}

      {/* –ü–æ–º–∏–ª–∫–∏ –¥—ñ–π */}
      {actionError && (
        <Alert
          severity="error"
          sx={{ mb: 3 }}
          action={
            onResetErrors && (
              <Button color="inherit" size="small" onClick={onResetErrors}>
                –ó–∞–∫—Ä–∏—Ç–∏
              </Button>
            )
          }
        >
          <Typography variant="subtitle2" gutterBottom>
            –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ—ó
          </Typography>
          <Typography variant="body2">{actionError.message}</Typography>
        </Alert>
      )}

      {/* –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π stepper –¥–ª—è –ø—ñ–¥–µ—Ç–∞–ø—ñ–≤ */}
      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Stepper activeStep={currentSubStep} orientation="vertical">
            {SUB_STEPS.map((step, index) => (
              <Step key={step.label}>
                <StepLabel icon={step.icon}>
                  <Typography variant="subtitle1">{step.label}</Typography>
                </StepLabel>
                <StepContent>
                  {/* –ü—ñ–¥–µ—Ç–∞–ø 1.1: –í–∏–±—ñ—Ä –∫–ª—ñ—î–Ω—Ç–∞ */}
                  {index === 0 && (
                    <ClientSelectionStep
                      onClientSelected={handleClientSelected}
                      isLoading={isExecutingAction}
                      sessionData={sessionData}
                    />
                  )}

                  {/* –ü—ñ–¥–µ—Ç–∞–ø 1.2: –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è */}
                  {index === 1 && (
                    <OrderBasicInfoStep
                      onOrderInfoCompleted={handleOrderInfoCompleted}
                      isLoading={isExecutingAction}
                      sessionData={sessionData}
                      wizardId={wizardId || undefined}
                    />
                  )}
                </StepContent>
              </Step>
            ))}
          </Stepper>
        </CardContent>
      </Card>

      {/* –ü–∞–Ω–µ–ª—å –¥—ñ–π */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', p: 2 }}>
        <Button
          variant="outlined"
          startIcon={<CancelIcon />}
          onClick={handleCancel}
          disabled={isCancelling}
          color="error"
        >
          {isCancelling ? '–°–∫–∞—Å—É–≤–∞–Ω–Ω—è...' : '–°–∫–∞—Å—É–≤–∞—Ç–∏'}
        </Button>

        <Chip label={`Wizard ID: ${wizardId.slice(-8)}`} variant="outlined" size="small" />
      </Box>
    </Box>
  );
}

export default Stage1ClientAndOrder;
