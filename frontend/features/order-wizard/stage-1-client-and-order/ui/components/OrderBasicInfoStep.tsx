/**
 * @fileoverview –ü—ñ–¥–µ—Ç–∞–ø 1.2: –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */

'use client';

import {
  Assignment as AssignmentIcon,
  CalendarToday as CalendarIcon,
  LocationOn as LocationIcon,
  QrCodeScanner as QrScannerIcon,
  CheckCircle as CheckCircleIcon,
} from '@mui/icons-material';
import {
  Box,
  Typography,
  TextField,
  Button,
  Grid,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Card,
  CardContent,
  Alert,
  Chip,
  Paper,
  CircularProgress,
} from '@mui/material';
import { useState, useEffect } from 'react';

import { useBranchLocations } from '@/domain/wizard';

interface OrderBasicInfoStepProps {
  onOrderInfoCompleted: (branchId: string, uniqueTag?: string) => void;
  isLoading: boolean;
  sessionData?: any;
  wizardId?: string;
}

/**
 * üéØ –ü—ñ–¥–µ—Ç–∞–ø 1.2: –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 *
 * –í–∫–ª—é—á–∞—î:
 * - –ù–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó (–≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)
 * - –£–Ω—ñ–∫–∞–ª—å–Ω–∞ –º—ñ—Ç–∫–∞ (–≤–≤–æ–¥–∏—Ç—å—Å—è –≤—Ä—É—á–Ω—É –∞–±–æ —Å–∫–∞–Ω—É—î—Ç—å—Å—è)
 * - –ü—É–Ω–∫—Ç –ø—Ä–∏–π–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–≤–∏–±—ñ—Ä —Ñ—ñ–ª—ñ—ó)
 * - –î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)
 */
export function OrderBasicInfoStep({
  onOrderInfoCompleted,
  isLoading,
  sessionData,
  wizardId,
}: OrderBasicInfoStepProps) {
  const [branchId, setBranchId] = useState('');
  const [uniqueTag, setUniqueTag] = useState('');
  const [receiptNumber, setReceiptNumber] = useState('');
  const [createdDate, setCreatedDate] = useState('');

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —ñ–∫–æ–Ω–æ–∫
  const ICON_COLOR = 'action.active';

  // –û—Ç—Ä–∏–º—É—î–º–æ —Ñ—ñ–ª—ñ—ó —á–µ—Ä–µ–∑ –¥–æ–º–µ–Ω–Ω–∏–π —Ö—É–∫ –∑ wizardId
  const {
    branches,
    isLoading: isBranchesLoading,
    error: branchesError,
    isWizardAvailable,
  } = useBranchLocations(wizardId);

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–Ω–∞—á–µ–Ω—å
  useEffect(() => {
    // –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
    if (!receiptNumber) {
      const timestamp = Date.now();
      const randomPart = Math.floor(Math.random() * 1000)
        .toString()
        .padStart(3, '0');
      setReceiptNumber(`${timestamp}-${randomPart}`);
    }

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É
    if (!createdDate) {
      setCreatedDate(new Date().toLocaleString('uk-UA'));
    }
  }, [receiptNumber, createdDate]);

  const handleComplete = () => {
    if (!branchId) {
      alert('–û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –ø—Ä–∏–π–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
      return;
    }

    onOrderInfoCompleted(branchId, uniqueTag || undefined);
  };

  const handleScanQR = () => {
    // TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è QR-–∫–æ–¥/—à—Ç—Ä–∏—Ö-–∫–æ–¥
    console.log('–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –º—ñ—Ç–∫–∏');
    // –¢–∏–º—á–∞—Å–æ–≤–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
    setUniqueTag(`QR-${Date.now()}`);
  };

  // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫—â–æ wizard –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
  if (!isWizardAvailable) {
    return (
      <Box>
        <Alert severity="warning" sx={{ mb: 3 }}>
          <Typography variant="subtitle2" gutterBottom>
            ‚ö†Ô∏è Wizard –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
          </Typography>
          <Typography variant="body2">
            –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ñ—ñ–ª—ñ–π –ø–æ—Ç—Ä—ñ–±–µ–Ω –∞–∫—Ç–∏–≤–Ω–∏–π wizard. –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å wizard.
          </Typography>
        </Alert>
      </Box>
    );
  }

  return (
    <Box>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—ñ–¥–µ—Ç–∞–ø—É */}
      <Box sx={{ mb: 3 }}>
        <Typography variant="h6" component="h2" gutterBottom>
          1.2. –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        </Typography>
        <Typography variant="body2" color="text.secondary">
          –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –æ—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        </Typography>
      </Box>

      {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–±—Ä–∞–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ */}
      {sessionData?.client && (
        <Alert severity="success" sx={{ mb: 3 }} icon={<CheckCircleIcon />}>
          <Typography variant="subtitle2" gutterBottom>
            ‚úÖ –ö–ª—ñ—î–Ω—Ç –æ–±—Ä–∞–Ω–æ
          </Typography>
          <Box>
            <Typography variant="body2">
              <strong>–Ü–º&apos;—è:</strong> {sessionData.client.firstName}{' '}
              {sessionData.client.lastName}
            </Typography>
            <Typography variant="body2">
              <strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {sessionData.client.phone}
            </Typography>
            {sessionData.client.email && (
              <Typography variant="body2">
                <strong>Email:</strong> {sessionData.client.email}
              </Typography>
            )}
          </Box>
        </Alert>
      )}

      <Grid container spacing={3}>
        {/* –ù–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó */}
        <Grid size={{ xs: 12, md: 6 }}>
          <TextField
            fullWidth
            label="–ù–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó"
            value={receiptNumber}
            InputProps={{
              readOnly: true,
              startAdornment: <AssignmentIcon sx={{ mr: 1, color: ICON_COLOR }} />,
            }}
            helperText="–ì–µ–Ω–µ—Ä—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ"
            variant="filled"
          />
        </Grid>

        {/* –î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è */}
        <Grid size={{ xs: 12, md: 6 }}>
          <TextField
            fullWidth
            label="–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
            value={createdDate}
            InputProps={{
              readOnly: true,
              startAdornment: <CalendarIcon sx={{ mr: 1, color: ICON_COLOR }} />,
            }}
            helperText="–í—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ"
            variant="filled"
          />
        </Grid>

        {/* –ü—É–Ω–∫—Ç –ø—Ä–∏–π–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è */}
        <Grid size={{ xs: 12 }}>
          <FormControl fullWidth required>
            <InputLabel>–ü—É–Ω–∫—Ç –ø—Ä–∏–π–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</InputLabel>
            <Select
              value={branchId}
              label="–ü—É–Ω–∫—Ç –ø—Ä–∏–π–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
              onChange={(e) => setBranchId(e.target.value)}
              startAdornment={<LocationIcon sx={{ mr: 1, color: ICON_COLOR }} />}
              disabled={isBranchesLoading || !branches.length}
            >
              <MenuItem value="">
                <em>
                  {isBranchesLoading
                    ? '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ—ñ–ª—ñ–π –∑ wizard...'
                    : branches.length === 0
                      ? '–§—ñ–ª—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ wizard data'
                      : '–û–±–µ—Ä—ñ—Ç—å —Ñ—ñ–ª—ñ—é'}
                </em>
              </MenuItem>
              {branches.map((branch) => (
                <MenuItem key={branch.id} value={branch.id}>
                  {branch.name}
                </MenuItem>
              ))}
            </Select>
          </FormControl>

          {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è */}
          {isBranchesLoading && (
            <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>
              <CircularProgress size={16} sx={{ mr: 1 }} />
              <Typography variant="caption" color="text.secondary">
                –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ—ñ–ª—ñ–π –∑ wizard state...
              </Typography>
            </Box>
          )}

          {/* –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫—â–æ —Ñ—ñ–ª—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ */}
          {!isBranchesLoading && branches.length === 0 && (
            <Alert severity="info" sx={{ mt: 1 }}>
              <Typography variant="subtitle2" gutterBottom>
                üìç –§—ñ–ª—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ
              </Typography>
              <Typography variant="body2">
                –§—ñ–ª—ñ—ó –ø–æ–≤–∏–Ω–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —á–µ—Ä–µ–∑ wizard API. –ú–æ–∂–ª–∏–≤–æ backend —â–µ –Ω–µ
                –¥–æ–¥–∞–≤ —Ñ—ñ–ª—ñ—ó –¥–æ wizard data.
              </Typography>
            </Alert>
          )}

          {/* –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è */}
          {branchesError && (
            <Alert severity="error" sx={{ mt: 1 }}>
              <Typography variant="subtitle2" gutterBottom>
                ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ—ñ–ª—ñ–π
              </Typography>
              <Typography variant="body2">
                {branchesError.message || '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ—ñ–ª—ñ—ó –∑ wizard API'}
              </Typography>
            </Alert>
          )}

          {/* –ê–¥—Ä–µ—Å–∞ –æ–±—Ä–∞–Ω–æ—ó —Ñ—ñ–ª—ñ—ó */}
          {branchId && branches.length > 0 && (
            <Typography variant="caption" color="text.secondary" sx={{ mt: 1, display: 'block' }}>
              –ê–¥—Ä–µ—Å–∞: {branches.find((b) => b.id === branchId)?.address}
            </Typography>
          )}
        </Grid>

        {/* –£–Ω—ñ–∫–∞–ª—å–Ω–∞ –º—ñ—Ç–∫–∞ */}
        <Grid size={{ xs: 12 }}>
          <TextField
            fullWidth
            label="–£–Ω—ñ–∫–∞–ª—å–Ω–∞ –º—ñ—Ç–∫–∞"
            placeholder="–í–≤–µ–¥—ñ—Ç—å –∞–±–æ —Å–∫–∞–Ω—É–π—Ç–µ —É–Ω—ñ–∫–∞–ª—å–Ω—É –º—ñ—Ç–∫—É"
            value={uniqueTag}
            onChange={(e) => setUniqueTag(e.target.value)}
            helperText="–ù–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ. –ú–æ–∂–Ω–∞ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É –∞–±–æ —Å–∫–∞–Ω—É–π—Ç–∏ QR-–∫–æ–¥/—à—Ç—Ä–∏—Ö-–∫–æ–¥"
            InputProps={{
              endAdornment: (
                <Button
                  variant="outlined"
                  size="small"
                  onClick={handleScanQR}
                  startIcon={<QrScannerIcon />}
                  sx={{ ml: 1 }}
                >
                  –°–∫–∞–Ω—É–≤–∞—Ç–∏
                </Button>
              ),
            }}
          />
        </Grid>
      </Grid>

      {/* –ü—ñ–¥—Å—É–º–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è */}
      <Card sx={{ mt: 3, mb: 3 }}>
        <CardContent>
          <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>
            <AssignmentIcon sx={{ mr: 1 }} />
            üìã –ü—ñ–¥—Å—É–º–æ–∫
          </Typography>
          <Grid container spacing={2}>
            <Grid size={{ xs: 12, sm: 6 }}>
              <Box sx={{ mb: 1 }}>
                <Typography variant="body2" color="text.secondary">
                  –ù–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó:
                </Typography>
                <Typography variant="body1" fontWeight="medium">
                  {receiptNumber}
                </Typography>
              </Box>
              <Box sx={{ mb: 1 }}>
                <Typography variant="body2" color="text.secondary">
                  –î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è:
                </Typography>
                <Typography variant="body1" fontWeight="medium">
                  {createdDate}
                </Typography>
              </Box>
            </Grid>
            <Grid size={{ xs: 12, sm: 6 }}>
              <Box sx={{ mb: 1 }}>
                <Typography variant="body2" color="text.secondary">
                  –§—ñ–ª—ñ—è:
                </Typography>
                <Typography variant="body1" fontWeight="medium">
                  {branchId && branches.length > 0
                    ? branches.find((b) => b.id === branchId)?.name || '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...'
                    : '–ù–µ –æ–±—Ä–∞–Ω–æ'}
                </Typography>
              </Box>
              <Box sx={{ mb: 1 }}>
                <Typography variant="body2" color="text.secondary">
                  –£–Ω—ñ–∫–∞–ª—å–Ω–∞ –º—ñ—Ç–∫–∞:
                </Typography>
                <Typography variant="body1" fontWeight="medium">
                  {uniqueTag || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
                </Typography>
              </Box>
            </Grid>
          </Grid>
        </CardContent>
      </Card>

      {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è */}
      <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>
        <Button
          variant="contained"
          size="large"
          onClick={handleComplete}
          disabled={isLoading || !branchId}
          startIcon={<CheckCircleIcon />}
        >
          {isLoading ? '–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è...' : '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –µ—Ç–∞–ø 1'}
        </Button>
      </Box>
    </Box>
  );
}
