'use client';

import {
  TextField,
  Grid,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Box,
  Chip,
  Typography,
} from '@mui/material';
import React from 'react';

import { CreateClientFormData, UpdateClientFormData, Address } from '@/domain/client/types';
import { ClientSource, CommunicationChannel } from '@/domain/client/types/client-enums';
import { AddressFields, MultiSelectCheckboxGroup } from '@/shared/ui';

interface ClientFormFieldsProps {
  formData: CreateClientFormData | UpdateClientFormData | Partial<UpdateClientFormData>;
  onChange: (
    field: string,
    value: string | string[] | CommunicationChannel[] | ClientSource | Address | undefined
  ) => void;
  errors?: Record<string, string>;
  disabled?: boolean;
  size?: 'small' | 'medium';
  showAllFields?: boolean;
  className?: string;
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø–æ–ª—ñ–≤ —Ñ–æ—Ä–º–∏ –∫–ª—ñ—î–Ω—Ç–∞
 *
 * –ó–≥—ñ–¥–Ω–æ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é Order Wizard:
 * - –ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è (–æ–±–æ–≤'—è–∑–∫–æ–≤–µ)
 * - –¢–µ–ª–µ—Ñ–æ–Ω (–æ–±–æ–≤'—è–∑–∫–æ–≤–µ)
 * - Email
 * - –ê–¥—Ä–µ—Å–∞
 * - –°–ø–æ—Å–æ–±–∏ –∑–≤'—è–∑–∫—É (–º—É–ª—å—Ç–∏–≤–∏–±—ñ—Ä): –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, SMS, Viber
 * - –î–∂–µ—Ä–µ–ª–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ö—ñ–º—á–∏—Å—Ç–∫—É: –Ü–Ω—Å—Ç–∞–≥—Ä–∞–º, Google, –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó, –Ü–Ω—à–µ
 */
export const ClientFormFields: React.FC<ClientFormFieldsProps> = ({
  formData,
  onChange,
  errors = {},
  disabled = false,
  size = 'medium',
  showAllFields = true,
  className,
}) => {
  const handleChannelChange = (values: string[]) => {
    onChange('communicationChannels', values as CommunicationChannel[]);
  };

  const sourceOptions = [
    { value: ClientSource.INSTAGRAM, label: '–Ü–Ω—Å—Ç–∞–≥—Ä–∞–º' },
    { value: ClientSource.GOOGLE, label: 'Google' },
    { value: ClientSource.RECOMMENDATION, label: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó' },
    { value: ClientSource.OTHER, label: '–Ü–Ω—à–µ' },
  ];

  const channelOptions = [
    { value: CommunicationChannel.PHONE, label: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É' },
    { value: CommunicationChannel.SMS, label: 'SMS' },
    { value: CommunicationChannel.VIBER, label: 'Viber' },
  ];

  const handleStructuredAddressChange = (address: Address) => {
    console.log('üè† ClientFormFields.handleStructuredAddressChange:', {
      newAddress: address,
      oldStructuredAddress: formData.structuredAddress,
    });

    onChange('structuredAddress', address);
    if (address?.fullAddress) {
      onChange('address', address.fullAddress);
    }
  };

  const handleSimpleAddressChange = (address: string) => {
    console.log('üè† ClientFormFields.handleSimpleAddressChange:', {
      newAddress: address,
      oldAddress: formData.address,
    });

    onChange('address', address);
    if (formData.structuredAddress) {
      onChange('structuredAddress', {
        ...formData.structuredAddress,
        fullAddress: address,
      });
    }
  };

  return (
    <Box className={className}>
      <Grid container spacing={3}>
        {/* –û—Å–Ω–æ–≤–Ω—ñ –ø–æ–ª—è (–∑–∞–≤–∂–¥–∏ –ø–æ–∫–∞–∑—É—é—Ç—å—Å—è) */}
        <Grid size={{ xs: 12, sm: 6 }}>
          <TextField
            fullWidth
            label="–ü—Ä—ñ–∑–≤–∏—â–µ *"
            value={formData.lastName || ''}
            onChange={(e) => onChange('lastName', e.target.value)}
            error={!!errors.lastName}
            helperText={errors.lastName}
            disabled={disabled}
            size={size}
          />
        </Grid>

        <Grid size={{ xs: 12, sm: 6 }}>
          <TextField
            fullWidth
            label="–Ü–º'—è *"
            value={formData.firstName || ''}
            onChange={(e) => onChange('firstName', e.target.value)}
            error={!!errors.firstName}
            helperText={errors.firstName}
            disabled={disabled}
            size={size}
          />
        </Grid>

        <Grid size={{ xs: 12, sm: 6 }}>
          <TextField
            fullWidth
            label="–¢–µ–ª–µ—Ñ–æ–Ω *"
            value={formData.phone || ''}
            onChange={(e) => onChange('phone', e.target.value)}
            error={!!errors.phone}
            helperText={errors.phone}
            disabled={disabled}
            size={size}
            placeholder="+380..."
          />
        </Grid>

        <Grid size={{ xs: 12, sm: 6 }}>
          <TextField
            fullWidth
            label="Email"
            type="email"
            value={formData.email || ''}
            onChange={(e) => onChange('email', e.target.value)}
            error={!!errors.email}
            helperText={errors.email}
            disabled={disabled}
            size={size}
          />
        </Grid>

        {showAllFields && (
          <>
            {/* –ê–¥—Ä–µ—Å–∞ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç */}
            <Grid size={{ xs: 12 }}>
              <AddressFields
                structuredAddress={formData.structuredAddress}
                simpleAddress={formData.address}
                onStructuredAddressChange={handleStructuredAddressChange}
                onSimpleAddressChange={handleSimpleAddressChange}
                errors={{
                  city: errors.city,
                  street: errors.street,
                  building: errors.building,
                  apartment: errors.apartment,
                  postalCode: errors.postalCode,
                  fullAddress: errors.fullAddress,
                  address: errors.address,
                }}
                disabled={disabled}
                size={size}
                mode="both"
              />
            </Grid>

            {/* –°–ø–æ—Å–æ–±–∏ –∑–≤'—è–∑–∫—É */}
            <Grid size={{ xs: 12 }}>
              <MultiSelectCheckboxGroup
                label="–°–ø–æ—Å–æ–±–∏ –∑–≤'—è–∑–∫—É"
                options={channelOptions}
                selectedValues={formData.communicationChannels || []}
                onChange={handleChannelChange}
                disabled={disabled}
                size={size}
                orientation="row"
                showSelectedTags={false}
              />
            </Grid>

            {/* –î–∂–µ—Ä–µ–ª–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó */}
            <Grid size={{ xs: 12, sm: 8 }}>
              <FormControl fullWidth size={size}>
                <InputLabel>–î–∂–µ—Ä–µ–ª–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ö—ñ–º—á–∏—Å—Ç–∫—É</InputLabel>
                <Select
                  value={formData.source || ''}
                  onChange={(e) => onChange('source', e.target.value)}
                  disabled={disabled}
                  label="–î–∂–µ—Ä–µ–ª–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ö—ñ–º—á–∏—Å—Ç–∫—É"
                >
                  <MenuItem value="">
                    <em>–ù–µ –≤–∫–∞–∑–∞–Ω–æ</em>
                  </MenuItem>
                  {sourceOptions.map((option) => (
                    <MenuItem key={option.value} value={option.value}>
                      {option.label}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>

            {/* –î–µ—Ç–∞–ª—ñ –¥–∂–µ—Ä–µ–ª–∞ (–ø–æ–∫–∞–∑—É—î—Ç—å—Å—è —è–∫—â–æ –≤–∏–±—Ä–∞–Ω–æ "–Ü–Ω—à–µ") */}
            {formData.source === ClientSource.OTHER && (
              <Grid size={{ xs: 12, sm: 4 }}>
                <TextField
                  fullWidth
                  label="–£—Ç–æ—á–Ω–µ–Ω–Ω—è"
                  value={formData.sourceDetails || ''}
                  onChange={(e) => onChange('sourceDetails', e.target.value)}
                  error={!!errors.sourceDetails}
                  helperText={errors.sourceDetails}
                  disabled={disabled}
                  size={size}
                  placeholder="–í–∫–∞–∂—ñ—Ç—å –¥–∂–µ—Ä–µ–ª–æ..."
                />
              </Grid>
            )}
          </>
        )}
      </Grid>

      {/* –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –≤–∏–±—Ä–∞–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤ */}
      {showAllFields &&
        formData.communicationChannels &&
        formData.communicationChannels.length > 0 && (
          <Box sx={{ mt: 2 }}>
            <Typography variant="caption" color="text.secondary" sx={{ mb: 1, display: 'block' }}>
              –í–∏–±—Ä–∞–Ω—ñ —Å–ø–æ—Å–æ–±–∏ –∑–≤&apos;—è–∑–∫—É:
            </Typography>
            <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
              {formData.communicationChannels.map((channel) => {
                const channelLabel =
                  channelOptions.find((opt) => opt.value === channel)?.label || channel;
                return (
                  <Chip
                    key={channel}
                    label={channelLabel}
                    size="small"
                    variant="outlined"
                    color="primary"
                  />
                );
              })}
            </Box>
          </Box>
        )}
    </Box>
  );
};
