'use client';

import { PersonAdd, PersonSearch } from '@mui/icons-material';
import { Box, Paper, Typography, Button, Stepper, Step, StepLabel, Alert } from '@mui/material';
import React, { useState, useEffect } from 'react';

// üî• –ù–æ–≤–∏–π —É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π —Ö—É–∫ –∑ –¥–æ–º–µ–Ω–Ω–æ–≥–æ —à–∞—Ä—É
import {
  useClientApiOperations,
  type ClientSearchState,
} from '@/domain/wizard/hooks/stage-1-client-and-order';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
import { ClientFormPanel } from './components/ClientFormPanel';
import { ClientSearchPanel } from './components/ClientSearchPanel';
import { ClientSelectedPanel } from './components/ClientSelectedPanel';

// –¢–∏–ø–∏ –∑ API —Ç–∞ –¥–æ–º–µ–Ω—É
import type { ClientFormData } from '@/domain/wizard/services/stage-1-client-and-order/client-management/client-validation.service';
import type { ClientResponse } from '@/shared/api/generated/client';

type ClientSelectionMode = 'search' | 'create' | 'selected';

/**
 * –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –µ—Ç–∞–ø—É –≤–∏–±–æ—Ä—É –∫–ª—ñ—î–Ω—Ç–∞ (–æ–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è DDD –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏)
 */
export const ClientSelectionStep: React.FC = () => {
  const [mode, setMode] = useState<ClientSelectionMode>('search');
  const [selectedClient, setSelectedClient] = useState<ClientResponse | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [isNewClient, setIsNewClient] = useState(false);

  // === –î–û–ú–ï–ù–ù–ò–ô –•–£–ö ===
  const {
    // –î–∞–Ω—ñ
    allClients,
    isLoadingClients,
    clientsError,
    searchResults,
    isSearching,
    searchError,

    // –û–ø–µ—Ä–∞—Ü—ñ—ó
    isCreating,
    isUpdating,
    isDeleting,
    operationError,

    // –ú–µ—Ç–æ–¥–∏
    searchClientsWithPagination,
    createClient,
    updateClient,
    deleteClient,
    refreshClients,

    // –£—Ç–∏–ª—ñ—Ç–∏
    clearSearchResults,
    clearErrors,
  } = useClientApiOperations();

  // === –ï–§–ï–ö–¢–ò ===

  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤
  useEffect(() => {
    const clientsList = Array.isArray(allClients) ? allClients : [];
    if (!isLoadingClients && clientsList.length === 0) {
      refreshClients();
    }
  }, [isLoadingClients, allClients, refreshClients]);

  // === –û–ë–†–û–ë–ù–ò–ö–ò –ü–û–î–Ü–ô ===

  const handleSelectExistingClient = async (client: ClientResponse) => {
    try {
      setSelectedClient(client);
      setIsNewClient(false);
      setMode('selected');
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –∫–ª—ñ—î–Ω—Ç–∞:', error);
    }
  };

  const handleCreateClient = async (clientData: ClientFormData) => {
    try {
      const newClient = await createClient(clientData);
      if (newClient) {
        setSelectedClient(newClient);
        setIsNewClient(true);
        setMode('selected');
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞:', error);
    }
  };

  const handleUpdateClient = async (clientData: ClientFormData) => {
    if (!selectedClient?.id) return;

    try {
      const updatedClient = await updateClient(selectedClient.id, clientData);
      if (updatedClient) {
        setSelectedClient(updatedClient);
        setMode('selected');
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞:', error);
    }
  };

  const handleBackToSearch = () => {
    setSelectedClient(null);
    setIsNewClient(false);
    clearErrors();
    setMode('search');
  };

  const handleCreateNewClient = () => {
    setSelectedClient(null);
    setIsNewClient(false);
    clearErrors();
    setMode('create');
  };

  const handleEditClient = () => {
    setMode('create');
  };

  const handleSearch = async (term: string) => {
    setSearchTerm(term);
    if (term.length >= 2) {
      try {
        await searchClientsWithPagination({
          query: term,
          page: 0,
          size: 20,
        });
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É:', error);
      }
    } else {
      clearSearchResults();
    }
  };

  const handleClearSearch = () => {
    setSearchTerm('');
    clearSearchResults();
  };

  const handlePageChange = async (page: number) => {
    if (searchTerm) {
      try {
        await searchClientsWithPagination({
          query: searchTerm,
          page,
          size: 20,
        });
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏:', error);
      }
    }
  };

  // === –î–û–ü–û–ú–Ü–ñ–ù–Ü –ú–ï–¢–û–î–ò ===

  const getActiveStep = () => {
    switch (mode) {
      case 'search':
      case 'create':
        return 0;
      case 'selected':
        return selectedClient ? 1 : 0;
      default:
        return 0;
    }
  };

  // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  const clientsList = Array.isArray(allClients) ? allClients : [];
  const displayClients = searchTerm.length >= 2 ? searchResults : clientsList;

  // –§–æ—Ä–º–∞—Ç—É—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const formattedClients = displayClients.map((client) => ({
    client,
    formatted: {
      fullName: `${client.firstName ?? ''} ${client.lastName ?? ''}`.trim() || '–ë–µ–∑ —ñ–º–µ–Ω—ñ',
      contactInfo: [client.phone, client.email].filter(Boolean).join(', '),
      address: client.address || '–ê–¥—Ä–µ—Å–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞',
      source: client.source || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
      orderCount: `${client.orderCount || 0} –∑–∞–º–æ–≤–ª–µ–Ω—å`,
      lastUpdate: client.updatedAt
        ? new Date(client.updatedAt).toLocaleDateString('uk-UA')
        : '–ù–µ–≤—ñ–¥–æ–º–æ',
    },
  }));

  // –°—Ç–≤–æ—Ä—é—î–º–æ searchState –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
  const searchState: ClientSearchState = {
    searchTerm,
    isSearching: isSearching,
    searchResults: displayClients,
    hasSearched: searchTerm.length >= 2,
    searchError: searchError,
  };

  // === –ï–¢–ê–ü–ò –í–Ü–ó–ê–†–î–ê ===
  const steps = ['–ü–æ—à—É–∫/—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞', '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É', '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è'];

  return (
    <Box sx={{ maxWidth: 1200, mx: 'auto', p: 3 }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Ç–∞–ø—É */}
      <Typography variant="h4" component="h1" gutterBottom>
        –ï—Ç–∞–ø 1: –í–∏–±—ñ—Ä –∫–ª—ñ—î–Ω—Ç–∞
      </Typography>

      {/* –ü—Ä–æ–≥—Ä–µ—Å –±–∞—Ä */}
      <Box sx={{ mb: 4 }}>
        <Stepper activeStep={getActiveStep()} alternativeLabel>
          {steps.map((label) => (
            <Step key={label}>
              <StepLabel>{label}</StepLabel>
            </Step>
          ))}
        </Stepper>
      </Box>

      {/* –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ */}
      {(clientsError || searchError || operationError) && (
        <Alert severity="error" sx={{ mb: 2 }}>
          –ü–æ–º–∏–ª–∫–∞: {clientsError || searchError || operationError}
        </Alert>
      )}

      {/* –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <Paper elevation={1} sx={{ p: 3 }}>
        {mode === 'search' && (
          <Box>
            {/* –í–∏–±—ñ—Ä –¥—ñ—ó */}
            <Box sx={{ mb: 3, display: 'flex', gap: 2, justifyContent: 'center' }}>
              <Button
                variant="outlined"
                startIcon={<PersonSearch />}
                onClick={() => setMode('search')}
                size="large"
                disabled={isLoadingClients}
              >
                –ó–Ω–∞–π—Ç–∏ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
              </Button>
              <Button
                variant="outlined"
                startIcon={<PersonAdd />}
                onClick={handleCreateNewClient}
                size="large"
              >
                –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
              </Button>
            </Box>

            {/* –ü–∞–Ω–µ–ª—å –ø–æ—à—É–∫—É */}
            <ClientSearchPanel
              searchState={searchState}
              formattedClients={formattedClients}
              onSearchTermChange={handleSearch}
              onClearSearch={handleClearSearch}
              onPageChange={handlePageChange}
              onSelectClient={handleSelectExistingClient}
            />
          </Box>
        )}

        {mode === 'create' && (
          <ClientFormPanel
            creationState={{
              isLoading: isCreating || isUpdating,
              isError: !!operationError,
              errorMessage: operationError || '',
            }}
            selectedClient={selectedClient}
            onSubmit={selectedClient ? handleUpdateClient : handleCreateClient}
            onCancel={handleBackToSearch}
            onValidate={(data: ClientFormData) => ({ isValid: true, errors: [] })}
            isEditMode={!!selectedClient}
          />
        )}

        {mode === 'selected' && selectedClient && (
          <ClientSelectedPanel
            selectedClient={selectedClient}
            clientInfo={{
              client: selectedClient,
              isNew: isNewClient,
              formattedInfo: {
                fullName:
                  `${selectedClient.firstName ?? ''} ${selectedClient.lastName ?? ''}`.trim(),
                phone: selectedClient.phone ?? '',
                email: selectedClient.email ?? '',
                address: selectedClient.address ?? '',
              },
            }}
            isNewClient={isNewClient}
            onEdit={handleEditClient}
            onBack={handleBackToSearch}
            onContinue={() => {
              console.log('–ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –µ—Ç–∞–ø—É');
              // –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –µ—Ç–∞–ø—É
            }}
          />
        )}
      </Paper>
    </Box>
  );
};
