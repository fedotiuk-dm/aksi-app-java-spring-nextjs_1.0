'use client';

import React, { useState } from 'react';
import { Box, List, ListItemButton, ListItemText, Button, Alert, Typography } from '@mui/material';
import { PersonAdd as PersonAddIcon } from '@mui/icons-material';

// –ì–æ—Ç–æ–≤—ñ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
import { SearchInput, ClientInfoCard, StepContainer, ActionButton } from '@/shared/ui';

// –ü—Ä—è–º—ñ Orval —Ö—É–∫–∏
import {
  useStage1SearchClients,
  useStage1SelectClient,
  type ClientResponse,
} from '@/shared/api/generated/stage1';

// –°—Ç–æ—Ä
import { useStage1WizardStore } from '../../stores/stage1-wizard.store';

// Debounce —Ö—É–∫
import { useDebounce } from '@/shared/lib/hooks/useDebounce';

interface ClientSearchStepProps {
  sessionId: string;
  onNext: () => void;
}

/**
 * –ö—Ä–æ–∫ –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç–∞
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≥–æ—Ç–æ–≤—ñ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ + –ø—Ä—è–º—ñ Orval —Ö—É–∫–∏
 */
export const ClientSearchStep = ({ sessionId, onNext }: ClientSearchStepProps) => {
  // ========== –°–¢–û–† ==========
  const { searchTerm, setSearchTerm, selectedClientId, setSelectedClientId, setShowClientForm } =
    useStage1WizardStore();

  // ========== –õ–û–ö–ê–õ–¨–ù–ò–ô –°–¢–ê–ù ==========
  const [selectedClient, setSelectedClient] = useState<ClientResponse | null>(null);

  // ========== DEBOUNCE ==========
  const debouncedSearchTerm = useDebounce(searchTerm, 500);

  // ========== ORVAL –•–£–ö–ò ==========
  const searchMutation = useStage1SearchClients({
    mutation: {
      onSuccess: (data) => {
        console.log('‚úÖ –ü–æ—à—É–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', data);
      },
      onError: (error) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É:', error);
      },
    },
  });

  const selectMutation = useStage1SelectClient({
    mutation: {
      onSuccess: () => {
        console.log('‚úÖ –ö–ª—ñ—î–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–∞–Ω–æ');
        onNext();
      },
      onError: (error) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –∫–ª—ñ—î–Ω—Ç–∞:', error);
      },
    },
  });

  // ========== SEARCH LOGIC ==========
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ –ø—Ä–∏ –∑–º—ñ–Ω—ñ debounced —Ç–µ—Ä–º—ñ–Ω—É
  React.useEffect(() => {
    if (debouncedSearchTerm.length >= 2) {
      console.log('üîç –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ—à—É–∫—É –¥–ª—è:', debouncedSearchTerm);
      searchMutation.mutate({
        sessionId,
        data: { generalSearchTerm: debouncedSearchTerm },
      });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [debouncedSearchTerm, sessionId]);

  // ========== EVENT HANDLERS ==========
  const handleSearchChange = (value: string) => {
    setSearchTerm(value);
    setSelectedClient(null);
    setSelectedClientId(null);
  };

  const handleClientSelect = (client: ClientResponse) => {
    setSelectedClient(client);
    setSelectedClientId(client.id || '');
  };

  const handleConfirmSelection = async () => {
    if (!selectedClientId) return;

    try {
      await selectMutation.mutateAsync({
        sessionId,
        params: { clientId: selectedClientId },
      });
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É:', error);
    }
  };

  const handleCreateNewClient = () => {
    setShowClientForm(true);
  };

  // ========== COMPUTED VALUES ==========
  const searchResults = searchMutation.data?.clients || [];
  const hasResults = searchResults.length > 0;
  const isSearching = searchMutation.isPending;
  const canConfirm = selectedClientId && !selectMutation.isPending;

  return (
    <StepContainer title="–ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞" subtitle="–ó–Ω–∞–π–¥—ñ—Ç—å —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–æ–≥–æ">
      {/* –ü–æ–ª–µ –ø–æ—à—É–∫—É */}
      <Box sx={{ mb: 3 }}>
        <SearchInput
          value={searchTerm}
          onChange={handleSearchChange}
          placeholder="–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è, –ø—Ä—ñ–∑–≤–∏—â–µ, —Ç–µ–ª–µ—Ñ–æ–Ω –∞–±–æ email..."
          label="–ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞"
          loading={isSearching}
          autoFocus
        />
      </Box>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É */}
      {debouncedSearchTerm.length >= 2 && (
        <Box sx={{ mb: 3 }}>
          {isSearching && (
            <Typography variant="body2" color="text.secondary">
              –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤...
            </Typography>
          )}

          {!isSearching && !hasResults && (
            <Alert severity="info">
              –ö–ª—ñ—î–Ω—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—ó –ø–æ—à—É–∫—É –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞.
            </Alert>
          )}

          {!isSearching && hasResults && (
            <>
              <Typography variant="subtitle2" gutterBottom>
                –ó–Ω–∞–π–¥–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤: {searchResults.length}
              </Typography>

              <List>
                {searchResults.map((client) => (
                  <ListItemButton
                    key={client.id}
                    selected={selectedClientId === client.id}
                    onClick={() => handleClientSelect(client)}
                    sx={{
                      border: 1,
                      borderColor: 'divider',
                      borderRadius: 1,
                      mb: 1,
                      '&.Mui-selected': {
                        borderColor: 'primary.main',
                        bgcolor: 'primary.50',
                      },
                    }}
                  >
                    <ListItemText
                      primary={client.fullName}
                      secondary={
                        <Box component="span">
                          <Box component="span" sx={{ display: 'block' }}>
                            üìû {client.phone}
                          </Box>
                          {client.email && (
                            <Box component="span" sx={{ display: 'block' }}>
                              üìß {client.email}
                            </Box>
                          )}
                          {client.address && (
                            <Box component="span" sx={{ display: 'block' }}>
                              üìç {client.address}
                            </Box>
                          )}
                        </Box>
                      }
                    />
                  </ListItemButton>
                ))}
              </List>
            </>
          )}
        </Box>
      )}

      {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–±—Ä–∞–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ */}
      {selectedClient && (
        <Box sx={{ mb: 3 }}>
          <ClientInfoCard
            name={selectedClient.fullName || ''}
            phone={selectedClient.phone || ''}
            address={selectedClient.address}
            title="–û–±—Ä–∞–Ω–∏–π –∫–ª—ñ—î–Ω—Ç"
          />
        </Box>
      )}

      {/* –ö–Ω–æ–ø–∫–∏ –¥—ñ–π */}
      <Box sx={{ display: 'flex', gap: 2, justifyContent: 'space-between' }}>
        <Button variant="outlined" startIcon={<PersonAddIcon />} onClick={handleCreateNewClient}>
          –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
        </Button>

        <ActionButton
          variant="contained"
          onClick={handleConfirmSelection}
          disabled={!canConfirm}
          loading={selectMutation.isPending}
          loadingText="–û–±—Ä–æ–±–∫–∞..."
        >
          –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑ —Ü–∏–º –∫–ª—ñ—î–Ω—Ç–æ–º
        </ActionButton>
      </Box>

      {/* –ü–æ–º–∏–ª–∫–∏ */}
      {searchMutation.error && (
        <Alert severity="error" sx={{ mt: 2 }}>
          –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {searchMutation.error.message}
        </Alert>
      )}

      {selectMutation.error && (
        <Alert severity="error" sx={{ mt: 2 }}>
          –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –∫–ª—ñ—î–Ω—Ç–∞: {selectMutation.error.message}
        </Alert>
      )}
    </StepContainer>
  );
};
