'use client';

import React, { useState, useEffect } from 'react';
import {
  Box,
  TextField,
  Button,
  Typography,
  Alert,
  Grid,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  CircularProgress,
} from '@mui/material';
import { Save as SaveIcon, QrCodeScanner as QrIcon } from '@mui/icons-material';

// –ì–æ—Ç–æ–≤—ñ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
import { StepContainer, ActionButton } from '@/shared/ui';

// –ü—Ä—è–º—ñ Orval —Ö—É–∫–∏
import {
  useStage1GetBranchesForSession,
  useStage1SelectBranch,
  useStage1SetUniqueTag,
  useStage1GenerateReceiptNumber,
  type BranchLocationDTO,
} from '@/shared/api/generated/stage1';

// –°—Ç–æ—Ä
import { useStage1WizardStore } from '../../stores/stage1-wizard.store';

interface BasicOrderInfoStepProps {
  sessionId: string;
  onComplete: () => void;
  onBack: () => void;
}

/**
 * –ö—Ä–æ–∫ –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≥–æ—Ç–æ–≤—ñ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ + –ø—Ä—è–º—ñ Orval —Ö—É–∫–∏
 */
export const BasicOrderInfoStep = ({ sessionId, onComplete, onBack }: BasicOrderInfoStepProps) => {
  // ========== –°–¢–û–† ==========
  const {
    selectedBranchId,
    setSelectedBranchId,
    receiptNumber,
    setReceiptNumber,
    uniqueTag,
    setUniqueTag,
  } = useStage1WizardStore();

  // ========== –õ–û–ö–ê–õ–¨–ù–ò–ô –°–¢–ê–ù ==========
  const [localUniqueTag, setLocalUniqueTag] = useState(uniqueTag);

  // ========== ORVAL –•–£–ö–ò ==========
  const branchesQuery = useStage1GetBranchesForSession(sessionId, {
    query: { enabled: !!sessionId },
  });

  const selectBranchMutation = useStage1SelectBranch({
    mutation: {
      onSuccess: (data) => {
        console.log('‚úÖ –§—ñ–ª—ñ—è —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–∞–Ω–∞:', data);
      },
      onError: (error) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É —Ñ—ñ–ª—ñ—ó:', error);
      },
    },
  });

  const setUniqueTagMutation = useStage1SetUniqueTag({
    mutation: {
      onSuccess: (data) => {
        console.log('‚úÖ –£–Ω—ñ–∫–∞–ª—å–Ω–∞ –º—ñ—Ç–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:', data);
        onComplete();
      },
      onError: (error) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –º—ñ—Ç–∫–∏:', error);
      },
    },
  });

  const generateReceiptMutation = useStage1GenerateReceiptNumber({
    mutation: {
      onSuccess: (data) => {
        console.log('‚úÖ –ù–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ:', data);
        setReceiptNumber(data || '');
      },
      onError: (error) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –Ω–æ–º–µ—Ä–∞:', error);
      },
    },
  });

  // ========== EFFECTS ==========
  useEffect(() => {
    setLocalUniqueTag(uniqueTag);
  }, [uniqueTag]);

  // ========== EVENT HANDLERS ==========
  const handleBranchSelect = async (branchId: string) => {
    setSelectedBranchId(branchId);

    try {
      await selectBranchMutation.mutateAsync({
        sessionId,
        params: { branchId },
      });

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É —Ñ—ñ–ª—ñ—ó
      if (!receiptNumber) {
        const selectedBranchData = branchesQuery.data?.find(
          (b: BranchLocationDTO) => b.id === branchId
        );
        if (selectedBranchData?.code) {
          await generateReceiptMutation.mutateAsync({
            sessionId,
            params: { branchCode: selectedBranchData.code },
          });
        }
      }
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É —Ñ—ñ–ª—ñ—ó:', error);
    }
  };

  const handleUniqueTagChange = (value: string) => {
    setLocalUniqueTag(value);
    setUniqueTag(value);
  };

  const handleComplete = async () => {
    if (!localUniqueTag.trim()) {
      alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω—É –º—ñ—Ç–∫—É');
      return;
    }

    try {
      await setUniqueTagMutation.mutateAsync({
        sessionId,
        params: { uniqueTag: localUniqueTag.trim() },
      });
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∫—Ä–æ–∫—É:', error);
    }
  };

  // ========== COMPUTED VALUES ==========
  const branches = branchesQuery.data || [];
  const selectedBranch = branches.find((b: BranchLocationDTO) => b.id === selectedBranchId);
  const isLoading = selectBranchMutation.isPending || setUniqueTagMutation.isPending;
  const canComplete = selectedBranchId && receiptNumber && localUniqueTag.trim();

  return (
    <StepContainer
      title="–ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
      subtitle="–û–±–µ—Ä—ñ—Ç—å —Ñ—ñ–ª—ñ—é —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω—É –º—ñ—Ç–∫—É"
    >
      <Grid container spacing={3}>
        {/* –í–∏–±—ñ—Ä —Ñ—ñ–ª—ñ—ó */}
        <Grid size={{ xs: 12, md: 6 }}>
          <FormControl fullWidth>
            <InputLabel>–ü—É–Ω–∫—Ç –ø—Ä–∏–π–æ–º—É (—Ñ—ñ–ª—ñ—è)</InputLabel>
            <Select
              value={selectedBranchId || ''}
              onChange={(e) => handleBranchSelect(e.target.value)}
              disabled={selectBranchMutation.isPending}
              label="–ü—É–Ω–∫—Ç –ø—Ä–∏–π–æ–º—É (—Ñ—ñ–ª—ñ—è)"
            >
              {branches.map((branch: BranchLocationDTO) => (
                <MenuItem key={branch.id} value={branch.id}>
                  {branch.name} - {branch.address}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </Grid>

        {/* –ù–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó */}
        <Grid size={{ xs: 12, md: 6 }}>
          <TextField
            fullWidth
            label="–ù–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó"
            value={receiptNumber || ''}
            disabled
            helperText="–ì–µ–Ω–µ—Ä—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É —Ñ—ñ–ª—ñ—ó"
            InputProps={{
              endAdornment: generateReceiptMutation.isPending && <CircularProgress size={20} />,
            }}
          />
        </Grid>

        {/* –£–Ω—ñ–∫–∞–ª—å–Ω–∞ –º—ñ—Ç–∫–∞ */}
        <Grid size={{ xs: 12 }}>
          <TextField
            fullWidth
            label="–£–Ω—ñ–∫–∞–ª—å–Ω–∞ –º—ñ—Ç–∫–∞"
            value={localUniqueTag}
            onChange={(e) => handleUniqueTagChange(e.target.value)}
            placeholder="–í–≤–µ–¥—ñ—Ç—å –∞–±–æ –≤—ñ–¥—Å–∫–∞–Ω—É–π—Ç–µ —É–Ω—ñ–∫–∞–ª—å–Ω—É –º—ñ—Ç–∫—É"
            helperText="–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
            InputProps={{
              endAdornment: (
                <Button
                  size="small"
                  startIcon={<QrIcon />}
                  onClick={() => {
                    // TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è QR –∫–æ–¥—É
                    console.log('–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è QR –∫–æ–¥—É');
                  }}
                >
                  –°–∫–∞–Ω—É–≤–∞—Ç–∏
                </Button>
              ),
            }}
          />
        </Grid>

        {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–±—Ä–∞–Ω—É —Ñ—ñ–ª—ñ—é */}
        {selectedBranch && (
          <Grid size={{ xs: 12 }}>
            <Alert severity="info">
              <Typography variant="subtitle2">–û–±—Ä–∞–Ω–∞ —Ñ—ñ–ª—ñ—è:</Typography>
              <Typography variant="body2">
                <strong>{selectedBranch.name}</strong>
              </Typography>
              <Typography variant="body2">üìç {selectedBranch.address}</Typography>
              {selectedBranch.phone && (
                <Typography variant="body2">üìû {selectedBranch.phone}</Typography>
              )}
            </Alert>
          </Grid>
        )}
      </Grid>

      {/* –ö–Ω–æ–ø–∫–∏ –¥—ñ–π */}
      <Box sx={{ display: 'flex', gap: 2, justifyContent: 'space-between', mt: 3 }}>
        <Button variant="outlined" onClick={onBack}>
          –ù–∞–∑–∞–¥
        </Button>

        <ActionButton
          variant="contained"
          onClick={handleComplete}
          disabled={!canComplete}
          loading={isLoading}
          loadingText="–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è..."
          startIcon={<SaveIcon />}
        >
          –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –µ—Ç–∞–ø 1
        </ActionButton>
      </Box>

      {/* –ü–æ–º–∏–ª–∫–∏ */}
      {selectBranchMutation.error && (
        <Alert severity="error" sx={{ mt: 2 }}>
          –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É —Ñ—ñ–ª—ñ—ó: {selectBranchMutation.error.message}
        </Alert>
      )}

      {setUniqueTagMutation.error && (
        <Alert severity="error" sx={{ mt: 2 }}>
          –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –º—ñ—Ç–∫–∏: {setUniqueTagMutation.error.message}
        </Alert>
      )}

      {generateReceiptMutation.error && (
        <Alert severity="error" sx={{ mt: 2 }}>
          –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –Ω–æ–º–µ—Ä–∞: {generateReceiptMutation.error.message}
        </Alert>
      )}
    </StepContainer>
  );
};
