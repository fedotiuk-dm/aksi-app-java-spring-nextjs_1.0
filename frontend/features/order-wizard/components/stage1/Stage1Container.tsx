'use client';

import React, { useState, useEffect } from 'react';
import { Box, Typography, Stepper, Step, StepLabel, Alert, CircularProgress } from '@mui/material';

// –ì–æ—Ç–æ–≤—ñ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
import { StepContainer } from '@/shared/ui';

// –ü—Ä—è–º—ñ Orval —Ö—É–∫–∏
import { useStage1CompleteBasicOrder } from '@/shared/api/generated/stage1';

// –°—Ç–æ—Ä
import { useStage1WizardStore, SUBSTEPS } from '../../stores/stage1-wizard.store';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –∫—Ä–æ–∫—ñ–≤
import { ClientSearchStep } from './ClientSearchStep';
import { BasicOrderInfoStep } from './BasicOrderInfoStep';
import { ClientCreationStep } from './ClientCreationStep';

interface Stage1ContainerProps {
  sessionId: string;
  onStageCompleted: () => void;
}

/**
 * –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è Stage1 Order Wizard
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø—Ä—è–º—ñ Orval —Ö—É–∫–∏ + –ø—Ä–æ—Å—Ç–∏–π —Å—Ç–æ—Ä –¥–ª—è UI —Å—Ç–∞–Ω—É
 */
export const Stage1Container = ({ sessionId, onStageCompleted }: Stage1ContainerProps) => {
  // ========== –°–¢–û–† ==========
  const {
    currentSubstep,
    setCurrentSubstep,
    showClientForm,
    setShowClientForm,
    selectedClientId,
    isInitialized,
    setIsInitialized,
    reset,
  } = useStage1WizardStore();

  // ========== –õ–û–ö–ê–õ–¨–ù–ò–ô –°–¢–ê–ù ==========
  const [error, setError] = useState<string | null>(null);

  // ========== ORVAL –•–£–ö–ò ==========
  const completeStage = useStage1CompleteBasicOrder({
    mutation: {
      onSuccess: (data: unknown) => {
        console.log('‚úÖ Stage1 —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', data);
        onStageCompleted();
      },
      onError: (error: unknown) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è Stage1:', error);
        const errorMessage = error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞';
        setError(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ç–∞–ø—É: ${errorMessage}`);
      },
    },
  });

  // ========== EFFECTS ==========
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
  useEffect(() => {
    if (sessionId && !isInitialized) {
      console.log('üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Stage1 –∑ sessionId:', sessionId);
      setIsInitialized(true);
      setCurrentSubstep(SUBSTEPS.CLIENT_SEARCH);
      setError(null);
    }
  }, [sessionId, isInitialized, setIsInitialized, setCurrentSubstep]);

  // –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ unmount
  useEffect(() => {
    return () => {
      console.log('üßπ –û—á–∏—â–µ–Ω–Ω—è Stage1Container');
      reset();
    };
  }, [reset]);

  // ========== EVENT HANDLERS ==========
  const handleClientSearchNext = () => {
    console.log('‚û°Ô∏è –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
    setCurrentSubstep(SUBSTEPS.BASIC_ORDER_INFO);
    setError(null);
  };

  const handleBasicOrderInfoBack = () => {
    console.log('‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç–∞');
    setCurrentSubstep(SUBSTEPS.CLIENT_SEARCH);
    setError(null);
  };

  const handleBasicOrderInfoComplete = async () => {
    if (!selectedClientId) {
      setError('–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç–∞');
      return;
    }

    console.log('üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è Stage1 –∑ –∫–ª—ñ—î–Ω—Ç–æ–º:', selectedClientId);
    setError(null);

    try {
      await completeStage.mutateAsync({ sessionId });
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ç–∞–ø—É:', error);
    }
  };

  const handleClientFormBack = () => {
    console.log('‚¨ÖÔ∏è –ó–∞–∫—Ä–∏—Ç—Ç—è —Ñ–æ—Ä–º–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞');
    setShowClientForm(false);
    setError(null);
  };

  const handleClientFormNext = () => {
    console.log('‚úÖ –ö–ª—ñ—î–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π, –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó');
    setShowClientForm(false);
    setCurrentSubstep(SUBSTEPS.BASIC_ORDER_INFO);
    setError(null);
  };

  // ========== COMPUTED VALUES ==========
  const steps = [
    { key: SUBSTEPS.CLIENT_SEARCH, label: '–ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞' },
    { key: SUBSTEPS.BASIC_ORDER_INFO, label: '–ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è' },
  ];

  const activeStepIndex = steps.findIndex((step) => step.key === currentSubstep);
  const isLoading = completeStage.isPending;

  // ========== VALIDATION ==========
  if (!sessionId) {
    return <Alert severity="error">–ù–µ –≤–∫–∞–∑–∞–Ω–æ ID —Å–µ—Å—ñ—ó –¥–ª—è Stage1. –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫—É.</Alert>;
  }

  return (
    <StepContainer
      title="–ï—Ç–∞–ø 1: –ö–ª—ñ—î–Ω—Ç —Ç–∞ –±–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
      subtitle="–û–±–µ—Ä—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
    >
      {/* Stepper */}
      <Box sx={{ mb: 4 }}>
        <Stepper activeStep={activeStepIndex} alternativeLabel>
          {steps.map((step) => (
            <Step key={step.key}>
              <StepLabel>{step.label}</StepLabel>
            </Step>
          ))}
        </Stepper>
      </Box>

      {/* –ü–æ–º–∏–ª–∫–∏ */}
      {error && (
        <Alert severity="error" sx={{ mb: 3 }} onClose={() => setError(null)}>
          {error}
        </Alert>
      )}

      {/* –§–æ—Ä–º–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ (–º–æ–¥–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º) */}
      {showClientForm && (
        <Box sx={{ mb: 4 }}>
          <Alert severity="info" sx={{ mb: 2 }}>
            –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
          </Alert>
          <ClientCreationStep
            sessionId={sessionId}
            onNext={handleClientFormNext}
            onBack={handleClientFormBack}
          />
        </Box>
      )}

      {/* –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫—Ä–æ–∫—É */}
      {!showClientForm && (
        <>
          {currentSubstep === SUBSTEPS.CLIENT_SEARCH && (
            <ClientSearchStep sessionId={sessionId} onNext={handleClientSearchNext} />
          )}

          {currentSubstep === SUBSTEPS.BASIC_ORDER_INFO && (
            <BasicOrderInfoStep
              sessionId={sessionId}
              onComplete={handleBasicOrderInfoComplete}
              onBack={handleBasicOrderInfoBack}
            />
          )}
        </>
      )}

      {/* Loading —Å—Ç–∞–Ω */}
      {isLoading && (
        <Box
          sx={{
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            mt: 3,
            p: 2,
            bgcolor: 'action.hover',
            borderRadius: 1,
          }}
        >
          <CircularProgress size={24} />
          <Typography variant="body2" sx={{ ml: 2 }}>
            –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ç–∞–ø—É...
          </Typography>
        </Box>
      )}

      {/* Debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è (—Ç—ñ–ª—å–∫–∏ –≤ development) */}
      {process.env.NODE_ENV === 'development' && (
        <Box sx={{ mt: 4, p: 2, bgcolor: 'grey.100', borderRadius: 1 }}>
          <Typography variant="caption" display="block">
            Debug: sessionId={sessionId}, substep={currentSubstep}, clientId={selectedClientId}
          </Typography>
        </Box>
      )}
    </StepContainer>
  );
};
