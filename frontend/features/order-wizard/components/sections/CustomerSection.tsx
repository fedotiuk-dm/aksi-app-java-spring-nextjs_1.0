'use client';

import React, { useState } from 'react';
import {
  Box,
  Typography,
  TextField,
  InputAdornment,
  IconButton,
  Autocomplete,
  Button,
  Collapse,
  Divider,
  FormControl,
  FormLabel,
  FormGroup,
  FormControlLabel,
  Checkbox,
  Select,
  MenuItem,
  SelectChangeEvent,
  CircularProgress,
} from '@mui/material';
import {
  Search,
  PersonAdd,
  Edit,
  QrCodeScanner,
  ExpandMore,
  ExpandLess,
} from '@mui/icons-material';
import { useForm, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useDebounceValue } from '../../hooks';
import { useListBranches } from '@/shared/api/generated/branch';
import {
  useCreateCustomer,
  useListCustomers,
  CreateCustomerRequestContactPreferencesItem,
  CreateCustomerRequestInfoSource,
  type CreateCustomerRequest,
  type ListCustomersParams,
} from '@/shared/api/generated/customer';
import { useOrderWizardStore } from '@/features/order-wizard';
import type { CustomerInfo } from '@/shared/api/generated/customer';
import type { BranchInfo } from '@/shared/api/generated/branch';

const INFO_SOURCE_LABELS: Record<CreateCustomerRequestInfoSource, string> = {
  [CreateCustomerRequestInfoSource.INSTAGRAM]: 'Instagram',
  [CreateCustomerRequestInfoSource.GOOGLE]: 'Google',
  [CreateCustomerRequestInfoSource.RECOMMENDATION]: 'Рекомендації',
  [CreateCustomerRequestInfoSource.OTHER]: 'Інше',
};

const CONTACT_PREFERENCES_LABELS: Record<CreateCustomerRequestContactPreferencesItem, string> = {
  [CreateCustomerRequestContactPreferencesItem.PHONE]: 'Номер телефону',
  [CreateCustomerRequestContactPreferencesItem.SMS]: 'SMS',
  [CreateCustomerRequestContactPreferencesItem.VIBER]: 'Viber',
};

const newCustomerSchema = z.object({
  firstName: z.string().min(1, 'Ім\'я обов\'язкове').max(100),
  lastName: z.string().min(1, 'Прізвище обов\'язкове').max(100),
  phonePrimary: z.string()
    .min(10, 'Телефон повинен містити мінімум 10 цифр')
    .max(20)
    .regex(/^\+?[0-9\s\-()]+$/, 'Невірний формат телефону'),
  email: z.string().regex(/^[^\s@]+@[^\s@]+\.[^\s@]+$|^$/, 'Невірний формат email').optional(),
  contactPreferences: z.array(z.enum(Object.values(CreateCustomerRequestContactPreferencesItem) as [CreateCustomerRequestContactPreferencesItem, ...CreateCustomerRequestContactPreferencesItem[]])).optional(),
  infoSource: z.enum(Object.values(CreateCustomerRequestInfoSource) as [CreateCustomerRequestInfoSource, ...CreateCustomerRequestInfoSource[]]).optional(),
});

type NewCustomerFormData = z.infer<typeof newCustomerSchema>;

export const CustomerSection: React.FC = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const debouncedSearchQuery = useDebounceValue(searchQuery, 300);
  
  // Customer search using useListCustomers with search param
  const searchParams: ListCustomersParams | undefined = debouncedSearchQuery.length >= 2 
    ? { search: debouncedSearchQuery }
    : undefined;
    
  const { data: searchResults, isLoading: isSearching } = useListCustomers(
    searchParams,
    {
      query: {
        enabled: debouncedSearchQuery.length >= 2,
      },
    }
  );
  
  // Create customer mutation
  const createCustomerMutation = useCreateCustomer();
  
  // Form for new customer
  const {
    control,
    handleSubmit,
    reset,
    watch,
    formState: { errors },
  } = useForm<NewCustomerFormData>({
    resolver: zodResolver(newCustomerSchema),
    defaultValues: {
      firstName: '',
      lastName: '',
      phonePrimary: '',
      email: '',
      contactPreferences: [],
      infoSource: undefined,
    },
  });

  const {
    selectedCustomer,
    setSelectedCustomer,
    isCustomerFormOpen,
    setCustomerFormOpen,
    uniqueLabel,
    setUniqueLabel,
    selectedBranch,
    setSelectedBranch,
  } = useOrderWizardStore();

  // Get branches
  const { data: branchesData } = useListBranches();

  // Order numbers will be generated by backend when creating the actual order
  // No need to generate them on frontend

  const handleCustomerSelect = (customer: CustomerInfo | null) => {
    setSelectedCustomer(customer);
    if (customer) {
      setCustomerFormOpen(false);
      setSearchQuery('');
    }
  };

  const handleBranchChange = (event: SelectChangeEvent) => {
    const branchId = event.target.value;
    const branch = branchesData?.branches?.find(b => b.id === branchId) || null;
    setSelectedBranch(branch);
  };

  const handleCreateCustomer = handleSubmit(async (data: NewCustomerFormData) => {
    try {
      const createRequest: CreateCustomerRequest = {
        firstName: data.firstName,
        lastName: data.lastName,
        phonePrimary: data.phonePrimary,
        email: data.email || undefined,
        contactPreferences: data.contactPreferences || [],
        infoSource: data.infoSource,
      };
      
      const newCustomer = await createCustomerMutation.mutateAsync({
        data: createRequest,
      });
      
      setSelectedCustomer(newCustomer);
      setCustomerFormOpen(false);
      reset();
    } catch (error) {
      console.error('Error creating customer:', error);
    }
  });

  const watchedContactPreferences = watch('contactPreferences') || [];

  return (
    <Box>
      <Typography variant="h6" gutterBottom>
        Клієнт та інформація замовлення
      </Typography>

      {/* Customer Search */}
      <Box sx={{ mb: 2 }}>
        <Autocomplete
          options={searchResults?.customers || []}
          getOptionLabel={(option) => 
            `${option.lastName} ${option.firstName} - ${option.phonePrimary}`
          }
          loading={isSearching}
          value={selectedCustomer}
          onChange={(_, value) => handleCustomerSelect(value)}
          inputValue={searchQuery}
          onInputChange={(_, value) => setSearchQuery(value)}
          renderInput={(params) => (
            <TextField
              {...params}
              label="Пошук клієнта"
              placeholder="Прізвище, ім'я, телефон..."
              slotProps={{
                input: {
                  ...params.InputProps,
                  startAdornment: (
                    <InputAdornment position="start">
                      <Search />
                    </InputAdornment>
                  ),
                  endAdornment: (
                    <InputAdornment position="end">
                      {isSearching && <CircularProgress size={20} />}
                    </InputAdornment>
                  ),
                }
              }}
            />
          )}
        />
      </Box>

      {/* Selected Customer Info */}
      {selectedCustomer && (
        <Box sx={{ mb: 2, p: 2, bgcolor: 'grey.50', borderRadius: 1 }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Typography variant="subtitle2">
              {selectedCustomer.lastName} {selectedCustomer.firstName}
            </Typography>
            <IconButton size="small">
              <Edit fontSize="small" />
            </IconButton>
          </Box>
          <Typography variant="body2" color="text.secondary">
            {selectedCustomer.phonePrimary}
          </Typography>
          {selectedCustomer.email && (
            <Typography variant="body2" color="text.secondary">
              {selectedCustomer.email}
            </Typography>
          )}
        </Box>
      )}

      {/* New Customer Toggle */}
      <Button
        startIcon={isCustomerFormOpen ? <ExpandLess /> : <ExpandMore />}
        endIcon={<PersonAdd />}
        onClick={() => setCustomerFormOpen(!isCustomerFormOpen)}
        variant="outlined"
        fullWidth
        sx={{ mb: 2 }}
      >
        Новий клієнт
      </Button>

      {/* New Customer Form */}
      <Collapse in={isCustomerFormOpen}>
        <Box sx={{ mb: 3, p: 2, border: 1, borderColor: 'divider', borderRadius: 1 }}>
          <Typography variant="subtitle2" gutterBottom>
            Новий клієнт
          </Typography>
          
          <Controller
            name="lastName"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label="Прізвище"
                required
                fullWidth
                error={!!errors.lastName}
                helperText={errors.lastName?.message}
                sx={{ mb: 2 }}
              />
            )}
          />
          
          <Controller
            name="firstName"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label="Ім'я"
                required
                fullWidth
                error={!!errors.firstName}
                helperText={errors.firstName?.message}
                sx={{ mb: 2 }}
              />
            )}
          />
          
          <Controller
            name="phonePrimary"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label="Телефон"
                required
                fullWidth
                error={!!errors.phonePrimary}
                helperText={errors.phonePrimary?.message}
                sx={{ mb: 2 }}
              />
            )}
          />
          
          <Controller
            name="email"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label="Email"
                type="email"
                fullWidth
                error={!!errors.email}
                helperText={errors.email?.message}
                sx={{ mb: 2 }}
              />
            )}
          />
          

          <FormControl component="fieldset" sx={{ mb: 2 }}>
            <FormLabel component="legend">Способи зв'язку</FormLabel>
            <FormGroup>
              {Object.entries(CONTACT_PREFERENCES_LABELS).map(([value, label]) => (
                <Controller
                  key={value}
                  name="contactPreferences"
                  control={control}
                  render={({ field }) => (
                    <FormControlLabel
                      control={
                        <Checkbox
                          checked={watchedContactPreferences.includes(value as CreateCustomerRequestContactPreferencesItem)}
                          onChange={(e) => {
                            const currentValues = field.value || [];
                            if (e.target.checked) {
                              field.onChange([...currentValues, value]);
                            } else {
                              field.onChange(currentValues.filter((v: string) => v !== value));
                            }
                          }}
                        />
                      }
                      label={label}
                    />
                  )}
                />
              ))}
            </FormGroup>
          </FormControl>

          <Controller
            name="infoSource"
            control={control}
            render={({ field }) => (
              <FormControl fullWidth sx={{ mb: 2 }}>
                <FormLabel>Джерело інформації</FormLabel>
                <Select 
                  {...field}
                  value={field.value || ''}
                >
                  <MenuItem value="">Не вказано</MenuItem>
                  {Object.entries(INFO_SOURCE_LABELS).map(([value, label]) => (
                    <MenuItem key={value} value={value}>
                      {label}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            )}
          />

          <Box sx={{ display: 'flex', gap: 1 }}>
            <Button 
              variant="contained" 
              fullWidth
              onClick={handleCreateCustomer}
              disabled={createCustomerMutation.isPending}
            >
              {createCustomerMutation.isPending ? 'Створення...' : 'Зберегти'}
            </Button>
            <Button 
              variant="outlined" 
              fullWidth
              onClick={() => {
                setCustomerFormOpen(false);
                reset();
              }}
              disabled={createCustomerMutation.isPending}
            >
              Скасувати
            </Button>
          </Box>
        </Box>
      </Collapse>

      <Divider sx={{ my: 3 }} />

      {/* Order Basic Info */}
      <Typography variant="subtitle1" gutterBottom>
        Інформація замовлення
      </Typography>

      <TextField
        label="Номер квитанції"
        value="Буде згенеровано при створенні замовлення"
        fullWidth
        disabled
        sx={{ mb: 2 }}
        helperText="Номер генерується автоматично бекендом"
      />

      <TextField
        label="Унікальна мітка"
        value={uniqueLabel}
        onChange={(e) => setUniqueLabel(e.target.value)}
        fullWidth
        sx={{ mb: 2 }}
        slotProps={{
          input: {
            endAdornment: (
              <InputAdornment position="end">
                <IconButton>
                  <QrCodeScanner />
                </IconButton>
              </InputAdornment>
            ),
          }
        }}
      />

      <FormControl fullWidth sx={{ mb: 2 }}>
        <FormLabel>Пункт прийому</FormLabel>
        <Select
          value={selectedBranch?.id || ''}
          onChange={handleBranchChange}
        >
          <MenuItem value="">Виберіть філію</MenuItem>
          {branchesData?.branches?.map((branch: BranchInfo) => (
            <MenuItem key={branch.id} value={branch.id}>
              {branch.name}
            </MenuItem>
          ))}
        </Select>
      </FormControl>

      <TextField
        label="Дата створення"
        value={new Date().toLocaleString('uk-UA')}
        fullWidth
        disabled
      />
    </Box>
  );
};