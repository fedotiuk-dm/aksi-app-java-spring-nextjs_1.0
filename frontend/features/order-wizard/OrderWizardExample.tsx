/**
 * OrderWizard - XState v5 —Ç–µ—Å—Ç–æ–≤–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–∏–Ω—Ü–∏–ø—É "DDD inside, FSD outside"
 *
 * UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ "—Ç–æ–Ω–∫–∏–π" - —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –¥–∞–Ω—ñ –∑ –¥–æ–º–µ–Ω–Ω–æ–≥–æ —à–∞—Ä—É
 */

'use client';

import { Box, Paper, LinearProgress, Typography, Button, Chip } from '@mui/material';

import { useWizardMachine, WizardStep, ItemWizardStep } from '@/domain/wizard';

export const OrderWizardExample = () => {
  // === –ù–û–í–ê XState v5 –ú–ê–®–ò–ù–ê ===
  const {
    currentStep,
    currentSubStep,
    canGoNext,
    canGoPrev,
    isInItemWizard,
    isInItemList,
    isCompleted,
    progress,
    itemProgress,
    goNext,
    goPrev,
    startItemWizard,
    completeItemWizard,
    cancelItemWizard,
    nextItemStep,
    prevItemStep,
    resetWizard,
  } = useWizardMachine();

  // === RENDER –ú–ï–¢–û–î–ò ===
  const renderCurrentStepContent = () => {
    // –Ø–∫—â–æ –≤ item wizard, –ø–æ–∫–∞–∑—É—î–º–æ item –∫—Ä–æ–∫–∏
    if (isInItemWizard && currentSubStep) {
      switch (currentSubStep) {
        case ItemWizardStep.BASIC_INFO:
          return (
            <Box>
              <Typography variant="h6">üìù –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–µ–¥–º–µ—Ç–∞</Typography>
              <Typography variant="body2" color="text.secondary">
                –ö–∞—Ç–µ–≥–æ—Ä—ñ—è, –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è, –∫—ñ–ª—å–∫—ñ—Å—Ç—å
              </Typography>
              <Box sx={{ mt: 2, p: 2, bgcolor: 'grey.100', borderRadius: 1 }}>
                <Typography variant="body2">üîπ –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø–æ—Å–ª—É–≥–∏</Typography>
                <Typography variant="body2">üîπ –í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è –≤–∏—Ä–æ–±—É</Typography>
                <Typography variant="body2">üîπ –í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å (—à—Ç/–∫–≥)</Typography>
              </Box>
            </Box>
          );

        case ItemWizardStep.PROPERTIES:
          return (
            <Box>
              <Typography variant="h6">üé® –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞</Typography>
              <Typography variant="body2" color="text.secondary">
                –ú–∞—Ç–µ—Ä—ñ–∞–ª, –∫–æ–ª—ñ—Ä, –Ω–∞–ø–æ–≤–Ω—é–≤–∞—á
              </Typography>
              <Box sx={{ mt: 2, p: 2, bgcolor: 'grey.100', borderRadius: 1 }}>
                <Typography variant="body2">üîπ –ú–∞—Ç–µ—Ä—ñ–∞–ª (–±–∞–≤–æ–≤–Ω–∞, —à–µ—Ä—Å—Ç—å, —à–æ–≤–∫, —Ç–æ—â–æ)</Typography>
                <Typography variant="body2">üîπ –ö–æ–ª—ñ—Ä</Typography>
                <Typography variant="body2">üîπ –ù–∞–ø–æ–≤–Ω—é–≤–∞—á (—è–∫—â–æ —î)</Typography>
                <Typography variant="body2">üîπ –°—Ç—É–ø—ñ–Ω—å –∑–Ω–æ—Å—É (10%, 30%, 50%, 75%)</Typography>
              </Box>
            </Box>
          );

        case ItemWizardStep.DEFECTS:
          return (
            <Box>
              <Typography variant="h6">‚ö†Ô∏è –î–µ—Ñ–µ–∫—Ç–∏ —Ç–∞ –ø–ª—è–º–∏</Typography>
              <Typography variant="body2" color="text.secondary">
                –ó–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è, –¥–µ—Ñ–µ–∫—Ç–∏ —Ç–∞ —Ä–∏–∑–∏–∫–∏
              </Typography>
              <Box sx={{ mt: 2, p: 2, bgcolor: 'grey.100', borderRadius: 1 }}>
                <Typography variant="body2">üîπ –ü–ª—è–º–∏ (–∂–∏—Ä, –∫—Ä–æ–≤, –≤–∏–Ω–æ, –∫–∞–≤–∞, —Ç–æ—â–æ)</Typography>
                <Typography variant="body2">üîπ –î–µ—Ñ–µ–∫—Ç–∏ (–ø–æ—Ç–µ—Ä—Ç–æ—Å—Ç—ñ, –ø–æ—Ä–≤–∞–Ω–µ, —Ñ—É—Ä–Ω—ñ—Ç—É—Ä–∞)</Typography>
                <Typography variant="body2">üîπ –†–∏–∑–∏–∫–∏ (–∑–º—ñ–Ω–∞ –∫–æ–ª—å–æ—Ä—É, –¥–µ—Ñ–æ—Ä–º–∞—Ü—ñ—è)</Typography>
              </Box>
            </Box>
          );

        case ItemWizardStep.PRICING:
          return (
            <Box>
              <Typography variant="h6">üí∞ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ü—ñ–Ω–∏</Typography>
              <Typography variant="body2" color="text.secondary">
                –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ü—ñ–Ω–∏ –∑ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞–º–∏
              </Typography>
              <Box sx={{ mt: 2, p: 2, bgcolor: 'grey.100', borderRadius: 1 }}>
                <Typography variant="body2">üîπ –ë–∞–∑–æ–≤–∞ —Ü—ñ–Ω–∞ –∑ –ø—Ä–∞–π—Å—É</Typography>
                <Typography variant="body2">üîπ –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ —Ç–∞ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏</Typography>
                <Typography variant="body2">üîπ –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑ –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—î—é</Typography>
              </Box>
            </Box>
          );

        case ItemWizardStep.PHOTOS:
          return (
            <Box>
              <Typography variant="h6">üì∑ –§–æ—Ç–æ–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è</Typography>
              <Typography variant="body2" color="text.secondary">
                –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ (–¥–æ 5 —Ñ–æ—Ç–æ, 5MB –∫–æ–∂–Ω–µ)
              </Typography>
              <Box sx={{ mt: 2, p: 2, bgcolor: 'grey.100', borderRadius: 1 }}>
                <Typography variant="body2">üîπ –ó–π–æ–º–∫–∞ –∑ –∫–∞–º–µ—Ä–∏ –ø–ª–∞–Ω—à–µ—Ç–∞</Typography>
                <Typography variant="body2">üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –≥–∞–ª–µ—Ä–µ—ó</Typography>
                <Typography variant="body2">üîπ –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –º—ñ–Ω—ñ–∞—Ç—é—Ä</Typography>
              </Box>
            </Box>
          );

        default:
          return <Typography>–ù–µ–≤—ñ–¥–æ–º–∏–π –∫—Ä–æ–∫ item wizard</Typography>;
      }
    }

    // –û—Å–Ω–æ–≤–Ω—ñ –∫—Ä–æ–∫–∏ wizard
    switch (currentStep) {
      case WizardStep.CLIENT_SELECTION:
        return (
          <Box>
            <Typography variant="h6">üë§ 1. –í–∏–±—ñ—Ä –∫–ª—ñ—î–Ω—Ç–∞</Typography>
            <Typography variant="body2" color="text.secondary">
              –ó–Ω–∞–π–¥—ñ—Ç—å —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–æ–≥–æ
            </Typography>
            <Box sx={{ mt: 2, p: 2, bgcolor: 'grey.100', borderRadius: 1 }}>
              <Typography variant="body2">üîπ –ü–æ—à—É–∫ –∑–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º, —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º, email</Typography>
              <Typography variant="body2">üîπ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞</Typography>
              <Typography variant="body2">üîπ –°–ø–æ—Å–æ–±–∏ –∑–≤&apos;—è–∑–∫—É —Ç–∞ –¥–∂–µ—Ä–µ–ª–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó</Typography>
            </Box>
          </Box>
        );

      case WizardStep.BRANCH_SELECTION:
        return (
          <Box>
            <Typography variant="h6">üè¢ 2. –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</Typography>
            <Typography variant="body2" color="text.secondary">
              –ö–≤–∏—Ç–∞–Ω—Ü—ñ—è, –º—ñ—Ç–∫–∞, —Ñ—ñ–ª—ñ—è
            </Typography>
            <Box sx={{ mt: 2, p: 2, bgcolor: 'grey.100', borderRadius: 1 }}>
              <Typography variant="body2">üîπ –ù–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)</Typography>
              <Typography variant="body2">üîπ –£–Ω—ñ–∫–∞–ª—å–Ω–∞ –º—ñ—Ç–∫–∞ (–≤—Ä—É—á–Ω—É/—Å–∫–∞–Ω)</Typography>
              <Typography variant="body2">üîπ –ü—É–Ω–∫—Ç –ø—Ä–∏–π–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</Typography>
            </Box>
          </Box>
        );

      case WizardStep.ITEM_MANAGER:
        return (
          <Box>
            <Typography variant="h6">üì¶ 3. –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–µ–¥–º–µ—Ç—ñ–≤</Typography>
            <Typography variant="body2" color="text.secondary">
              {isInItemList ? '–î–æ–¥–∞–π—Ç–µ –ø—Ä–µ–¥–º–µ—Ç–∏ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' : '–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç—ñ–≤'}
            </Typography>

            {isInItemList && (
              <Box sx={{ mt: 2 }}>
                <Button variant="contained" onClick={startItemWizard} size="large" sx={{ mb: 2 }}>
                  ‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç
                </Button>

                <Box sx={{ p: 2, bgcolor: 'grey.100', borderRadius: 1 }}>
                  <Typography variant="body2">üìã –¢—É—Ç –±—É–¥–µ —Ç–∞–±–ª–∏—Ü—è –¥–æ–¥–∞–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤</Typography>
                  <Typography variant="body2">üí∞ –õ—ñ—á–∏–ª—å–Ω–∏–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ</Typography>
                  <Typography variant="body2">üîÑ –¶–∏–∫–ª—ñ—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç—ñ–≤</Typography>
                </Box>
              </Box>
            )}
          </Box>
        );

      case WizardStep.ORDER_PARAMETERS:
        return (
          <Box>
            <Typography variant="h6">‚öôÔ∏è 4. –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</Typography>
            <Typography variant="body2" color="text.secondary">
              –¢–µ—Ä–º—ñ–Ω–∏, –∑–Ω–∏–∂–∫–∏, –æ–ø–ª–∞—Ç–∞
            </Typography>
            <Box sx={{ mt: 2, p: 2, bgcolor: 'grey.100', borderRadius: 1 }}>
              <Typography variant="body2">üìÖ –î–∞—Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–∞ —Ç–µ—Ä–º—ñ–Ω–æ–≤—ñ—Å—Ç—å</Typography>
              <Typography variant="body2">üí≥ –ó–Ω–∏–∂–∫–∏ (–ï–≤–µ—Ä–∫–∞—Ä–¥, —Å–æ—Ü–º–µ—Ä–µ–∂—ñ, –ó–°–£)</Typography>
              <Typography variant="body2">üí∞ –°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏ —Ç–∞ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∞</Typography>
            </Box>
          </Box>
        );

      case WizardStep.CONFIRMATION:
        return (
          <Box>
            <Typography variant="h6">‚úÖ 5. –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</Typography>
            <Typography variant="body2" color="text.secondary">
              –ü–µ—Ä–µ–≥–ª—è–¥, –ø—ñ–¥–ø–∏—Å —Ç–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
            </Typography>
            <Box sx={{ mt: 2, p: 2, bgcolor: 'grey.100', borderRadius: 1 }}>
              <Typography variant="body2">üìã –ü–æ–≤–Ω–∏–π –ø—ñ–¥—Å—É–º–æ–∫ –∑ –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—î—é</Typography>
              <Typography variant="body2">‚úçÔ∏è –¶–∏—Ñ—Ä–æ–≤–∏–π –ø—ñ–¥–ø–∏—Å –∫–ª—ñ—î–Ω—Ç–∞</Typography>
              <Typography variant="body2">üñ®Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≥–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó</Typography>
            </Box>
          </Box>
        );

      default:
        return <Typography>–ù–µ–≤—ñ–¥–æ–º–∏–π –∫—Ä–æ–∫</Typography>;
    }
  };

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ —Å—Ç–∞—Ç—É—Å–æ–º
  const getHeaderTitle = () => {
    if (isCompleted) return 'Order Wizard - –ó–∞–≤–µ—Ä—à–µ–Ω–æ! üéâ';
    if (isInItemWizard) return `Order Wizard - –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞ (${currentSubStep})`;
    return `Order Wizard - ${currentStep}`;
  };

  return (
    <Box sx={{ maxWidth: 900, mx: 'auto', p: 3 }}>
      {/* HEADER */}
      <Typography variant="h4" gutterBottom>
        {getHeaderTitle()}
      </Typography>

      {/* STATUS CHIPS */}
      <Box sx={{ mb: 3, display: 'flex', gap: 1, flexWrap: 'wrap' }}>
        <Chip label={`–ï—Ç–∞–ø: ${currentStep}`} color="primary" variant="outlined" />
        {isInItemWizard && currentSubStep && (
          <Chip label={`–ü—ñ–¥–µ—Ç–∞–ø: ${currentSubStep}`} color="secondary" variant="outlined" />
        )}
        <Chip
          label={isCompleted ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' : '–í –ø—Ä–æ—Ü–µ—Å—ñ'}
          color={isCompleted ? 'success' : 'default'}
        />
      </Box>

      {/* PROGRESS BAR - –û—Å–Ω–æ–≤–Ω–∏–π */}
      <Box sx={{ mb: 2 }}>
        <Typography variant="body2" sx={{ mb: 1 }}>
          –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å: {Math.round(progress.percentComplete)}%
        </Typography>
        <LinearProgress
          variant="determinate"
          value={progress.percentComplete}
          sx={{ height: 8, borderRadius: 4 }}
        />
      </Box>

      {/* PROGRESS BAR - Item Wizard */}
      {isInItemWizard && (
        <Box sx={{ mb: 3 }}>
          <Typography variant="body2" sx={{ mb: 1 }}>
            –ü—Ä–æ–≥—Ä–µ—Å –ø—Ä–µ–¥–º–µ—Ç–∞: {Math.round(itemProgress.percentComplete)}%
          </Typography>
          <LinearProgress
            variant="determinate"
            value={itemProgress.percentComplete}
            color="secondary"
            sx={{ height: 6, borderRadius: 3 }}
          />
        </Box>
      )}

      {/* MAIN CONTENT */}
      <Paper sx={{ p: 3, mb: 3 }}>{renderCurrentStepContent()}</Paper>

      {/* NAVIGATION */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
        <Box>
          {/* Back buttons */}
          {isInItemWizard ? (
            <>
              <Button
                onClick={prevItemStep}
                disabled={currentSubStep === ItemWizardStep.BASIC_INFO}
                sx={{ mr: 1 }}
              >
                ‚Üê –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø—ñ–¥–µ—Ç–∞–ø
              </Button>
              <Button onClick={cancelItemWizard} color="warning" variant="outlined" sx={{ mr: 1 }}>
                ‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç
              </Button>
            </>
          ) : (
            <Button onClick={goPrev} disabled={!canGoPrev} sx={{ mr: 1 }}>
              ‚Üê –ù–∞–∑–∞–¥
            </Button>
          )}
        </Box>

        <Box>
          {/* Forward buttons */}
          {isInItemWizard ? (
            <>
              {currentSubStep === ItemWizardStep.PHOTOS ? (
                <Button
                  variant="contained"
                  color="success"
                  onClick={completeItemWizard}
                  size="large"
                >
                  ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç
                </Button>
              ) : (
                <Button variant="contained" onClick={nextItemStep}>
                  –ù–∞—Å—Ç—É–ø–Ω–∏–π –ø—ñ–¥–µ—Ç–∞–ø ‚Üí
                </Button>
              )}
            </>
          ) : (
            <>
              {currentStep === WizardStep.CONFIRMATION ? (
                <Button
                  variant="contained"
                  color="success"
                  onClick={() => console.log('Complete wizard')}
                  size="large"
                >
                  üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                </Button>
              ) : (
                <Button onClick={goNext} disabled={!canGoNext} variant="contained">
                  –î–∞–ª—ñ ‚Üí
                </Button>
              )}
            </>
          )}
        </Box>
      </Box>

      {/* DEBUG INFO */}
      <Box
        sx={{
          mt: 3,
          p: 2,
          bgcolor: 'grey.50',
          borderRadius: 1,
          border: '1px solid',
          borderColor: 'grey.300',
        }}
      >
        <Typography variant="h6" gutterBottom>
          üîß Debug Info (XState v5)
        </Typography>
        <Box
          sx={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
            gap: 1,
          }}
        >
          <Typography variant="caption">
            –ü–æ—Ç–æ—á–Ω–∏–π –∫—Ä–æ–∫: <strong>{currentStep}</strong>
          </Typography>
          <Typography variant="caption">
            –ü—ñ–¥–∫—Ä–æ–∫: <strong>{currentSubStep || '–ù–µ–º–∞—î'}</strong>
          </Typography>
          <Typography variant="caption">
            –í Item Wizard: <strong>{isInItemWizard ? '–¢–∞–∫' : '–ù—ñ'}</strong>
          </Typography>
          <Typography variant="caption">
            –í Item List: <strong>{isInItemList ? '–¢–∞–∫' : '–ù—ñ'}</strong>
          </Typography>
          <Typography variant="caption">
            –ú–æ–∂–Ω–∞ –π—Ç–∏ –≤–ø–µ—Ä–µ–¥: <strong>{canGoNext ? '–¢–∞–∫' : '–ù—ñ'}</strong>
          </Typography>
          <Typography variant="caption">
            –ú–æ–∂–Ω–∞ –π—Ç–∏ –Ω–∞–∑–∞–¥: <strong>{canGoPrev ? '–¢–∞–∫' : '–ù—ñ'}</strong>
          </Typography>
          <Typography variant="caption">
            –ó–∞–≤–µ—Ä—à–µ–Ω–æ: <strong>{isCompleted ? '–¢–∞–∫' : '–ù—ñ'}</strong>
          </Typography>
          <Typography variant="caption">
            –ü—Ä–æ–≥—Ä–µ—Å:{' '}
            <strong>
              {progress.currentStepIndex + 1}/{progress.totalSteps}
            </strong>
          </Typography>
        </Box>
      </Box>

      {/* RESET BUTTON */}
      <Box sx={{ mt: 2, textAlign: 'center' }}>
        <Button onClick={resetWizard} color="error" variant="outlined">
          üîÑ –°–∫–∏–Ω—É—Ç–∏ Wizard
        </Button>
      </Box>
    </Box>
  );
};
