'use client';

import { useRouter, usePathname } from 'next/navigation';
import { useEffect, useState } from 'react';
import { useAuthStore } from '../store';

// –ú–∞—Ä—à—Ä—É—Ç–∏, —è–∫—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
const protectedRoutes = [
  '/dashboard',
  '/clients',
  '/orders',
  '/order-wizard',
  '/price-list',
  '/settings',
];

// –ü—É–±–ª—ñ—á–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏ (–Ω–µ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó)
const publicRoutes = ['/login', '/register'];

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –≤—ñ–¥ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 */
export function AuthGuard({ children }: { children: React.ReactNode }) {
  const router = useRouter();
  const pathname = usePathname();
  const isLoggedIn = useAuthStore((state) => state.isLoggedIn);
  const [isInitialized, setIsInitialized] = useState(false);

  useEffect(() => {
    // –î–∞—î–º–æ —á–∞—Å AuthInitializer —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏—Å—è
    const timer = setTimeout(() => {
      console.log('üîÑ AuthGuard: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      setIsInitialized(true);
    }, 50);

    return () => clearTimeout(timer);
  }, []);

  useEffect(() => {
    // –ù–µ –≤–∏–∫–æ–Ω—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–∫–∏ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞–ª–∏—Å—è
    if (!isInitialized) {
      console.log('‚è≥ AuthGuard: –û—á—ñ–∫—É—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó...');
      return;
    }

    console.log('üîç AuthGuard: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø:', { pathname, isLoggedIn, isInitialized });

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—É
    const isProtectedRoute = protectedRoutes.some((route) => pathname.startsWith(route));
    const isPublicRoute = publicRoutes.includes(pathname);

    console.log('üîç AuthGuard: –¢–∏–ø–∏ –º–∞—Ä—à—Ä—É—Ç—ñ–≤:', { isProtectedRoute, isPublicRoute });

    if (isProtectedRoute && !isLoggedIn) {
      // –Ø–∫—â–æ —Ü–µ –∑–∞—Ö–∏—â–µ–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç —ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏–π
      console.log('üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –ª–æ–≥—ñ–Ω');
      router.push(`/login?callbackUrl=${encodeURIComponent(pathname)}`);
    } else if (isPublicRoute && isLoggedIn) {
      // –Ø–∫—â–æ —Ü–µ –ø—É–±–ª—ñ—á–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç —ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏–π
      console.log('‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏–π, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ dashboard');
      router.push('/dashboard');
    } else {
      console.log('‚úÖ AuthGuard: –î–æ—Å—Ç—É–ø –¥–æ–∑–≤–æ–ª–µ–Ω–æ');
    }
  }, [pathname, isLoggedIn, router, isInitialized]);

  return <>{children}</>;
}
