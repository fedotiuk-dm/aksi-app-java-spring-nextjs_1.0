/**
 * @fileoverview Auth service –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ HttpOnly cookies
 * 
 * –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:
 * - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î orval –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ —Ö—É–∫–∏
 * - –ü—Ä–∞—Ü—é—î –∑ HttpOnly cookies (—Ç–æ–∫–µ–Ω–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ –≤ JS)
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ axios interceptors
 */

import { api } from '@/lib/axios';
import type { LoginRequest } from '@/shared/api/generated/auth';
import type { UserResponse } from '@/shared/api/generated/user';

interface AuthServiceResponse {
  success: boolean;
  message?: string;
  user?: UserResponse;
}

class AuthService {
  /**
   * –õ–æ–≥—ñ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   * –¢–æ–∫–µ–Ω–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ HttpOnly cookies
   */
  async login(credentials: LoginRequest): Promise<AuthServiceResponse> {
    try {
      // Backend –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç—å HttpOnly cookies –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
      await api.post('/api/auth/login', credentials);
      
      // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –ª–æ–≥—ñ–Ω—É
      const user = await this.getCurrentUser();
      
      return {
        success: true,
        user: user || undefined,
      };
    } catch (error) {
      console.error('Login error:', error);
      return {
        success: false,
        message: '–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å',
      };
    }
  }

  /**
   * –í–∏—Ö—ñ–¥ –∑ —Å–∏—Å—Ç–µ–º–∏
   * –û—á–∏—â–∞—î HttpOnly cookies –Ω–∞ backend
   */
  async logout(): Promise<void> {
    try {
      await api.post('/api/auth/logout');
    } catch (error) {
      console.error('Logout error:', error);
      // –ù–∞–≤—ñ—Ç—å —è–∫—â–æ –ø–æ–º–∏–ª–∫–∞ - –æ—á–∏—â–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  async getCurrentUser(): Promise<UserResponse | null> {
    try {
      console.log('üîç Getting current user from /api/users/me');
      return await api.get<UserResponse>('/api/users/me');
    } catch (error) {
      console.error('Get current user error:', error);
      return null;
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
   * –†–æ–±–∏—Ç—å –∑–∞–ø–∏—Ç –¥–æ API –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ cookies
   */
  async checkAuth(): Promise<boolean> {
    try {
      const user = await this.getCurrentUser();
      return !!user;
    } catch {
      return false;
    }
  }

  /**
   * –û–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω
   * –í—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —á–µ—Ä–µ–∑ axios interceptors
   */
  async refreshToken(): Promise<boolean> {
    try {
      await api.post('/api/auth/refresh-token');
      return true;
    } catch {
      return false;
    }
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ singleton instance
export const authService = new AuthService();