/**
 * @fileoverview –°–µ—Ä–≤–µ—Ä–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑ Orval –∫–ª—ñ—î–Ω—Ç–∞–º–∏
 *
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î:
 * - Orval –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ auth —Ñ—É–Ω–∫—Ü—ñ—ó
 * - Next.js cookies –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
 * - –û–Ω–æ–≤–ª–µ–Ω—ñ –∞–¥–∞–ø—Ç–µ—Ä–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó —Ç–∏–ø—ñ–≤
 */

import { jwtDecode } from 'jwt-decode';
import { cookies } from 'next/headers';

// –ü—Ä—è–º—ñ Orval —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
import {
  loginUser,
  logoutUser,
  refreshAccessToken,
  getCurrentUser,
} from '@/shared/api/generated/auth';
import type {
  LoginRequest,
  AuthResponse,
  UserResponse,
  RefreshTokenRequest,
} from '@/shared/api/generated/auth';

import {
  AuthUser,
  JwtPayload,
  UserRole,
  convertUserResponseToAuthUser,
  convertApiRoleToUserRole,
} from '../model/types';

// –ù–∞–∑–≤–∏ cookies
const TOKEN_COOKIE = 'accessToken';
const REFRESH_TOKEN_COOKIE = 'refreshToken';

// –°–µ—Ä–≤–µ—Ä–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é
export const serverAuth = {
  /**
   * –õ–æ–≥—ñ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
   * @param credentials - –ª–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å
   * @returns –æ–±'—î–∫—Ç –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  async login(credentials: LoginRequest): Promise<AuthUser> {
    try {
      console.log('üîê –í–∏–∫–æ–Ω—É—î–º–æ —Å–µ—Ä–≤–µ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω —á–µ—Ä–µ–∑ Orval');

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä—è–º–∏–π Orval –≤–∏–∫–ª–∏–∫ (–Ω–µ —Ö—É–∫)
      const authResponse: AuthResponse = await loginUser(credentials);

      console.log('‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ API:', authResponse);

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–∫–µ–Ω–∏ –≤ cookies
      const cookieStore = await cookies();

      if (authResponse.accessToken) {
        cookieStore.set(TOKEN_COOKIE, authResponse.accessToken, {
          httpOnly: true,
          secure: process.env.NODE_ENV === 'production',
          sameSite: 'lax',
          maxAge: 60 * 60, // 1 –≥–æ–¥–∏–Ω–∞
          path: '/',
        });
      }

      if (authResponse.refreshToken) {
        cookieStore.set(REFRESH_TOKEN_COOKIE, authResponse.refreshToken, {
          httpOnly: true,
          secure: process.env.NODE_ENV === 'production',
          sameSite: 'lax',
          maxAge: 30 * 24 * 60 * 60, // 30 –¥–Ω—ñ–≤
          path: '/',
        });
      }

      // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ UserResponse –¥–æ AuthUser
      const user = convertUserResponseToAuthUser(authResponse.user);

      console.log('‚úÖ –£—Å–ø—ñ—à–Ω–∏–π —Å–µ—Ä–≤–µ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω:', user);
      return user;
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É –ª–æ–≥—ñ–Ω—ñ:', error);
      throw error;
    }
  },

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
   * @returns –æ–±'—î–∫—Ç –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ null
   */
  async refreshToken(): Promise<AuthUser | null> {
    try {
      console.log('üîÑ –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ');
      const cookieStore = await cookies();
      const refreshToken = cookieStore.get(REFRESH_TOKEN_COOKIE)?.value;

      if (!refreshToken) {
        console.warn('‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ–π refresh token –≤ cookies');
        return null;
      }

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä—è–º–∏–π Orval –≤–∏–∫–ª–∏–∫
      const refreshRequest: RefreshTokenRequest = { refreshToken };
      const authResponse: AuthResponse = await refreshAccessToken(refreshRequest);

      // –û–Ω–æ–≤–ª—é—î–º–æ accessToken –≤ cookies
      if (authResponse.accessToken) {
        cookieStore.set(TOKEN_COOKIE, authResponse.accessToken, {
          httpOnly: true,
          secure: process.env.NODE_ENV === 'production',
          sameSite: 'lax',
          maxAge: 60 * 60, // 1 –≥–æ–¥–∏–Ω–∞
          path: '/',
        });
      }

      // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ UserResponse –¥–æ AuthUser
      const user = convertUserResponseToAuthUser(authResponse.user);

      console.log('‚úÖ –¢–æ–∫–µ–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ:', user);
      return user;
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ç–æ–∫–µ–Ω—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ:', error);
      return null;
    }
  },

  /**
   * –í–∏—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ–∑ —Å–∏—Å—Ç–µ–º–∏
   */
  async logout(): Promise<void> {
    try {
      console.log('üö™ –í–∏–∫–æ–Ω—É—î–º–æ —Å–µ—Ä–≤–µ—Ä–Ω–∏–π logout');
      const cookieStore = await cookies();

      // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ API logout
      try {
        await logoutUser();
        console.log('‚úÖ API logout —É—Å–ø—ñ—à–Ω–∏–π');
      } catch (error) {
        console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ API logout (–ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ—á–∏—â–µ–Ω–Ω—è cookies):', error);
      }

      // –í–∏–¥–∞–ª—è—î–º–æ cookies
      cookieStore.delete(TOKEN_COOKIE);
      cookieStore.delete(REFRESH_TOKEN_COOKIE);

      console.log('‚úÖ Cookies –æ—á–∏—â–µ–Ω—ñ, —Å–µ—Ä–≤–µ—Ä–Ω–∏–π logout –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É logout:', error);
      throw error;
    }
  },

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ API
   */
  async getCurrentUser(): Promise<AuthUser | null> {
    try {
      const token = await this.getToken();

      if (!token) {
        console.log('‚ö†Ô∏è –¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –¥–ª—è getCurrentUser');
        return null;
      }

      // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ API
      try {
        const userResponse: UserResponse = await getCurrentUser();
        const user = convertUserResponseToAuthUser(userResponse);

        console.log('‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ API:', user);
        return user;
      } catch (error) {
        console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ API getCurrentUser, —Å–ø—Ä–æ–±—É—î–º–æ –¥–µ–∫–æ–¥—É–≤–∞—Ç–∏ JWT:', error);

        // Fallback: –¥–µ–∫–æ–¥—É—î–º–æ JWT —Ç–æ–∫–µ–Ω
        return this.getUserFromToken(token);
      }
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
      return null;
    }
  },

  /**
   * –î–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ JWT —Ç–æ–∫–µ–Ω—É
   */
  async getUserFromToken(token: string): Promise<AuthUser | null> {
    try {
      // –î–µ–∫–æ–¥—É—î–º–æ JWT —Ç–æ–∫–µ–Ω
      const decoded = jwtDecode<JwtPayload>(token);

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π
      const currentTime = Math.floor(Date.now() / 1000);
      if (decoded.exp < currentTime) {
        console.warn('‚ö†Ô∏è JWT —Ç–æ–∫–µ–Ω –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π');
        return null;
      }

      // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ä–æ–ª—å –∑ JWT
      const userRole = convertApiRoleToUserRole(decoded.role);

      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–æ–∫–µ–Ω—É
      return {
        id: decoded.sub,
        username: decoded.sub,
        name: decoded.name || '',
        email: decoded.email || '',
        role: userRole,
        position: undefined,
      };
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—ñ JWT —Ç–æ–∫–µ–Ω—É:', error);
      return null;
    }
  },

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –ø–µ–≤–Ω—É —Ä–æ–ª—å
   */
  async hasRole(requiredRole: UserRole): Promise<boolean> {
    const user = await this.getCurrentUser();
    return user?.role === requiredRole || false;
  },

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∑ cookies
   */
  async getToken(): Promise<string | null> {
    const cookieStore = await cookies();
    return cookieStore.get(TOKEN_COOKIE)?.value || null;
  },

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è refresh —Ç–æ–∫–µ–Ω—É –∑ cookies
   */
  async getRefreshToken(): Promise<string | null> {
    const cookieStore = await cookies();
    return cookieStore.get(REFRESH_TOKEN_COOKIE)?.value || null;
  },

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
   */
  async isAuthenticated(): Promise<boolean> {
    const user = await this.getCurrentUser();
    return Boolean(user);
  },
};
