/**
 * @fileoverview –°–µ—Ä–≤–µ—Ä–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑ Orval –∫–ª—ñ—î–Ω—Ç–∞–º–∏
 *
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î:
 * - Orval –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ auth —Ñ—É–Ω–∫—Ü—ñ—ó
 * - Next.js cookies –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
 * - –ê–¥–∞–ø—Ç–µ—Ä–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó —Ç–∏–ø—ñ–≤
 */

import { jwtDecode } from 'jwt-decode';
import { cookies } from 'next/headers';

import {
  authLogin,
  authRegister,
  authRefreshToken,
  authTestEndpoint,
} from '@/shared/api/generated/auth';

import {
  AuthUser,
  JwtPayload,
  UserRole,
  adaptOrvalLoginResponse,
  adaptOrvalRegisterResponse,
} from '../model/types';

import type { LoginRequest, RegisterRequest } from '@/shared/api/generated/auth';

// –ù–∞–∑–≤–∏ cookies
const TOKEN_COOKIE = 'auth_token';
const REFRESH_TOKEN_COOKIE = 'refresh_token';

// –°–µ—Ä–≤–µ—Ä–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é
export const serverAuth = {
  /**
   * –õ–æ–≥—ñ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
   * @param credentials - –ª–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å
   * @returns –æ–±'—î–∫—Ç –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  async login(credentials: LoginRequest): Promise<AuthUser> {
    try {
      console.log('üîê –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ –±–µ–∫–µ–Ω–¥—É –¥–ª—è –ª–æ–≥—ñ–Ω—É —á–µ—Ä–µ–∑ Orval');

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Orval –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –∫–ª—ñ—î–Ω—Ç
      const orvalResponse = await authLogin(credentials);

      // –ê–¥–∞–ø—Ç—É—î–º–æ Orval –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ AuthUser
      const user = adaptOrvalLoginResponse(orvalResponse);

      // TODO: –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –≤ cookies (–∫–æ–ª–∏ –±–µ–∫–µ–Ω–¥ –ø–æ–≤–µ—Ä–Ω–µ —Ç–æ–∫–µ–Ω–∏)
      // –ü–æ–∫–∏ —â–æ –ø—Ä–∞—Ü—é—î–º–æ –±–µ–∑ —Ç–æ–∫–µ–Ω—ñ–≤
      console.log('‚úÖ –£—Å–ø—ñ—à–Ω–∏–π –ª–æ–≥—ñ–Ω —á–µ—Ä–µ–∑ Orval:', user);

      return user;
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—ñ–Ω—ñ —á–µ—Ä–µ–∑ Orval:', error);
      throw error;
    }
  },

  /**
   * –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   * @param registerData - –¥–∞–Ω—ñ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
   * @returns –æ–±'—î–∫—Ç –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  async register(registerData: RegisterRequest): Promise<AuthUser> {
    try {
      console.log('üîê –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ Orval');

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Orval –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –∫–ª—ñ—î–Ω—Ç
      const orvalResponse = await authRegister(registerData);

      // –ê–¥–∞–ø—Ç—É—î–º–æ Orval –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ AuthUser
      const user = adaptOrvalRegisterResponse(orvalResponse);

      // TODO: –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –≤ cookies (–∫–æ–ª–∏ –±–µ–∫–µ–Ω–¥ –ø–æ–≤–µ—Ä–Ω–µ —Ç–æ–∫–µ–Ω–∏)
      console.log('‚úÖ –£—Å–ø—ñ—à–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —á–µ—Ä–µ–∑ Orval:', user);

      return user;
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ Orval:', error);
      throw error;
    }
  },

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
   * @returns –æ–±'—î–∫—Ç –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ null, —è–∫—â–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è
   */
  async refreshToken(): Promise<AuthUser | null> {
    try {
      console.log('üîÑ –ù–∞–º–∞–≥–∞—î–º–æ—Å—å –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Orval');
      const cookieStore = await cookies();
      const refreshToken = cookieStore.get(REFRESH_TOKEN_COOKIE)?.value;

      if (!refreshToken) {
        console.warn('‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ–π refresh_token –≤ cookies');
        return null;
      }

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Orval –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –∫–ª—ñ—î–Ω—Ç
      const orvalResponse = await authRefreshToken(refreshToken);

      // TODO: –ê–¥–∞–ø—Ç—É–≤–∞—Ç–∏ refresh token response
      // –ü–æ–∫–∏ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ null
      console.log('‚úÖ –¢–æ–∫–µ–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Orval:', orvalResponse);

      return null; // TODO: –ê–¥–∞–ø—Ç—É–≤–∞—Ç–∏ –∫–æ–ª–∏ –±–µ–∫–µ–Ω–¥ –ø–æ–≤–µ—Ä–Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ç–æ–∫–µ–Ω—É —á–µ—Ä–µ–∑ Orval:', error);
      return null;
    }
  },

  /**
   * –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è auth API
   * @returns —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É –∞–±–æ null –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
   */
  async testAuthApi(): Promise<string | null> {
    try {
      console.log('üß™ –¢–µ—Å—Ç—É—î–º–æ auth API —á–µ—Ä–µ–∑ Orval');

      const testResult = await authTestEndpoint();

      console.log('‚úÖ Auth API —Ç–µ—Å—Ç –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ:', testResult);
      return testResult;
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ auth API:', error);
      return null;
    }
  },

  /**
   * –í–∏—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ–∑ —Å–∏—Å—Ç–µ–º–∏
   */
  async logout(): Promise<void> {
    const cookieStore = await cookies();

    // –í–∏–¥–∞–ª—è—î–º–æ cookies
    cookieStore.delete(TOKEN_COOKIE);
    cookieStore.delete(REFRESH_TOKEN_COOKIE);

    console.log('üö™ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–π—à–æ–≤ –∑ —Å–∏—Å—Ç–µ–º–∏');
  },

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   * @returns –æ–±'—î–∫—Ç –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ null, —è–∫—â–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
   */
  async getCurrentUser(): Promise<AuthUser | null> {
    try {
      const token = await this.getToken();

      if (!token) {
        console.log('‚ö†Ô∏è –¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
        return null;
      }

      // –î–µ–∫–æ–¥—É—î–º–æ JWT —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const decoded = jwtDecode<JwtPayload>(token);

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π
      const currentTime = Math.floor(Date.now() / 1000);
      if (decoded.exp < currentTime) {
        console.warn('‚ö†Ô∏è –¢–æ–∫–µ–Ω –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π');
        return null;
      }

      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–æ–∫–µ–Ω—É
      return {
        id: decoded.sub,
        username: decoded.sub,
        name: decoded.name,
        email: decoded.email,
        role: decoded.role,
      };
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
      return null;
    }
  },

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –ø–µ–≤–Ω—É —Ä–æ–ª—å
   * @param requiredRole - –Ω–µ–æ–±—Ö—ñ–¥–Ω–∞ —Ä–æ–ª—å
   * @returns true, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î —Ä–æ–ª—å
   */
  async hasRole(requiredRole: UserRole): Promise<boolean> {
    const user = await this.getCurrentUser();
    return user?.role === requiredRole || false;
  },

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∑ cookies
   * @returns —Ç–æ–∫–µ–Ω –∞–±–æ null, —è–∫—â–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
   */
  async getToken(): Promise<string | null> {
    const cookieStore = await cookies();
    return cookieStore.get(TOKEN_COOKIE)?.value || null;
  },
};
