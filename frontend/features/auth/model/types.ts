/**
 * @fileoverview –¢–∏–ø–∏ —Ç–∞ –∞–¥–∞–ø—Ç–µ—Ä–∏ –¥–ª—è auth feature
 *
 * –ú—ñ—Å—Ç–∏—Ç—å:
 * - –õ–æ–∫–∞–ª—å–Ω—ñ —Ç–∏–ø–∏ –¥–ª—è auth feature
 * - –ê–¥–∞–ø—Ç–µ—Ä–∏ –¥–ª—è Orval –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö —Ç–∏–ø—ñ–≤
 * - –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö
 */

import type { AuthLogin200, AuthRegister200 } from '@/shared/api/generated/auth';

/**
 * –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑ API
 */
export interface AuthResponse {
  accessToken: string;
  refreshToken: string;
  tokenType: string;
  expiresIn: number;
  id: string;
  username: string;
  name: string;
  email: string;
  role: string;
  position?: string;
}

/**
 * –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
export interface AuthUser {
  id: string;
  username: string;
  name: string;
  email: string;
  role: UserRole;
  position?: string;
}

/**
 * –†–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
export enum UserRole {
  ADMIN = 'ADMIN',
  MANAGER = 'MANAGER',
  STAFF = 'STAFF',
}

/**
 * –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–º–∏–ª–æ–∫ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
 */
export interface AuthError {
  message: string;
  code?: string;
  status?: number;
}

/**
 * –¢–∏–ø JWT Payload
 */
export interface JwtPayload {
  sub: string;
  exp: number;
  iat: number;
  role: UserRole;
  name: string;
  email: string;
}

// üîÑ –ë–∞–∑–æ–≤–∏–π –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó API –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ AuthUser
const createAuthUserFromApiResponse = (data: unknown): AuthUser => {
  if (!data) {
    throw new Error('–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Ä–æ–∂–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞');
  }

  const apiData = data as Record<string, unknown>;

  return {
    id: (apiData.id as string) || (apiData.userId as string) || 'unknown',
    username: (apiData.username as string) || 'unknown',
    name: (apiData.name as string) || (apiData.fullName as string) || 'Unknown User',
    email: (apiData.email as string) || 'unknown@example.com',
    role: (apiData.role as UserRole) || UserRole.STAFF,
    position: apiData.position as string,
  };
};

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç—É—î AuthResponse –≤—ñ–¥ API –≤ AuthUser –¥–ª—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
 */
export const convertToAuthUser = (response: AuthResponse): AuthUser => {
  if (!response.id || !response.username || !response.name || !response.email || !response.role) {
    throw new Error('–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞');
  }

  return {
    id: response.id,
    username: response.username,
    name: response.name,
    email: response.email,
    role: response.role as unknown as UserRole,
    position: response.position ?? undefined,
  };
};

/**
 * –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó Orval AuthLogin200 –≤ AuthUser
 */
export const adaptOrvalLoginResponse = (response: AuthLogin200): AuthUser => {
  console.log('üîÑ –ê–¥–∞–ø—Ç—É—î–º–æ Orval login response:', response);

  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–∫–µ–Ω –≤ localStorage —è–∫—â–æ –≤—ñ–Ω —î
  const apiData = response as Record<string, unknown>;
  if (apiData.accessToken && typeof window !== 'undefined') {
    localStorage.setItem('auth-token', apiData.accessToken as string);
    console.log('üíæ –¢–æ–∫–µ–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ localStorage:', apiData.accessToken);
  } else {
    console.warn('‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ response:', apiData);
  }

  return createAuthUserFromApiResponse(response);
};

/**
 * –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó Orval AuthRegister200 –≤ AuthUser
 */
export const adaptOrvalRegisterResponse = (response: AuthRegister200): AuthUser => {
  console.log('üîÑ –ê–¥–∞–ø—Ç—É—î–º–æ Orval register response:', response);
  return createAuthUserFromApiResponse(response);
};

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
 */
export const isAdmin = (user: AuthUser | null): boolean => {
  return user?.role === UserRole.ADMIN;
};

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∞–±–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
 */
export const isManagerOrAdmin = (user: AuthUser | null): boolean => {
  return user?.role === UserRole.MANAGER || user?.role === UserRole.ADMIN;
};

/**
 * –û—Ç—Ä–∏–º—É—î –≤—ñ–¥–æ–±—Ä–∞–∂—É–≤–∞–Ω–µ —ñ–º'—è —Ä–æ–ª—ñ
 */
export const getRoleDisplayName = (role: UserRole): string => {
  switch (role) {
    case UserRole.ADMIN:
      return '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä';
    case UserRole.MANAGER:
      return '–ú–µ–Ω–µ–¥–∂–µ—Ä';
    case UserRole.STAFF:
      return '–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫';
    default:
      return '–ù–µ–≤—ñ–¥–æ–º–∞ —Ä–æ–ª—å';
  }
};
