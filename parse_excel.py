#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É Excel —Ñ–∞–π–ª—É OGEdge All Services test.xlsx
–ö–æ–Ω–≤–µ—Ä—Ç—É—î –¥–∞–Ω—ñ –≤ JSON —Ç–∞ CSV —Ñ–æ—Ä–º–∞—Ç–∏
–ü–ï–†–ï–ó–ê–ü–ò–°–£–Ñ —ñ—Å–Ω—É—é—á—ñ —Ñ–∞–π–ª–∏ (–≤–∏–¥–∞–ª—è—î —Å—Ç–∞—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é parsed_data)
"""

import pandas as pd
import json
import os
import shutil
from pathlib import Path

def parse_excel_file():
    """–ü–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª—É —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏"""

    # –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É
    excel_file = "OGEdge All Services test.xlsx"

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ñ–∞–π–ª—É
    if not os.path.exists(excel_file):
        print(f"‚ùå –§–∞–π–ª {excel_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return

    try:
        # –ß–∏—Ç–∞–Ω–Ω—è –≤—Å—ñ—Ö –∞—Ä–∫—É—à—ñ–≤ –∑ Excel —Ñ–∞–π–ª—É
        excel_data = pd.read_excel(excel_file, sheet_name=None)

        print("üìä –ó–Ω–∞–π–¥–µ–Ω—ñ –∞—Ä–∫—É—à—ñ –≤ Excel —Ñ–∞–π–ª—ñ:")
        for sheet_name in excel_data.keys():
            print(f"  - {sheet_name}")

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ (–∑ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º —ñ—Å–Ω—É—é—á–æ—ó)
        output_dir = "parsed_data"

        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, —è–∫—â–æ –≤–æ–Ω–∞ —ñ—Å–Ω—É—î
        if os.path.exists(output_dir):
            print(f"üóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: {output_dir}")
            shutil.rmtree(output_dir)

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
        os.makedirs(output_dir)
        print(f"üìÅ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é: {output_dir}")

        # –û–±—Ä–æ–±–∫–∞ –∫–æ–∂–Ω–æ–≥–æ –∞—Ä–∫—É—à–∞
        for sheet_name, df in excel_data.items():
            print(f"\nüîÑ –û–±—Ä–æ–±–∫–∞ –∞—Ä–∫—É—à–∞: {sheet_name}")

            # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–∞–Ω—ñ
            print(f"   –†—è–¥–∫—ñ–≤: {len(df)}")
            print(f"   –ö–æ–ª–æ–Ω–æ–∫: {len(df.columns)}")
            print(f"   –ù–∞–∑–≤–∏ –∫–æ–ª–æ–Ω–æ–∫: {list(df.columns)}")

            # –û—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö (–≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤–Ω—ñ—Å—Ç—é –ø–æ—Ä–æ–∂–Ω—ñ—Ö —Ä—è–¥–∫—ñ–≤ —Ç–∞ –∫–æ–ª–æ–Ω–æ–∫)
            df_cleaned = df.dropna(how='all').dropna(axis=1, how='all')

            if df_cleaned.empty:
                print(f"   ‚ö†Ô∏è  –ê—Ä–∫—É—à {sheet_name} –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –º—ñ—Å—Ç–∏—Ç—å —Ç—ñ–ª—å–∫–∏ –ø–æ—Ä–æ–∂–Ω—ñ –∫–æ–º—ñ—Ä–∫–∏")
                continue

            # –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è NaN –∑–Ω–∞—á–µ–Ω—å –ø–æ—Ä–æ–∂–Ω—ñ–º–∏ —Ä—è–¥–∫–∞–º–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
            df_cleaned = df_cleaned.fillna('')

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ JSON (–∑ –æ–±—Ä–æ–±–∫–æ—é datetime)
            json_file = os.path.join(output_dir, f"{sheet_name}.json")

            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ DataFrame –≤ —Å–ª–æ–≤–Ω–∏–∫ –∑ –æ–±—Ä–æ–±–∫–æ—é datetime
            data_dict = df_cleaned.to_dict('records')

            # –û–±—Ä–æ–±–∫–∞ datetime –æ–±'—î–∫—Ç—ñ–≤ –¥–ª—è JSON —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
            def convert_datetime(obj):
                if isinstance(obj, pd.Timestamp):
                    return obj.strftime('%Y-%m-%d %H:%M:%S')
                elif pd.isna(obj):
                    return None
                else:
                    return obj

            # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é –¥–æ –≤—Å—ñ—Ö –∑–Ω–∞—á–µ–Ω—å
            for record in data_dict:
                for key, value in record.items():
                    record[key] = convert_datetime(value)

            with open(json_file, 'w', encoding='utf-8') as f:
                json.dump(data_dict, f, indent=2, ensure_ascii=False, default=str)
            print(f"   ‚úÖ JSON –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π: {json_file}")

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ CSV
            csv_file = os.path.join(output_dir, f"{sheet_name}.csv")
            df_cleaned.to_csv(csv_file, index=False, encoding='utf-8-sig')
            print(f"   ‚úÖ CSV –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π: {csv_file}")

            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ–≥–æ JSON –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
            # –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ–≥–æ JSON
            structured_data_dict = df_cleaned.to_dict('records')
            for record in structured_data_dict:
                for key, value in record.items():
                    record[key] = convert_datetime(value)

            structured_data = {
                "sheet_name": sheet_name,
                "total_rows": len(df_cleaned),
                "total_columns": len(df_cleaned.columns),
                "columns": list(df_cleaned.columns),
                "data": structured_data_dict
            }

            structured_json_file = os.path.join(output_dir, f"{sheet_name}_structured.json")
            with open(structured_json_file, 'w', encoding='utf-8') as f:
                json.dump(structured_data, f, indent=2, ensure_ascii=False, default=str)
            print(f"   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π JSON –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π: {structured_json_file}")

        print("\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: {output_dir}")
        print(f"üîÑ –£—Å—ñ —Ñ–∞–π–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ñ (—è–∫—â–æ –±—É–ª–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –≤–µ—Ä—Å—ñ—ó)")

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å–Ω–æ–≥–æ —Ñ–∞–π–ª—É –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –≤—Å—ñ –∞—Ä–∫—É—à—ñ
        index_data = {
            "source_file": excel_file,
            "total_sheets": len(excel_data),
            "sheets": {}
        }

        for sheet_name, df in excel_data.items():
            df_cleaned = df.dropna(how='all').dropna(axis=1, how='all')
            index_data["sheets"][sheet_name] = {
                "rows": len(df_cleaned),
                "columns": len(df_cleaned.columns),
                "column_names": list(df_cleaned.columns) if not df_cleaned.empty else [],
                "files": {
                    "json": f"{sheet_name}.json",
                    "csv": f"{sheet_name}.csv",
                    "structured_json": f"{sheet_name}_structured.json"
                }
            }

        index_file = os.path.join(output_dir, "index.json")
        with open(index_file, 'w', encoding='utf-8') as f:
            json.dump(index_data, f, indent=2, ensure_ascii=False)
        print(f"üìã –Ü–Ω–¥–µ–∫—Å–Ω–∏–π —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–∏–π: {index_file}")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É —Ñ–∞–π–ª—É: {str(e)}")
        return False

    return True

if __name__ == "__main__":
    print("üöÄ –ü–æ—á–∞—Ç–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥—É Excel —Ñ–∞–π–ª—É...")
    parse_excel_file()
