package com.aksi.domain.order.statemachine.stage1.service;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.aksi.domain.branch.dto.BranchLocationDTO;
import com.aksi.domain.branch.service.BranchLocationService;
import com.aksi.domain.order.repository.OrderRepository;
import com.aksi.domain.order.service.ReceiptNumberGenerator;

/**
 * –°–µ—Ä–≤—ñ—Å –æ–ø–µ—Ä–∞—Ü—ñ–π –¥–ª—è –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –µ—Ç–∞–ø—ñ 1.3.
 * –¢–æ–Ω–∫–∞ –æ–±–≥–æ—Ä—Ç–∫–∞ –Ω–∞–¥ –¥–æ–º–µ–Ω–Ω–∏–º–∏ —Å–µ—Ä–≤—ñ—Å–∞–º–∏ –±–µ–∑ –≤–ª–∞—Å–Ω–æ—ó –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∏.
 */
@Service
public class BasicOrderInfoOperationsService {

    private static final Logger logger = LoggerFactory.getLogger(BasicOrderInfoOperationsService.class);

    private final BranchLocationService branchLocationService;
    private final ReceiptNumberGenerator receiptNumberGenerator;
    private final OrderRepository orderRepository;

    public BasicOrderInfoOperationsService(BranchLocationService branchLocationService,
                                         ReceiptNumberGenerator receiptNumberGenerator,
                                         OrderRepository orderRepository) {
        this.branchLocationService = branchLocationService;
        this.receiptNumberGenerator = receiptNumberGenerator;
        this.orderRepository = orderRepository;

        logger.info("‚úÖ BasicOrderInfoOperationsService initialized with services: BranchLocationService={}, ReceiptNumberGenerator={}, OrderRepository={}",
            branchLocationService != null ? "OK" : "NULL",
            receiptNumberGenerator != null ? "OK" : "NULL",
            orderRepository != null ? "OK" : "NULL");
    }

    /**
     * –ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó —á–µ—Ä–µ–∑ ReceiptNumberGenerator.
     * –§–æ—Ä–º–∞—Ç: AKSI-[BRANCH_CODE]-YYYYMMDD-HHMMSS-–•–•–•
     */
    public String generateReceiptNumber() {
        return receiptNumberGenerator.generate(null); // –ë–µ–∑ –∫–æ–¥—É —Ñ—ñ–ª—ñ—ó - –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ DEFAULT
    }

    /**
     * –ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó –∑ –∫–æ–¥–æ–º —Ñ—ñ–ª—ñ—ó.
     * –§–æ—Ä–º–∞—Ç: AKSI-[BRANCH_CODE]-YYYYMMDD-HHMMSS-–•–•–•
     */
    public String generateReceiptNumber(String branchCode) {
        return receiptNumberGenerator.generate(branchCode);
    }

    /**
     * –ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó –¥–ª—è —Ñ—ñ–ª—ñ—ó –∑–∞ ID.
     * –í–∏—Ç—è–≥—É—î –∫–æ–¥ —Ñ—ñ–ª—ñ—ó —Ç–∞ –≥–µ–Ω–µ—Ä—É—î –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ: AKSI-[BRANCH_CODE]-YYYYMMDD-HHMMSS-–•–•–•
     */
    public String generateReceiptNumberForBranch(UUID branchId) {
        if (branchId == null) {
            return receiptNumberGenerator.generate(null);
        }

        BranchLocationDTO branch = branchLocationService.getBranchLocationById(branchId);
        String branchCode = branch != null ? branch.getCode() : null;
        return receiptNumberGenerator.generate(branchCode);
    }

    /**
     * –ì–µ–Ω–µ—Ä—É—î –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó.
     * –§–æ—Ä–º–∞—Ç: AKSI-[BRANCH_CODE]-YYYYMMDD-HHMMSS-–•–•–•
     */
    public String generateUniqueReceiptNumber(String branchCode) {
        return receiptNumberGenerator.generateUnique(branchCode);
    }

    /**
     * –ì–µ–Ω–µ—Ä—É—î –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó –¥–ª—è —Ñ—ñ–ª—ñ—ó –∑–∞ ID.
     */
    public String generateUniqueReceiptNumberForBranch(UUID branchId) {
        if (branchId == null) {
            return receiptNumberGenerator.generateUnique(null);
        }

        BranchLocationDTO branch = branchLocationService.getBranchLocationById(branchId);
        String branchCode = branch != null ? branch.getCode() : null;
        return receiptNumberGenerator.generateUnique(branchCode);
    }

    /**
     * –ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω—É –º—ñ—Ç–∫—É.
     */
    public String generateUniqueTag() {
        // –ì–µ–Ω–µ—Ä—É—î–º–æ –±–∞–∑–æ–≤—É –º—ñ—Ç–∫—É
        String baseTag;
        int attempts = 0;
        do {
            String uuid = UUID.randomUUID().toString().replace("-", "").substring(0, 8).toUpperCase();
            baseTag = "TAG-" + uuid;
            attempts++;
        } while (!isUniqueTagUnique(baseTag) && attempts < 10);

        return baseTag;
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó —á–µ—Ä–µ–∑ ReceiptNumberGenerator.
     */
    public boolean isReceiptNumberUnique(String receiptNumber) {
        return receiptNumberGenerator.isUniqueReceiptNumber(receiptNumber);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å –º—ñ—Ç–∫–∏ —á–µ—Ä–µ–∑ OrderRepository.
     */
    public boolean isUniqueTagUnique(String uniqueTag) {
        if (uniqueTag == null || uniqueTag.trim().isEmpty()) {
            return false;
        }
        return !orderRepository.existsByTagNumber(uniqueTag.trim());
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ñ—ñ–ª—ñ—ó.
     */
    public List<BranchLocationDTO> getAllBranches() {
        logger.info("üîç [OPERATIONS] –ó–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ñ—ñ–ª—ñ–π —á–µ—Ä–µ–∑ branchLocationService");

        try {
            if (branchLocationService == null) {
                logger.error("‚ùå [OPERATIONS] BranchLocationService is NULL!");
                throw new IllegalStateException("BranchLocationService is not initialized");
            }

            List<BranchLocationDTO> branches = branchLocationService.getAllBranchLocations();
            logger.info("‚úÖ [OPERATIONS] –û—Ç—Ä–∏–º–∞–Ω–æ {} —Ñ—ñ–ª—ñ–π –≤—ñ–¥ branchLocationService",
                branches != null ? branches.size() : 0);

            if (branches != null && !branches.isEmpty()) {
                logger.info("üìã [OPERATIONS] –ü–µ—Ä—à—ñ 2 —Ñ—ñ–ª—ñ—ó:");
                for (int i = 0; i < Math.min(2, branches.size()); i++) {
                    BranchLocationDTO branch = branches.get(i);
                    logger.info("  - {} (ID: {}, Active: {})",
                        branch.getName(), branch.getId(), branch.getActive());
                }
            } else {
                logger.warn("‚ö†Ô∏è [OPERATIONS] –°–ø–∏—Å–æ–∫ —Ñ—ñ–ª—ñ–π –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ null!");
            }

            return branches;
        } catch (RuntimeException e) {
            logger.error("‚ùå [OPERATIONS] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ—ñ–ª—ñ–π: {}", e.getMessage());
            logger.error("‚ùå [OPERATIONS] Exception type: {}", e.getClass().getSimpleName());
            logger.error("‚ùå [OPERATIONS] BranchLocationService: {}",
                branchLocationService != null ? "NOT NULL" : "NULL");
            logger.error("‚ùå [OPERATIONS] Full stack trace:", e);

            throw new RuntimeException("Failed to get branches from BranchLocationService: " + e.getMessage(), e);
        }
    }

    /**
     * –û—Ç—Ä–∏–º—É—î —Ñ—ñ–ª—ñ—é –∑–∞ ID.
     */
    public BranchLocationDTO getBranchById(UUID branchId) {
        if (branchId == null) return null;
        return branchLocationService.getBranchLocationById(branchId);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Ñ—ñ–ª—ñ—è –∞–∫—Ç–∏–≤–Ω–∞ —Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä–∏–π–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω—å.
     */
    public boolean isBranchAvailable(UUID branchId) {
        if (branchId == null) return false;

        BranchLocationDTO branch = branchLocationService.getBranchLocationById(branchId);
        return branch != null && Boolean.TRUE.equals(branch.getActive());
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å.
     */
    public LocalDateTime getCurrentDateTime() {
        return LocalDateTime.now();
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –¥–∞—Ç–∞ –≤–∞–ª—ñ–¥–Ω–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
     */
    public boolean isValidCreationDate(LocalDateTime creationDate) {
        if (creationDate == null) return false;

        LocalDateTime now = LocalDateTime.now();
        // –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É —Ç–∞ –Ω–µ —Å—Ç–∞—Ä—à–∞ –∑–∞ 24 –≥–æ–¥–∏–Ω–∏
        return !creationDate.isAfter(now) &&
               !creationDate.isBefore(now.minusHours(24));
    }

        /**
     * –í–∏—Ç—è–≥—É—î –∫–æ–¥ —Ñ—ñ–ª—ñ—ó –∑ –Ω–æ–º–µ—Ä–∞ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó.
     */
    public String extractBranchCodeFromReceiptNumber(String receiptNumber) {
        return receiptNumberGenerator.extractBranchCode(receiptNumber);
    }

    /**
     * –í–∞–ª—ñ–¥—É—î —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó —á–µ—Ä–µ–∑ ReceiptNumberGenerator.
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ñ–æ—Ä–º–∞—Ç: AKSI-[BRANCH_CODE]-YYYYMMDD-HHMMSS-–•–•–•
     */
    public boolean isValidReceiptNumberFormat(String receiptNumber) {
        return receiptNumberGenerator.isValidFormat(receiptNumber);
    }

    /**
     * –í–∞–ª—ñ–¥—É—î —Ñ–æ—Ä–º–∞—Ç —É–Ω—ñ–∫–∞–ª—å–Ω–æ—ó –º—ñ—Ç–∫–∏.
     */
    public boolean isValidUniqueTagFormat(String uniqueTag) {
        if (uniqueTag == null || uniqueTag.trim().isEmpty()) {
            return false;
        }

        String trimmedTag = uniqueTag.trim();
        return trimmedTag.length() >= 3 &&
               trimmedTag.length() <= 20 &&
               trimmedTag.matches("^[A-Za-z0-9-_]+$");
    }

    /**
     * –ì–µ–Ω–µ—Ä—É—î —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É—î –ø–æ—Ç–æ—á–Ω–∏–π timestamp –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è.
     */
    public String getCurrentTimestamp() {
        return LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–±–æ—á–∏—Ö –≥–æ–¥–∏–Ω–∞—Ö.
     */
    public boolean isWithinBusinessHours() {
        LocalDateTime now = LocalDateTime.now();
        int hour = now.getHour();

        // –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ —Ä–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏ 8:00 - 20:00
        return hour >= 8 && hour < 20;
    }

    /**
     * –û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è.
     */
    public String getSystemInfo() {
        return String.format("BasicOrderInfoOperations - Timestamp: %s, BusinessHours: %s",
            getCurrentTimestamp(), isWithinBusinessHours());
    }
}
