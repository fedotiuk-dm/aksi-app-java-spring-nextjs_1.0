package com.aksi.domain.order.statemachine.actions;

import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.statemachine.StateContext;
import org.springframework.statemachine.action.Action;
import org.springframework.stereotype.Component;

import com.aksi.domain.order.statemachine.OrderEvent;
import com.aksi.domain.order.statemachine.OrderState;
import com.aksi.domain.order.statemachine.stage2.substep3.service.StainsDefectsCoordinationService;

/**
 * Action –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Substep3 (StainsDefects) –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ–≤ –∑ sessionId –≤—ñ–¥ –≥–æ–ª–æ–≤–Ω–æ–≥–æ Order Wizard.
 * –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ –≤ —Å—Ç–∞–Ω ITEM_WIZARD_ACTIVE –¥–ª—è substep3.
 *
 * –ó–∞–±–µ–∑–ø–µ—á—É—î —â–æ sessionId –≤—ñ–¥ –≥–æ–ª–æ–≤–Ω–æ–≥–æ Order Wizard –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π
 * –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó StainsDefects —Å–µ—Ä–≤—ñ—Å—É.
 */
@Component
public class InitializeSubstep3ContextAction implements Action<OrderState, OrderEvent> {

    private static final Logger logger = LoggerFactory.getLogger(InitializeSubstep3ContextAction.class);

    private final StainsDefectsCoordinationService stainsDefectsService;

    public InitializeSubstep3ContextAction(final StainsDefectsCoordinationService stainsDefectsService) {
        this.stainsDefectsService = stainsDefectsService;
    }

    @Override
    public void execute(StateContext<OrderState, OrderEvent> context) {
        logger.info("üî•üî•üî• InitializeSubstep3ContextAction.execute() –í–ò–ö–õ–ò–ö–ê–ù–û! üî•üî•üî•");

        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ sessionId –∑ ExtendedState –≥–æ–ª–æ–≤–Ω–æ–≥–æ StateMachine
            String sessionId = extractSessionId(context);

            if (sessionId == null) {
                logger.error("‚ùå SessionId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –≤ ExtendedState –≥–æ–ª–æ–≤–Ω–æ–≥–æ StateMachine!");
                return;
            }

            logger.info("üì• SessionId –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ StateMachine: {}", sessionId);

            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Substep3 —Å–µ—Ä–≤—ñ—Å
            initializeSubstep3Services(sessionId);

            logger.info("üéâ InitializeSubstep3ContextAction –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ –¥–ª—è sessionId: {}", sessionId);

        } catch (Exception e) {
            logger.error("üí• –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ InitializeSubstep3ContextAction: {}", e.getMessage(), e);
        }
    }

    /**
     * –í–∏—Ç—è–≥—É—î sessionId –∑ ExtendedState –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
     */
    private String extractSessionId(StateContext<OrderState, OrderEvent> context) {
        String sessionId = context.getExtendedState().get("sessionId", String.class);
        UUID sessionIdUUID = context.getExtendedState().get("sessionIdUUID", UUID.class);

        logger.info("üì• SessionId –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ StateMachine: String={}, UUID={}", sessionId, sessionIdUUID);

        if (sessionId == null && sessionIdUUID != null) {
            sessionId = sessionIdUUID.toString();
            logger.info("üîÑ Converted UUID to String: {}", sessionId);
        }

        return sessionId;
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î Substep3 (StainsDefects) —Å–µ—Ä–≤—ñ—Å
     */
    private void initializeSubstep3Services(String sessionId) {
        UUID sessionUUID = UUID.fromString(sessionId);

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ StainsDefects —Å–µ—Ä–≤—ñ—Å
        logger.info("üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è StainsDefects –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∑ sessionId: {}", sessionId);
        try {
            // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è substep3 (itemId –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ wizard)
            stainsDefectsService.createContext(sessionUUID);
            logger.info("‚úÖ StainsDefects –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ");

        } catch (Exception e) {
            logger.error("üí• –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ StainsDefects –∫–æ–Ω—Ç–µ–∫—Å—Ç—É: {}", e.getMessage(), e);
        }
    }
}
