package com.aksi.domain.order.statemachine.stage1.util;

import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.aksi.domain.order.statemachine.stage1.service.ClientSearchCoordinationService;

/**
 * –î–æ–ø–æ–º—ñ–∂–Ω–∏–π –∫–ª–∞—Å –¥–ª—è ClientSearchAdapter.
 * –ú—ñ—Å—Ç–∏—Ç—å —É—Ç–∏–ª—ñ—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏ —Ç–∞ –∑–∞–≥–∞–ª—å–Ω—É –ª–æ–≥—ñ–∫—É.
 */
public class ClientSearchAdapterHelper {

    private static final Logger logger = LoggerFactory.getLogger(ClientSearchAdapterHelper.class);

    private final ClientSearchCoordinationService coordinationService;

    public ClientSearchAdapterHelper(ClientSearchCoordinationService coordinationService) {
        this.coordinationService = coordinationService;
    }

    /**
     * –ó–∞–±–µ–∑–ø–µ—á—É—î —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è –¥–∞–Ω–æ—ó —Å–µ—Å—ñ—ó.
     * –Ø–∫—â–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π.
     */
    public void ensureContextExists(String sessionId) {
        logger.debug("üîç [CLIENT-SEARCH-HELPER] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è sessionId: {}", sessionId);

        if (!coordinationService.searchContextExists(sessionId)) {
            logger.info("üìù [CLIENT-SEARCH-HELPER] –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ —ñ—Å–Ω—É—î, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–ª—è sessionId: {}", sessionId);
            coordinationService.initializeClientSearch(sessionId);
        } else {
            logger.debug("‚úÖ [CLIENT-SEARCH-HELPER] –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∂–µ —ñ—Å–Ω—É—î –¥–ª—è sessionId: {}", sessionId);
        }
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç—å clientId –∑ —Ä—è–¥–∫–∞ –≤ UUID –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫.
     */
    public UUID parseClientId(String clientId, String sessionId) {
        logger.debug("üîÑ [CLIENT-SEARCH-HELPER] –ü–∞—Ä—Å–∏–Ω–≥ clientId: {} –¥–ª—è sessionId: {}", clientId, sessionId);

        try {
            UUID uuid = UUID.fromString(clientId);
            logger.debug("‚úÖ [CLIENT-SEARCH-HELPER] –£—Å–ø—ñ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ clientId: {} –¥–ª—è sessionId: {}", uuid, sessionId);
            return uuid;
        } catch (IllegalArgumentException e) {
            logger.error("‚ùå [CLIENT-SEARCH-HELPER] –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç clientId: {} –¥–ª—è sessionId: {}, error: {}",
                        clientId, sessionId, e.getMessage());
            return null;
        }
    }

    /**
     * –í–∞–ª—ñ–¥—É—î sessionId –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç—É.
     */
    public boolean isValidSessionId(String sessionId) {
        if (sessionId == null || sessionId.trim().isEmpty()) {
            logger.warn("‚ö†Ô∏è [CLIENT-SEARCH-HELPER] SessionId —î null –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–º");
            return false;
        }

        try {
            UUID.fromString(sessionId);
            return true;
        } catch (IllegalArgumentException e) {
            logger.warn("‚ö†Ô∏è [CLIENT-SEARCH-HELPER] –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç sessionId: {}", sessionId);
            return false;
        }
    }

    /**
     * –õ–æ–≥—É—î –ø–æ—á–∞—Ç–æ–∫ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ sessionId.
     */
    public void logOperationStart(String operation, String sessionId) {
        logger.info("üöÄ [CLIENT-SEARCH-HELPER] –ü–æ—á–∞—Ç–æ–∫ –æ–ø–µ—Ä–∞—Ü—ñ—ó '{}' –¥–ª—è sessionId: {}", operation, sessionId);
    }

    /**
     * –õ–æ–≥—É—î —É—Å–ø—ñ—à–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó.
     */
    public void logOperationSuccess(String operation, String sessionId) {
        logger.info("‚úÖ [CLIENT-SEARCH-HELPER] –û–ø–µ—Ä–∞—Ü—ñ—è '{}' —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è sessionId: {}", operation, sessionId);
    }

    /**
     * –õ–æ–≥—É—î –ø–æ–º–∏–ª–∫—É –æ–ø–µ—Ä–∞—Ü—ñ—ó.
     */
    public void logOperationError(String operation, String sessionId, Exception e) {
        logger.error("‚ùå [CLIENT-SEARCH-HELPER] –ü–æ–º–∏–ª–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü—ñ—ó '{}' –¥–ª—è sessionId: {}, error: {}",
                    operation, sessionId, e.getMessage(), e);
    }
}
