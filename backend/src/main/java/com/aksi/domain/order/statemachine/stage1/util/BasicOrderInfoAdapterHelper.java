package com.aksi.domain.order.statemachine.stage1.util;

import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.aksi.domain.order.statemachine.stage1.service.BasicOrderInfoCoordinationService;

/**
 * –î–æ–ø–æ–º—ñ–∂–Ω–∏–π –∫–ª–∞—Å –¥–ª—è BasicOrderInfoAdapter.
 * –ú—ñ—Å—Ç–∏—Ç—å —É—Ç–∏–ª—ñ—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏ —Ç–∞ –∑–∞–≥–∞–ª—å–Ω—É –ª–æ–≥—ñ–∫—É.
 */
public class BasicOrderInfoAdapterHelper {

    private static final Logger logger = LoggerFactory.getLogger(BasicOrderInfoAdapterHelper.class);

    private final BasicOrderInfoCoordinationService coordinationService;

    public BasicOrderInfoAdapterHelper(BasicOrderInfoCoordinationService coordinationService) {
        this.coordinationService = coordinationService;
    }

    /**
     * –ó–∞–±–µ–∑–ø–µ—á—É—î —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è –¥–∞–Ω–æ—ó —Å–µ—Å—ñ—ó.
     * –Ø–∫—â–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π.
     */
    public void ensureContextExists(String sessionId) {
        logger.debug("üîç [BASIC-ORDER-HELPER] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è sessionId: {}", sessionId);

        if (!coordinationService.sessionExists(sessionId)) {
            logger.info("üìù [BASIC-ORDER-HELPER] –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ —ñ—Å–Ω—É—î, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–ª—è sessionId: {}", sessionId);
            coordinationService.initializeBasicOrderInfo(sessionId);
        } else {
            logger.debug("‚úÖ [BASIC-ORDER-HELPER] –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∂–µ —ñ—Å–Ω—É—î –¥–ª—è sessionId: {}", sessionId);
        }
    }

    /**
     * –í–∞–ª—ñ–¥—É—î sessionId –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç—É.
     */
    public boolean isValidSessionId(String sessionId) {
        if (sessionId == null || sessionId.trim().isEmpty()) {
            logger.warn("‚ö†Ô∏è [BASIC-ORDER-HELPER] SessionId —î null –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–º");
            return false;
        }

        try {
            UUID.fromString(sessionId);
            return true;
        } catch (IllegalArgumentException e) {
            logger.warn("‚ö†Ô∏è [BASIC-ORDER-HELPER] –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç sessionId: {}", sessionId);
            return false;
        }
    }

    /**
     * –í–∞–ª—ñ–¥—É—î branchId –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç—É.
     */
    public boolean isValidBranchId(UUID branchId) {
        if (branchId == null) {
            logger.warn("‚ö†Ô∏è [BASIC-ORDER-HELPER] BranchId —î null");
            return false;
        }
        return true;
    }

    /**
     * –í–∞–ª—ñ–¥—É—î —É–Ω—ñ–∫–∞–ª—å–Ω—É –º—ñ—Ç–∫—É –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å.
     */
    public boolean isValidUniqueTag(String uniqueTag) {
        logger.info("üîç [BASIC-ORDER-HELPER] –í–∞–ª—ñ–¥–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—ó –º—ñ—Ç–∫–∏: '{}'", uniqueTag);

        if (uniqueTag == null || uniqueTag.trim().isEmpty()) {
            logger.warn("‚ö†Ô∏è [BASIC-ORDER-HELPER] –£–Ω—ñ–∫–∞–ª—å–Ω–∞ –º—ñ—Ç–∫–∞ —î null –∞–±–æ –ø–æ—Ä–æ–∂–Ω—å–æ—é");
            return false;
        }

        String trimmedTag = uniqueTag.trim();
        logger.info("üìè [BASIC-ORDER-HELPER] –î–æ–≤–∂–∏–Ω–∞ –º—ñ—Ç–∫–∏ –ø—ñ—Å–ª—è trim: {}", trimmedTag.length());

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏ (—è–∫ —É BasicOrderInfoValidator)
        if (trimmedTag.length() < 3) {
            logger.warn("‚ö†Ô∏è [BASIC-ORDER-HELPER] –£–Ω—ñ–∫–∞–ª—å–Ω–∞ –º—ñ—Ç–∫–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞: {} —Å–∏–º–≤–æ–ª—ñ–≤ (–º—ñ–Ω—ñ–º—É–º 3)", trimmedTag.length());
            return false;
        }

        if (trimmedTag.length() > 20) {
            logger.warn("‚ö†Ô∏è [BASIC-ORDER-HELPER] –£–Ω—ñ–∫–∞–ª—å–Ω–∞ –º—ñ—Ç–∫–∞ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞: {} —Å–∏–º–≤–æ–ª—ñ–≤ (–º–∞–∫—Å–∏–º—É–º 20)", trimmedTag.length());
            return false;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É (—è–∫ —É BasicOrderInfoValidator)
        String pattern = "^[A-Za-z0-9-_]{3,20}$";
        boolean matchesPattern = trimmedTag.matches(pattern);
        logger.info("üî§ [BASIC-ORDER-HELPER] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É '{}' –ø—Ä–æ—Ç–∏ –ø–∞—Ç–µ—Ä–Ω—É '{}': {}",
                   trimmedTag, pattern, matchesPattern);

        if (!matchesPattern) {
            logger.warn("‚ö†Ô∏è [BASIC-ORDER-HELPER] –£–Ω—ñ–∫–∞–ª—å–Ω–∞ –º—ñ—Ç–∫–∞ –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–¥–æ–∑–≤–æ–ª–µ–Ω—ñ —Å–∏–º–≤–æ–ª–∏. –î–æ–∑–≤–æ–ª–µ–Ω—ñ: –ª–∞—Ç–∏–Ω—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏, —Ü–∏—Ñ—Ä–∏, —Ç–∏—Ä–µ, –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è");
            return false;
        }

        logger.info("‚úÖ [BASIC-ORDER-HELPER] –£–Ω—ñ–∫–∞–ª—å–Ω–∞ –º—ñ—Ç–∫–∞ '{}' –ø—Ä–æ–π—à–ª–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é", trimmedTag);
        return true;
    }

    /**
     * –õ–æ–≥—É—î –ø–æ—á–∞—Ç–æ–∫ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ sessionId.
     */
    public void logOperationStart(String operation, String sessionId) {
        logger.info("üöÄ [BASIC-ORDER-HELPER] –ü–æ—á–∞—Ç–æ–∫ –æ–ø–µ—Ä–∞—Ü—ñ—ó '{}' –¥–ª—è sessionId: {}", operation, sessionId);
    }

    /**
     * –õ–æ–≥—É—î —É—Å–ø—ñ—à–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó.
     */
    public void logOperationSuccess(String operation, String sessionId) {
        logger.info("‚úÖ [BASIC-ORDER-HELPER] –û–ø–µ—Ä–∞—Ü—ñ—è '{}' —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è sessionId: {}", operation, sessionId);
    }

    /**
     * –õ–æ–≥—É—î –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó.
     */
    public void logOperationWarning(String operation, String sessionId, String reason) {
        logger.warn("‚ö†Ô∏è [BASIC-ORDER-HELPER] –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –≤ –æ–ø–µ—Ä–∞—Ü—ñ—ó '{}' –¥–ª—è sessionId: {}, –ø—Ä–∏—á–∏–Ω–∞: {}",
                   operation, sessionId, reason);
    }

    /**
     * –õ–æ–≥—É—î –ø–æ–º–∏–ª–∫—É –æ–ø–µ—Ä–∞—Ü—ñ—ó.
     */
    public void logOperationError(String operation, String sessionId, Exception e) {
        logger.error("‚ùå [BASIC-ORDER-HELPER] –ü–æ–º–∏–ª–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü—ñ—ó '{}' –¥–ª—è sessionId: {}, error: {}",
                    operation, sessionId, e.getMessage(), e);
    }

    /**
     * –°—Ç–≤–æ—Ä—é—î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω–∏–π –æ–ø–∏—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó.
     */
    public String createOperationDescription(String operation, String sessionId) {
        return String.format("–û–ø–µ—Ä–∞—Ü—ñ—è '%s' –¥–ª—è sessionId: %s", operation, sessionId);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –≥–æ—Ç–æ–≤–∞ –±–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.
     */
    public boolean isReadyForCompletion(String sessionId) {
        try {
            return coordinationService.isReadyForCompletion(sessionId);
        } catch (Exception e) {
            logger.error("‚ùå [BASIC-ORDER-HELPER] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –¥–ª—è sessionId: {}, error: {}",
                        sessionId, e.getMessage());
            return false;
        }
    }
}
