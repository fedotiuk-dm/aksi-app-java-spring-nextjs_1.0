package com.aksi.domain.order.statemachine.stage1.service;

import java.time.LocalDateTime;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.aksi.domain.order.statemachine.stage1.dto.BasicOrderInfoDTO;
import com.aksi.domain.order.statemachine.stage1.enums.BasicOrderInfoState;
import com.aksi.domain.order.statemachine.stage1.mapper.BasicOrderInfoMapper;
import com.aksi.domain.order.statemachine.stage1.service.BasicOrderInfoStateService.BasicOrderInfoContext;

/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∂–∏—Ç—Ç—î–≤–∏–º —Ü–∏–∫–ª–æ–º –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏ –º—ñ–∂ —Å—Ç–∞–Ω–∞–º–∏ —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–µ—Å—ñ—è–º–∏.
 */
@Service
public class BasicOrderInfoWorkflowService {

    private static final Logger logger = LoggerFactory.getLogger(BasicOrderInfoWorkflowService.class);
    private final BasicOrderInfoStateService stateService;

    public BasicOrderInfoWorkflowService(BasicOrderInfoStateService stateService) {
        this.stateService = stateService;
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –Ω–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
     */
    public String startWorkflow() {
        String sessionId = stateService.initializeContext();
        stateService.updateState(sessionId, BasicOrderInfoState.INIT);
        return sessionId;
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –ø—Ä–æ—Ü–µ—Å –∑ —ñ—Å–Ω—É—é—á–æ—é –±–∞–∑–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é.
     */
    public String startWorkflowWithData(BasicOrderInfoDTO basicOrderInfo) {
        String sessionId = stateService.initializeContext();
        stateService.updateStateAndData(sessionId, BasicOrderInfoState.INIT, basicOrderInfo);
        return sessionId;
    }

    /**
     * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –ø—Ä–æ—Ü–µ—Å –¥–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –Ω–æ–º–µ—Ä–∞ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó.
     */
    public boolean transitionToReceiptGeneration(String sessionId) {
        BasicOrderInfoContext context = stateService.getContext(sessionId);
        if (context == null || context.isLocked()) {
            return false;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ —Å—Ç–∞–Ω –¥–æ–∑–≤–æ–ª—è—î –ø–µ—Ä–µ—Ö—ñ–¥
        BasicOrderInfoState currentState = context.getCurrentState();
        if (currentState != BasicOrderInfoState.INIT &&
            currentState != BasicOrderInfoState.BRANCH_SELECTED) {
            return false;
        }

        return stateService.updateState(sessionId, BasicOrderInfoState.GENERATING_RECEIPT_NUMBER);
    }

    /**
     * –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î —É—Å–ø—ñ—à–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –Ω–æ–º–µ—Ä–∞ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó.
     */
    public boolean confirmReceiptGeneration(String sessionId, String receiptNumber) {
        BasicOrderInfoContext context = stateService.getContext(sessionId);
        if (context == null || context.isLocked()) {
            return false;
        }

        if (context.getCurrentState() != BasicOrderInfoState.GENERATING_RECEIPT_NUMBER) {
            return false;
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∑ –Ω–æ–≤–∏–º –Ω–æ–º–µ—Ä–æ–º –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó
        BasicOrderInfoDTO updatedInfo = BasicOrderInfoMapper.copyWithReceiptNumber(
                context.getBasicOrderInfo(), receiptNumber);

        return stateService.updateStateAndData(sessionId,
                BasicOrderInfoState.RECEIPT_NUMBER_GENERATED, updatedInfo);
    }

    /**
     * –û–±—Ä–æ–±–ª—è—î –ø–æ–º–∏–ª–∫—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –Ω–æ–º–µ—Ä–∞ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó.
     */
    public boolean handleReceiptGenerationError(String sessionId, String error) {
        BasicOrderInfoContext context = stateService.getContext(sessionId);
        if (context == null) {
            return false;
        }

        stateService.setError(sessionId, "–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –Ω–æ–º–µ—Ä–∞ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó: " + error);
        return stateService.updateState(sessionId, BasicOrderInfoState.ERROR);
    }

    /**
     * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –ø—Ä–æ—Ü–µ—Å –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—ó –º—ñ—Ç–∫–∏.
     */
    public boolean transitionToUniqueTagEntry(String sessionId) {
        BasicOrderInfoContext context = stateService.getContext(sessionId);
        if (context == null || context.isLocked()) {
            return false;
        }

        BasicOrderInfoState currentState = context.getCurrentState();
        if (currentState != BasicOrderInfoState.RECEIPT_NUMBER_GENERATED &&
            currentState != BasicOrderInfoState.UNIQUE_TAG_ENTERED) {
            return false;
        }

        return stateService.updateState(sessionId, BasicOrderInfoState.ENTERING_UNIQUE_TAG);
    }

    /**
     * –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –≤–≤–µ–¥–µ–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—ó –º—ñ—Ç–∫–∏.
     */
    public boolean confirmUniqueTag(String sessionId, String uniqueTag) {
        BasicOrderInfoContext context = stateService.getContext(sessionId);
        if (context == null || context.isLocked()) {
            return false;
        }

        if (context.getCurrentState() != BasicOrderInfoState.ENTERING_UNIQUE_TAG) {
            return false;
        }

        BasicOrderInfoDTO updatedInfo = BasicOrderInfoMapper.copyWithUniqueTag(
                context.getBasicOrderInfo(), uniqueTag);

        return stateService.updateStateAndData(sessionId,
                BasicOrderInfoState.UNIQUE_TAG_ENTERED, updatedInfo);
    }

    /**
     * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –ø—Ä–æ—Ü–µ—Å –¥–æ –≤–∏–±–æ—Ä—É —Ñ—ñ–ª—ñ—ó.
     */
    public boolean transitionToBranchSelection(String sessionId) {
        BasicOrderInfoContext context = stateService.getContext(sessionId);
        if (context == null || context.isLocked()) {
            return false;
        }

        // –í–∏–±—ñ—Ä —Ñ—ñ–ª—ñ—ó –º–æ–∂–µ –±—É—Ç–∏ –Ω–∞ –±—É–¥—å-—è–∫–æ–º—É –µ—Ç–∞–ø—ñ
        return stateService.updateState(sessionId, BasicOrderInfoState.SELECTING_BRANCH);
    }

    /**
     * –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –≤–∏–±—ñ—Ä —Ñ—ñ–ª—ñ—ó.
     */
    public boolean confirmBranchSelection(String sessionId, UUID branchId) {
        logger.info("üè¢ [WORKFLOW] –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É —Ñ—ñ–ª—ñ—ó {} –¥–ª—è sessionId: {}", branchId, sessionId);

        BasicOrderInfoContext context = stateService.getContext(sessionId);
        if (context == null || context.isLocked()) {
            logger.warn("‚ö†Ô∏è [WORKFLOW] –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –¥–ª—è sessionId: {}", sessionId);
            return false;
        }

        BasicOrderInfoState currentState = context.getCurrentState();
        logger.info("üîç [WORKFLOW] –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω: {} –¥–ª—è sessionId: {}", currentState, sessionId);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Å—Ç–∞–Ω—É –≤–∏–±–æ—Ä—É —Ñ—ñ–ª—ñ—ó —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if (currentState != BasicOrderInfoState.SELECTING_BRANCH) {
            logger.info("üîÑ [WORKFLOW] –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ —Å—Ç–∞–Ω—É SELECTING_BRANCH –¥–ª—è sessionId: {}", sessionId);
            boolean transitioned = stateService.updateState(sessionId, BasicOrderInfoState.SELECTING_BRANCH);
            if (!transitioned) {
                logger.error("‚ùå [WORKFLOW] –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–π—Ç–∏ –¥–æ —Å—Ç–∞–Ω—É SELECTING_BRANCH –¥–ª—è sessionId: {}", sessionId);
                return false;
            }
            logger.info("‚úÖ [WORKFLOW] –£—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–π—à–ª–∏ –¥–æ —Å—Ç–∞–Ω—É SELECTING_BRANCH –¥–ª—è sessionId: {}", sessionId);
        }

        BasicOrderInfoDTO updatedInfo = BasicOrderInfoMapper.fromBranchId(branchId, null);
        if (context.getBasicOrderInfo() != null) {
            updatedInfo = BasicOrderInfoMapper.merge(context.getBasicOrderInfo(), updatedInfo);
        }

        boolean success = stateService.updateStateAndData(sessionId,
                BasicOrderInfoState.BRANCH_SELECTED, updatedInfo);

        if (success) {
            logger.info("‚úÖ [WORKFLOW] –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –≤–∏–±—ñ—Ä —Ñ—ñ–ª—ñ—ó {} –¥–ª—è sessionId: {}", branchId, sessionId);
        } else {
            logger.error("‚ùå [WORKFLOW] –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–±—ñ—Ä —Ñ—ñ–ª—ñ—ó {} –¥–ª—è sessionId: {}", branchId, sessionId);
        }

        return success;
    }

    /**
     * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –ø—Ä–æ—Ü–µ—Å –¥–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è.
     */
    public boolean transitionToCreationDateSetting(String sessionId) {
        BasicOrderInfoContext context = stateService.getContext(sessionId);
        if (context == null || context.isLocked()) {
            return false;
        }

        // –î–∞—Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ
        return stateService.updateState(sessionId, BasicOrderInfoState.SETTING_CREATION_DATE);
    }

    /**
     * –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è.
     */
    public boolean confirmCreationDate(String sessionId) {
        BasicOrderInfoContext context = stateService.getContext(sessionId);
        if (context == null || context.isLocked()) {
            return false;
        }

        if (context.getCurrentState() != BasicOrderInfoState.SETTING_CREATION_DATE) {
            return false;
        }

        BasicOrderInfoDTO updatedInfo = context.getBasicOrderInfo();
        if (updatedInfo.getCreationDate() == null) {
            updatedInfo.setCreationDate(LocalDateTime.now());
        }

        return stateService.updateStateAndData(sessionId,
                BasicOrderInfoState.CREATION_DATE_SET, updatedInfo);
    }

    /**
     * –ó–∞–≤–µ—Ä—à—É—î –ø—Ä–æ—Ü–µ—Å –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
     */
    public boolean completeWorkflow(String sessionId) {
        BasicOrderInfoContext context = stateService.getContext(sessionId);
        if (context == null || context.isLocked()) {
            return false;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫—Ä–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ
        BasicOrderInfoDTO info = context.getBasicOrderInfo();
        if (!info.isReceiptNumberGenerated() || !info.isUniqueTagEntered() ||
            !info.isBranchSelected() || !info.isCreationDateSet()) {
            return false;
        }

        return stateService.updateState(sessionId, BasicOrderInfoState.COMPLETED);
    }

    /**
     * –°–∫–∏–¥–∞—î –ø—Ä–æ—Ü–µ—Å –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É.
     */
    public boolean resetWorkflow(String sessionId) {
        return stateService.resetContext(sessionId);
    }

    /**
     * –û–±—Ä–æ–±–ª—è—î –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫—Ä–æ–∫—É.
     */
    public boolean goBack(String sessionId) {
        BasicOrderInfoContext context = stateService.getContext(sessionId);
        if (context == null || context.isLocked()) {
            return false;
        }

        BasicOrderInfoState currentState = context.getCurrentState();
        BasicOrderInfoState previousState = getPreviousState(currentState);

        if (previousState == null) {
            return false;
        }

        return stateService.updateState(sessionId, previousState);
    }

    /**
     * –°–∫–∞—Å–æ–≤—É—î –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å.
     */
    public boolean cancelWorkflow(String sessionId) {
        return stateService.removeContext(sessionId);
    }

    /**
     * –ë–ª–æ–∫—É—î –ø—Ä–æ—Ü–µ—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏.
     */
    public boolean lockWorkflow(String sessionId) {
        return stateService.lockContext(sessionId);
    }

    /**
     * –†–æ–∑–±–ª–æ–∫–æ–≤—É—î –ø—Ä–æ—Ü–µ—Å.
     */
    public boolean unlockWorkflow(String sessionId) {
        return stateService.unlockContext(sessionId);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø—Ä–æ—Ü–µ—Å –≥–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.
     */
    public boolean isReadyForCompletion(String sessionId) {
        BasicOrderInfoContext context = stateService.getContext(sessionId);
        if (context == null) {
            return false;
        }

        BasicOrderInfoDTO info = context.getBasicOrderInfo();
        return info.isReceiptNumberGenerated() && info.isUniqueTagEntered() &&
               info.isBranchSelected() && info.isCreationDateSet();
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –ø—Ä–æ—Ü–µ—Å—É.
     */
    public BasicOrderInfoState getCurrentState(String sessionId) {
        return stateService.getCurrentState(sessionId);
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ—Ü–µ—Å—É.
     */
    public BasicOrderInfoDTO getCurrentData(String sessionId) {
        return stateService.getBasicOrderInfo(sessionId);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø—Ä–æ—Ü–µ—Å –º–∞—î –ø–æ–º–∏–ª–∫–∏.
     */
    public boolean hasErrors(String sessionId) {
        return stateService.hasError(sessionId);
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –æ—Å—Ç–∞–Ω–Ω—é –ø–æ–º–∏–ª–∫—É –ø—Ä–æ—Ü–µ—Å—É.
     */
    public String getLastError(String sessionId) {
        return stateService.getLastError(sessionId);
    }

    /**
     * –û—á–∏—â–∞—î –ø–æ–º–∏–ª–∫–∏ –ø—Ä–æ—Ü–µ—Å—É.
     */
    public boolean clearErrors(String sessionId) {
        return stateService.clearError(sessionId);
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –ø—Ä–æ—Ü–µ—Å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ª–æ–≥—ñ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É.
     */
    public boolean advanceToNextStep(String sessionId) {
        BasicOrderInfoContext context = stateService.getContext(sessionId);
        if (context == null || context.isLocked()) {
            return false;
        }

        BasicOrderInfoState currentState = context.getCurrentState();
        BasicOrderInfoState nextState = getNextLogicalState(currentState, context.getBasicOrderInfo());

        if (nextState == null || nextState == currentState) {
            return false;
        }

        return stateService.updateState(sessionId, nextState);
    }

    // –î–æ–ø–æ–º—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏

    private BasicOrderInfoState getPreviousState(BasicOrderInfoState currentState) {
        return switch (currentState) {
            case GENERATING_RECEIPT_NUMBER -> BasicOrderInfoState.INIT;
            case RECEIPT_NUMBER_GENERATED -> BasicOrderInfoState.GENERATING_RECEIPT_NUMBER;
            case ENTERING_UNIQUE_TAG -> BasicOrderInfoState.RECEIPT_NUMBER_GENERATED;
            case UNIQUE_TAG_ENTERED -> BasicOrderInfoState.ENTERING_UNIQUE_TAG;
            case SELECTING_BRANCH -> BasicOrderInfoState.INIT; // –ú–æ–∂–µ –±—É—Ç–∏ –Ω–∞ –±—É–¥—å-—è–∫–æ–º—É –µ—Ç–∞–ø—ñ
            case BRANCH_SELECTED -> BasicOrderInfoState.SELECTING_BRANCH;
            case SETTING_CREATION_DATE -> BasicOrderInfoState.BRANCH_SELECTED;
            case CREATION_DATE_SET -> BasicOrderInfoState.SETTING_CREATION_DATE;
            case COMPLETED -> BasicOrderInfoState.CREATION_DATE_SET;
            case ERROR -> BasicOrderInfoState.INIT;
            default -> null;
        };
    }

    private BasicOrderInfoState getNextLogicalState(BasicOrderInfoState currentState,
                                                  BasicOrderInfoDTO basicOrderInfo) {
        return switch (currentState) {
            case INIT -> BasicOrderInfoState.GENERATING_RECEIPT_NUMBER;
            case RECEIPT_NUMBER_GENERATED -> BasicOrderInfoState.ENTERING_UNIQUE_TAG;
            case UNIQUE_TAG_ENTERED -> basicOrderInfo.isBranchSelected()
                ? BasicOrderInfoState.SETTING_CREATION_DATE
                : BasicOrderInfoState.SELECTING_BRANCH;
            case BRANCH_SELECTED -> basicOrderInfo.isUniqueTagEntered()
                ? BasicOrderInfoState.SETTING_CREATION_DATE
                : BasicOrderInfoState.ENTERING_UNIQUE_TAG;
            case CREATION_DATE_SET -> BasicOrderInfoState.COMPLETED;
            default -> null;
        };
    }

    /**
     * –û—Ç—Ä–∏–º—É—î —Ñ—ñ–ª—ñ—ó –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É (–∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó).
     * –¶–µ–π –º–µ—Ç–æ–¥ –ø—Ä–∏–ø—É—Å–∫–∞—î —â–æ —Ñ—ñ–ª—ñ—ó –±—É–ª–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –≤ availableBranches –ø–æ–ª–µ DTO.
     */
    public java.util.List<com.aksi.domain.branch.dto.BranchLocationDTO> getAvailableBranches(String sessionId) {
        BasicOrderInfoDTO currentData = getCurrentData(sessionId);
        if (currentData != null && currentData.getAvailableBranches() != null) {
            return currentData.getAvailableBranches();
        }
        return java.util.Collections.emptyList();
    }
}
