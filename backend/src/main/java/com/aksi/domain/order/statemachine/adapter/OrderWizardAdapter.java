package com.aksi.domain.order.statemachine.adapter;

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.statemachine.StateMachine;
import org.springframework.statemachine.service.StateMachineService;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.aksi.domain.order.statemachine.OrderEvent;
import com.aksi.domain.order.statemachine.OrderState;
import com.aksi.domain.order.statemachine.dto.OrderWizardResponseDTO;
import com.aksi.domain.order.statemachine.util.StateMachineUtils;

/**
 * –ì–æ–ª–æ–≤–Ω–∏–π REST –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è Order Wizard.
 * –£–ø—Ä–∞–≤–ª—è—î –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –º—ñ–∂ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ –µ—Ç–∞–ø–∞–º–∏.
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î StateMachineService –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∂–∏—Ç—Ç—î–≤–∏–º —Ü–∏–∫–ª–æ–º StateMachine.
 */
@RestController
@RequestMapping("/api/order-wizard")
public class OrderWizardAdapter {

    private static final Logger logger = LoggerFactory.getLogger(OrderWizardAdapter.class);

    private final StateMachineService<OrderState, OrderEvent> stateMachineService;

    @Autowired
    public OrderWizardAdapter(StateMachineService<OrderState, OrderEvent> stateMachineService) {
        this.stateMachineService = stateMachineService;

        if (stateMachineService != null) {
            logger.info("‚úÖ OrderWizardAdapter initialized with StateMachineService: {}",
                stateMachineService.getClass().getSimpleName());
        } else {
            logger.error("‚ùå OrderWizardAdapter initialized with NULL StateMachineService!");
        }
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –∞–±–æ —Å—Ç–≤–æ—Ä—é—î StateMachine –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ sessionId.
     */
    private StateMachine<OrderState, OrderEvent> getStateMachine(String sessionId) {
        return stateMachineService.acquireStateMachine(sessionId);
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞—î –Ω–æ–≤–∏–π Order Wizard.
     */
    @PostMapping("/start")
    public ResponseEntity<OrderWizardResponseDTO> startOrderWizard() {
        logger.info("üöÄ OrderWizardAdapter.startOrderWizard() called");

        try {
            // –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤–∏–π sessionId
            String sessionId = java.util.UUID.randomUUID().toString();

            // –û—Ç—Ä–∏–º—É—î–º–æ StateMachine –¥–ª—è —Ü—ñ—î—ó —Å–µ—Å—ñ—ó
            StateMachine<OrderState, OrderEvent> stateMachine = getStateMachine(sessionId);

            if (stateMachine == null) {
                logger.error("‚ùå StateMachine is null for sessionId: {}", sessionId);
                throw new IllegalStateException("StateMachine not created for sessionId: " + sessionId);
            }

            logger.info("üìä StateMachine created for sessionId: {}, currentState={}",
                sessionId, stateMachine.getState() != null ? stateMachine.getState().getId() : "NULL");

            logger.info("üîß Calling StateMachineUtils.startOrderWizard()...");

            ResponseEntity<OrderWizardResponseDTO> result = StateMachineUtils.startOrderWizard(stateMachine);

                        if (result != null && result.getBody() != null) {
                // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ sessionId —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                OrderWizardResponseDTO responseBody = result.getBody();
                                if (responseBody != null) {
                    OrderWizardResponseDTO updatedResponse = new OrderWizardResponseDTO(
                        sessionId,
                        responseBody.getCurrentState(),
                        responseBody.isSuccess(),
                        responseBody.getMessage()
                    );

                    logger.info("‚úÖ StateMachineUtils returned: status={}, sessionId={}, state={}",
                        result.getStatusCode(), sessionId, responseBody.getCurrentState());

                    return ResponseEntity.ok(updatedResponse);
                } else {
                    logger.error("‚ùå StateMachineUtils returned null responseBody!");
                    return ResponseEntity.status(500)
                        .body(new OrderWizardResponseDTO(sessionId, null, false,
                            "Failed to start Order Wizard - null response"));
                }
            } else {
                logger.error("‚ùå StateMachineUtils returned null!");
                return ResponseEntity.status(500)
                    .body(new OrderWizardResponseDTO(sessionId, null, false,
                        "Failed to start Order Wizard"));
            }

        } catch (RuntimeException e) {
            logger.error("üí• Exception in OrderWizardAdapter.startOrderWizard(): {}", e.getMessage(), e);

            return ResponseEntity.status(500)
                .body(new OrderWizardResponseDTO(null, null, false,
                    "Internal error: " + e.getMessage()));
        }
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω Order Wizard.
     */
    @GetMapping("/session/{sessionId}/state")
    public ResponseEntity<OrderWizardResponseDTO> getCurrentState(@PathVariable String sessionId) {
        StateMachine<OrderState, OrderEvent> stateMachine = getStateMachine(sessionId);
        return StateMachineUtils.getCurrentStateResponse(stateMachine, sessionId);
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ –ø–µ—Ä–µ—Ö–æ–¥–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É.
     */
    @GetMapping("/session/{sessionId}/available-transitions")
    public ResponseEntity<Map<String, Object>> getAvailableTransitions(@PathVariable String sessionId) {
        StateMachine<OrderState, OrderEvent> stateMachine = getStateMachine(sessionId);
        return StateMachineUtils.getAvailableTransitions(stateMachine, sessionId);
    }

    /**
     * –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –µ—Ç–∞–ø—É –∑ Stage1 –¥–æ Stage2.
     */
    @PostMapping("/session/{sessionId}/complete-stage1")
    public ResponseEntity<OrderWizardResponseDTO> completeStage1(@PathVariable String sessionId) {
        StateMachine<OrderState, OrderEvent> stateMachine = getStateMachine(sessionId);
        return StateMachineUtils.processStateTransition(
            stateMachine,
            sessionId,
            OrderEvent.ORDER_INFO_COMPLETED,
            "Stage 1 completed successfully"
        );
    }

    /**
     * –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ Stage3 –∑ Stage2.
     */
    @PostMapping("/session/{sessionId}/complete-stage2")
    public ResponseEntity<OrderWizardResponseDTO> completeStage2(@PathVariable String sessionId) {
        StateMachine<OrderState, OrderEvent> stateMachine = getStateMachine(sessionId);
        return StateMachineUtils.processStateTransition(
            stateMachine,
            sessionId,
            OrderEvent.ITEMS_COMPLETED,
            "Stage 2 completed successfully"
        );
    }

    /**
     * –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ Stage4 –∑ Stage3.
     */
    @PostMapping("/session/{sessionId}/complete-stage3")
    public ResponseEntity<OrderWizardResponseDTO> completeStage3(@PathVariable String sessionId) {
        StateMachine<OrderState, OrderEvent> stateMachine = getStateMachine(sessionId);
        return StateMachineUtils.processStateTransition(
            stateMachine,
            sessionId,
            OrderEvent.ADDITIONAL_INFO_COMPLETED,
            "Stage 3 completed successfully"
        );
    }

    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è Order Wizard.
     */
    @PostMapping("/session/{sessionId}/complete-order")
    public ResponseEntity<OrderWizardResponseDTO> completeOrder(@PathVariable String sessionId) {
        StateMachine<OrderState, OrderEvent> stateMachine = getStateMachine(sessionId);
        return StateMachineUtils.processStateTransition(
            stateMachine,
            sessionId,
            OrderEvent.RECEIPT_GENERATED,
            "Order completed successfully"
        );
    }

    /**
     * –°–∫–∞—Å—É–≤–∞–Ω–Ω—è Order Wizard.
     */
    @PostMapping("/session/{sessionId}/cancel")
    public ResponseEntity<OrderWizardResponseDTO> cancelOrder(@PathVariable String sessionId) {
        StateMachine<OrderState, OrderEvent> stateMachine = getStateMachine(sessionId);
        return StateMachineUtils.processStateTransition(
            stateMachine,
            sessionId,
            OrderEvent.CANCEL_ORDER,
            "Order cancelled successfully"
        );
    }

    /**
     * –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –µ—Ç–∞–ø.
     */
    @PostMapping("/session/{sessionId}/go-back")
    public ResponseEntity<OrderWizardResponseDTO> goBack(@PathVariable String sessionId) {
        StateMachine<OrderState, OrderEvent> stateMachine = getStateMachine(sessionId);
        return StateMachineUtils.processStateTransition(
            stateMachine,
            sessionId,
            OrderEvent.GO_BACK,
            "Moved back to previous stage"
        );
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ—Ç–æ—á–Ω—É —Å–µ—Å—ñ—é.
     */
    @GetMapping("/session/{sessionId}/info")
    public ResponseEntity<Map<String, Object>> getSessionInfo(@PathVariable String sessionId) {
        StateMachine<OrderState, OrderEvent> stateMachine = getStateMachine(sessionId);
        return StateMachineUtils.getDetailedSessionInfo(stateMachine, sessionId);
    }
}
