package com.aksi.domain.order.statemachine.adapter;

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.statemachine.StateMachine;
import org.springframework.statemachine.service.StateMachineService;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.aksi.domain.order.statemachine.OrderEvent;
import com.aksi.domain.order.statemachine.OrderState;
import com.aksi.domain.order.statemachine.dto.OrderWizardResponseDTO;
import com.aksi.domain.order.statemachine.util.StateMachineUtils;

/**
 * –ì–æ–ª–æ–≤–Ω–∏–π REST –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è Order Wizard.
 * –£–ø—Ä–∞–≤–ª—è—î –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –º—ñ–∂ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ –µ—Ç–∞–ø–∞–º–∏.
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î StateMachineService –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∂–∏—Ç—Ç—î–≤–∏–º —Ü–∏–∫–ª–æ–º StateMachine.
 */
@RestController
@RequestMapping("/api/order-wizard")
public class OrderWizardAdapter {

    private static final Logger logger = LoggerFactory.getLogger(OrderWizardAdapter.class);

    private final StateMachineService<OrderState, OrderEvent> stateMachineService;

    @Autowired
    public OrderWizardAdapter(StateMachineService<OrderState, OrderEvent> stateMachineService) {
        this.stateMachineService = stateMachineService;

        if (stateMachineService != null) {
            logger.info("‚úÖ OrderWizardAdapter initialized with StateMachineService: {}",
                stateMachineService.getClass().getSimpleName());
        } else {
            logger.error("‚ùå OrderWizardAdapter initialized with NULL StateMachineService!");
        }
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –∞–±–æ —Å—Ç–≤–æ—Ä—é—î StateMachine –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ sessionId.
     */
    private StateMachine<OrderState, OrderEvent> getStateMachine(String sessionId) {
        return stateMachineService.acquireStateMachine(sessionId);
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞—î –Ω–æ–≤–∏–π Order Wizard.
     */
    @PostMapping("/start")
    public ResponseEntity<OrderWizardResponseDTO> startOrderWizard() {
        logger.info("üöÄ OrderWizardAdapter.startOrderWizard() called");

        try {
            // –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤–∏–π sessionId
            String sessionId = java.util.UUID.randomUUID().toString();

            // –û—Ç—Ä–∏–º—É—î–º–æ StateMachine –¥–ª—è —Ü—ñ—î—ó —Å–µ—Å—ñ—ó
            StateMachine<OrderState, OrderEvent> stateMachine = getStateMachine(sessionId);

            if (stateMachine == null) {
                logger.error("‚ùå StateMachine is null for sessionId: {}", sessionId);
                throw new IllegalStateException("StateMachine not created for sessionId: " + sessionId);
            }

            logger.info("üìä StateMachine created for sessionId: {}, currentState={}",
                sessionId, stateMachine.getState() != null ? stateMachine.getState().getId() : "NULL");

            logger.info("üîß Calling StateMachineUtils.startStateMachine()...");

            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Å—ñ—é –∑ –Ω–∞—à–∏–º sessionId
            StateMachineUtils.initializeSession(stateMachine, sessionId);

            // –ó–∞–ø—É—Å–∫–∞—î–º–æ state machine –∑ –ø–æ—á–∞—Ç–∫–æ–≤–æ—é –ø–æ–¥—ñ—î—é
            boolean success = StateMachineUtils.startStateMachine(stateMachine, sessionId, OrderEvent.START_ORDER);

            if (success) {
                OrderState currentState = StateMachineUtils.getCurrentState(stateMachine);
                logger.info("‚úÖ StateMachine started successfully: sessionId={}, state={}", sessionId, currentState);

                OrderWizardResponseDTO responseBody = new OrderWizardResponseDTO(
                    sessionId, currentState, true, "Order wizard started successfully"
                );

                return ResponseEntity.ok(responseBody);
            } else {
                logger.error("‚ùå Failed to start StateMachine for sessionId: {}", sessionId);
                return ResponseEntity.status(500)
                    .body(new OrderWizardResponseDTO(sessionId, null, false, "Failed to start order wizard"));
            }

        } catch (RuntimeException e) {
            logger.error("üí• Exception in OrderWizardAdapter.startOrderWizard(): {}", e.getMessage(), e);

            return ResponseEntity.status(500)
                .body(new OrderWizardResponseDTO(null, null, false,
                    "Internal error: " + e.getMessage()));
        }
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω Order Wizard.
     */
    @GetMapping("/session/{sessionId}/state")
    public ResponseEntity<OrderWizardResponseDTO> getCurrentState(@PathVariable String sessionId) {
        StateMachine<OrderState, OrderEvent> stateMachine = getStateMachine(sessionId);
        return StateMachineUtils.getCurrentStateResponse(stateMachine, sessionId);
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ –ø–µ—Ä–µ—Ö–æ–¥–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É.
     */
    @GetMapping("/session/{sessionId}/available-transitions")
    public ResponseEntity<Map<String, Object>> getAvailableTransitions(@PathVariable String sessionId) {
        StateMachine<OrderState, OrderEvent> stateMachine = getStateMachine(sessionId);
        return StateMachineUtils.getAvailableTransitions(stateMachine, sessionId);
    }

    /**
     * –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –µ—Ç–∞–ø—É –∑ Stage1 –¥–æ Stage2.
     */
    @PostMapping("/session/{sessionId}/complete-stage1")
    public ResponseEntity<OrderWizardResponseDTO> completeStage1(@PathVariable String sessionId) {
        StateMachine<OrderState, OrderEvent> stateMachine = getStateMachine(sessionId);
        return StateMachineUtils.processStateTransition(
            stateMachine,
            sessionId,
            OrderEvent.ORDER_INFO_COMPLETED,
            "Stage 1 completed successfully"
        );
    }

    /**
     * –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ Stage3 –∑ Stage2.
     */
    @PostMapping("/session/{sessionId}/complete-stage2")
    public ResponseEntity<OrderWizardResponseDTO> completeStage2(@PathVariable String sessionId) {
        StateMachine<OrderState, OrderEvent> stateMachine = getStateMachine(sessionId);
        return StateMachineUtils.processStateTransition(
            stateMachine,
            sessionId,
            OrderEvent.ITEMS_COMPLETED,
            "Stage 2 completed successfully"
        );
    }

    /**
     * –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ Stage4 –∑ Stage3.
     */
    @PostMapping("/session/{sessionId}/complete-stage3")
    public ResponseEntity<OrderWizardResponseDTO> completeStage3(@PathVariable String sessionId) {
        StateMachine<OrderState, OrderEvent> stateMachine = getStateMachine(sessionId);
        return StateMachineUtils.processStateTransition(
            stateMachine,
            sessionId,
            OrderEvent.ADDITIONAL_INFO_COMPLETED,
            "Stage 3 completed successfully"
        );
    }

    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è Order Wizard.
     */
    @PostMapping("/session/{sessionId}/complete-order")
    public ResponseEntity<OrderWizardResponseDTO> completeOrder(@PathVariable String sessionId) {
        StateMachine<OrderState, OrderEvent> stateMachine = getStateMachine(sessionId);
        return StateMachineUtils.processStateTransition(
            stateMachine,
            sessionId,
            OrderEvent.RECEIPT_GENERATED,
            "Order completed successfully"
        );
    }

    /**
     * –°–∫–∞—Å—É–≤–∞–Ω–Ω—è Order Wizard.
     */
    @PostMapping("/session/{sessionId}/cancel")
    public ResponseEntity<OrderWizardResponseDTO> cancelOrder(@PathVariable String sessionId) {
        StateMachine<OrderState, OrderEvent> stateMachine = getStateMachine(sessionId);
        return StateMachineUtils.processStateTransition(
            stateMachine,
            sessionId,
            OrderEvent.CANCEL_ORDER,
            "Order cancelled successfully"
        );
    }

    /**
     * –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –µ—Ç–∞–ø.
     */
    @PostMapping("/session/{sessionId}/go-back")
    public ResponseEntity<OrderWizardResponseDTO> goBack(@PathVariable String sessionId) {
        StateMachine<OrderState, OrderEvent> stateMachine = getStateMachine(sessionId);
        return StateMachineUtils.processStateTransition(
            stateMachine,
            sessionId,
            OrderEvent.GO_BACK,
            "Moved back to previous stage"
        );
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ—Ç–æ—á–Ω—É —Å–µ—Å—ñ—é.
     */
    @GetMapping("/session/{sessionId}/info")
    public ResponseEntity<Map<String, Object>> getSessionInfo(@PathVariable String sessionId) {
        StateMachine<OrderState, OrderEvent> stateMachine = getStateMachine(sessionId);
        return StateMachineUtils.getDetailedSessionInfo(stateMachine, sessionId);
    }

    /**
     * –û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π Order Wizard.
     * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é sessionId.
     */
    @SuppressWarnings("unchecked")
    public void clearAllSessions() {
        logger.info("üßπ Clearing all StateMachine sessions...");
        try {
            if (stateMachineService != null) {
                // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ StateMachine IDs —Ç–∞ –∑–≤—ñ–ª—å–Ω—è—î–º–æ —ó—Ö
                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ—Ñ–ª–µ–∫—Å—ñ—é –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä DefaultStateMachineService
                try {
                    java.lang.reflect.Field machinesField = stateMachineService.getClass().getDeclaredField("machines");
                    machinesField.setAccessible(true);
                    java.util.Map<String, ?> machines = (java.util.Map<String, ?>) machinesField.get(stateMachineService);

                    if (machines != null && !machines.isEmpty()) {
                        logger.info("üîç Found {} active sessions to clear", machines.size());

                        // –õ–æ–≥—É—î–º–æ –≤—Å—ñ sessionId –ø–µ—Ä–µ–¥ –æ—á–∏—â–µ–Ω–Ω—è–º
                        for (String sessionId : machines.keySet()) {
                            logger.info("üìã Active session found: {}", sessionId);
                        }

                        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –∫–ª—é—á—ñ–≤ —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ ConcurrentModificationException
                        java.util.Set<String> sessionIds = new java.util.HashSet<>(machines.keySet());

                        for (String sessionId : sessionIds) {
                            try {
                                logger.info("üóëÔ∏è Releasing session: {}", sessionId);
                                stateMachineService.releaseStateMachine(sessionId);
                                logger.info("‚úÖ Session {} released successfully", sessionId);
                            } catch (RuntimeException e) {
                                logger.warn("‚ö†Ô∏è Failed to release session {}: {}", sessionId, e.getMessage());
                            }
                        }

                        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥—ñ–π—Å–Ω–æ –æ—á–∏—Å—Ç–∏–ª–∏—Å—è –≤—Å—ñ —Å–µ—Å—ñ—ó
                        java.util.Map<String, ?> machinesAfter = (java.util.Map<String, ?>) machinesField.get(stateMachineService);
                        if (machinesAfter != null && !machinesAfter.isEmpty()) {
                            logger.warn("‚ö†Ô∏è {} sessions still remain after clearing:", machinesAfter.size());
                            for (String remainingId : machinesAfter.keySet()) {
                                logger.warn("üîç Remaining session: {}", remainingId);
                            }

                            // –°–ø—Ä–æ–±—É—î–º–æ –æ—á–∏—Å—Ç–∏—Ç–∏ –º–∞–ø—É –Ω–∞–ø—Ä—è–º—É
                            try {
                                machinesAfter.clear();
                                logger.info("‚úÖ Forced clear of remaining sessions");
                            } catch (RuntimeException clearError) {
                                logger.warn("‚ö†Ô∏è Could not force clear remaining sessions: {}", clearError.getMessage());
                            }
                        }

                        logger.info("‚úÖ All {} sessions cleared successfully", sessionIds.size());
                    } else {
                        logger.info("‚ÑπÔ∏è No active sessions found to clear");
                    }

                    // –î–æ–¥–∞—Ç–∫–æ–≤–æ —Å–ø—Ä–æ–±—É—î–º–æ –æ—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
                    try {
                        java.lang.reflect.Field cacheField = stateMachineService.getClass().getDeclaredField("cache");
                        cacheField.setAccessible(true);
                        Object cache = cacheField.get(stateMachineService);
                        if (cache != null && cache instanceof java.util.Map) {
                            java.util.Map<?, ?> cacheMap = (java.util.Map<?, ?>) cache;
                            cacheMap.clear();
                            logger.info("‚úÖ StateMachine cache cleared");
                        }
                    } catch (NoSuchFieldException | IllegalAccessException cacheError) {
                        logger.debug("‚ÑπÔ∏è No cache field found or accessible: {}", cacheError.getMessage());
                    }

                } catch (NoSuchFieldException | IllegalAccessException | SecurityException reflectionError) {
                    logger.warn("‚ö†Ô∏è Could not access internal StateMachineService structure: {}", reflectionError.getMessage());
                    logger.info("‚úÖ StateMachine service reset attempted (fallback)");
                }
            } else {
                logger.warn("‚ö†Ô∏è StateMachineService is null, cannot clear sessions");
            }
        } catch (RuntimeException e) {
            logger.error("‚ùå Error clearing StateMachine sessions: {}", e.getMessage(), e);
            throw new RuntimeException("Failed to clear sessions", e);
        }
    }
}
