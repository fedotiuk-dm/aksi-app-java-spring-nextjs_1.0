package com.aksi.domain.order.statemachine.actions;

import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.statemachine.StateContext;
import org.springframework.statemachine.action.Action;
import org.springframework.stereotype.Component;

import com.aksi.domain.order.statemachine.OrderEvent;
import com.aksi.domain.order.statemachine.OrderState;
import com.aksi.domain.order.statemachine.stage1.service.BasicOrderInfoCoordinationService;
import com.aksi.domain.order.statemachine.stage1.service.ClientSearchCoordinationService;

/**
 * Action –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Stage1 –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ–≤ –∑ sessionId –≤—ñ–¥ –≥–æ–ª–æ–≤–Ω–æ–≥–æ Order Wizard.
 * –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ –≤ —Å—Ç–∞–Ω CLIENT_SELECTION.
 *
 * –ó–∞–±–µ–∑–ø–µ—á—É—î —â–æ sessionId –≤—ñ–¥ –≥–æ–ª–æ–≤–Ω–æ–≥–æ Order Wizard –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π
 * –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –≤—Å—ñ—Ö Stage1 —Å–µ—Ä–≤—ñ—Å—ñ–≤.
 */
@Component
public class InitializeStage1ContextAction implements Action<OrderState, OrderEvent> {

    private static final Logger logger = LoggerFactory.getLogger(InitializeStage1ContextAction.class);

    private final ClientSearchCoordinationService clientSearchService;
    private final BasicOrderInfoCoordinationService basicOrderInfoService;

    public InitializeStage1ContextAction(
            ClientSearchCoordinationService clientSearchService,
            BasicOrderInfoCoordinationService basicOrderInfoService) {
        this.clientSearchService = clientSearchService;
        this.basicOrderInfoService = basicOrderInfoService;
    }

    @Override
    public void execute(StateContext<OrderState, OrderEvent> context) {
        logger.info("üî•üî•üî• InitializeStage1ContextAction.execute() –í–ò–ö–õ–ò–ö–ê–ù–û! üî•üî•üî•");

        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ sessionId –∑ ExtendedState –≥–æ–ª–æ–≤–Ω–æ–≥–æ StateMachine
            String sessionId = context.getExtendedState().get("sessionId", String.class);
            UUID sessionIdUUID = context.getExtendedState().get("sessionIdUUID", UUID.class);

            logger.info("üì• SessionId –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ StateMachine: String={}, UUID={}", sessionId, sessionIdUUID);

            if (sessionId == null && sessionIdUUID != null) {
                sessionId = sessionIdUUID.toString();
                logger.info("üîÑ Converted UUID to String: {}", sessionId);
            }

            if (sessionId == null) {
                logger.error("‚ùå SessionId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –≤ ExtendedState –≥–æ–ª–æ–≤–Ω–æ–≥–æ StateMachine!");
                return;
            }

            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ ClientSearch –∫–æ–Ω—Ç–µ–∫—Å—Ç
            logger.info("üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ClientSearch –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∑ sessionId: {}", sessionId);
            try {
                clientSearchService.initializeClientSearch(sessionId);
                logger.info("‚úÖ ClientSearch –∫–æ–Ω—Ç–µ–∫—Å—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ");
            } catch (Exception e) {
                logger.error("üí• –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó ClientSearch: {}", e.getMessage(), e);
            }

            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ BasicOrderInfo –∫–æ–Ω—Ç–µ–∫—Å—Ç
            logger.info("üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è BasicOrderInfo –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∑ sessionId: {}", sessionId);
            try {
                basicOrderInfoService.initializeBasicOrderInfo(sessionId);
                logger.info("‚úÖ BasicOrderInfo –∫–æ–Ω—Ç–µ–∫—Å—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ");
            } catch (Exception e) {
                logger.error("üí• –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó BasicOrderInfo: {}", e.getMessage(), e);
            }

            logger.info("üéâ InitializeStage1ContextAction –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ –¥–ª—è sessionId: {}", sessionId);

        } catch (Exception e) {
            logger.error("üí• –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ InitializeStage1ContextAction: {}", e.getMessage(), e);
        }
    }
}
