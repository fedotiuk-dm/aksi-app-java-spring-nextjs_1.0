package com.aksi.domain.order.statemachine.stage2.substep4.dto;

import java.math.BigDecimal;
import java.util.UUID;

import com.aksi.domain.pricing.entity.PriceModifierDefinitionEntity.ModifierCategory;
import com.aksi.domain.pricing.entity.PriceModifierDefinitionEntity.ModifierType;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * DTO –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä—ñ–≤ —Ü—ñ–Ω–∏ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ UI –ø–æ–ª—è–º–∏.
 * –†–æ–∑—à–∏—Ä—é—î –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É.
 */
@Data
@Builder(toBuilder = true)
@NoArgsConstructor
@AllArgsConstructor
public class ModifierSelectionDTO {

    // ===== –ë–ê–ó–û–í–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ú–û–î–ò–§–Ü–ö–ê–¢–û–†–ê =====

    /**
     * ID –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞
     */
    private UUID id;

    /**
     * –ö–æ–¥ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞
     */
    private String code;

    /**
     * –ù–∞–∑–≤–∞ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞
     */
    private String name;

    /**
     * –û–ø–∏—Å –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞
     */
    private String description;

    /**
     * –¢–∏–ø –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ (PERCENTAGE, FIXED, RANGE)
     */
    private ModifierType modifierType;

    /**
     * –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ (GENERAL, TEXTILE, LEATHER)
     */
    private ModifierCategory category;

    // ===== –ó–ù–ê–ß–ï–ù–ù–Ø –ú–û–î–ò–§–Ü–ö–ê–¢–û–†–ê =====

    /**
     * –ó–Ω–∞—á–µ–Ω–Ω—è –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ (–≤—ñ–¥—Å–æ—Ç–æ–∫ –∞–±–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —Å—É–º–∞)
     */
    private BigDecimal value;

    /**
     * –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è (–¥–ª—è –¥—ñ–∞–ø–∞–∑–æ–Ω–Ω–∏—Ö –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä—ñ–≤)
     */
    private BigDecimal minValue;

    /**
     * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è (–¥–ª—è –¥—ñ–∞–ø–∞–∑–æ–Ω–Ω–∏—Ö –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä—ñ–≤)
     */
    private BigDecimal maxValue;

    /**
     * –í–∏–±—Ä–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (–¥–ª—è –¥—ñ–∞–ø–∞–∑–æ–Ω–Ω–∏—Ö –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä—ñ–≤)
     */
    private BigDecimal selectedValue;

    /**
     * –ö—ñ–ª—å–∫—ñ—Å—Ç—å (–¥–ª—è —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏—Ö –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä—ñ–≤ —Ç–∏–ø—É "–ø—Ä–∏—à–∏–≤–∞–Ω–Ω—è –≥—É–¥–∑–∏–∫—ñ–≤")
     */
    private Integer quantity;

    /**
     * –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ —Å—É–º–∞ –≤–ø–ª–∏–≤—É –Ω–∞ —Ü—ñ–Ω—É
     */
    private BigDecimal impactAmount;

    // ===== UI –°–¢–ê–ù =====

    /**
     * –ß–∏ –≤–∏–±—Ä–∞–Ω–∏–π –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
     */
    @Builder.Default
    private Boolean isSelected = false;

    /**
     * –ß–∏ —î –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–º
     */
    @Builder.Default
    private Boolean isRecommended = false;

    /**
     * –ß–∏ —î –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º
     */
    @Builder.Default
    private Boolean isRequired = false;

    /**
     * –ß–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è –≤–∏–±–æ—Ä—É
     */
    @Builder.Default
    private Boolean isAvailable = true;

    /**
     * –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
     */
    private Integer sortOrder;

    // ===== UI ENHANCEMENT =====

    /**
     * –¢–µ–∫—Å—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ UI (–∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º)
     */
    private String displayText;

    /**
     * –ó–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–∑ –æ–¥–∏–Ω–∏—Ü—è–º–∏)
     */
    private String displayValue;

    /**
     * –ü—ñ–¥–∫–∞–∑–∫–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    private String tooltip;

    /**
     * –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ —Ä–∏–∑–∏–∫–∏
     */
    private String warning;

    /**
     * CSS –∫–ª–∞—Å –¥–ª—è —Å—Ç–∏–ª—ñ–∑–∞—Ü—ñ—ó
     */
    private String cssClass;

    /**
     * –Ü–∫–æ–Ω–∫–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
     */
    private String icon;

    // ===== –ë–Ü–ó–ù–ï–°-–õ–û–ì–Ü–ö–ê =====

    /**
     * –ß–∏ —î –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –≤—ñ–¥—Å–æ—Ç–∫–æ–≤–∏–º
     */
    public Boolean isPercentageType() {
        return ModifierType.PERCENTAGE.equals(modifierType);
    }

    /**
     * –ß–∏ —î –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–º
     */
    public Boolean isFixedType() {
        return ModifierType.FIXED.equals(modifierType);
    }

    /**
     * –ß–∏ —î –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥—ñ–∞–ø–∞–∑–æ–Ω–Ω–∏–º
     */
    public Boolean isRangeType() {
        return ModifierType.RANGE_PERCENTAGE.equals(modifierType);
    }

    /**
     * –ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
     */
    public Boolean requiresUserInput() {
        return isRangeType() || (isFixedType() && quantity == null);
    }

    /**
     * –ß–∏ –≤–∞–ª—ñ–¥–Ω–µ –≤–∏–±—Ä–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
     */
    public Boolean isSelectedValueValid() {
        if (!isSelected || !requiresUserInput()) return true;

        if (isRangeType()) {
            return selectedValue != null &&
                   (minValue == null || selectedValue.compareTo(minValue) >= 0) &&
                   (maxValue == null || selectedValue.compareTo(maxValue) <= 0);
        }

        if (isFixedType()) {
            return quantity != null && quantity > 0;
        }

        return true;
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞
     */
    public BigDecimal getEffectiveValue() {
        if (isRangeType() && selectedValue != null) {
            return selectedValue;
        }
        return value;
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å
     */
    public Integer getEffectiveQuantity() {
        return quantity != null ? quantity : 1;
    }

    /**
     * –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
     */
    public String generateDisplayText() {
        if (displayText != null) return displayText;

        StringBuilder text = new StringBuilder(name);

        if (isPercentageType()) {
            text.append(" (").append(getEffectiveValue()).append("%)");
        } else if (isFixedType()) {
            text.append(" (").append(getEffectiveValue()).append(" –≥—Ä–Ω");
            if (getEffectiveQuantity() > 1) {
                text.append(" √ó ").append(getEffectiveQuantity());
            }
            text.append(")");
        } else if (isRangeType()) {
            text.append(" (").append(minValue).append("%-").append(maxValue).append("%)");
            if (selectedValue != null) {
                text.append(" [").append(selectedValue).append("%]");
            }
        }

        return text.toString();
    }

    /**
     * –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
     */
    public String generateDisplayValue() {
        if (displayValue != null) return displayValue;

        if (isPercentageType()) {
            return "+" + getEffectiveValue() + "%";
        } else if (isFixedType()) {
            BigDecimal total = getEffectiveValue().multiply(BigDecimal.valueOf(getEffectiveQuantity()));
            return "+" + total + " –≥—Ä–Ω";
        } else if (isRangeType()) {
            if (selectedValue != null) {
                return "+" + selectedValue + "%";
            }
            return minValue + "%-" + maxValue + "%";
        }

        return "";
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ CSS –∫–ª–∞—Å –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ç–∞–Ω—É
     */
    public String getCssClass() {
        if (cssClass != null) return cssClass;

        StringBuilder css = new StringBuilder("modifier");

        if (isSelected) css.append(" selected");
        if (isRecommended) css.append(" recommended");
        if (isRequired) css.append(" required");
        if (!isAvailable) css.append(" disabled");

        css.append(" ").append(modifierType.name().toLowerCase());
        css.append(" ").append(category.name().toLowerCase());

        return css.toString();
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–∫–æ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–∏–ø—É —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
     */
    public String getIcon() {
        if (icon != null) return icon;

        if (isRequired) return "‚ö†Ô∏è";
        if (isRecommended) return "üí°";

        switch (modifierType) {
            case PERCENTAGE:
                return "üìä";
            case FIXED:
                return "üí∞";
            case RANGE_PERCENTAGE:
                return "üìè";
            case ADDITION:
                return "üí≥";
            default:
                return "‚öôÔ∏è";
        }
    }

    /**
     * –ß–∏ –º–∞—î –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
     */
    public Boolean hasWarning() {
        return warning != null && !warning.trim().isEmpty();
    }

    /**
     * –ß–∏ —î –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–≥–∞–ª—å–Ω–∏–º (–¥–ª—è –≤—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π)
     */
    public Boolean isGeneralCategory() {
        return ModifierCategory.GENERAL.equals(category);
    }

    /**
     * –ß–∏ —î –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–∏–ª—å–Ω–∏—Ö –≤–∏—Ä–æ–±—ñ–≤
     */
    public Boolean isTextileCategory() {
        return ModifierCategory.TEXTILE.equals(category);
    }

    /**
     * –ß–∏ —î –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è —à–∫—ñ—Ä—è–Ω–∏—Ö –≤–∏—Ä–æ–±—ñ–≤
     */
    public Boolean isLeatherCategory() {
        return ModifierCategory.LEATHER.equals(category);
    }
}
