package com.aksi.domain.order.statemachine.stage1.service;

import java.util.List;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.aksi.domain.order.statemachine.stage1.dto.BasicOrderInfoDTO;
import com.aksi.domain.order.statemachine.stage1.enums.BasicOrderInfoState;
import com.aksi.domain.order.statemachine.stage1.mapper.BasicOrderInfoMapper;
import com.aksi.domain.order.statemachine.stage1.service.BasicOrderInfoStateService.BasicOrderInfoContext;
import com.aksi.domain.order.statemachine.stage1.validator.BasicOrderInfoValidationResult;

/**
 * –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ–π–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
 * –ì–æ–ª–æ–≤–Ω–∏–π –¥–µ–ª–µ–≥–∞—Ç–æ—Ä –º—ñ–∂ —É—Å—ñ–º–∞ —Å–µ—Ä–≤—ñ—Å–∞–º–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
 */
@Service
public class BasicOrderInfoCoordinationService {

    private static final Logger logger = LoggerFactory.getLogger(BasicOrderInfoCoordinationService.class);

    private final BasicOrderInfoValidationService validationService;
    private final BasicOrderInfoWorkflowService workflowService;
    private final BasicOrderInfoOperationsService operationsService;
    private final BasicOrderInfoStateService stateService;

    public BasicOrderInfoCoordinationService(
            BasicOrderInfoValidationService validationService,
            BasicOrderInfoWorkflowService workflowService,
            BasicOrderInfoOperationsService operationsService,
            BasicOrderInfoStateService stateService) {
        this.validationService = validationService;
        this.workflowService = workflowService;
        this.operationsService = operationsService;
        this.stateService = stateService;
        logger.info("üöÄ BasicOrderInfoCoordinationService —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑ validationService: {}, workflowService: {}, operationsService: {}, stateService: {}",
                   validationService != null, workflowService != null, operationsService != null, stateService != null);
    }

    // ========== –î–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è –¥–æ ValidationService ==========

    public BasicOrderInfoValidationResult validateComplete(BasicOrderInfoDTO basicOrderInfo) {
        return validationService.validateComplete(basicOrderInfo);
    }

    public BasicOrderInfoValidationResult validateCritical(BasicOrderInfoDTO basicOrderInfo) {
        return validationService.validateCritical(basicOrderInfo);
    }

    public BasicOrderInfoValidationResult validateStepReadiness(BasicOrderInfoDTO basicOrderInfo, String stepName) {
        return validationService.validateStepReadiness(basicOrderInfo, stepName);
    }

    public boolean isReceiptNumberValid(String receiptNumber) {
        return validationService.isReceiptNumberValid(receiptNumber);
    }

    public boolean isUniqueTagValid(String uniqueTag) {
        return validationService.isUniqueTagValid(uniqueTag);
    }

    public boolean isReadyForNextStage(BasicOrderInfoDTO basicOrderInfo) {
        return validationService.isReadyForNextStage(basicOrderInfo);
    }

    public String getValidationReport(BasicOrderInfoDTO basicOrderInfo) {
        return validationService.getValidationReport(basicOrderInfo);
    }

    // ========== –î–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è –¥–æ WorkflowService ==========

    public String startWorkflow() {
        return workflowService.startWorkflow();
    }

    public String startWorkflowWithData(BasicOrderInfoDTO basicOrderInfo) {
        return workflowService.startWorkflowWithData(basicOrderInfo);
    }

    public boolean transitionToReceiptGeneration(String sessionId) {
        return workflowService.transitionToReceiptGeneration(sessionId);
    }

    public boolean confirmReceiptGeneration(String sessionId, String receiptNumber) {
        return workflowService.confirmReceiptGeneration(sessionId, receiptNumber);
    }

    public boolean transitionToUniqueTagEntry(String sessionId) {
        return workflowService.transitionToUniqueTagEntry(sessionId);
    }

    public boolean confirmUniqueTag(String sessionId, String uniqueTag) {
        return workflowService.confirmUniqueTag(sessionId, uniqueTag);
    }

    public boolean transitionToBranchSelection(String sessionId) {
        return workflowService.transitionToBranchSelection(sessionId);
    }

    public boolean confirmBranchSelection(String sessionId, UUID branchId) {
        return workflowService.confirmBranchSelection(sessionId, branchId);
    }

    public boolean completeWorkflow(String sessionId) {
        return workflowService.completeWorkflow(sessionId);
    }

    public boolean resetWorkflow(String sessionId) {
        return workflowService.resetWorkflow(sessionId);
    }

    public boolean goBack(String sessionId) {
        return workflowService.goBack(sessionId);
    }

    public boolean cancelWorkflow(String sessionId) {
        return workflowService.cancelWorkflow(sessionId);
    }

    public boolean lockWorkflow(String sessionId) {
        return workflowService.lockWorkflow(sessionId);
    }

    public boolean unlockWorkflow(String sessionId) {
        return workflowService.unlockWorkflow(sessionId);
    }

    public boolean isReadyForCompletion(String sessionId) {
        return workflowService.isReadyForCompletion(sessionId);
    }

    public BasicOrderInfoState getCurrentState(String sessionId) {
        logger.info("üîç [BASIC-ORDER-COORDINATION] –ó–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –¥–ª—è sessionId: {}", sessionId);

        try {
            BasicOrderInfoState state = workflowService.getCurrentState(sessionId);
            logger.info("‚úÖ [BASIC-ORDER-COORDINATION] –£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ —Å—Ç–∞–Ω: {} –¥–ª—è sessionId: {}", state, sessionId);
            return state;
        } catch (Exception e) {
            logger.error("‚ùå [BASIC-ORDER-COORDINATION] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞–Ω—É –¥–ª—è sessionId: {}, error: {}",
                        sessionId, e.getMessage(), e);
            throw e;
        }
    }

    public BasicOrderInfoDTO getCurrentData(String sessionId) {
        return workflowService.getCurrentData(sessionId);
    }

    public boolean hasErrors(String sessionId) {
        return workflowService.hasErrors(sessionId);
    }

    public String getLastError(String sessionId) {
        return workflowService.getLastError(sessionId);
    }

    public boolean clearErrors(String sessionId) {
        return workflowService.clearErrors(sessionId);
    }

    // ========== –î–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è –¥–æ OperationsService ==========

    public String generateReceiptNumber(String branchCode) {
        return operationsService.generateReceiptNumber(branchCode);
    }

    public String generateUniqueTag() {
        return operationsService.generateUniqueTag();
    }

    public boolean isReceiptNumberUnique(String receiptNumber) {
        return operationsService.isReceiptNumberUnique(receiptNumber);
    }

    public boolean isUniqueTagUnique(String uniqueTag) {
        return operationsService.isUniqueTagUnique(uniqueTag);
    }

    public boolean isBranchAvailable(UUID branchId) {
        return operationsService.isBranchAvailable(branchId);
    }

    // ========== –î–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è –¥–æ StateService ==========

    public String initializeContext() {
        return stateService.initializeContext();
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —ñ—Å–Ω—É—é—á–∏–º sessionId –≤—ñ–¥ –≥–æ–ª–æ–≤–Ω–æ–≥–æ wizard.
     */
    public void initializeBasicOrderInfo(String sessionId) {
        logger.info("üî•üî•üî• BASIC_ORDER: initializeBasicOrderInfo() –í–ò–ö–õ–ò–ö–ê–ù–û –∑ sessionId: {} üî•üî•üî•", sessionId);

        try {
            if (sessionId == null || sessionId.trim().isEmpty()) {
                logger.error("‚ùå BASIC_ORDER: sessionId —î null –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–º!");
                return;
            }

            logger.info("üîß BASIC_ORDER: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–±–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è sessionId: {}", sessionId);
            stateService.getOrCreateContext(sessionId);

            logger.info("‚úÖ BASIC_ORDER: –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ/–æ—Ç—Ä–∏–º–∞–Ω–æ –¥–ª—è sessionId: {}", sessionId);

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–¥—ñ —ñ—Å–Ω—É—î
            boolean exists = stateService.getContext(sessionId) != null;
            logger.info("üîç BASIC_ORDER: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: exists={}", exists);

        } catch (Exception e) {
            logger.error("üí• BASIC_ORDER: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–ª—è sessionId: {}, error: {}", sessionId, e.getMessage(), e);
            throw e;
        }
    }

    public BasicOrderInfoContext getContext(String sessionId) {
        return stateService.getContext(sessionId);
    }

    public boolean updateBasicOrderInfo(String sessionId, BasicOrderInfoDTO basicOrderInfo) {
        return stateService.updateBasicOrderInfo(sessionId, basicOrderInfo);
    }

    public boolean sessionExists(String sessionId) {
        logger.info("üîç [BASIC-ORDER-COORDINATION] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Å–µ—Å—ñ—ó –¥–ª—è sessionId: {}", sessionId);

        try {
            boolean exists = stateService.sessionExists(sessionId);
            logger.info("üìã [BASIC-ORDER-COORDINATION] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Å—ñ—ó –¥–ª—è sessionId: {} -> exists: {}",
                       sessionId, exists);
            return exists;
        } catch (Exception e) {
            logger.error("‚ùå [BASIC-ORDER-COORDINATION] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Å–µ—Å—ñ—ó –¥–ª—è sessionId: {}, error: {}",
                        sessionId, e.getMessage(), e);
            return false;
        }
    }

    public void removeContext(String sessionId) {
        stateService.removeContext(sessionId);
    }

    // ========== –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ –º–µ—Ç–æ–¥–∏ –∑ Mapper ==========

    public BasicOrderInfoDTO createEmpty() {
        return BasicOrderInfoMapper.createEmpty();
    }

    public BasicOrderInfoDTO createWithReceiptNumber(String receiptNumber) {
        return BasicOrderInfoMapper.createWithReceiptNumber(receiptNumber);
    }

    public BasicOrderInfoDTO copyWithReceiptNumber(BasicOrderInfoDTO original, String receiptNumber) {
        return BasicOrderInfoMapper.copyWithReceiptNumber(original, receiptNumber);
    }

    public BasicOrderInfoDTO copyWithUniqueTag(BasicOrderInfoDTO original, String uniqueTag) {
        return BasicOrderInfoMapper.copyWithUniqueTag(original, uniqueTag);
    }

    public BasicOrderInfoDTO sanitize(BasicOrderInfoDTO dto) {
        return BasicOrderInfoMapper.sanitize(dto);
    }

    // ========== –î–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è ValidationService –¥–ª—è Guards ==========

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –±–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤–∞–ª—ñ–¥–Ω–∞ —á–µ—Ä–µ–∑ sessionId –¥–ª—è Guards
     */
    public boolean isBasicOrderInfoValid(String sessionId) {
        BasicOrderInfoDTO data = getCurrentData(sessionId);
        return validationService.isBasicOrderInfoValid(data);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –±–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≥–æ—Ç–æ–≤–∞ —á–µ—Ä–µ–∑ sessionId –¥–ª—è Guards
     */
    public boolean isBasicOrderInfoReady(String sessionId) {
        BasicOrderInfoDTO data = getCurrentData(sessionId);
        return validationService.isBasicOrderInfoReady(data);
    }

    // ========== –î–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è –¥–æ OperationsService –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ñ—ñ–ª—ñ—è–º–∏ ==========

    public List<com.aksi.domain.branch.dto.BranchLocationDTO> getAllBranches() {
        logger.info("üîç [COORDINATION] –ó–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ñ—ñ–ª—ñ–π —á–µ—Ä–µ–∑ operationsService");

        try {
            List<com.aksi.domain.branch.dto.BranchLocationDTO> branches = operationsService.getAllBranches();
            logger.info("‚úÖ [COORDINATION] –û—Ç—Ä–∏–º–∞–Ω–æ {} —Ñ—ñ–ª—ñ–π –≤—ñ–¥ operationsService",
                       branches != null ? branches.size() : 0);
            return branches;
        } catch (Exception e) {
            logger.error("‚ùå [COORDINATION] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ—ñ–ª—ñ–π: {}", e.getMessage(), e);
            throw e;
        }
    }

    public com.aksi.domain.branch.dto.BranchLocationDTO getBranchById(UUID branchId) {
        return operationsService.getBranchById(branchId);
    }

    /**
     * –û—Ç—Ä–∏–º—É—î —Ñ—ñ–ª—ñ—ó –¥–ª—è sessionId (–∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó).
     */
    public java.util.List<com.aksi.domain.branch.dto.BranchLocationDTO> getAvailableBranchesForSession(String sessionId) {
        return workflowService.getAvailableBranches(sessionId);
    }
}
