package com.aksi.domain.order.statemachine.adapter;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.statemachine.StateMachine;
import org.springframework.statemachine.service.StateMachineService;
import org.springframework.util.ObjectUtils;

import com.aksi.domain.order.statemachine.OrderEvent;
import com.aksi.domain.order.statemachine.OrderState;

/**
 * –ë–∞–∑–æ–≤–∏–π –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ StateMachineService.
 * –†–µ–∞–ª—ñ–∑—É—î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó Spring State Machine.
 */
public abstract class BaseStateMachineAdapter {

    private static final Logger logger = LoggerFactory.getLogger(BaseStateMachineAdapter.class);

    @Autowired
    protected StateMachineService<OrderState, OrderEvent> stateMachineService;

    private StateMachine<OrderState, OrderEvent> currentStateMachine;

    /**
     * –û—Ç—Ä–∏–º—É—î State Machine –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ sessionId.
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É –∞–±–æ –ø–æ–≤–µ—Ä—Ç–∞—î —ñ—Å–Ω—É—é—á—É.
     * –ë–∞–∑—É—î—Ç—å—Å—è –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó Spring State Machine Event Service.
     */
    protected synchronized StateMachine<OrderState, OrderEvent> getStateMachine(String sessionId) {
        logger.debug("üîç [BASE-ADAPTER] –ó–∞–ø–∏—Ç State Machine –¥–ª—è sessionId: {}", sessionId);

        try {
            if (currentStateMachine == null) {
                logger.info("‚ú® [BASE-ADAPTER] –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É State Machine –¥–ª—è sessionId: {}", sessionId);
                currentStateMachine = stateMachineService.acquireStateMachine(sessionId);
                currentStateMachine.startReactively().block();
                logger.info("‚úÖ [BASE-ADAPTER] State Machine —Å—Ç–≤–æ—Ä–µ–Ω–∞ —Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è sessionId: {}", sessionId);
            } else if (!ObjectUtils.nullSafeEquals(currentStateMachine.getId(), sessionId)) {
                logger.info("üîÑ [BASE-ADAPTER] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –Ω–∞ —ñ–Ω—à—É State Machine: {} -> {}",
                    currentStateMachine.getId(), sessionId);

                // –ó–≤—ñ–ª—å–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é
                stateMachineService.releaseStateMachine(currentStateMachine.getId());
                currentStateMachine.stopReactively().block();

                // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—É
                currentStateMachine = stateMachineService.acquireStateMachine(sessionId);
                currentStateMachine.startReactively().block();

                logger.info("‚úÖ [BASE-ADAPTER] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è sessionId: {}", sessionId);
            } else {
                logger.debug("‚ôªÔ∏è [BASE-ADAPTER] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á—É State Machine –¥–ª—è sessionId: {}", sessionId);
            }

            return currentStateMachine;

        } catch (Exception e) {
            logger.error("‚ùå [BASE-ADAPTER] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ State Machine –¥–ª—è sessionId: {}", sessionId, e);
            throw new RuntimeException("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ State Machine –¥–ª—è sessionId: " + sessionId, e);
        }
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω State Machine.
     */
    protected OrderState getCurrentState(String sessionId) {
        StateMachine<OrderState, OrderEvent> stateMachine = getStateMachine(sessionId);
        OrderState currentState = stateMachine.getState().getId();

        logger.debug("üìä [BASE-ADAPTER] –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è sessionId {}: {}", sessionId, currentState);
        return currentState;
    }

    /**
     * –ù–∞–¥—Å–∏–ª–∞—î –ø–æ–¥—ñ—é –¥–æ State Machine.
     */
    protected boolean sendEvent(String sessionId, OrderEvent event) {
        logger.info("üì§ [BASE-ADAPTER] –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–¥—ñ—ó {} –¥–ª—è sessionId: {}", event, sessionId);

        try {
            StateMachine<OrderState, OrderEvent> stateMachine = getStateMachine(sessionId);
            boolean result = stateMachine.sendEvent(event);

            if (result) {
                logger.info("‚úÖ [BASE-ADAPTER] –ü–æ–¥—ñ—è {} —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–∞ –¥–ª—è sessionId: {}", event, sessionId);
            } else {
                logger.warn("‚ö†Ô∏è [BASE-ADAPTER] –ü–æ–¥—ñ—è {} –Ω–µ –±—É–ª–∞ –æ–±—Ä–æ–±–ª–µ–Ω–∞ –¥–ª—è sessionId: {}", event, sessionId);
            }

            return result;

        } catch (Exception e) {
            logger.error("‚ùå [BASE-ADAPTER] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–¥—ñ—ó {} –¥–ª—è sessionId: {}", event, sessionId, e);
            return false;
        }
    }

    /**
     * –ó–≤—ñ–ª—å–Ω—è—î —Ä–µ—Å—É—Ä—Å–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Ä–æ–±–æ—Ç–∏.
     */
    protected void releaseStateMachine(String sessionId) {
        if (currentStateMachine != null && ObjectUtils.nullSafeEquals(currentStateMachine.getId(), sessionId)) {
            logger.info("üóëÔ∏è [BASE-ADAPTER] –ó–≤—ñ–ª—å–Ω–µ–Ω–Ω—è State Machine –¥–ª—è sessionId: {}", sessionId);

            try {
                stateMachineService.releaseStateMachine(sessionId);
                currentStateMachine.stopReactively().block();
                currentStateMachine = null;

                logger.info("‚úÖ [BASE-ADAPTER] State Machine –∑–≤—ñ–ª—å–Ω–µ–Ω–∞ –¥–ª—è sessionId: {}", sessionId);
            } catch (Exception e) {
                logger.error("‚ùå [BASE-ADAPTER] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—ñ State Machine –¥–ª—è sessionId: {}", sessionId, e);
            }
        }
    }
}
