package com.aksi.domain.order.statemachine.stage2.substep3.dto;

import java.util.List;
import java.util.UUID;

import com.aksi.domain.pricing.enums.RiskLevel;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * DTO –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∏–ø—É –¥–µ—Ñ–µ–∫—Ç—É –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
 *
 * –†–æ–∑—à–∏—Ä—é—î –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ –ë–î –¥–æ–¥–∞—Ç–∫–æ–≤–æ—é –ª–æ–≥—ñ–∫–æ—é
 * –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ UI —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class DefectSelectionDTO {

    /**
     * ID –∑ –ë–î
     */
    private UUID id;

    /**
     * –ö–æ–¥ –¥–µ—Ñ–µ–∫—Ç—É (–¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è)
     */
    private String code;

    /**
     * –ù–∞–∑–≤–∞ –¥–µ—Ñ–µ–∫—Ç—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
     */
    private String name;

    /**
     * –û–ø–∏—Å –¥–µ—Ñ–µ–∫—Ç—É
     */
    private String description;

    /**
     * –†—ñ–≤–µ–Ω—å —Ä–∏–∑–∏–∫—É (–∑ –ë–î)
     */
    private RiskLevel riskLevel;

    /**
     * –ß–∏ –∞–∫—Ç–∏–≤–Ω–∏–π –¥–µ—Ñ–µ–∫—Ç
     */
    @Builder.Default
    private Boolean isActive = true;

    /**
     * –ß–∏ –≤–∏–±—Ä–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
     */
    @Builder.Default
    private Boolean isSelected = false;

    /**
     * –ß–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º–∞—Ç–µ—Ä—ñ–∞–ª–∞/–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
     */
    @Builder.Default
    private Boolean isRecommended = false;

    /**
     * –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –¥–µ—Ñ–µ–∫—Ç—É (—Ñ—ñ–∑–∏—á–Ω–∏–π, –µ—Å—Ç–µ—Ç–∏—á–Ω–∏–π, —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π)
     */
    private String category;

    /**
     * –ß–∏ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥—Ä–µ–º–æ–Ω—Ç–æ–≤–∞–Ω–∏–π
     */
    @Builder.Default
    private Boolean isRepairable = false;

    /**
     * –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
     */
    @Builder.Default
    private List<String> repairMethods = List.of();

    /**
     * –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —â–æ–¥–æ —Ü—å–æ–≥–æ –¥–µ—Ñ–µ–∫—Ç—É
     */
    @Builder.Default
    private List<String> warnings = List.of();

    /**
     * –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏ —Ü—ñ–Ω –¥–ª—è —Ü—å–æ–≥–æ –¥–µ—Ñ–µ–∫—Ç—É
     */
    @Builder.Default
    private List<String> recommendedModifiers = List.of();

    /**
     * –ß–∏ –ø–æ—Ç—Ä–µ–±—É—î –æ–±–æ–≤'—è–∑–∫–æ–≤–æ–≥–æ –ø–æ–≥–æ–¥–∂–µ–Ω–Ω—è –∑ –∫–ª—ñ—î–Ω—Ç–æ–º
     */
    @Builder.Default
    private Boolean requiresClientApproval = false;

    /**
     * –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø—Ä–∏–º—ñ—Ç–∫–∏
     */
    private String notes;

    /**
     * –°—Ç–≤–æ—Ä—é—î DefectSelectionDTO –∑ –±–∞–∑–æ–≤–æ–≥–æ DefectTypeDTO
     */
    public static DefectSelectionDTO fromDefectTypeDTO(com.aksi.domain.pricing.dto.DefectTypeDTO defectType) {
        return DefectSelectionDTO.builder()
                .id(defectType.getId())
                .code(defectType.getCode())
                .name(defectType.getName())
                .description(defectType.getDescription())
                .riskLevel(defectType.getRiskLevel())
                .isActive(defectType.isActive())
                .build();
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –¥–µ—Ñ–µ–∫—Ç –≤–∏—Å–æ–∫–æ–≥–æ —Ä–∏–∑–∏–∫—É
     */
    public boolean isHighRisk() {
        return riskLevel == RiskLevel.HIGH;
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –¥–µ—Ñ–µ–∫—Ç –∫—Ä–∏—Ç–∏—á–Ω–∏–º (–ø–æ—Ç—Ä–µ–±—É—î –æ—Å–æ–±–ª–∏–≤–æ—ó —É–≤–∞–≥–∏)
     */
    public boolean isCritical() {
        return isHighRisk() || Boolean.TRUE.equals(requiresClientApproval);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –º–æ–∂–µ –ø–æ–≥—ñ—Ä—à–∏—Ç–∏ —Å—Ç–∞–Ω –ø—Ä–µ–¥–º–µ—Ç–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ
     */
    public boolean canWorsenDuringProcessing() {
        return isHighRisk() && !warnings.isEmpty();
    }

    /**
     * –û—Ç—Ä–∏–º—É—î —Å—Ç–∏–ª—å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ UI (–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–∏–∑–∏–∫—É)
     */
    public String getDisplayStyle() {
        return switch (riskLevel) {
            case HIGH -> "danger";
            case MEDIUM -> "warning";
            case LOW -> "info";
            default -> "default";
        };
    }

    /**
     * –û—Ç—Ä–∏–º—É—î —ñ–∫–æ–Ω–∫—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ UI
     */
    public String getDisplayIcon() {
        if (Boolean.TRUE.equals(requiresClientApproval)) {
            return "‚ùó";
        }

        return switch (riskLevel) {
            case HIGH -> "üî¥";
            case MEDIUM -> "üü°";
            case LOW -> "üîµ";
            default -> "‚ö™";
        };
    }

    /**
     * –û—Ç—Ä–∏–º—É—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é —â–æ–¥–æ –ø–æ–¥–∞–ª—å—à–æ—ó –¥—ñ—ó
     */
    public String getActionRecommendation() {
        if (isCritical()) {
            return "–ü–æ—Ç—Ä–µ–±—É—î –ø–æ–≥–æ–¥–∂–µ–Ω–Ω—è –∑ –∫–ª—ñ—î–Ω—Ç–æ–º";
        } else if (Boolean.TRUE.equals(isRepairable)) {
            return "–ú–æ–∂–Ω–∞ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏";
        } else {
            return "–í—Ä–∞—Ö—É–≤–∞—Ç–∏ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ";
        }
    }
}
