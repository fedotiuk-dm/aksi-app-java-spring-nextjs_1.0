package com.aksi.domain.order.statemachine.stage1.service;

import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.aksi.domain.client.dto.ClientResponse;
import com.aksi.domain.order.statemachine.stage1.dto.ClientSearchCriteriaDTO;
import com.aksi.domain.order.statemachine.stage1.dto.ClientSearchResultDTO;
import com.aksi.domain.order.statemachine.stage1.enums.ClientSearchState;
import com.aksi.domain.order.statemachine.stage1.mapper.ClientSearchMapper;
import com.aksi.domain.order.statemachine.stage1.service.ClientSearchStateService.ClientSearchContext;
import com.aksi.domain.order.statemachine.stage1.validator.ClientSearchValidationResult;
import com.aksi.domain.order.statemachine.stage1.validator.ValidationResult;

/**
 * –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ–π–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç–∞ –≤ –µ—Ç–∞–ø—ñ 1.1.
 * –ì–æ–ª–æ–≤–Ω–∏–π –¥–µ–ª–µ–≥–∞—Ç–æ—Ä –º—ñ–∂ —É—Å—ñ–º–∞ —Å–µ—Ä–≤—ñ—Å–∞–º–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø–æ—à—É–∫–æ–º –∫–ª—ñ—î–Ω—Ç–∞.
 */
@Service
public class ClientSearchCoordinationService {

    private static final Logger logger = LoggerFactory.getLogger(ClientSearchCoordinationService.class);

    private final ClientSearchValidationService validationService;
    private final ClientSearchStateService stateService;
    private final ClientSearchOperationsService operationsService;
    private final ClientSearchWorkflowService workflowService;

    public ClientSearchCoordinationService(
            ClientSearchValidationService validationService,
            ClientSearchStateService stateService,
            ClientSearchOperationsService operationsService,
            ClientSearchWorkflowService workflowService) {
        this.validationService = validationService;
        this.stateService = stateService;
        this.operationsService = operationsService;
        this.workflowService = workflowService;
        logger.info("üöÄ ClientSearchCoordinationService —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑ stateService: {}, validationService: {}, operationsService: {}, workflowService: {}",
                   stateService != null, validationService != null, operationsService != null, workflowService != null);
    }

    // ========== –î–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è –¥–æ ValidationService ==========

    public ValidationResult validateSearchCriteria(ClientSearchCriteriaDTO criteria) {
        return validationService.validateSearchCriteria(criteria);
    }

    public boolean isReadyForSearch(ClientSearchCriteriaDTO criteria) {
        return validationService.isReadyForSearch(criteria);
    }

    public boolean canSaveAsDraft(ClientSearchCriteriaDTO criteria) {
        return validationService.canSaveAsDraft(criteria);
    }

    public boolean hasMinimumRequiredData(ClientSearchCriteriaDTO criteria) {
        return validationService.hasMinimumRequiredData(criteria);
    }

    // ========== –î–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è –¥–æ StateService ==========

    public String createSearchContext() {
        return stateService.createSearchContext();
    }

    public ClientSearchContext getSearchContext(String sessionId) {
        return stateService.getSearchContext(sessionId);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —ñ—Å–Ω—É—î –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—à—É–∫—É –¥–ª—è –¥–∞–Ω–æ—ó —Å–µ—Å—ñ—ó.
     */
    public boolean searchContextExists(String sessionId) {
        logger.info("üîç [CLIENT-SEARCH-COORDINATION] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è sessionId: {}", sessionId);

        try {
            boolean exists = stateService.getSearchContext(sessionId) != null;
            logger.info("üìã [CLIENT-SEARCH-COORDINATION] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è sessionId: {} -> exists: {}",
                       sessionId, exists);
            return exists;
        } catch (Exception e) {
            logger.error("‚ùå [CLIENT-SEARCH-COORDINATION] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è sessionId: {}, error: {}",
                        sessionId, e.getMessage(), e);
            return false;
        }
    }

    public void saveSearchCriteria(String sessionId, ClientSearchCriteriaDTO criteria) {
        stateService.saveSearchCriteria(sessionId, criteria);
    }

    public void saveSearchResults(String sessionId, ClientSearchResultDTO results) {
        stateService.saveSearchResults(sessionId, results);
    }

    public void saveSelectedClient(String sessionId, ClientResponse client) {
        stateService.saveSelectedClient(sessionId, client);
    }

    public void switchToCreateNewClientMode(String sessionId) {
        stateService.switchToCreateNewClientMode(sessionId);
    }

    public void clearSearchResults(String sessionId) {
        stateService.clearSearchResults(sessionId);
    }

    public void completeClientSearch(String sessionId) {
        stateService.completeClientSearch(sessionId);
    }

    public void removeSearchContext(String sessionId) {
        stateService.removeSearchContext(sessionId);
    }

    public boolean isReadyToComplete(String sessionId) {
        return stateService.isReadyToComplete(sessionId);
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –ø–æ—à—É–∫—É.
     */
    public ClientSearchState getCurrentState(String sessionId) {
        logger.info("üîç [CLIENT-SEARCH-COORDINATION] –ó–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –¥–ª—è sessionId: {}", sessionId);

        try {
            ClientSearchStateService.ClientSearchContext context = stateService.getSearchContext(sessionId);
            ClientSearchState state = context != null ? context.getCurrentState() : null;
            logger.info("‚úÖ [CLIENT-SEARCH-COORDINATION] –£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ —Å—Ç–∞–Ω: {} –¥–ª—è sessionId: {}", state, sessionId);
            return state;
        } catch (Exception e) {
            logger.error("‚ùå [CLIENT-SEARCH-COORDINATION] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞–Ω—É –¥–ª—è sessionId: {}, error: {}",
                        sessionId, e.getMessage(), e);
            throw e;
        }
    }

    // ========== –î–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è –¥–æ OperationsService ==========

    public ClientSearchResultDTO searchClientsByOperations(ClientSearchCriteriaDTO criteria) {
        return operationsService.searchClients(criteria);
    }

    public ClientResponse getClientById(UUID clientId) {
        return operationsService.getClientById(clientId);
    }

    public boolean checkClientExists(ClientResponse client) {
        return operationsService.checkClientExists(client);
    }

    // ========== –î–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è –¥–æ WorkflowService ==========

    public ClientSearchResultDTO executeSearchWithValidation(String sessionId, ClientSearchCriteriaDTO criteria) {
        return workflowService.executeSearchWithValidation(sessionId, criteria);
    }

    public ValidationResult processClientSelection(String sessionId, UUID clientId) {
        return workflowService.processClientSelection(sessionId, clientId);
    }

    public ValidationResult processSwitchToCreateNewClient(String sessionId) {
        return workflowService.processSwitchToCreateNewClient(sessionId);
    }

    public ValidationResult processClearSearch(String sessionId) {
        return workflowService.processClearSearch(sessionId);
    }

    public ValidationResult completeSearchWithValidation(String sessionId) {
        return workflowService.completeSearchWithValidation(sessionId);
    }

    // ========== –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ –º–µ—Ç–æ–¥–∏ –∑ Mapper ==========

    public ClientSearchResultDTO createEmptyResult(ClientSearchCriteriaDTO criteria) {
        return ClientSearchMapper.createEmptyResult(criteria);
    }

    public ClientSearchCriteriaDTO createSearchCriteria(String searchTerm) {
        return ClientSearchMapper.createGeneralSearchCriteria(searchTerm);
    }

    // ========== –í–∏—Å–æ–∫–æ—Ä—ñ–≤–Ω–µ–≤—ñ –º–µ—Ç–æ–¥–∏ ==========

    /**
     * –†–æ–∑–ø–æ—á–∏–Ω–∞—î –Ω–æ–≤–∏–π –ø–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞.
     */
    public String startClientSearch() {
        return createSearchContext();
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –ø–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞ –∑ —ñ—Å–Ω—É—é—á–∏–º sessionId –≤—ñ–¥ –≥–æ–ª–æ–≤–Ω–æ–≥–æ wizard.
     */
    public void initializeClientSearch(String sessionId) {
        logger.info("üî•üî•üî• CLIENT_SEARCH: initializeClientSearch() –í–ò–ö–õ–ò–ö–ê–ù–û –∑ sessionId: {} üî•üî•üî•", sessionId);

        try {
            if (sessionId == null || sessionId.trim().isEmpty()) {
                logger.error("‚ùå CLIENT_SEARCH: sessionId —î null –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–º!");
                return;
            }

            logger.info("üîß CLIENT_SEARCH: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–±–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è sessionId: {}", sessionId);
            stateService.getOrCreateContext(sessionId);

            logger.info("‚úÖ CLIENT_SEARCH: –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ/–æ—Ç—Ä–∏–º–∞–Ω–æ –¥–ª—è sessionId: {}", sessionId);

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–¥—ñ —ñ—Å–Ω—É—î
            boolean exists = stateService.getSearchContext(sessionId) != null;
            logger.info("üîç CLIENT_SEARCH: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: exists={}", exists);

        } catch (Exception e) {
            logger.error("üí• CLIENT_SEARCH: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–ª—è sessionId: {}, error: {}", sessionId, e.getMessage(), e);
            throw e;
        }
    }

    /**
     * –í–∏–∫–æ–Ω—É—î –ø–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏ –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é.
     */
    public ClientSearchResultDTO searchClients(String sessionId, ClientSearchCriteriaDTO criteria) {
        return executeSearchWithValidation(sessionId, criteria);
    }

    /**
     * –û–±–∏—Ä–∞—î –∫–ª—ñ—î–Ω—Ç–∞ –∑—ñ —Å–ø–∏—Å–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∞–±–æ –æ—Ç—Ä–∏–º—É—î –∑ —Å–µ—Ä–≤—ñ—Å—É.
     */
    public ValidationResult selectClient(String sessionId, UUID clientId) {
        return processClientSelection(sessionId, clientId);
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞—î –≤ —Ä–µ–∂–∏–º —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞.
     */
    public ValidationResult switchToCreateNewClient(String sessionId) {
        return processSwitchToCreateNewClient(sessionId);
    }

    /**
     * –û—á–∏—â–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É —Ç–∞ –ø–æ—á–∏–Ω–∞—î –∑–∞–Ω–æ–≤–æ.
     */
    public ValidationResult clearSearch(String sessionId) {
        return processClearSearch(sessionId);
    }

    /**
     * –ó–∞–≤–µ—Ä—à—É—î –ø–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞ –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ.
     */
    public ValidationResult completeClientSearchWithValidation(String sessionId) {
        return completeSearchWithValidation(sessionId);
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –æ–±—Ä–∞–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.
     */
    public ClientResponse getSelectedClient(String sessionId) {
        ClientSearchContext context = getSearchContext(sessionId);
        return context != null ? context.getSelectedClient() : null;
    }

    /**
     * –í–∏–¥–∞–ª—è—î –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—à—É–∫—É (cleanup).
     */
    public void cleanupSearchContext(String sessionId) {
        removeSearchContext(sessionId);
    }

    // ========== –î–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è ValidationService –¥–ª—è Guards ==========

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—ó –ø–æ—à—É–∫—É –≤–∞–ª—ñ–¥–Ω—ñ —á–µ—Ä–µ–∑ sessionId –¥–ª—è Guards
     */
    public boolean areSearchCriteriaValid(String sessionId) {
        ClientSearchContext context = getSearchContext(sessionId);
        if (context == null || context.getSearchCriteria() == null) {
            return false;
        }
        return validationService.areSearchCriteriaValid(context.getSearchCriteria());
    }

    // ========== –î–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è ValidationService –¥–ª—è –∞–¥–∞–ø—Ç–µ—Ä–∞ ==========

    /**
     * –ü–æ–≤–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤ –ø–æ—à—É–∫—É –∑ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É.
     */
    public ClientSearchValidationResult validateCriteria(String sessionId) {
        ClientSearchContext context = getSearchContext(sessionId);
        return validationService.validateCriteriaStructured(context.getSearchCriteria());
    }

    /**
     * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤ –∑ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É.
     */
    public ClientSearchValidationResult validateCritical(String sessionId) {
        ClientSearchContext context = getSearchContext(sessionId);
        return validationService.validateCriticalStructured(context.getSearchCriteria());
    }

    /**
     * –ì–µ–Ω–µ—Ä—É—î –∑–≤—ñ—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó.
     */
    public String getValidationReport(String sessionId) {
        ClientSearchContext context = getSearchContext(sessionId);
        ValidationResult result = validationService.validateSearchCriteria(context.getSearchCriteria());
        return String.join("; ", result.getErrorMessages());
    }
}
