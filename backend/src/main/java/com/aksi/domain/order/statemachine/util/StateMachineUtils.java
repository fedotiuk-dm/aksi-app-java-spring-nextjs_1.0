package com.aksi.domain.order.statemachine.util;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.messaging.Message;
import org.springframework.statemachine.StateMachine;
import org.springframework.statemachine.StateMachineEventResult;

import com.aksi.domain.order.statemachine.OrderEvent;
import com.aksi.domain.order.statemachine.OrderState;
import com.aksi.domain.order.statemachine.dto.OrderWizardResponseDTO;
import com.aksi.domain.order.statemachine.enums.OrderStateTransitions;

import reactor.core.publisher.Mono;

/**
 * Utility –∫–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Spring State Machine.
 * –ú—ñ—Å—Ç–∏—Ç—å –∑–∞–≥–∞–ª—å–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫—É–≤–∞–Ω–Ω—è –∫–æ–¥—É.
 */
public final class StateMachineUtils {

    private static final Logger logger = LoggerFactory.getLogger(StateMachineUtils.class);

    private StateMachineUtils() {
        // Private constructor –¥–ª—è utility –∫–ª–∞—Å—É
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å —Å–µ—Å—ñ—ó.
     *
     * @param stateMachine state machine instance
     * @param sessionId ID —Å–µ—Å—ñ—ó –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
     * @return true —è–∫—â–æ —Å–µ—Å—ñ—è –≤–∞–ª—ñ–¥–Ω–∞
     */
    public static boolean validateSession(StateMachine<OrderState, OrderEvent> stateMachine, String sessionId) {
        if (sessionId == null || stateMachine == null) {
            logger.warn("‚ö†Ô∏è  Validation failed: sessionId={}, stateMachine={}", sessionId, stateMachine != null);
            return false;
        }

        String currentSessionId = stateMachine.getExtendedState().get("sessionId", String.class);
        boolean isValid = sessionId.equals(currentSessionId);

        if (!isValid) {
            logger.warn("‚ö†Ô∏è  Session validation failed: expected={}, actual={}", sessionId, currentSessionId);
        }

        return isValid;
    }

    /**
     * –ë–µ–∑–ø–µ—á–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–¥—ñ—é –¥–æ state machine –∑ –Ω–æ–≤–∏–º reactive API.
     *
     * @param stateMachine state machine instance
     * @param event –ø–æ–¥—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
     * @return true —è–∫—â–æ –ø–æ–¥—ñ—è –±—É–ª–∞ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–∞
     */
    public static boolean sendEventSafely(StateMachine<OrderState, OrderEvent> stateMachine, OrderEvent event) {
        logger.info("üîÑ sendEventSafely called with event: {}", event);

        if (stateMachine == null || event == null) {
            logger.error("‚ùå Invalid parameters: stateMachine={}, event={}", stateMachine != null, event);
            return false;
        }

        try {
            // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            OrderState currentState = stateMachine.getState() != null ? stateMachine.getState().getId() : null;
            logger.info("üìä Current state before event: {}", currentState);

            // –õ–æ–≥—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ StateMachine
            logger.info("üîç StateMachine details: id={}, hasState={}",
                stateMachine.getId(), stateMachine.getState() != null);

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π reactive API –∑–∞–º—ñ—Å—Ç—å deprecated sendEvent()
            Message<OrderEvent> message = org.springframework.messaging.support.MessageBuilder
                .withPayload(event)
                .build();

            logger.info("üì¨ Sending message with payload: {}", message.getPayload());

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ event —á–µ—Ä–µ–∑ reactive API —Ç–∞ –±–ª–æ–∫—É—î–º–æ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            StateMachineEventResult<OrderState, OrderEvent> result = stateMachine.sendEvent(Mono.just(message))
                .blockFirst();  // –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç

            // –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            if (result != null) {
                logger.info("üì® Event result received: resultType={}, region={}",
                    result.getResultType(), result.getRegion());

                boolean isAccepted = result.getResultType() == StateMachineEventResult.ResultType.ACCEPTED;
                logger.info("‚úÖ Event processing: {}", isAccepted ? "ACCEPTED" : "REJECTED/DENIED");

                // –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                OrderState newState = stateMachine.getState() != null ? stateMachine.getState().getId() : null;
                logger.info("üìä State after event: {} -> {}", currentState, newState);

                // –Ø–∫—â–æ event REJECTED/DENIED, –ª–æ–≥—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
                if (!isAccepted) {
                    logger.warn("‚ö†Ô∏è Event {} was rejected/denied! Current state: {}",
                        event, newState);
                }

                return isAccepted;
            } else {
                logger.error("‚ùå Event result is NULL! This should not happen.");
                return false;
            }
        } catch (Exception e) {
            logger.error("üí• Exception in sendEventSafely: {}", e.getMessage(), e);
            return false;
        }
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω state machine.
     *
     * @param stateMachine state machine instance
     * @return –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –∞–±–æ null
     */
    public static OrderState getCurrentState(StateMachine<OrderState, OrderEvent> stateMachine) {
        if (stateMachine == null || stateMachine.getState() == null) {
            return null;
        }
        return stateMachine.getState().getId();
    }

    /**
     * –ì–µ–Ω–µ—Ä—É—î –Ω–æ–≤–∏–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID —Å–µ—Å—ñ—ó.
     *
     * @return –Ω–æ–≤–∏–π UUID —è–∫ String
     */
    public static String generateSessionId() {
        return UUID.randomUUID().toString();
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Å–µ—Å—ñ—é –≤ state machine.
     *
     * @param stateMachine state machine instance
     * @param sessionId ID —Å–µ—Å—ñ—ó
     */
    public static void initializeSession(StateMachine<OrderState, OrderEvent> stateMachine, String sessionId) {
        logger.info("üîß Initializing session: sessionId={}", sessionId);

        if (stateMachine != null && sessionId != null) {
            try {
                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ sessionId —è–∫ String —Ç–∞ —è–∫ UUID –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
                stateMachine.getExtendedState().getVariables().put("sessionId", sessionId);
                stateMachine.getExtendedState().getVariables().put("sessionIdUUID", java.util.UUID.fromString(sessionId));

                logger.info("‚úÖ Session initialized successfully with both String and UUID formats");

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Å–µ—Å—ñ—è —Å–ø—Ä–∞–≤–¥—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∞
                String storedSessionId = stateMachine.getExtendedState().get("sessionId", String.class);
                java.util.UUID storedSessionUUID = stateMachine.getExtendedState().get("sessionIdUUID", java.util.UUID.class);
                logger.info("üîç Stored sessionId verification: String={}, UUID={}", storedSessionId, storedSessionUUID);
            } catch (Exception e) {
                logger.error("üí• Exception during session initialization: {}", e.getMessage(), e);
            }
        } else {
            logger.error("‚ùå Cannot initialize session: stateMachine={}, sessionId={}",
                stateMachine != null, sessionId);
        }
    }

    /**
     * –ó–∞–≥–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤ —Å—Ç–∞–Ω—É –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é —Ç–∞ –µ–¥–∏–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é.
     *
     * @param stateMachine state machine instance
     * @param sessionId ID —Å–µ—Å—ñ—ó
     * @param event –ø–æ–¥—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏
     * @param successMessage –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ —É—Å–ø—ñ—Ö—É
     * @return ResponseEntity –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥—É
     */
    public static ResponseEntity<OrderWizardResponseDTO> processStateTransition(
            StateMachine<OrderState, OrderEvent> stateMachine,
            String sessionId,
            OrderEvent event,
            String successMessage) {

        if (!validateSession(stateMachine, sessionId)) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                .body(new OrderWizardResponseDTO(sessionId, null, false, "Session not found"));
        }

        boolean success = sendEventSafely(stateMachine, event);
        OrderState newState = getCurrentState(stateMachine);

        if (success) {
            return ResponseEntity.ok(new OrderWizardResponseDTO(
                sessionId, newState, true, successMessage
            ));
        } else {
            return ResponseEntity.badRequest()
                .body(new OrderWizardResponseDTO(sessionId, newState, false, "Failed to process transition"));
        }
    }

    /**
     * –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤ —Å—Ç–∞–Ω—É –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—é –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é.
     * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î OrderStateTransitions –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤.
     *
     * @param stateMachine state machine instance
     * @param sessionId ID —Å–µ—Å—ñ—ó
     * @param event –ø–æ–¥—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏
     * @param successMessage –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ —É—Å–ø—ñ—Ö—É
     * @return ResponseEntity –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥—É
     */
    public static ResponseEntity<OrderWizardResponseDTO> processValidatedStateTransition(
            StateMachine<OrderState, OrderEvent> stateMachine,
            String sessionId,
            OrderEvent event,
            String successMessage) {

        if (!validateSession(stateMachine, sessionId)) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                .body(new OrderWizardResponseDTO(sessionId, null, false, "Session not found"));
        }

        OrderState currentState = getCurrentState(stateMachine);

        // –ü–æ–ø–µ—Ä–µ–¥–Ω—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–µ—Ä–µ—Ö–æ–¥—É
        if (!isTransitionAllowed(currentState, event)) {
            return ResponseEntity.badRequest()
                .body(new OrderWizardResponseDTO(sessionId, currentState, false,
                    String.format("Transition from %s with event %s is not allowed", currentState, event)));
        }

        boolean success = sendEventSafely(stateMachine, event);
        OrderState newState = getCurrentState(stateMachine);

        if (success) {
            return ResponseEntity.ok(new OrderWizardResponseDTO(
                sessionId, newState, true, successMessage
            ));
        } else {
            return ResponseEntity.badRequest()
                .body(new OrderWizardResponseDTO(sessionId, newState, false, "Failed to process transition"));
        }
    }

    /**
     * –°—Ç–≤–æ—Ä—é—î ResponseEntity –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é.
     *
     * @param stateMachine state machine instance
     * @param sessionId ID —Å–µ—Å—ñ—ó
     * @return ResponseEntity –∑ –ø–æ—Ç–æ—á–Ω–∏–º —Å—Ç–∞–Ω–æ–º
     */
    public static ResponseEntity<OrderWizardResponseDTO> getCurrentStateResponse(
            StateMachine<OrderState, OrderEvent> stateMachine,
            String sessionId) {

        if (!validateSession(stateMachine, sessionId)) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                .body(new OrderWizardResponseDTO(sessionId, null, false, "Session not found"));
        }

        OrderState currentState = getCurrentState(stateMachine);
        return ResponseEntity.ok(new OrderWizardResponseDTO(
            sessionId, currentState, true, "Current state retrieved successfully"
        ));
    }

    /**
     * –û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Å—ñ—é —è–∫ String.
     *
     * @param stateMachine state machine instance
     * @param sessionId ID —Å–µ—Å—ñ—ó
     * @return Optional –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Å–µ—Å—ñ—é
     */
    public static Optional<String> getSessionInfo(
            StateMachine<OrderState, OrderEvent> stateMachine,
            String sessionId) {

        if (!validateSession(stateMachine, sessionId)) {
            return Optional.empty();
        }

        OrderState currentState = getCurrentState(stateMachine);
        if (currentState == null) {
            return Optional.empty();
        }

        String info = String.format("Session: %s, Current State: %s", sessionId, currentState);
        return Optional.of(info);
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞—î state machine –∑ –ø–æ—á–∞—Ç–∫–æ–≤–æ—é –ø–æ–¥—ñ—î—é.
     *
     * @param stateMachine state machine instance
     * @param sessionId ID —Å–µ—Å—ñ—ó
     * @param initialEvent –ø–æ—á–∞—Ç–∫–æ–≤–∞ –ø–æ–¥—ñ—è
     * @return true —è–∫—â–æ –∑–∞–ø—É—Å–∫ —É—Å–ø—ñ—à–Ω–∏–π
     */
    public static boolean startStateMachine(
            StateMachine<OrderState, OrderEvent> stateMachine,
            String sessionId,
            OrderEvent initialEvent) {

        logger.info("üöÄ startStateMachine called with sessionId={}, initialEvent={}", sessionId, initialEvent);

        if (stateMachine == null || sessionId == null || initialEvent == null) {
            logger.error("‚ùå Invalid parameters: stateMachine={}, sessionId={}, initialEvent={}",
                stateMachine != null, sessionId, initialEvent);
            return false;
        }

        try {
            // –°–∫–∏–¥–∞—î–º–æ StateMachine –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É
            logger.info("üîÑ Resetting StateMachine to initial state...");
            stateMachine.stopReactively().block();

            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Å—ñ—é
            logger.info("üîß Initializing session: {}", sessionId);
            initializeSession(stateMachine, sessionId);

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
            OrderState stateBefore = stateMachine.getState() != null ? stateMachine.getState().getId() : null;
            logger.info("üìä State before starting: {}", stateBefore);

            // –ó–∞–ø—É—Å–∫–∞—î–º–æ state machine –∑ –Ω–æ–≤–∏–º reactive API
            logger.info("‚ñ∂Ô∏è  Starting StateMachine reactively...");
            stateMachine.startReactively().block();

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É
            OrderState stateAfterStart = stateMachine.getState() != null ? stateMachine.getState().getId() : null;
            logger.info("üìä State after starting: {}", stateAfterStart);

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É –ø–æ–¥—ñ—é
            logger.info("üì§ Sending initial event: {}", initialEvent);
            boolean eventResult = sendEventSafely(stateMachine, initialEvent);

            logger.info("‚úÖ startStateMachine result: {}", eventResult);
            return eventResult;
        } catch (Exception e) {
            logger.error("üí• Exception in startStateMachine: {}", e.getMessage(), e);
            return false;
        }
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –¥–æ—Å—Ç—É–ø–Ω—ñ –ø–æ–¥—ñ—ó –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–∞–Ω—É.
     * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –∑–∞–º—ñ—Å—Ç—å switch statement.
     *
     * @param state –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
     * @return –º–∞—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø–æ–¥—ñ–π
     */
    public static String[] getAvailableEventsForState(OrderState state) {
        return OrderStateTransitions.getAvailableEventsAsStringArray(state);
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –¥–æ—Å—Ç—É–ø–Ω—ñ –ø–æ–¥—ñ—ó —è–∫ —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –æ–±—Ä–æ–±–∫–∏.
     *
     * @param state –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
     * @return —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø–æ–¥—ñ–π
     */
    public static List<OrderEvent> getAvailableEventsAsList(OrderState state) {
        return OrderStateTransitions.getAvailableEvents(state);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ –ø–µ—Ä–µ–¥ –π–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º.
     *
     * @param currentState –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
     * @param event –ø–æ–¥—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
     * @return true —è–∫—â–æ –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π
     */
    public static boolean isTransitionAllowed(OrderState currentState, OrderEvent event) {
        return OrderStateTransitions.isTransitionAllowed(currentState, event);
    }

    /**
     * –ë–µ–∑–ø–µ—á–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–¥—ñ—é –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—é –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é –ø–µ—Ä–µ—Ö–æ–¥—É.
     *
     * @param stateMachine state machine instance
     * @param event –ø–æ–¥—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
     * @return true —è–∫—â–æ –ø–æ–¥—ñ—è –±—É–ª–∞ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–∞
     */
    public static boolean sendEventSafelyWithValidation(StateMachine<OrderState, OrderEvent> stateMachine, OrderEvent event) {
        if (stateMachine == null || event == null) {
            return false;
        }

        OrderState currentState = getCurrentState(stateMachine);
        if (currentState == null) {
            return false;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π —Ü–µ–π –ø–µ—Ä–µ—Ö—ñ–¥
        if (!isTransitionAllowed(currentState, event)) {
            return false;
        }

        return sendEventSafely(stateMachine, event);
    }

    /**
     * –°—Ç–≤–æ—Ä—é—î –∫–∞—Ä—Ç—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é.
     *
     * @param stateMachine state machine instance
     * @param sessionId ID —Å–µ—Å—ñ—ó
     * @return ResponseEntity –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—é –∫–∞—Ä—Ç–æ—é –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤
     */
    public static ResponseEntity<Map<String, Object>> getAvailableTransitions(
            StateMachine<OrderState, OrderEvent> stateMachine,
            String sessionId) {

        if (!validateSession(stateMachine, sessionId)) {
            return ResponseEntity.notFound().build();
        }

        OrderState currentState = getCurrentState(stateMachine);
        Map<String, Object> transitions = new HashMap<>();

        transitions.put("currentState", currentState);
        transitions.put("availableEvents", getAvailableEventsForState(currentState));
        transitions.put("availableEventsCount", OrderStateTransitions.getTransitionCount(currentState));
        transitions.put("sessionId", sessionId);
        transitions.put("timestamp", LocalDateTime.now());

        return ResponseEntity.ok(transitions);
    }

    /**
     * –°—Ç–≤–æ—Ä—é—î –¥–µ—Ç–∞–ª—å–Ω—É –∫–∞—Ä—Ç—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å–µ—Å—ñ—é.
     *
     * @param stateMachine state machine instance
     * @param sessionId ID —Å–µ—Å—ñ—ó
     * @return ResponseEntity –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Å–µ—Å—ñ—é
     */
    public static ResponseEntity<Map<String, Object>> getDetailedSessionInfo(
            StateMachine<OrderState, OrderEvent> stateMachine,
            String sessionId) {

        Optional<String> sessionInfo = getSessionInfo(stateMachine, sessionId);

        if (sessionInfo.isPresent()) {
            Map<String, Object> response = new HashMap<>();
            response.put("sessionId", sessionId);
            response.put("info", sessionInfo.get());
            response.put("currentState", getCurrentState(stateMachine));
            response.put("availableEvents", getAvailableEventsForState(getCurrentState(stateMachine)));
            response.put("timestamp", LocalDateTime.now());
            return ResponseEntity.ok(response);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞—î –Ω–æ–≤–∏–π Order Wizard –∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é.
     *
     * @param stateMachine state machine instance
     * @return ResponseEntity –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—É—Å–∫—É
     */
    public static ResponseEntity<OrderWizardResponseDTO> startOrderWizard(
            StateMachine<OrderState, OrderEvent> stateMachine) {

        logger.info("üèÅ startOrderWizard called");

        if (stateMachine == null) {
            logger.error("‚ùå StateMachine is null in startOrderWizard!");
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(new OrderWizardResponseDTO(null, null, false, "StateMachine not available"));
        }

        try {
            // –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID —Å–µ—Å—ñ—ó
            String sessionId = generateSessionId();
            logger.info("üÜî Generated sessionId: {}", sessionId);

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω StateMachine
            OrderState initialState = stateMachine.getState() != null ? stateMachine.getState().getId() : null;
            logger.info("üìä StateMachine initial state: {}", initialState);

            // –ó–∞–ø—É—Å–∫–∞—î–º–æ state machine –∑ –ø–æ—á–∞—Ç–∫–æ–≤–æ—é –ø–æ–¥—ñ—î—é
            logger.info("üöÄ Starting StateMachine with START_ORDER event...");
            logger.info("üîî Calling startStateMachine(stateMachine, {}, {})", sessionId, OrderEvent.START_ORDER);

            boolean success = startStateMachine(
                stateMachine,
                sessionId,
                OrderEvent.START_ORDER
            );

            logger.info("üìä StateMachine start result: {}", success);

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
            OrderState finalState = stateMachine.getState() != null ? stateMachine.getState().getId() : null;
            logger.info("üìä StateMachine final state: {}", finalState);

            if (success) {
                logger.info("‚úÖ Order Wizard started successfully. Final state: {}", finalState);

                OrderWizardResponseDTO responseBody = new OrderWizardResponseDTO(
                    sessionId, finalState, true, "Order wizard started successfully"
                );

                return ResponseEntity.ok(responseBody);
            } else {
                logger.error("‚ùå Failed to start StateMachine");

                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new OrderWizardResponseDTO(sessionId, finalState, false, "Failed to start order wizard"));
            }
        } catch (Exception e) {
            logger.error("üí• Exception in startOrderWizard: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(new OrderWizardResponseDTO(null, null, false, "Exception: " + e.getMessage()));
        }
    }
}
