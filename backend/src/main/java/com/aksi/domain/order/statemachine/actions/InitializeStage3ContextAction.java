package com.aksi.domain.order.statemachine.actions;

import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.statemachine.StateContext;
import org.springframework.statemachine.action.Action;
import org.springframework.stereotype.Component;

import com.aksi.domain.order.statemachine.OrderEvent;
import com.aksi.domain.order.statemachine.OrderState;
import com.aksi.domain.order.statemachine.stage3.service.Stage3CoordinationService;

/**
 * Action –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Stage3 –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ–≤ –∑ sessionId –≤—ñ–¥ –≥–æ–ª–æ–≤–Ω–æ–≥–æ Order Wizard.
 * –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ –≤ —Å—Ç–∞–Ω EXECUTION_PARAMS.
 *
 * –ó–∞–±–µ–∑–ø–µ—á—É—î —â–æ sessionId –≤—ñ–¥ –≥–æ–ª–æ–≤–Ω–æ–≥–æ Order Wizard –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π
 * –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –≤—Å—ñ—Ö Stage3 —Å–µ—Ä–≤—ñ—Å—ñ–≤.
 */
@Component
public class InitializeStage3ContextAction implements Action<OrderState, OrderEvent> {

    private static final Logger logger = LoggerFactory.getLogger(InitializeStage3ContextAction.class);

    private final Stage3CoordinationService stage3CoordinationService;

    public InitializeStage3ContextAction(final Stage3CoordinationService stage3CoordinationService) {
        this.stage3CoordinationService = stage3CoordinationService;
    }

    @Override
    public void execute(StateContext<OrderState, OrderEvent> context) {
        logger.info("üî•üî•üî• InitializeStage3ContextAction.execute() –í–ò–ö–õ–ò–ö–ê–ù–û! üî•üî•üî•");

        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ sessionId –∑ ExtendedState –≥–æ–ª–æ–≤–Ω–æ–≥–æ StateMachine
            String sessionId = extractSessionId(context);

            if (sessionId == null) {
                logger.error("‚ùå SessionId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –≤ ExtendedState –≥–æ–ª–æ–≤–Ω–æ–≥–æ StateMachine!");
                return;
            }

            logger.info("üì• SessionId –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ StateMachine: {}", sessionId);

            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Stage3 —Å–µ—Ä–≤—ñ—Å
            initializeStage3Services(sessionId);

            logger.info("üéâ InitializeStage3ContextAction –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ –¥–ª—è sessionId: {}", sessionId);

        } catch (Exception e) {
            logger.error("üí• –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ InitializeStage3ContextAction: {}", e.getMessage(), e);
        }
    }

    /**
     * –í–∏—Ç—è–≥—É—î sessionId –∑ ExtendedState –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
     */
    private String extractSessionId(StateContext<OrderState, OrderEvent> context) {
        String sessionId = context.getExtendedState().get("sessionId", String.class);
        UUID sessionIdUUID = context.getExtendedState().get("sessionIdUUID", UUID.class);

        logger.info("üì• SessionId –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ StateMachine: String={}, UUID={}", sessionId, sessionIdUUID);

        if (sessionId == null && sessionIdUUID != null) {
            sessionId = sessionIdUUID.toString();
            logger.info("üîÑ Converted UUID to String: {}", sessionId);
        }

        return sessionId;
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î Stage3 —Å–µ—Ä–≤—ñ—Å
     */
    private void initializeStage3Services(String sessionId) {
        UUID sessionUUID = UUID.fromString(sessionId);

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Stage3 —Å–µ—Ä–≤—ñ—Å
        logger.info("üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Stage3CoordinationService –∑ sessionId: {}", sessionId);
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Å–µ—Å—ñ—è, —è–∫—â–æ –Ω—ñ - —Å—Ç–≤–æ—Ä—é—î–º–æ
            if (!stage3CoordinationService.sessionExists(sessionUUID)) {
                // –û—Ç—Ä–∏–º—É—î–º–æ orderId –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É (–º–∞—î –±—É—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞–Ω—ñ—à–µ)
                UUID orderId = extractOrderId(sessionUUID);
                if (orderId != null) {
                    stage3CoordinationService.createSession(orderId);
                    logger.info("‚úÖ Stage3 —Å–µ—Å—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞ –¥–ª—è orderId: {}", orderId);
                } else {
                    logger.warn("‚ö†Ô∏è OrderId –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ sessionId —è–∫ orderId");
                    stage3CoordinationService.createSession(sessionUUID);
                }

                // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Stage3 –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
                stage3CoordinationService.initializeStage3(sessionUUID);
                logger.info("‚úÖ Stage3 —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ");
            } else {
                logger.info("‚ÑπÔ∏è Stage3 —Å–µ—Å—ñ—è –≤–∂–µ —ñ—Å–Ω—É—î –¥–ª—è sessionId: {}", sessionId);
                // –ü–µ—Ä–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –Ω–∞ –≤—Å—è–∫–∏–π –≤–∏–ø–∞–¥–æ–∫
                stage3CoordinationService.initializeStage3(sessionUUID);
                logger.info("‚úÖ Stage3 –ø–µ—Ä–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ");
            }
        } catch (Exception e) {
            logger.error("üí• –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Stage3CoordinationService: {}", e.getMessage(), e);
        }
    }

    /**
     * –í–∏—Ç—è–≥—É—î orderId –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∞–±–æ –ø–æ–≤–µ—Ä—Ç–∞—î sessionId —è–∫ orderId
     */
    private UUID extractOrderId(UUID sessionId) {
        try {
            // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ orderId –∑ ExtendedState –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ sessionId
            // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ orderId –º–∞—î –±—É—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞ –ø–æ—á–∞—Ç–∫—É Order Wizard
            logger.debug("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ sessionId —è–∫ orderId: {}", sessionId);
            return sessionId;
        } catch (Exception e) {
            logger.debug("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ orderId –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É: {}", e.getMessage());
            return sessionId;
        }
    }
}
