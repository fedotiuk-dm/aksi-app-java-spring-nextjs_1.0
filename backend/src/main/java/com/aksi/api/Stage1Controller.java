package com.aksi.api;

import java.util.List;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.aksi.domain.branch.dto.BranchLocationDTO;
import com.aksi.domain.client.dto.ClientResponse;
import com.aksi.domain.order.statemachine.stage1.adapter.BasicOrderInfoAdapter;
import com.aksi.domain.order.statemachine.stage1.adapter.ClientSearchAdapter;
import com.aksi.domain.order.statemachine.stage1.adapter.NewClientFormAdapter;
import com.aksi.domain.order.statemachine.stage1.dto.BasicOrderInfoDTO;
import com.aksi.domain.order.statemachine.stage1.dto.ClientSearchCriteriaDTO;
import com.aksi.domain.order.statemachine.stage1.dto.ClientSearchResultDTO;
import com.aksi.domain.order.statemachine.stage1.dto.NewClientFormDTO;
import com.aksi.domain.order.statemachine.stage1.enums.BasicOrderInfoState;
import com.aksi.domain.order.statemachine.stage1.enums.ClientSearchState;
import com.aksi.domain.order.statemachine.stage1.enums.NewClientFormState;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;

/**
 * REST API –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è Stage 1 - –ö–ª—ñ—î–Ω—Ç —Ç–∞ –±–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
 *
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å:
 * - –î–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ –æ–∫—Ä–µ–º–∏—Ö –∞–¥–∞–ø—Ç–µ—Ä—ñ–≤ Stage 1
 * - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—è –º—ñ–∂ –ø–æ—à—É–∫–æ–º –∫–ª—ñ—î–Ω—Ç—ñ–≤, —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –Ω–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ —Ç–∞ –±–∞–∑–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
 *
 * –ü—Ä–∏–Ω—Ü–∏–ø–∏:
 * - –û–¥–∏–Ω —Ñ–∞–π–ª = –æ–¥–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å (—Ç—ñ–ª—å–∫–∏ Stage 1)
 * - –¢–æ–Ω–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä - —Ç—ñ–ª—å–∫–∏ HTTP –æ–±—Ä–æ–±–∫–∞ —Ç–∞ –¥–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è
 * - –í—Å—è –ª–æ–≥—ñ–∫–∞ –≤–∏–Ω–µ—Å–µ–Ω–∞ –≤ –æ–∫—Ä–µ–º—ñ –∞–¥–∞–ø—Ç–µ—Ä–∏
 */
@RestController
@RequestMapping("/v1/order-wizard/stage1")
@Tag(name = "Order Wizard - Stage 1", description = "–ï—Ç–∞–ø 1: –ö–ª—ñ—î–Ω—Ç —Ç–∞ –±–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
public class Stage1Controller {

    private static final Logger logger = LoggerFactory.getLogger(Stage1Controller.class);

    private final ClientSearchAdapter clientSearchAdapter;
    private final NewClientFormAdapter newClientFormAdapter;
    private final BasicOrderInfoAdapter basicOrderInfoAdapter;

    public Stage1Controller(
            ClientSearchAdapter clientSearchAdapter,
            NewClientFormAdapter newClientFormAdapter,
            BasicOrderInfoAdapter basicOrderInfoAdapter) {

        this.clientSearchAdapter = clientSearchAdapter;
        this.newClientFormAdapter = newClientFormAdapter;
        this.basicOrderInfoAdapter = basicOrderInfoAdapter;

        logger.info("üöÄ Stage1Controller —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑ –∞–¥–∞–ø—Ç–µ—Ä–∞–º–∏: clientSearch={}, newClientForm={}, basicOrderInfo={}",
                   clientSearchAdapter != null, newClientFormAdapter != null, basicOrderInfoAdapter != null);
    }

    // =================== –ü–û–®–£–ö –ö–õ–Ü–Ñ–ù–¢–Ü–í ===================

    @Operation(
        summary = "–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –Ω–æ–≤–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤",
        operationId = "stage1InitializeClientSearch",
        tags = {"Order Wizard - Stage 1", "Client Search"}
    )
    @PostMapping("/client-search/initialize")
    public ResponseEntity<String> initializeClientSearch() {
        return clientSearchAdapter.initializeContext();
    }

    @Operation(
        summary = "–í–∏–∫–æ–Ω—É—î –ø–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏",
        operationId = "stage1SearchClients",
        tags = {"Order Wizard - Stage 1", "Client Search"}
    )
    @PostMapping("/client-search/session/{sessionId}/search")
    public ResponseEntity<ClientSearchResultDTO> searchClients(
            @PathVariable String sessionId,
            @RequestBody ClientSearchCriteriaDTO criteria) {
        return clientSearchAdapter.searchClients(sessionId, criteria);
    }

    @Operation(
        summary = "–ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º",
        operationId = "stage1SearchClientsByPhone",
        tags = {"Order Wizard - Stage 1", "Client Search"}
    )
    @PostMapping("/client-search/session/{sessionId}/search-by-phone")
    public ResponseEntity<ClientSearchResultDTO> searchClientsByPhone(
            @PathVariable String sessionId,
            @RequestParam String phone) {
        return clientSearchAdapter.searchByPhone(sessionId, phone);
    }

    @Operation(
        summary = "–í–∏–±–∏—Ä–∞—î –∫–ª—ñ—î–Ω—Ç–∞ –∑—ñ —Å–ø–∏—Å–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤",
        operationId = "stage1SelectClient",
        tags = {"Order Wizard - Stage 1", "Client Search"}
    )
    @PostMapping("/client-search/session/{sessionId}/select-client")
    public ResponseEntity<Void> selectClient(
            @PathVariable String sessionId,
            @RequestParam UUID clientId) {
        return clientSearchAdapter.selectClient(sessionId, clientId);
    }

    @Operation(
        summary = "–û—Ç—Ä–∏–º—É—î –æ–±—Ä–∞–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞",
        operationId = "stage1GetSelectedClient",
        tags = {"Order Wizard - Stage 1", "Client Search"}
    )
    @GetMapping("/client-search/session/{sessionId}/selected-client")
    public ResponseEntity<ClientResponse> getSelectedClient(@PathVariable String sessionId) {
        return clientSearchAdapter.getSelectedClient(sessionId);
    }

    @Operation(
        summary = "–û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –ø–æ—à—É–∫—É",
        operationId = "stage1GetClientSearchState",
        tags = {"Order Wizard - Stage 1", "Client Search"}
    )
    @GetMapping("/client-search/session/{sessionId}/state")
    public ResponseEntity<ClientSearchState> getClientSearchState(@PathVariable String sessionId) {
        logger.info("üîç [CLIENT-SEARCH-STATE] –ó–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –ø–æ—à—É–∫—É –¥–ª—è sessionId: {}", sessionId);

        try {
            ResponseEntity<ClientSearchState> response = clientSearchAdapter.getClientSearchState(sessionId);
            logger.info("‚úÖ [CLIENT-SEARCH-STATE] –£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ —Å—Ç–∞–Ω: {} –¥–ª—è sessionId: {}",
                       response.getBody(), sessionId);
            return response;
        } catch (Exception e) {
            logger.error("‚ùå [CLIENT-SEARCH-STATE] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞–Ω—É –¥–ª—è sessionId: {}, error: {}",
                        sessionId, e.getMessage(), e);
            throw e;
        }
    }

    @Operation(
        summary = "–û—á–∏—â—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É",
        operationId = "stage1ClearClientSearch",
        tags = {"Order Wizard - Stage 1", "Client Search"}
    )
    @PostMapping("/client-search/session/{sessionId}/clear")
    public ResponseEntity<Void> clearClientSearch(@PathVariable String sessionId) {
        return clientSearchAdapter.clearSearch(sessionId);
    }

    @Operation(
        summary = "–ó–∞–≤–µ—Ä—à—É—î –ø–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞",
        operationId = "stage1CompleteClientSearch",
        tags = {"Order Wizard - Stage 1", "Client Search"}
    )
    @PostMapping("/client-search/session/{sessionId}/complete")
    public ResponseEntity<Void> completeClientSearch(@PathVariable String sessionId) {
        return clientSearchAdapter.completeSearch(sessionId);
    }

    @Operation(
        summary = "–°–∫–∞—Å–æ–≤—É—î –ø–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞",
        operationId = "stage1CancelClientSearch",
        tags = {"Order Wizard - Stage 1", "Client Search"}
    )
    @DeleteMapping("/client-search/session/{sessionId}")
    public ResponseEntity<Void> cancelClientSearch(@PathVariable String sessionId) {
        return clientSearchAdapter.cancelSearch(sessionId);
    }

    // =================== –°–¢–í–û–†–ï–ù–ù–Ø –ù–û–í–û–ì–û –ö–õ–Ü–Ñ–ù–¢–ê ===================

    @Operation(
        summary = "–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ñ–æ—Ä–º—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞",
        operationId = "stage1InitializeNewClient",
        tags = {"Order Wizard - Stage 1", "Client Creation"}
    )
    @PostMapping("/new-client/initialize")
    public ResponseEntity<String> initializeNewClientForm() {
        return newClientFormAdapter.initializeContext();
    }

    @Operation(
        summary = "–û–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ —Ñ–æ—Ä–º–∏ –∫–ª—ñ—î–Ω—Ç–∞",
        operationId = "stage1UpdateClientData",
        tags = {"Order Wizard - Stage 1", "Client Creation"}
    )
    @PutMapping("/new-client/session/{sessionId}/data")
    public ResponseEntity<Void> updateNewClientData(
            @PathVariable String sessionId,
            @RequestBody NewClientFormDTO formData) {
        return newClientFormAdapter.updateFormData(sessionId, formData);
    }

    @Operation(
        summary = "–í–∞–ª—ñ–¥—É—î —Ñ–æ—Ä–º—É –∫–ª—ñ—î–Ω—Ç–∞",
        operationId = "stage1ValidateClientForm",
        tags = {"Order Wizard - Stage 1", "Client Creation"}
    )
    @PostMapping("/new-client/session/{sessionId}/validate")
    public ResponseEntity<?> validateNewClientForm(@PathVariable String sessionId) {
        return newClientFormAdapter.validateData(sessionId);
    }

    @Operation(
        summary = "–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞",
        operationId = "stage1CreateClient",
        tags = {"Order Wizard - Stage 1", "Client Creation"}
    )
    @PostMapping("/new-client/session/{sessionId}/create")
    public ResponseEntity<ClientResponse> createNewClient(@PathVariable String sessionId) {
        return newClientFormAdapter.createClient(sessionId);
    }

    @Operation(
        summary = "–û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Ñ–æ—Ä–º–∏",
        operationId = "stage1GetClientFormState",
        tags = {"Order Wizard - Stage 1", "Client Creation"}
    )
    @GetMapping("/new-client/session/{sessionId}/state")
    public ResponseEntity<NewClientFormState> getNewClientFormState(@PathVariable String sessionId) {
        return newClientFormAdapter.getCurrentState(sessionId);
    }

    @Operation(
        summary = "–û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Ñ–æ—Ä–º–∏",
        operationId = "stage1GetClientFormData",
        tags = {"Order Wizard - Stage 1", "Client Creation"}
    )
    @GetMapping("/new-client/session/{sessionId}/data")
    public ResponseEntity<NewClientFormDTO> getCurrentNewClientForm(@PathVariable String sessionId) {
        return newClientFormAdapter.getCurrentData(sessionId);
    }

    @Operation(
        summary = "–ó–∞–≤–µ—Ä—à—É—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞",
        operationId = "stage1CompleteClientCreation",
        tags = {"Order Wizard - Stage 1", "Client Creation"}
    )
    @PostMapping("/new-client/session/{sessionId}/complete")
    public ResponseEntity<Void> completeNewClientCreation(@PathVariable String sessionId) {
        return newClientFormAdapter.completeForm(sessionId);
    }

    @Operation(
        summary = "–°–∫–∞—Å–æ–≤—É—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞",
        operationId = "stage1CancelClientCreation",
        tags = {"Order Wizard - Stage 1", "Client Creation"}
    )
    @DeleteMapping("/new-client/session/{sessionId}")
    public ResponseEntity<Void> cancelNewClientCreation(@PathVariable String sessionId) {
        return newClientFormAdapter.cancelForm(sessionId);
    }

    // =================== –ë–ê–ó–û–í–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø ===================

    @Operation(
        summary = "–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –∑–±—ñ—Ä –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
        operationId = "stage1InitializeBasicOrder",
        tags = {"Order Wizard - Stage 1", "Basic Order Info"}
    )
    @PostMapping("/basic-order/initialize")
    public ResponseEntity<String> initializeBasicOrderInfo() {
        return basicOrderInfoAdapter.initializeContext();
    }

    @Operation(
        summary = "–ü–æ—á–∏–Ω–∞—î workflow –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó",
        operationId = "stage1StartBasicOrderWorkflow",
        tags = {"Order Wizard - Stage 1", "Basic Order Info"}
    )
    @PostMapping("/basic-order/workflow/start")
    public ResponseEntity<String> startBasicOrderWorkflow() {
        return basicOrderInfoAdapter.startWorkflow();
    }

    @Operation(
        summary = "–í–∏–±–∏—Ä–∞—î —Ñ—ñ–ª—ñ—é –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
        operationId = "stage1SelectBranch",
        tags = {"Order Wizard - Stage 1", "Basic Order Info"}
    )
    @PostMapping("/basic-order/session/{sessionId}/select-branch")
    public ResponseEntity<Void> selectBranch(
            @PathVariable String sessionId,
            @RequestParam UUID branchId) {
        return basicOrderInfoAdapter.selectBranch(sessionId, branchId);
    }

    @Operation(
        summary = "–ì–µ–Ω–µ—Ä—É—î –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó",
        operationId = "stage1GenerateReceiptNumber",
        tags = {"Order Wizard - Stage 1", "Basic Order Info"}
    )
    @PostMapping("/basic-order/session/{sessionId}/generate-receipt-number")
    public ResponseEntity<String> generateReceiptNumber(
            @PathVariable String sessionId,
            @RequestParam String branchCode) {
        return basicOrderInfoAdapter.generateReceiptNumber(sessionId, branchCode);
    }

    @Operation(
        summary = "–í—Å—Ç–∞–Ω–æ–≤–ª—é—î —É–Ω—ñ–∫–∞–ª—å–Ω—É –º—ñ—Ç–∫—É",
        operationId = "stage1SetUniqueTag",
        tags = {"Order Wizard - Stage 1", "Basic Order Info"}
    )
    @PostMapping("/basic-order/session/{sessionId}/set-unique-tag")
    public ResponseEntity<Void> setUniqueTag(
            @PathVariable String sessionId,
            @RequestParam String uniqueTag) {
        return basicOrderInfoAdapter.setUniqueTag(sessionId, uniqueTag);
    }

    @Operation(
        summary = "–í–∞–ª—ñ–¥—É—î –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é",
        operationId = "stage1ValidateBasicOrder",
        tags = {"Order Wizard - Stage 1", "Basic Order Info"}
    )
    @PostMapping("/basic-order/session/{sessionId}/validate")
    public ResponseEntity<?> validateBasicOrderInfo(@PathVariable String sessionId) {
        return basicOrderInfoAdapter.validateData(sessionId);
    }

    @Operation(
        summary = "–û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó",
        operationId = "stage1GetBasicOrderState",
        tags = {"Order Wizard - Stage 1", "Basic Order Info"}
    )
    @GetMapping("/basic-order/session/{sessionId}/state")
    public ResponseEntity<BasicOrderInfoState> getBasicOrderInfoState(@PathVariable String sessionId) {
        logger.info("üîç [BASIC-ORDER-STATE] –ó–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –¥–ª—è sessionId: {}", sessionId);

        try {
            ResponseEntity<BasicOrderInfoState> response = basicOrderInfoAdapter.getBasicOrderInfoState(sessionId);
            logger.info("‚úÖ [BASIC-ORDER-STATE] –£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ —Å—Ç–∞–Ω: {} –¥–ª—è sessionId: {}",
                       response.getBody(), sessionId);
            return response;
        } catch (Exception e) {
            logger.error("‚ùå [BASIC-ORDER-STATE] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞–Ω—É –¥–ª—è sessionId: {}, error: {}",
                        sessionId, e.getMessage(), e);
            throw e;
        }
    }

    @Operation(
        summary = "–û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω—É –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é",
        operationId = "stage1GetBasicOrderData",
        tags = {"Order Wizard - Stage 1", "Basic Order Info"}
    )
    @GetMapping("/basic-order/session/{sessionId}/data")
    public ResponseEntity<BasicOrderInfoDTO> getCurrentBasicOrderInfo(@PathVariable String sessionId) {
        return basicOrderInfoAdapter.getCurrentData(sessionId);
    }

    @Operation(
        summary = "–û–Ω–æ–≤–ª—é—î –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é",
        operationId = "stage1UpdateBasicOrder",
        tags = {"Order Wizard - Stage 1", "Basic Order Info"}
    )
    @PutMapping("/basic-order/session/{sessionId}/data")
    public ResponseEntity<Void> updateBasicOrderInfo(
            @PathVariable String sessionId,
            @RequestBody BasicOrderInfoDTO basicOrderInfo) {
        return basicOrderInfoAdapter.updateBasicOrderInfo(sessionId, basicOrderInfo);
    }

    @Operation(
        summary = "–ó–∞–≤–µ—Ä—à—É—î –∑–±—ñ—Ä –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó",
        operationId = "stage1CompleteBasicOrder",
        tags = {"Order Wizard - Stage 1", "Basic Order Info"}
    )
    @PostMapping("/basic-order/session/{sessionId}/complete")
    public ResponseEntity<Void> completeBasicOrderInfo(@PathVariable String sessionId) {
        return basicOrderInfoAdapter.completeWorkflow(sessionId);
    }

    @Operation(
        summary = "–°–∫–∏–¥–∞—î –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É",
        operationId = "stage1ResetBasicOrder",
        tags = {"Order Wizard - Stage 1", "Basic Order Info"}
    )
    @PostMapping("/basic-order/session/{sessionId}/reset")
    public ResponseEntity<Void> resetBasicOrderInfo(@PathVariable String sessionId) {
        return basicOrderInfoAdapter.resetWorkflow(sessionId);
    }

    @Operation(
        summary = "–°–∫–∞—Å–æ–≤—É—î –∑–±—ñ—Ä –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó",
        operationId = "stage1CancelBasicOrder",
        tags = {"Order Wizard - Stage 1", "Basic Order Info"}
    )
    @DeleteMapping("/basic-order/session/{sessionId}")
    public ResponseEntity<Void> cancelBasicOrderInfo(@PathVariable String sessionId) {
        return basicOrderInfoAdapter.cancelWorkflow(sessionId);
    }

    @Operation(
        summary = "–û—Ç—Ä–∏–º—É—î —Ñ—ñ–ª—ñ—ó –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å–µ—Å—ñ—ó",
        operationId = "stage1GetBranchesForSession",
        tags = {"Order Wizard - Stage 1", "Basic Order Info"}
    )
    @GetMapping("/basic-order/session/{sessionId}/branches")
    public ResponseEntity<List<BranchLocationDTO>> getAvailableBranches(@PathVariable String sessionId) {
        return basicOrderInfoAdapter.getAvailableBranches(sessionId);
    }

    @Operation(
        summary = "–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Ñ—ñ–ª—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –¥–ª—è —Å–µ—Å—ñ—ó",
        operationId = "stage1AreBranchesLoaded",
        tags = {"Order Wizard - Stage 1", "Basic Order Info"}
    )
    @GetMapping("/basic-order/session/{sessionId}/branches/loaded")
    public ResponseEntity<Boolean> areBranchesLoaded(@PathVariable String sessionId) {
        return basicOrderInfoAdapter.areBranchesLoaded(sessionId);
    }

    @Operation(
        summary = "–û—á–∏—â—É—î –ø–æ–º–∏–ª–∫–∏ –¥–ª—è —Å–µ—Å—ñ—ó",
        operationId = "stage1ClearBasicOrderErrors",
        tags = {"Order Wizard - Stage 1", "Basic Order Info"}
    )
    @PostMapping("/basic-order/session/{sessionId}/clear-errors")
    public ResponseEntity<Void> clearErrors(@PathVariable String sessionId) {
        return basicOrderInfoAdapter.clearErrors(sessionId);
    }
}
