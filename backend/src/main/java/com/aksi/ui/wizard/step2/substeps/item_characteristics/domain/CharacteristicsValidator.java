package com.aksi.ui.wizard.step2.substeps.item_characteristics.domain;

import java.util.ArrayList;
import java.util.List;

import lombok.extern.slf4j.Slf4j;

/**
 * –í–∞–ª—ñ–¥–∞—Ç–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø—Ä–µ–¥–º–µ—Ç–∞.
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ç—ñ–ª—å–∫–∏ –∑–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é (Single Responsibility Principle).
 */
@Slf4j
public class CharacteristicsValidator {

    /**
     * –í–∞–ª—ñ–¥—É—î –≤—Å—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞.
     */
    public ValidationResult validateCharacteristics(ItemCharacteristicsState state) {
        var errors = new ArrayList<String>();

        // –ë–∞–∑–æ–≤—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
        validateMaterial(state, errors);
        validateColor(state, errors);
        validateCustomColor(state, errors);
        validateFiller(state, errors);

        boolean isValid = errors.isEmpty();
        log.debug("üîç –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: isValid={}, –ø–æ–º–∏–ª–∫–∏={}", isValid, errors.size());

        return new ValidationResult(isValid, List.copyOf(errors));
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ.
     * –°–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –±–µ–∑ —Å–∫–ª–∞–¥–Ω–æ—ó –ª–æ–≥—ñ–∫–∏.
     */
    public boolean hasAllRequiredFields(ItemCharacteristicsState state) {
        log.debug("üîç –í–ê–õ–Ü–î–ê–¶–Ü–Ø hasAllRequiredFields –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞: {}", state.getItemName());

        // –û—Å–Ω–æ–≤–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
        boolean materialValid = isValidString(state.getMaterial());
        boolean colorValid = isValidString(state.getColor());

        log.debug("  ‚úì –ú–∞—Ç–µ—Ä—ñ–∞–ª: '{}' -> valid={}", state.getMaterial(), materialValid);
        log.debug("  ‚úì –ö–æ–ª—ñ—Ä: '{}' -> valid={}", state.getColor(), colorValid);

        // –í–ª–∞—Å–Ω–∏–π –∫–æ–ª—ñ—Ä (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω)
        boolean customColorValid = validateCustomColorLogic(state);
        log.debug("  ‚úì –í–ª–∞—Å–Ω–∏–π –∫–æ–ª—ñ—Ä: valid={}", customColorValid);

        // –ù–∞–ø–æ–≤–Ω—é–≤–∞—á (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω)
        boolean fillerValid = validateFillerLogic(state);
        log.debug("  ‚úì –ù–∞–ø–æ–≤–Ω—é–≤–∞—á: valid={}", fillerValid);

        boolean result = materialValid && colorValid && customColorValid && fillerValid;
        log.debug("üîç –§–Ü–ù–ê–õ–¨–ù–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {}", result);

        return result;
    }

    /**
     * –í–∞–ª—ñ–¥—É—î –º–∞—Ç–µ—Ä—ñ–∞–ª.
     */
    private void validateMaterial(ItemCharacteristicsState state, List<String> errors) {
        if (!isValidString(state.getMaterial())) {
            errors.add("–ú–∞—Ç–µ—Ä—ñ–∞–ª —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º");
        }
    }

    /**
     * –í–∞–ª—ñ–¥—É—î –∫–æ–ª—ñ—Ä.
     */
    private void validateColor(ItemCharacteristicsState state, List<String> errors) {
        if (!isValidString(state.getColor())) {
            errors.add("–ö–æ–ª—ñ—Ä —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º");
        }
    }

    /**
     * –í–∞–ª—ñ–¥—É—î –≤–ª–∞—Å–Ω–∏–π –∫–æ–ª—ñ—Ä.
     */
    private void validateCustomColor(ItemCharacteristicsState state, List<String> errors) {
        if (!isCustomColor(state)) {
            return; // –í–ª–∞—Å–Ω–∏–π –∫–æ–ª—ñ—Ä –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω
        }

        // –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—É –∂ –ª–æ–≥—ñ–∫—É —â–æ –π –≤ validateCustomColorLogic
        // –Ø–∫—â–æ –∫–æ–ª—ñ—Ä –≤–∏–±—Ä–∞–Ω–æ —ñ –≤—ñ–Ω –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π, —Ç–æ —Ü–µ –≤–∞–ª—ñ–¥–Ω–æ
        String selectedColor = state.getColor();
        if (isValidString(selectedColor)) {
            log.debug("    - –ö–æ–ª—ñ—Ä '{}' –≤–∏–±—Ä–∞–Ω–æ, –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞", selectedColor);
            return; // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–æ–ª—ñ—Ä –ø–æ—Ä–æ–∂–Ω—ñ–π —Ç–∞ customColor —Ç–µ–∂ –ø–æ—Ä–æ–∂–Ω—î
        if (!isValidString(state.getCustomColor())) {
            errors.add("–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –≤–ª–∞—Å–Ω–∏–π –∫–æ–ª—ñ—Ä");
        }
    }

    /**
     * –í–∞–ª—ñ–¥—É—î –Ω–∞–ø–æ–≤–Ω—é–≤–∞—á.
     */
    private void validateFiller(ItemCharacteristicsState state, List<String> errors) {
        if (!isFillerRequired(state)) {
            return; // –ù–∞–ø–æ–≤–Ω—é–≤–∞—á –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        }

        if (!isValidString(state.getFillerType())) {
            errors.add("–¢–∏–ø –Ω–∞–ø–æ–≤–Ω—é–≤–∞—á–∞ —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º –¥–ª—è —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó");
            return;
        }

        if ("–Ü–Ω—à–µ".equals(state.getFillerType()) && !isValidString(state.getCustomFillerType())) {
            errors.add("–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Ç–∏–ø –Ω–∞–ø–æ–≤–Ω—é–≤–∞—á–∞");
        }
    }

    /**
     * –õ–æ–≥—ñ–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –≤–ª–∞—Å–Ω–æ–≥–æ –∫–æ–ª—å–æ—Ä—É.
     */
    private boolean validateCustomColorLogic(ItemCharacteristicsState state) {
        if (!isCustomColor(state)) {
            return true; // –í–ª–∞—Å–Ω–∏–π –∫–æ–ª—ñ—Ä –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω
        }

        // –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –Ø–∫—â–æ –∫–æ–ª—ñ—Ä –≤–∏–±—Ä–∞–Ω–æ —ñ –≤—ñ–Ω –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π, —Ç–æ —Ü–µ –≤–∞–ª—ñ–¥–Ω–æ
        // –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤—ñ–Ω –Ω–µ –≤ –±–∞–∑–æ–≤–æ–º—É —Å–ø–∏—Å–∫—É —Ç–∞ customColor –ø–æ—Ä–æ–∂–Ω—î
        String selectedColor = state.getColor();
        if (isValidString(selectedColor)) {
            log.debug("    - –ö–æ–ª—ñ—Ä '{}' –≤–∏–±—Ä–∞–Ω–æ, –≤–≤–∞–∂–∞—î–º–æ –≤–∞–ª—ñ–¥–Ω–∏–º –Ω–∞–≤—ñ—Ç—å —è–∫ –≤–ª–∞—Å–Ω–∏–π", selectedColor);
            return true;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ customColor —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–æ–ª—ñ—Ä –ø–æ—Ä–æ–∂–Ω—ñ–π
        return isValidString(state.getCustomColor());
    }

    /**
     * –õ–æ–≥—ñ–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –Ω–∞–ø–æ–≤–Ω—é–≤–∞—á–∞.
     */
    private boolean validateFillerLogic(ItemCharacteristicsState state) {
        if (!isFillerRequired(state)) {
            log.debug("    - –ù–∞–ø–æ–≤–Ω—é–≤–∞—á –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: {}", state.getItemCategory());
            return true; // –ù–∞–ø–æ–≤–Ω—é–≤–∞—á –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω
        }

        if (!isValidString(state.getFillerType())) {
            log.debug("    - –ù–∞–ø–æ–≤–Ω—é–≤–∞—á –ø–æ—Ç—Ä—ñ–±–µ–Ω –∞–ª–µ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ: {}", state.getFillerType());
            return false;
        }

        if ("–Ü–Ω—à–µ".equals(state.getFillerType())) {
            boolean customValid = isValidString(state.getCustomFillerType());
            log.debug("    - –í–∏–±—Ä–∞–Ω–æ '–Ü–Ω—à–µ', –≤–ª–∞—Å–Ω–∏–π —Ç–∏–ø: '{}' -> valid={}",
                state.getCustomFillerType(), customValid);
            return customValid;
        }

        log.debug("    - –ù–∞–ø–æ–≤–Ω—é–≤–∞—á –≤–∏–±—Ä–∞–Ω–æ: {}", state.getFillerType());
        return true;
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω –≤–ª–∞—Å–Ω–∏–π –∫–æ–ª—ñ—Ä.
     */
    private boolean isCustomColor(ItemCharacteristicsState state) {
        String color = state.getColor();
        if (color == null) {
            return false;
        }

        // –î–û–î–ê–ù–û: –¥–µ—Ç–∞–ª—å–Ω–∏–π –ª–æ–≥—ñ–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–ª—å–æ—Ä—ñ–≤
        List<String> availableColors = state.getAvailableColors();
        log.debug("    - –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–ª—å–æ—Ä–∏: {}", availableColors);
        log.debug("    - –í–∏–±—Ä–∞–Ω–∏–π –∫–æ–ª—ñ—Ä: '{}'", color);

        // –Ø–∫—â–æ –∫–æ–ª—ñ—Ä –Ω–µ –≤ —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö, —Ç–æ —Ü–µ –≤–ª–∞—Å–Ω–∏–π –∫–æ–ª—ñ—Ä
        boolean isCustom = !availableColors.contains(color);
        log.debug("    - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ isCustomColor: '{}' -> {} (availableColors.size={})",
            color, isCustom, availableColors.size());
        return isCustom;
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω –Ω–∞–ø–æ–≤–Ω—é–≤–∞—á –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.
     */
    private boolean isFillerRequired(ItemCharacteristicsState state) {
        if (!state.isFillerSectionVisible()) {
            return false; // –°–µ–∫—Ü—ñ—è –≤–∑–∞–≥–∞–ª—ñ –Ω–µ–≤–∏–¥–∏–º–∞
        }

        String category = state.getItemCategory();
        if (category == null) {
            return false;
        }

        String lowerCategory = category.toLowerCase();
        boolean required = lowerCategory.contains("–¥—É–±–ª—è–Ω–∫–∏") || lowerCategory.contains("–∫—É—Ä—Ç–∫–∞");

        log.debug("    - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ isFillerRequired –¥–ª—è '{}': visible={}, required={}",
            category, state.isFillerSectionVisible(), required);

        return required;
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Ä—è–¥–æ–∫ –≤–∞–ª—ñ–¥–Ω–∏–π (–Ω–µ null —ñ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π).
     */
    private boolean isValidString(String value) {
        return value != null && !value.trim().isEmpty();
    }

    /**
     * –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó.
     */
    public record ValidationResult(boolean isValid, List<String> errors) {}
}
