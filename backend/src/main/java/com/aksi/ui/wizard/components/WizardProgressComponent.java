package com.aksi.ui.wizard.components;

import com.aksi.ui.wizard.domain.OrderWizardState;
import com.vaadin.flow.component.html.Div;
import com.vaadin.flow.component.html.H3;
import com.vaadin.flow.component.html.Span;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.progressbar.ProgressBar;

import lombok.extern.slf4j.Slf4j;

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É Order Wizard.
 * –ü–æ–∫–∞–∑—É—î –ø—Ä–æ–≥—Ä–µ—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, –ø–æ—Ç–æ—á–Ω–∏–π –µ—Ç–∞–ø —Ç–∞ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.
 */
@Slf4j
public class WizardProgressComponent extends VerticalLayout {

    // UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    private H3 currentStepTitle;
    private Span currentStepDescription;
    private ProgressBar progressBar;
    private Span progressText;
    private Div statusIndicator;
    private HorizontalLayout progressLayout;
    private Div errorMessage;

    // –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
    private OrderWizardState currentState;

    public WizardProgressComponent() {
        initializeComponent();
        createComponents();
        initializeLayout();
    }

    private void initializeComponent() {
        setPadding(true);
        setSpacing(true);
        setWidthFull();
        addClassName("wizard-progress-component");
        getElement().setAttribute("aria-label", "–ü—Ä–æ–≥—Ä–µ—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è");
    }

    private void createComponents() {
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –µ—Ç–∞–ø—É
        currentStepTitle = new H3("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...");
        currentStepTitle.addClassName("wizard-progress-title");
        currentStepTitle.getElement().setAttribute("aria-live", "polite");

        // –û–ø–∏—Å –ø–æ—Ç–æ—á–Ω–æ–≥–æ –µ—Ç–∞–ø—É
        currentStepDescription = new Span("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è wizard'–∞");
        currentStepDescription.addClassName("wizard-progress-description");
        currentStepDescription.getElement().setAttribute("aria-live", "polite");

        // –ü—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
        progressBar = new ProgressBar();
        progressBar.setMin(0);
        progressBar.setMax(100);
        progressBar.setValue(0);
        progressBar.setWidthFull();
        progressBar.addClassName("wizard-progress-bar");

        // –¢–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—É
        progressText = new Span("–ï—Ç–∞–ø 0 –∑ 4");
        progressText.addClassName("wizard-progress-text");

        // –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å—É
        statusIndicator = new Div();
        statusIndicator.addClassName("wizard-status-indicator");
        statusIndicator.getElement().setAttribute("aria-live", "polite");

        // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        errorMessage = new Div();
        errorMessage.addClassName("wizard-error-message");
        errorMessage.setVisible(false);
        errorMessage.getElement().setAttribute("role", "alert");

        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π –º–∞–∫–µ—Ç –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä—É —Ç–∞ —Ç–µ–∫—Å—Ç—É
        progressLayout = new HorizontalLayout(progressBar, progressText);
        progressLayout.setWidthFull();
        progressLayout.setAlignItems(Alignment.CENTER);
        progressLayout.expand(progressBar);
        progressLayout.addClassName("wizard-progress-layout");
    }

    private void initializeLayout() {
        add(currentStepTitle, currentStepDescription, progressLayout, statusIndicator, errorMessage);
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Å—Ç–∞–Ω—É wizard'–∞.
     */
    public void updateFromState(OrderWizardState state) {
        if (state == null) {
            log.warn("Cannot update progress from null state");
            return;
        }

        this.currentState = state;
        updateTitleAndDescription(state);
        updateProgressBar(state);
        updateProgressText(state);
        updateStatusIndicator(state);
        updateErrorDisplay(state);
        updateComponentStyles(state);
    }

    private void updateTitleAndDescription(OrderWizardState state) {
        currentStepTitle.setText(state.getCurrentStepTitle());
        currentStepDescription.setText(state.getCurrentStepDescription());

        log.debug("Updated progress title to: {}", state.getCurrentStepTitle());
    }

    private void updateProgressBar(OrderWizardState state) {
        int percentage = state.getProgressPercentage();
        progressBar.setValue(percentage);

        // –î–æ–¥–∞–≤–∞–Ω–Ω—è ARIA –∞—Ç—Ä–∏–±—É—Ç—ñ–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ
        progressBar.getElement().setAttribute("aria-valuenow", String.valueOf(percentage));
        progressBar.getElement().setAttribute("aria-valuetext",
            String.format("–ü—Ä–æ–≥—Ä–µ—Å %d –≤—ñ–¥—Å–æ—Ç–∫—ñ–≤, –µ—Ç–∞–ø %d –∑ %d",
                percentage, state.getCurrentStep() + 1, OrderWizardState.TOTAL_STEPS));

        log.debug("Updated progress bar to: {}%", percentage);
    }

    private void updateProgressText(OrderWizardState state) {
        progressText.setText(state.getProgressText());

        // –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –µ—Ç–∞–ø—ñ–≤
        if (state.getCompletedStepsCount() > 0) {
            String completedInfo = String.format(" (%d –∑–∞–≤–µ—Ä—à–µ–Ω–æ)", state.getCompletedStepsCount());
            progressText.setText(state.getProgressText() + completedInfo);
        }
    }

    private void updateStatusIndicator(OrderWizardState state) {
        // –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö —Å—Ç–∞—Ç—É—Å—ñ–≤
        statusIndicator.removeClassNames("status-loading", "status-error", "status-completed", "status-normal");
        statusIndicator.setText("");

        if (state.hasError()) {
            statusIndicator.addClassName("status-error");
            statusIndicator.setText("‚ùå –ü–æ–º–∏–ª–∫–∞");
        } else if (state.isCompleted()) {
            statusIndicator.addClassName("status-completed");
            statusIndicator.setText("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ");
        } else if (state.isInProgress()) {
            statusIndicator.addClassName("status-normal");
            statusIndicator.setText("üîÑ –í –ø—Ä–æ—Ü–µ—Å—ñ");
        }

        log.debug("Updated status indicator for state: completed={}, error={}",
                 state.isCompleted(), state.hasError());
    }

    private void updateErrorDisplay(OrderWizardState state) {
        if (state.hasError()) {
            errorMessage.setText("–ü–æ–º–∏–ª–∫–∞: " + state.getErrorMessage());
            errorMessage.setVisible(true);
            errorMessage.addClassName("error-visible");
        } else {
            errorMessage.setVisible(false);
            errorMessage.removeClassName("error-visible");
        }
    }

    private void updateComponentStyles(OrderWizardState state) {
        // –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö —Å—Ç–∏–ª—ñ–≤
        removeClassNames("wizard-progress-error", "wizard-progress-completed", "wizard-progress-loading");

        if (state.hasError()) {
            addClassName("wizard-progress-error");
        } else if (state.isCompleted()) {
            addClassName("wizard-progress-completed");
        }
    }

    /**
     * –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.
     */
    public void showLoading(boolean loading, String message) {
        if (loading) {
            addClassName("wizard-progress-loading");
            statusIndicator.removeClassNames("status-error", "status-completed", "status-normal");
            statusIndicator.addClassName("status-loading");
            statusIndicator.setText("‚è≥ " + (message != null ? message : "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è..."));
            progressBar.setIndeterminate(true);
        } else {
            removeClassName("wizard-progress-loading");
            progressBar.setIndeterminate(false);
            if (currentState != null) {
                updateStatusIndicator(currentState);
            }
        }
    }

    /**
     * –í–∏–¥—ñ–ª–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –µ—Ç–∞–ø—É.
     */
    public void highlightCurrentStep(boolean highlight) {
        if (highlight) {
            currentStepTitle.addClassName("wizard-progress-title-highlight");
            addClassName("wizard-progress-highlighted");
        } else {
            currentStepTitle.removeClassName("wizard-progress-title-highlight");
            removeClassName("wizard-progress-highlighted");
        }
    }

    /**
     * –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
     */
    public void showMessage(String message, MessageType type) {
        Div messageDiv = new Div();
        messageDiv.setText(message);
        messageDiv.addClassName("wizard-progress-message");

        switch (type) {
            case SUCCESS -> messageDiv.addClassName("message-success");
            case WARNING -> messageDiv.addClassName("message-warning");
            case ERROR -> messageDiv.addClassName("message-error");
            case INFO -> messageDiv.addClassName("message-info");
        }

        // –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º
        add(messageDiv);
        messageDiv.getElement().executeJs(
            "setTimeout(() => $0.style.opacity = '0', 3000); " +
            "setTimeout(() => $0.remove(), 3500);", messageDiv.getElement());
    }

    /**
     * –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –µ—Ç–∞–ø—É.
     */
    public void animateStepTransition() {
        addClassName("wizard-progress-transitioning");
        getElement().executeJs(
            "setTimeout(() => $0.classList.remove('wizard-progress-transitioning'), 500);",
            getElement());
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É.
     */
    public void setCompactMode(boolean compact) {
        if (compact) {
            addClassName("wizard-progress-compact");
            currentStepDescription.setVisible(false);
            setPadding(false);
        } else {
            removeClassName("wizard-progress-compact");
            currentStepDescription.setVisible(true);
            setPadding(true);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—É —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö.
     */
    public int getCurrentProgress() {
        return (int) progressBar.getValue();
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–º–∏–ª–∫—É.
     */
    public boolean isShowingError() {
        return errorMessage.isVisible();
    }

    /**
     * –û—á–∏—â–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏.
     */
    public void clearError() {
        errorMessage.setVisible(false);
        errorMessage.removeClassName("error-visible");
        removeClassName("wizard-progress-error");
    }

    /**
     * Enum –¥–ª—è —Ç–∏–ø—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.
     */
    public enum MessageType {
        SUCCESS, WARNING, ERROR, INFO
    }

    // Protected –º–µ—Ç–æ–¥–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    protected H3 getCurrentStepTitle() { return currentStepTitle; }
    protected Span getCurrentStepDescription() { return currentStepDescription; }
    protected ProgressBar getProgressBar() { return progressBar; }
    protected Span getProgressText() { return progressText; }
    protected Div getStatusIndicator() { return statusIndicator; }
    protected Div getErrorMessage() { return errorMessage; }
}
