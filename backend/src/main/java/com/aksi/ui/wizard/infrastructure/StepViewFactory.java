package com.aksi.ui.wizard.infrastructure;

import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Service;

import com.aksi.ui.wizard.dto.OrderWizardData;
import com.vaadin.flow.component.Component;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.html.H2;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;

import lombok.extern.slf4j.Slf4j;

/**
 * –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è view –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –µ—Ç–∞–ø—ñ–≤ wizard'–∞
 * –Ü–Ω–∫–∞–ø—Å—É–ª—é—î –ª–æ–≥—ñ–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –µ—Ç–∞–ø—ñ–≤.
 */
@Service
@Slf4j
public class StepViewFactory {

    private final ApplicationContext applicationContext;

    public StepViewFactory(ApplicationContext applicationContext) {
        this.applicationContext = applicationContext;
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è view –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –µ—Ç–∞–ø—É.
     */
    public Component createStepView(int stepNumber, OrderWizardData wizardData,
                                   StepViewCallbacks callbacks) {
        try {
            log.info("üèóÔ∏è –°–¢–í–û–†–ï–ù–ù–Ø VIEW: Creating view for step: {} with wizard data: hasClient={}, hasItems={}",
                stepNumber,
                wizardData.getSelectedClient() != null,
                wizardData.getItems() != null ? wizardData.getItems().size() : 0);

            return switch (stepNumber) {
                case 0 -> createStep1View(wizardData, callbacks);
                case 1 -> createStep2View(wizardData, callbacks);
                case 2 -> createStep3View(wizardData, callbacks);
                case 3 -> createStep4View(wizardData, callbacks);
                default -> createErrorView(stepNumber,
                    new IllegalArgumentException("–ù–µ–≤—ñ–¥–æ–º–∏–π –Ω–æ–º–µ—Ä –µ—Ç–∞–ø—É: " + stepNumber));
            };

        } catch (Exception e) {
            log.error("Error creating step view for step {}: {}", stepNumber, e.getMessage(), e);
            return createErrorView(stepNumber, e);
        }
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è view –¥–ª—è –µ—Ç–∞–ø—É 1 - –ö–ª—ñ—î–Ω—Ç —Ç–∞ –±–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è.
     */
    private Component createStep1View(OrderWizardData wizardData, StepViewCallbacks callbacks) {
        log.debug("Creating Step 1 view - Client and Order Info");

        try {
            // –°—Ç–≤–æ—Ä—é—î–º–æ callback —è–∫–∏–π –±—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è view
            Runnable stepCompletedCallback = () -> {
                callbacks.onStepCompletedWithData(wizardData);
            };

            com.aksi.ui.wizard.step1.ClientAndOrderInfoView view =
                new com.aksi.ui.wizard.step1.ClientAndOrderInfoView(
                    wizardData,
                    stepCompletedCallback,
                    applicationContext
                );

            log.debug("Step 1 view created successfully");
            return view;

        } catch (Exception e) {
            log.error("Error creating ClientAndOrderInfoView: {}", e.getMessage(), e);
            return createFallbackStep1View(wizardData, callbacks, e);
        }
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è view –¥–ª—è –µ—Ç–∞–ø—É 2 - –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–µ–¥–º–µ—Ç—ñ–≤.
     */
    private Component createStep2View(OrderWizardData wizardData, StepViewCallbacks callbacks) {
        log.debug("Creating Step 2 view - Items Manager");

        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏ –∑ ApplicationContext
            var serviceCategoryService = applicationContext.getBean(
                "serviceCategoryServiceImpl",
                com.aksi.domain.pricing.service.ServiceCategoryService.class);
            var priceListService = applicationContext.getBean(
                "priceListServiceImpl",
                com.aksi.domain.pricing.service.PriceListService.class);
            var characteristicsService = applicationContext.getBean(
                "itemCharacteristicsServiceImpl",
                com.aksi.domain.order.service.ItemCharacteristicsService.class);
            var catalogPriceModifierService = applicationContext.getBean(
                "catalogPriceModifierServiceImpl",
                com.aksi.domain.pricing.service.CatalogPriceModifierService.class);
            var priceCalculationService = applicationContext.getBean(
                "priceCalculationServiceImpl",
                com.aksi.domain.pricing.service.PriceCalculationService.class);
            var orderItemManagementService = applicationContext.getBean(
                "orderItemManagementServiceImpl",
                com.aksi.domain.order.service.order.OrderItemManagementService.class);

            var view = new com.aksi.ui.wizard.step2.ItemsManagerView(
                serviceCategoryService,
                priceListService,
                characteristicsService,
                catalogPriceModifierService,
                priceCalculationService,
                orderItemManagementService,
                wizardData,
                callbacks::onStepCompleted,
                callbacks::onStepBack
            );

            log.debug("Step 2 view created successfully");
            return view;

        } catch (Exception e) {
            log.error("Error creating ItemsManagerView: {}", e.getMessage(), e);
            return createFallbackStep2View(wizardData, callbacks, e);
        }
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è view –¥–ª—è –µ—Ç–∞–ø—É 3 - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
     */
    private Component createStep3View(OrderWizardData wizardData, StepViewCallbacks callbacks) {
        log.debug("Creating Step 3 view - Order Parameters");

        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ OrderService –∑ ApplicationContext
            var orderService = applicationContext.getBean(
                "orderServiceImpl",
                com.aksi.domain.order.service.OrderService.class);

            var view = new com.aksi.ui.wizard.step3.OrderParametersView(
                wizardData,
                orderService,
                callbacks::onStepCompletedWithData,
                callbacks::onStepBack,
                callbacks::onCancel
            );

            log.debug("Step 3 view created successfully");
            return view;

        } catch (Exception e) {
            log.error("Error creating OrderParametersView: {}", e.getMessage(), e);
            return createFallbackStep3View(wizardData, callbacks, e);
        }
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è view –¥–ª—è –µ—Ç–∞–ø—É 4 - –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.
     */
    private Component createStep4View(OrderWizardData wizardData, StepViewCallbacks callbacks) {
        log.debug("Creating Step 4 view - Confirmation");

        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ ConfirmationService –∑ ApplicationContext
            var confirmationService = applicationContext.getBean(
                "confirmationService",
                com.aksi.ui.wizard.step4.application.ConfirmationService.class);

            var view = new com.aksi.ui.wizard.step4.ConfirmationView(
                wizardData,
                confirmationService,
                callbacks::onWizardCompletedWithData,
                callbacks::onStepBack,
                callbacks::onCancel
            );

            log.debug("Step 4 view created successfully");
            return view;

        } catch (Exception e) {
            log.error("Error creating ConfirmationView: {}", e.getMessage(), e);
            return createFallbackStep4View(wizardData, callbacks, e);
        }
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è fallback view –¥–ª—è –µ—Ç–∞–ø—É 1.
     */
    private Component createFallbackStep1View(OrderWizardData wizardData,
                                             StepViewCallbacks callbacks, Exception error) {
        VerticalLayout fallback = new VerticalLayout();
        fallback.add(new H2("–ï—Ç–∞–ø 1: –ö–ª—ñ—î–Ω—Ç —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"));
        fallback.add("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: " + error.getMessage());

        Button nextButton = new Button("–î–∞–ª—ñ –¥–æ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤");
        nextButton.addClickListener(e -> callbacks.onStepCompleted());
        fallback.add(nextButton);

        log.warn("Using fallback view for step 1 due to error: {}", error.getMessage());
        return fallback;
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è fallback view –¥–ª—è –µ—Ç–∞–ø—É 2.
     */
    private Component createFallbackStep2View(OrderWizardData wizardData,
                                             StepViewCallbacks callbacks, Exception error) {
        VerticalLayout fallback = new VerticalLayout();
        fallback.add(new H2("–ï—Ç–∞–ø 2: –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–µ–¥–º–µ—Ç—ñ–≤"));
        fallback.add("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: " + error.getMessage());

        Button nextButton = new Button("–î–∞–ª—ñ –¥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤");
        nextButton.addClickListener(e -> callbacks.onStepCompleted());

        Button backButton = new Button("–ù–∞–∑–∞–¥ –¥–æ –∫–ª—ñ—î–Ω—Ç–∞");
        backButton.addClickListener(e -> callbacks.onStepBack());

        fallback.add(backButton, nextButton);

        log.warn("Using fallback view for step 2 due to error: {}", error.getMessage());
        return fallback;
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è fallback view –¥–ª—è –µ—Ç–∞–ø—É 3.
     */
    private Component createFallbackStep3View(OrderWizardData wizardData,
                                             StepViewCallbacks callbacks, Exception error) {
        VerticalLayout fallback = new VerticalLayout();
        fallback.add(new H2("–ï—Ç–∞–ø 3: –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"));
        fallback.add("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: " + error.getMessage());

        Button nextButton = new Button("–î–∞–ª—ñ –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è");
        nextButton.addClickListener(e -> callbacks.onStepCompletedWithData(wizardData));

        Button backButton = new Button("–ù–∞–∑–∞–¥ –¥–æ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤");
        backButton.addClickListener(e -> callbacks.onStepBack());

        fallback.add(backButton, nextButton);

        log.warn("Using fallback view for step 3 due to error: {}", error.getMessage());
        return fallback;
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è fallback view –¥–ª—è –µ—Ç–∞–ø—É 4.
     */
    private Component createFallbackStep4View(OrderWizardData wizardData,
                                             StepViewCallbacks callbacks, Exception error) {
        VerticalLayout fallback = new VerticalLayout();
        fallback.add(new H2("–ï—Ç–∞–ø 4: –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è"));
        fallback.add("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: " + error.getMessage());

        Button completeButton = new Button("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è");
        completeButton.addClickListener(e -> callbacks.onWizardCompleted());

        Button backButton = new Button("–ù–∞–∑–∞–¥ –¥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤");
        backButton.addClickListener(e -> callbacks.onStepBack());

        fallback.add(backButton, completeButton);

        log.warn("Using fallback view for step 4 due to error: {}", error.getMessage());
        return fallback;
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è view –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏.
     */
    private Component createErrorView(int stepNumber, Exception error) {
        VerticalLayout errorLayout = new VerticalLayout();
        errorLayout.addClassName("wizard-error-view");

        errorLayout.add(new H2("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –µ—Ç–∞–ø—É " + (stepNumber + 1)));
        errorLayout.add("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: " + error.getMessage());

        Button retryButton = new Button("–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑");
        retryButton.addClickListener(e -> {
            // –¶–µ–π –æ–±—Ä–æ–±–Ω–∏–∫ –º–∞—î –±—É—Ç–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –∑–æ–≤–Ω—ñ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è view
            log.info("Retry requested for step: {}", stepNumber);
        });

        errorLayout.add(retryButton);

        log.error("Created error view for step {}: {}", stepNumber, error.getMessage());
        return errorLayout;
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤ –¥–ª—è –µ—Ç–∞–ø—É.
     */
    public boolean isStepSupported(int stepNumber) {
        return stepNumber >= 0 && stepNumber <= 3;
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –µ—Ç–∞–ø—É.
     */
    public String getStepName(int stepNumber) {
        return switch (stepNumber) {
            case 0 -> "–ö–ª—ñ—î–Ω—Ç —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è";
            case 1 -> "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–µ–¥–º–µ—Ç—ñ–≤";
            case 2 -> "–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è";
            case 3 -> "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è";
            default -> "–ù–µ–≤—ñ–¥–æ–º–∏–π –µ—Ç–∞–ø";
        };
    }

    /**
     * Callback interface –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –º—ñ–∂ –µ—Ç–∞–ø–∞–º–∏ —Ç–∞ wizard'–æ–º.
     */
    public interface StepViewCallbacks {
        void onStepCompleted();
        void onStepCompletedWithData(OrderWizardData data);
        void onStepBack();
        void onCancel();
        void onWizardCompleted();
        void onWizardCompletedWithData(OrderWizardData data);
    }
}
