package com.aksi.ui.wizard.step4.components;

import java.util.function.Consumer;

import com.aksi.ui.wizard.step4.domain.ConfirmationState;
import com.vaadin.flow.component.checkbox.Checkbox;
import com.vaadin.flow.component.html.Anchor;
import com.vaadin.flow.component.html.Div;
import com.vaadin.flow.component.html.H4;
import com.vaadin.flow.component.html.Span;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;

import lombok.extern.slf4j.Slf4j;

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —é—Ä–∏–¥–∏—á–Ω–∏—Ö –∞—Å–ø–µ–∫—Ç—ñ–≤ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å: —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —É–≥–æ–¥–æ—é, –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏, —Ü–∏—Ñ—Ä–æ–≤–∏–π –ø—ñ–¥–ø–∏—Å.
 */
@Slf4j
public class AgreementComponent extends VerticalLayout {

    // UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    private Checkbox agreementCheckbox;
    private Anchor termsLink;
    private Div signatureInfo;
    private Div statusIndicator;

    // Callbacks
    private Consumer<Boolean> onAgreementChange;

    // –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
    private ConfirmationState currentState;

    public AgreementComponent() {
        initializeComponent();
        createComponents();
        initializeLayout();
        setupEventHandlers();
        log.debug("AgreementComponent —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
    }

    private void initializeComponent() {
        setPadding(false);
        setSpacing(true);
        setDefaultHorizontalComponentAlignment(Alignment.STRETCH);
        addClassName("agreement-component");
    }

    private void createComponents() {
        H4 sectionTitle = new H4("–Æ—Ä–∏–¥–∏—á–Ω—ñ –∞—Å–ø–µ–∫—Ç–∏");
        sectionTitle.getStyle().set("margin-top", "0");

        // –ß–µ–∫–±–æ–∫—Å —É–≥–æ–¥–∏
        agreementCheckbox = new Checkbox("–Ø –ø–æ–≥–æ–¥–∂—É—é—Å—å –∑ —É–º–æ–≤–∞–º–∏ –Ω–∞–¥–∞–Ω–Ω—è –ø–æ—Å–ª—É–≥");
        agreementCheckbox.addClassName("agreement-checkbox");
        agreementCheckbox.getStyle()
                .set("font-weight", "500")
                .set("font-size", "var(--lumo-font-size-m)");

        // –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏
        termsLink = new Anchor("#", "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —É–º–æ–≤–∏ –Ω–∞–¥–∞–Ω–Ω—è –ø–æ—Å–ª—É–≥");
        termsLink.setTarget("_blank");
        termsLink.addClassName("terms-link");
        termsLink.getStyle()
                .set("display", "block")
                .set("margin-top", "var(--lumo-space-s)")
                .set("color", "var(--lumo-primary-text-color)")
                .set("text-decoration", "underline");

        // –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ü–∏—Ñ—Ä–æ–≤–∏–π –ø—ñ–¥–ø–∏—Å
        signatureInfo = createSignatureInfoSection();

        // –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å—É
        statusIndicator = createStatusIndicator();

        add(sectionTitle, agreementCheckbox, termsLink, signatureInfo, statusIndicator);
    }

    private void initializeLayout() {
        getStyle()
                .set("background", "var(--lumo-contrast-5pct)")
                .set("padding", "var(--lumo-space-m)")
                .set("border-radius", "var(--lumo-border-radius-m)")
                .set("border", "1px solid var(--lumo-contrast-20pct)");
    }

    private Div createSignatureInfoSection() {
        Div section = new Div();
        section.addClassName("signature-info-section");
        section.getStyle()
                .set("background", "var(--lumo-primary-color-10pct)")
                .set("padding", "var(--lumo-space-s)")
                .set("border-radius", "var(--lumo-border-radius-s)")
                .set("margin-top", "var(--lumo-space-s)")
                .set("border-left", "3px solid var(--lumo-primary-color)");

        Span signatureText = new Span("‚úçÔ∏è –¶–∏—Ñ—Ä–æ–≤–∏–π –ø—ñ–¥–ø–∏—Å –±—É–¥–µ –≤–∫–ª—é—á–µ–Ω–æ –¥–æ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó");
        signatureText.getStyle()
                .set("font-size", "var(--lumo-font-size-s)")
                .set("color", "var(--lumo-primary-text-color)");

        Span signatureDetails = new Span("–ü—ñ–¥–ø–∏—Å —Ñ—ñ–∫—Å—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ –ø—Ä–∏–π–Ω—è—Ç—Ç—ñ —É–≥–æ–¥–∏");
        signatureDetails.getStyle()
                .set("font-size", "var(--lumo-font-size-xs)")
                .set("color", "var(--lumo-secondary-text-color)")
                .set("display", "block")
                .set("margin-top", "var(--lumo-space-xs)");

        section.add(signatureText, signatureDetails);
        return section;
    }

    private Div createStatusIndicator() {
        Div indicator = new Div();
        indicator.addClassName("agreement-status-indicator");
        indicator.getStyle()
                .set("margin-top", "var(--lumo-space-m)")
                .set("padding", "var(--lumo-space-s)")
                .set("border-radius", "var(--lumo-border-radius-s)")
                .set("text-align", "center")
                .set("font-weight", "500");

        return indicator;
    }

    private void setupEventHandlers() {
        agreementCheckbox.addValueChangeListener(event -> {
            boolean isAccepted = event.getValue();
            handleAgreementChange(isAccepted);
            if (onAgreementChange != null) {
                onAgreementChange.accept(isAccepted);
            }
        });
    }

    private void handleAgreementChange(boolean isAccepted) {
        updateStatusIndicator(isAccepted);
        updateSignatureInfoVisibility(isAccepted);
        log.debug("–£–≥–æ–¥–∞ –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞: {}", isAccepted);
    }

    /**
     * –û–Ω–æ–≤–ª—é—î –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É.
     */
    public void updateFromState(ConfirmationState state) {
        if (state == null) {
            log.warn("–°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ null state");
            return;
        }

        this.currentState = state;
        updateAgreementCheckbox(state);
        updateStatusIndicator(state.isAgreementAccepted());
        updateSignatureInfoVisibility(state.isAgreementAccepted());

        log.debug("AgreementComponent –æ–Ω–æ–≤–ª–µ–Ω–æ –∑ —Å—Ç–∞–Ω—É");
    }

    private void updateAgreementCheckbox(ConfirmationState state) {
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –±–µ–∑ —Ç—Ä–∏–≥–µ—Ä–∞ –ø–æ–¥—ñ–π
        agreementCheckbox.setValue(state.isAgreementAccepted());
    }

    private void updateStatusIndicator(boolean isAccepted) {
        statusIndicator.removeAll();

        if (isAccepted) {
            Span acceptedIcon = new Span("‚úÖ");
            Span acceptedText = new Span("–£–≥–æ–¥—É –ø—Ä–∏–π–Ω—è—Ç–æ");
            acceptedText.getStyle().set("margin-left", "var(--lumo-space-xs)");

            statusIndicator.getStyle()
                    .set("background", "var(--lumo-success-color-10pct)")
                    .set("color", "var(--lumo-success-text-color)")
                    .set("border", "1px solid var(--lumo-success-color-50pct)");

            statusIndicator.add(acceptedIcon, acceptedText);
        } else {
            Span pendingIcon = new Span("‚è≥");
            Span pendingText = new Span("–û—á—ñ–∫—É—î—Ç—å—Å—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è —É–º–æ–≤");
            pendingText.getStyle().set("margin-left", "var(--lumo-space-xs)");

            statusIndicator.getStyle()
                    .set("background", "var(--lumo-contrast-10pct)")
                    .set("color", "var(--lumo-secondary-text-color)")
                    .set("border", "1px solid var(--lumo-contrast-30pct)");

            statusIndicator.add(pendingIcon, pendingText);
        }
    }

    private void updateSignatureInfoVisibility(boolean isAccepted) {
        if (isAccepted) {
            signatureInfo.getStyle()
                    .set("opacity", "1")
                    .set("background", "var(--lumo-success-color-10pct)")
                    .set("border-left-color", "var(--lumo-success-color)");
        } else {
            signatureInfo.getStyle()
                    .set("opacity", "0.7")
                    .set("background", "var(--lumo-primary-color-10pct)")
                    .set("border-left-color", "var(--lumo-primary-color)");
        }
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î callback –¥–ª—è –∑–º—ñ–Ω–∏ —É–≥–æ–¥–∏.
     */
    public void setOnAgreementChange(Consumer<Boolean> callback) {
        this.onAgreementChange = callback;
        log.debug("Agreement change callback –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
    }

    /**
     * –ü–æ–∫–∞–∑—É—î —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.
     */
    public void showLoading(boolean loading) {
        agreementCheckbox.setEnabled(!loading);
        if (loading) {
            addClassName("loading-state");
        } else {
            removeClassName("loading-state");
        }
    }

    /**
     * –ü–æ–∫–∞–∑—É—î —Å—Ç–∞–Ω –ø–æ–º–∏–ª–∫–∏.
     */
    public void showError(boolean hasError) {
        if (hasError) {
            addClassName("error-state");
            statusIndicator.getStyle()
                    .set("background", "var(--lumo-error-color-10pct)")
                    .set("color", "var(--lumo-error-text-color)")
                    .set("border", "1px solid var(--lumo-error-color-50pct)");
        } else {
            removeClassName("error-state");
            updateStatusIndicator(currentState != null ? currentState.isAgreementAccepted() : false);
        }
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∫–æ–º–ø–∞–∫—Ç–Ω–∏–π —Ä–µ–∂–∏–º –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
     */
    public void setCompactMode(boolean compact) {
        if (compact) {
            addClassName("compact-mode");
            signatureInfo.setVisible(false);
        } else {
            removeClassName("compact-mode");
            signatureInfo.setVisible(true);
        }
        log.debug("–ö–æ–º–ø–∞–∫—Ç–Ω–∏–π —Ä–µ–∂–∏–º –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {}", compact);
    }

    /**
     * –ü—Ä–æ–≥—Ä–∞–º–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω —É–≥–æ–¥–∏.
     */
    public void setAgreementAccepted(boolean accepted) {
        agreementCheckbox.setValue(accepted);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø—Ä–∏–π–Ω—è—Ç–∞ —É–≥–æ–¥–∞.
     */
    public boolean isAgreementAccepted() {
        return agreementCheckbox.getValue();
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î URL –¥–ª—è —É–º–æ–≤ –Ω–∞–¥–∞–Ω–Ω—è –ø–æ—Å–ª—É–≥.
     */
    public void setTermsUrl(String url) {
        if (url != null && !url.trim().isEmpty()) {
            termsLink.setHref(url);
            termsLink.setVisible(true);
        } else {
            termsLink.setVisible(false);
        }
    }

    /**
     * –ü–æ–∫–∞–∑—É—î –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —É–≥–æ–¥—É.
     */
    public void showAgreementDetails(String details) {
        if (details != null && !details.trim().isEmpty()) {
            Span detailsSpan = new Span(details);
            detailsSpan.addClassName("agreement-details");
            detailsSpan.getStyle()
                    .set("font-size", "var(--lumo-font-size-xs)")
                    .set("color", "var(--lumo-secondary-text-color)")
                    .set("display", "block")
                    .set("margin-top", "var(--lumo-space-xs)");

            // –î–æ–¥–∞—î–º–æ –ø—ñ—Å–ª—è —á–µ–∫–±–æ–∫—Å–∞, —è–∫—â–æ —â–µ –Ω–µ –¥–æ–¥–∞–Ω–æ
            if (getChildren().noneMatch(component -> component.hasClassName("agreement-details"))) {
                addComponentAtIndex(2, detailsSpan); // –ü—ñ—Å–ª—è —á–µ–∫–±–æ–∫—Å–∞
            }
        }
    }

    // –ì–µ—Ç—Ç–µ—Ä–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    protected Checkbox getAgreementCheckbox() { return agreementCheckbox; }
    protected Anchor getTermsLink() { return termsLink; }
    protected Div getSignatureInfo() { return signatureInfo; }
    protected Div getStatusIndicator() { return statusIndicator; }
}
