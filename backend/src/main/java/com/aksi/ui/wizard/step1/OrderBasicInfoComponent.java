package com.aksi.ui.wizard.step1;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.UUID;
import java.util.function.Consumer;

import org.springframework.stereotype.Component;

import com.aksi.domain.branch.dto.BranchLocationDTO;
import com.aksi.domain.branch.service.BranchLocationService;
import com.vaadin.flow.component.combobox.ComboBox;
import com.vaadin.flow.component.formlayout.FormLayout;
import com.vaadin.flow.component.html.Div;
import com.vaadin.flow.component.html.H3;
import com.vaadin.flow.component.html.Hr;
import com.vaadin.flow.component.html.Span;
import com.vaadin.flow.component.icon.Icon;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.notification.Notification;
import com.vaadin.flow.component.notification.NotificationVariant;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.textfield.TextField;

import lombok.extern.slf4j.Slf4j;

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –∑–≥—ñ–¥–Ω–æ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é 1.2 "–ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è".
 *
 * –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å:
 * - –ù–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó (–≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)
 * - –£–Ω—ñ–∫–∞–ª—å–Ω–∞ –º—ñ—Ç–∫–∞ (–≤–≤–æ–¥–∏—Ç—å—Å—è –≤—Ä—É—á–Ω—É –∞–±–æ —Å–∫–∞–Ω—É—î—Ç—å—Å—è)
 * - –ü—É–Ω–∫—Ç –ø—Ä–∏–π–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–≤–∏–±—ñ—Ä —Ñ—ñ–ª—ñ—ó)
 * - –î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)
 */
@Component
@Slf4j
public class OrderBasicInfoComponent extends VerticalLayout {

    private final BranchLocationService branchLocationService;
    private final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");

    // UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    private FormLayout orderForm;
    private TextField receiptNumberField;
    private TextField tagNumberField;
    private ComboBox<BranchLocationDTO> branchSelector;
    private TextField creationDateField;

    // Callbacks
    private Consumer<String> onReceiptNumberChanged;
    private Consumer<String> onTagNumberChanged;
    private Consumer<BranchLocationDTO> onBranchChanged;

    public OrderBasicInfoComponent(BranchLocationService branchLocationService) {
        this.branchLocationService = branchLocationService;
        log.info("üèóÔ∏è –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø: OrderBasicInfoComponent —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è");

        initializeLayout();
        createComponents();
        setupEventHandlers();
        loadData();

        log.info("‚úÖ –ì–û–¢–û–í–û: OrderBasicInfoComponent —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
    }

    private void initializeLayout() {
        setWidthFull();
        setPadding(true);
        setSpacing(true);
        addClassName("order-basic-info");
        getStyle().set("background", "var(--lumo-contrast-5pct)")
                  .set("border-radius", "8px")
                  .set("padding", "2rem")
                  .set("margin-bottom", "1rem");
    }

    private void createComponents() {
        createHeader();
        createReceiptSection();
        createTagSection();
        createBranchSection();
        createDateSection();
    }

    private void createHeader() {
        HorizontalLayout header = new HorizontalLayout();
        header.setAlignItems(FlexComponent.Alignment.CENTER);
        header.setSpacing(true);
        header.setWidthFull();

        Icon documentIcon = VaadinIcon.CLIPBOARD_TEXT.create();
        documentIcon.setColor("var(--lumo-primary-color)");
        documentIcon.setSize("24px");

        H3 title = new H3("–ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è");
        title.getStyle().set("margin", "0")
                      .set("color", "var(--lumo-primary-text-color)")
                      .set("flex-grow", "1");

        Icon infoIcon = VaadinIcon.INFO_CIRCLE.create();
        infoIcon.setColor("var(--lumo-secondary-text-color)");
        infoIcon.setTooltipText("–ü–æ–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω—ñ * —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º–∏");

        header.add(documentIcon, title, infoIcon);
        add(header, new Hr());
    }

    private void createReceiptSection() {
        Div sectionTitle = createSectionTitle("–ù–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó", VaadinIcon.BARCODE);
        add(sectionTitle);

        orderForm = new FormLayout();
        orderForm.setResponsiveSteps(
            new FormLayout.ResponsiveStep("0", 1),
            new FormLayout.ResponsiveStep("600px", 2)
        );

        receiptNumberField = new TextField("–ù–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó *");
        receiptNumberField.setValue(generateReceiptNumber());
        receiptNumberField.setRequired(true);
        receiptNumberField.setPrefixComponent(VaadinIcon.BARCODE.create());
        receiptNumberField.setHelperText("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä");
        receiptNumberField.setReadOnly(true); // –¢—ñ–ª—å–∫–∏ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è, –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π

        orderForm.add(receiptNumberField);
        add(orderForm);
    }

    private void createTagSection() {
        Div sectionTitle = createSectionTitle("–£–Ω—ñ–∫–∞–ª—å–Ω–∞ –º—ñ—Ç–∫–∞", VaadinIcon.TAG);
        add(sectionTitle);

        FormLayout tagForm = new FormLayout();
        tagForm.setResponsiveSteps(
            new FormLayout.ResponsiveStep("0", 1),
            new FormLayout.ResponsiveStep("600px", 2)
        );

        tagNumberField = new TextField("–£–Ω—ñ–∫–∞–ª—å–Ω–∞ –º—ñ—Ç–∫–∞");
        tagNumberField.setPrefixComponent(VaadinIcon.TAG.create());
        tagNumberField.setPlaceholder("–í–≤–µ–¥—ñ—Ç—å –∞–±–æ —Å–∫–∞–Ω—É–π—Ç–µ –º—ñ—Ç–∫—É");
        tagNumberField.setHelperText("–ù–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ - –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç—ñ–≤");

        tagForm.add(tagNumberField);
        add(tagForm);
    }

    private void createBranchSection() {
        Div sectionTitle = createSectionTitle("–ü—É–Ω–∫—Ç –ø—Ä–∏–π–æ–º—É", VaadinIcon.BUILDING);
        add(sectionTitle);

        FormLayout branchForm = new FormLayout();
        branchForm.setResponsiveSteps(
            new FormLayout.ResponsiveStep("0", 1),
            new FormLayout.ResponsiveStep("600px", 2)
        );

        branchSelector = new ComboBox<>("–ü—É–Ω–∫—Ç –ø—Ä–∏–π–æ–º—É *");
        branchSelector.setItemLabelGenerator(branch ->
            String.format("%s - %s", branch.getName(), branch.getAddress()));
        branchSelector.setRequired(true);
        branchSelector.setPrefixComponent(VaadinIcon.BUILDING.create());
        branchSelector.setHelperText("–û–±–µ—Ä—ñ—Ç—å —Ñ—ñ–ª—ñ—é –¥–ª—è –ø—Ä–∏–π–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è");
        branchSelector.setPlaceholder("–û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –ø—Ä–∏–π–æ–º—É");

        branchForm.add(branchSelector);
        add(branchForm);
    }

    private void createDateSection() {
        Div sectionTitle = createSectionTitle("–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è", VaadinIcon.CALENDAR_CLOCK);
        add(sectionTitle);

        FormLayout dateForm = new FormLayout();
        dateForm.setResponsiveSteps(
            new FormLayout.ResponsiveStep("0", 1),
            new FormLayout.ResponsiveStep("600px", 2)
        );

        creationDateField = new TextField("–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è");
        creationDateField.setValue(LocalDateTime.now().format(dateTimeFormatter));
        creationDateField.setPrefixComponent(VaadinIcon.CALENDAR_CLOCK.create());
        creationDateField.setHelperText("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞ —Ç–∞ —á–∞—Å");
        creationDateField.setReadOnly(true); // –¢—ñ–ª—å–∫–∏ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è

        dateForm.add(creationDateField);
        add(dateForm);
    }

    private Div createSectionTitle(String title, VaadinIcon icon) {
        Div sectionDiv = new Div();
        sectionDiv.getStyle().set("margin-top", "1.5rem")
                           .set("margin-bottom", "1rem");

        HorizontalLayout sectionLayout = new HorizontalLayout();
        sectionLayout.setAlignItems(FlexComponent.Alignment.CENTER);
        sectionLayout.setSpacing(true);

        Icon sectionIcon = icon.create();
        sectionIcon.setColor("var(--lumo-primary-color)");
        sectionIcon.setSize("16px");

        Span sectionTitle = new Span(title);
        sectionTitle.getStyle().set("font-weight", "600")
                             .set("color", "var(--lumo-primary-text-color)");

        sectionLayout.add(sectionIcon, sectionTitle);
        sectionDiv.add(sectionLayout);

        return sectionDiv;
    }

    private void setupEventHandlers() {
        receiptNumberField.addValueChangeListener(e -> {
            log.info("üìã –ù–û–ú–ï–† –ö–í–ò–¢–ê–ù–¶–Ü–á: –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '{}'", e.getValue());
            if (onReceiptNumberChanged != null) {
                onReceiptNumberChanged.accept(e.getValue());
            }
        });

        tagNumberField.addValueChangeListener(e -> {
            log.info("üè∑Ô∏è –£–ù–Ü–ö–ê–õ–¨–ù–ê –ú–Ü–¢–ö–ê: –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '{}'", e.getValue());
            if (onTagNumberChanged != null) {
                onTagNumberChanged.accept(e.getValue());
            }
        });

        branchSelector.addValueChangeListener(e -> {
            BranchLocationDTO selectedBranch = e.getValue();
            if (selectedBranch != null) {
                log.info("üè¢ –§–Ü–õ–Ü–Ø: –æ–±—Ä–∞–Ω–æ '{}' ({})", selectedBranch.getName(), selectedBranch.getCode());
            } else {
                log.info("üè¢ –§–Ü–õ–Ü–Ø: –≤–∏–±—ñ—Ä —Å–∫–∞—Å–æ–≤–∞–Ω–æ");
            }
            if (onBranchChanged != null) {
                onBranchChanged.accept(selectedBranch);
            }
        });
    }

    private void loadData() {
        try {
            log.info("üîÑ –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø: –æ—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ñ—ñ–ª—ñ–π");
            List<BranchLocationDTO> branches = branchLocationService.getActiveBranchLocations();

            log.info("üìä –§–Ü–õ–Ü–á: –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {} –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ñ—ñ–ª—ñ–π", branches.size());
            branchSelector.setItems(branches);

            if (!branches.isEmpty()) {
                BranchLocationDTO defaultBranch = branches.get(0);
                branchSelector.setValue(defaultBranch);
                log.info("üéØ –§–Ü–õ–Ü–Ø –ó–ê –ó–ê–ú–û–í–ß–£–í–ê–ù–ù–Ø–ú: –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ '{}'", defaultBranch.getName());
            } else {
                log.warn("‚ö†Ô∏è –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø: –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ñ—ñ–ª—ñ–π");
                Notification notification = Notification.show("‚ö†Ô∏è –£–≤–∞–≥–∞: –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—É–Ω–∫—Ç—ñ–≤ –ø—Ä–∏–π–æ–º—É");
                notification.addThemeVariants(NotificationVariant.LUMO_CONTRAST);
                notification.setDuration(5000);
            }

        } catch (Exception e) {
            log.error("‚ùå –ü–û–ú–ò–õ–ö–ê: –Ω–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ—ñ–ª—ñ—ó", e);
            Notification notification = Notification.show("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ—ñ–ª—ñ–π: " + e.getMessage());
            notification.addThemeVariants(NotificationVariant.LUMO_ERROR);
            notification.setDuration(7000);
        }
    }

    private String generateReceiptNumber() {
        String receiptNumber = "RCP-" + LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd")) +
                              "-" + UUID.randomUUID().toString().substring(0, 6).toUpperCase();
        log.info("üÜî –ì–ï–ù–ï–†–ê–¶–Ü–Ø: —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó '{}'", receiptNumber);
        return receiptNumber;
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è.
     */
    public boolean isValid() {
        boolean hasReceiptNumber = receiptNumberField.getValue() != null &&
                                  !receiptNumberField.getValue().trim().isEmpty();
        boolean hasBranch = branchSelector.getValue() != null;

        boolean isValid = hasReceiptNumber && hasBranch;

        log.info("‚úÖ –í–ê–õ–Ü–î–ê–¶–Ü–Ø: —Ñ–æ—Ä–º–∞ {} (–Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó: {}, —Ñ—ñ–ª—ñ—è: {})",
                isValid ? "–≤–∞–ª—ñ–¥–Ω–∞" : "–Ω–µ–≤–∞–ª—ñ–¥–Ω–∞",
                hasReceiptNumber ? "‚úì" : "‚úó",
                hasBranch ? "‚úì" : "‚úó");

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
        if (!hasReceiptNumber) {
            receiptNumberField.setInvalid(true);
            receiptNumberField.setErrorMessage("–ù–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π");
        } else {
            receiptNumberField.setInvalid(false);
        }

        if (!hasBranch) {
            branchSelector.setInvalid(true);
            branchSelector.setErrorMessage("–ü—É–Ω–∫—Ç –ø—Ä–∏–π–æ–º—É –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π");
        } else {
            branchSelector.setInvalid(false);
        }

        return isValid;
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó.
     */
    public String getReceiptNumber() {
        return receiptNumberField.getValue() != null ? receiptNumberField.getValue().trim() : null;
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–º–µ—Ä –º—ñ—Ç–∫–∏.
     */
    public String getTagNumber() {
        String tagNumber = tagNumberField.getValue() != null ? tagNumberField.getValue().trim() : null;
        log.debug("üè∑Ô∏è –û–¢–†–ò–ú–ê–ù–ù–Ø: —É–Ω—ñ–∫–∞–ª—å–Ω–∞ –º—ñ—Ç–∫–∞ '{}'", tagNumber);
        return tagNumber;
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–±—Ä–∞–Ω—É —Ñ—ñ–ª—ñ—é.
     */
    public BranchLocationDTO getSelectedBranch() {
        BranchLocationDTO branch = branchSelector.getValue();
        if (branch != null) {
            log.debug("üè¢ –û–¢–†–ò–ú–ê–ù–ù–Ø: –≤–∏–±—Ä–∞–Ω–∞ —Ñ—ñ–ª—ñ—è '{}' (ID: {})", branch.getName(), branch.getId());
        }
        return branch;
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞—Ç—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
     */
    public LocalDateTime getCreationDate() {
        return LocalDateTime.now(); // –ó–∞–≤–∂–¥–∏ –ø–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó.
     */
    public void setReceiptNumber(String receiptNumber) {
        log.info("üìù –í–°–¢–ê–ù–û–í–õ–ï–ù–ù–Ø: –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó '{}'", receiptNumber);
        receiptNumberField.setValue(receiptNumber);
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–æ–º–µ—Ä –º—ñ—Ç–∫–∏.
     */
    public void setTagNumber(String tagNumber) {
        log.info("üìù –í–°–¢–ê–ù–û–í–õ–ï–ù–ù–Ø: —É–Ω—ñ–∫–∞–ª—å–Ω–∞ –º—ñ—Ç–∫–∞ '{}'", tagNumber);
        tagNumberField.setValue(tagNumber);
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤–∏–±—Ä–∞–Ω—É —Ñ—ñ–ª—ñ—é.
     */
    public void setSelectedBranch(BranchLocationDTO branch) {
        if (branch != null) {
            log.info("üìù –í–°–¢–ê–ù–û–í–õ–ï–ù–ù–Ø: —Ñ—ñ–ª—ñ—è '{}' ({})", branch.getName(), branch.getCode());
        }
        branchSelector.setValue(branch);
    }

    /**
     * –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó.
     */
    public void regenerateReceiptNumber() {
        String newReceiptNumber = generateReceiptNumber();
        setReceiptNumber(newReceiptNumber);
        log.info("üîÑ –†–ï–ì–ï–ù–ï–†–ê–¶–Ü–Ø: –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó '{}'", newReceiptNumber);
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç–∏ —Ñ–æ—Ä–º—É.
     */
    public void clearForm() {
        log.info("üßπ –û–ß–ò–©–ï–ù–ù–Ø: —Å–∫–∏–¥–∞—î–º–æ —Ñ–æ—Ä–º—É –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó");
        regenerateReceiptNumber();
        tagNumberField.clear();
        creationDateField.setValue(LocalDateTime.now().format(dateTimeFormatter));

        // –§—ñ–ª—ñ—é –Ω–µ –æ—á–∏—â–∞—î–º–æ, –∑–∞–ª–∏—à–∞—î–º–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        List<BranchLocationDTO> branches = branchLocationService.getActiveBranchLocations();
        if (!branches.isEmpty() && branchSelector.getValue() == null) {
            branchSelector.setValue(branches.get(0));
        }

        // –°–∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
        receiptNumberField.setInvalid(false);
        branchSelector.setInvalid(false);
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ callback –¥–ª—è –∑–º—ñ–Ω–∏ –Ω–æ–º–µ—Ä–∞ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó.
     */
    public void setOnReceiptNumberChanged(Consumer<String> onReceiptNumberChanged) {
        this.onReceiptNumberChanged = onReceiptNumberChanged;
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ callback –¥–ª—è –∑–º—ñ–Ω–∏ –Ω–æ–º–µ—Ä–∞ –º—ñ—Ç–∫–∏.
     */
    public void setOnTagNumberChanged(Consumer<String> onTagNumberChanged) {
        this.onTagNumberChanged = onTagNumberChanged;
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ callback –¥–ª—è –∑–º—ñ–Ω–∏ —Ñ—ñ–ª—ñ—ó.
     */
    public void setOnBranchChanged(Consumer<BranchLocationDTO> onBranchChanged) {
        this.onBranchChanged = onBranchChanged;
    }
}
