package com.aksi.ui.wizard.step2.substeps.photo_documentation.components;

import com.vaadin.flow.component.html.Div;
import com.vaadin.flow.component.html.H4;
import com.vaadin.flow.component.html.Span;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;

import lombok.extern.slf4j.Slf4j;

/**
 * UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π —â–æ–¥–æ —Ñ–æ—Ç–æ–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó.
 * –î–æ—Ç—Ä–∏–º—É—î—Ç—å—Å—è –ø—Ä–∏–Ω—Ü–∏–ø—É Single Responsibility Principle (SRP).
 */
@Slf4j
public class InstructionsComponent extends VerticalLayout {

    private Div instructionsPanel;
    private H4 instructionsTitle;

    public InstructionsComponent() {
        log.debug("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è InstructionsComponent");

        initializeLayout();
        createComponents();

        log.debug("InstructionsComponent —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ");
    }

    private void initializeLayout() {
        setPadding(false);
        setSpacing(false);
        setWidthFull();
    }

    private void createComponents() {
        // –û—Å–Ω–æ–≤–Ω–∞ –ø–∞–Ω–µ–ª—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π
        instructionsPanel = new Div();
        instructionsPanel.getStyle()
            .set("background", "var(--lumo-primary-color-10pct)")
            .set("padding", "var(--lumo-space-m)")
            .set("border-radius", "var(--lumo-border-radius-m)")
            .set("border-left", "4px solid var(--lumo-primary-color)")
            .set("margin-bottom", "var(--lumo-space-m)");

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        instructionsTitle = new H4("–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —â–æ–¥–æ —Ñ–æ—Ç–æ–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó");
        instructionsTitle.getStyle()
            .set("margin-top", "0")
            .set("margin-bottom", "var(--lumo-space-s)")
            .set("color", "var(--lumo-primary-text-color)");

        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π
        Div instructionsList = createInstructionsList();

        instructionsPanel.add(instructionsTitle, instructionsList);
        add(instructionsPanel);
    }

    private Div createInstructionsList() {
        Div instructionsList = new Div();

        instructionsList.add(
            createInstructionItem("üì∑", "–ó—Ä–æ–±—ñ—Ç—å —Ñ–æ—Ç–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –∑ —Ä—ñ–∑–Ω–∏—Ö —Ä–∞–∫—É—Ä—Å—ñ–≤"),
            createInstructionItem("üîç", "–°—Ñ–æ–∫—É—Å—É–π—Ç–µ—Å—è –Ω–∞ –¥–µ—Ñ–µ–∫—Ç–∞—Ö —ñ –∑–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è—Ö"),
            createInstructionItem("üìê", "–ú–∞–∫—Å–∏–º—É–º 5 —Ñ–æ—Ç–æ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç"),
            createInstructionItem("üíæ", "–†–æ–∑–º—ñ—Ä –∫–æ–∂–Ω–æ–≥–æ —Ñ–æ—Ç–æ –¥–æ 5 –ú–ë"),
            createInstructionItem("‚ú®", "–§–æ—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–∏—Å–∫—É—é—Ç—å—Å—è –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è")
        );

        return instructionsList;
    }

    private Div createInstructionItem(String icon, String text) {
        Div item = new Div();
        item.getStyle()
            .set("margin-bottom", "var(--lumo-space-xs)")
            .set("display", "flex")
            .set("align-items", "center");

        Span iconSpan = new Span(icon);
        iconSpan.getStyle()
            .set("margin-right", "var(--lumo-space-s)")
            .set("font-size", "1.2em")
            .set("flex-shrink", "0");

        Span textSpan = new Span(text);
        textSpan.getStyle()
            .set("color", "var(--lumo-body-text-color)")
            .set("line-height", "1.4");

        item.add(iconSpan, textSpan);
        return item;
    }

    /**
     * –û–Ω–æ–≤–ª—é—î –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ –≤ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è—Ö.
     */
    public void updateMaxPhotos(int maxPhotos) {
        log.debug("–û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ñ–æ—Ç–æ: {}", maxPhotos);

        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é
        instructionsPanel.removeAll();
        instructionsPanel.add(instructionsTitle, createUpdatedInstructionsList(maxPhotos));
    }

    /**
     * –û–Ω–æ–≤–ª—é—î –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –≤ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è—Ö.
     */
    public void updateMaxFileSize(int maxFileSizeMB) {
        log.debug("–û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª—É: {} –ú–ë", maxFileSizeMB);

        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é
        instructionsPanel.removeAll();
        instructionsPanel.add(instructionsTitle, createUpdatedInstructionsList(5, maxFileSizeMB));
    }

    /**
     * –û–Ω–æ–≤–ª—é—î –æ–±–∏–¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ.
     */
    public void updateInstructions(int maxPhotos, int maxFileSizeMB) {
        log.debug("–û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π: {} —Ñ–æ—Ç–æ, {} –ú–ë", maxPhotos, maxFileSizeMB);

        instructionsPanel.removeAll();
        instructionsPanel.add(instructionsTitle, createUpdatedInstructionsList(maxPhotos, maxFileSizeMB));
    }

    private Div createUpdatedInstructionsList(int maxPhotos) {
        return createUpdatedInstructionsList(maxPhotos, 5);
    }

    private Div createUpdatedInstructionsList(int maxPhotos, int maxFileSizeMB) {
        Div instructionsList = new Div();

        instructionsList.add(
            createInstructionItem("üì∑", "–ó—Ä–æ–±—ñ—Ç—å —Ñ–æ—Ç–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –∑ —Ä—ñ–∑–Ω–∏—Ö —Ä–∞–∫—É—Ä—Å—ñ–≤"),
            createInstructionItem("üîç", "–°—Ñ–æ–∫—É—Å—É–π—Ç–µ—Å—è –Ω–∞ –¥–µ—Ñ–µ–∫—Ç–∞—Ö —ñ –∑–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è—Ö"),
            createInstructionItem("üìê", String.format("–ú–∞–∫—Å–∏–º—É–º %d —Ñ–æ—Ç–æ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç", maxPhotos)),
            createInstructionItem("üíæ", String.format("–†–æ–∑–º—ñ—Ä –∫–æ–∂–Ω–æ–≥–æ —Ñ–æ—Ç–æ –¥–æ %d –ú–ë", maxFileSizeMB)),
            createInstructionItem("‚ú®", "–§–æ—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–∏—Å–∫—É—é—Ç—å—Å—è –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è")
        );

        return instructionsList;
    }

    /**
     * –ü–æ–∫–∞–∑—É—î –∞–±–æ —Ö–æ–≤–∞—î –∫–æ–º–ø–æ–Ω–µ–Ω—Ç.
     */
    public void setVisible(boolean visible) {
        super.setVisible(visible);
        log.debug("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π {}", visible ? "–ø–æ–∫–∞–∑–∞–Ω–∏–π" : "—Å—Ö–æ–≤–∞–Ω–∏–π");
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∫–∞—Å—Ç–æ–º–Ω–∏–π —Å—Ç–∏–ª—å –ø–∞–Ω–µ–ª—ñ.
     */
    public void setCustomStyle(String backgroundColor, String borderColor) {
        instructionsPanel.getStyle()
            .set("background", backgroundColor)
            .set("border-left", "4px solid " + borderColor);

        log.debug("–ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –∫–∞—Å—Ç–æ–º–Ω–∏–π —Å—Ç–∏–ª—å: —Ñ–æ–Ω={}, —Ä–∞–º–∫–∞={}", backgroundColor, borderColor);
    }

    /**
     * –î–æ–¥–∞—î –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é.
     */
    public void addCustomInstruction(String icon, String text) {
        log.debug("–î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ—ó —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó: {}", text);

        Div currentInstructions = (Div) instructionsPanel.getChildren()
                .filter(component -> component instanceof Div)
                .findFirst()
                .orElse(null);

        if (currentInstructions != null) {
            currentInstructions.add(createInstructionItem(icon, text));
        }
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∑–∞–≥–æ–ª–æ–≤–æ–∫ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π.
     */
    public void setInstructionsTitle(String title) {
        instructionsTitle.setText(title);
        log.debug("–û–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π: {}", title);
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Ä–µ–∂–∏–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
     */
    public void setCompactMode(boolean compact) {
        if (compact) {
            instructionsPanel.getStyle()
                .set("padding", "var(--lumo-space-s)")
                .set("margin-bottom", "var(--lumo-space-s)");

            instructionsTitle.getStyle()
                .set("font-size", "1.1em")
                .set("margin-bottom", "var(--lumo-space-xs)");
        } else {
            instructionsPanel.getStyle()
                .set("padding", "var(--lumo-space-m)")
                .set("margin-bottom", "var(--lumo-space-m)");

            instructionsTitle.getStyle()
                .remove("font-size")
                .set("margin-bottom", "var(--lumo-space-s)");
        }

        log.debug("–†–µ–∂–∏–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {}", compact);
    }

    /**
     * –í–∏–¥—ñ–ª—è—î –≤–∞–∂–ª–∏–≤—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é.
     */
    public void highlightImportantInstructions() {
        instructionsPanel.getStyle()
            .set("background", "var(--lumo-warning-color-10pct)")
            .set("border-left", "4px solid var(--lumo-warning-color)");

        instructionsTitle.getStyle()
            .set("color", "var(--lumo-warning-text-color)");

        log.debug("–í–∏–¥—ñ–ª–µ–Ω–æ –≤–∞–∂–ª–∏–≤—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó");
    }

    /**
     * –ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Å—Ç–∏–ª—å.
     */
    public void resetToDefaultStyle() {
        instructionsPanel.getStyle()
            .set("background", "var(--lumo-primary-color-10pct)")
            .set("border-left", "4px solid var(--lumo-primary-color)");

        instructionsTitle.getStyle()
            .set("color", "var(--lumo-primary-text-color)");

        log.debug("–ü–æ–≤–µ—Ä–Ω–µ–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Å—Ç–∏–ª—å");
    }
}
