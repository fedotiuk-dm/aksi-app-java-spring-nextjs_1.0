package com.aksi.config;

import java.util.Arrays;
import java.util.List;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

/**
 * –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Spring Security –¥–ª—è AKSI Dry Cleaning Order System.
 *
 * –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:
 * - OpenAPI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
 * - CORS –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –¥–ª—è frontend
 * - –ü—Ä–æ—Ñ—ñ–ª—å —Ä–æ–∑—Ä–æ–±–∫–∏ (dev) –º–∞—î –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –±–µ–∑–ø–µ–∫—É
 * - Production –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é
 */
@Slf4j
@Configuration
@EnableWebSecurity
@RequiredArgsConstructor
public class SecurityConfig {

    private final Environment environment;

    /**
     * Password encoder –¥–ª—è —Ö–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—ñ–≤
     * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î BCrypt algorithm –∑ —Å–∏–ª–æ—é 12
     */
    @Bean
    public PasswordEncoder passwordEncoder() {
        log.info("üîê Configuring BCrypt PasswordEncoder with strength 12");
        return new BCryptPasswordEncoder(12);
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ dev –ø—Ä–æ—Ñ—ñ–ª—å
        boolean isDevProfile = Arrays.asList(environment.getActiveProfiles()).contains("dev");

        log.info("üîí Configuring Security for profiles: {}",
                 Arrays.toString(environment.getActiveProfiles()));

        http
            // CORS –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
            .cors(cors -> cors.configurationSource(corsConfigurationSource()))

            // CSRF –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–ª—è REST API
            .csrf(csrf -> csrf.disable())

            // Session management - stateless –¥–ª—è REST API
            .sessionManagement(session ->
                session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))

            // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—ñ–≤
            .authorizeHttpRequests(authz -> {
                if (isDevProfile) {
                    // DEV –ø—Ä–æ—Ñ—ñ–ª—å - –¥–æ–∑–≤–æ–ª—è—î–º–æ –≤—Å–µ –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏
                    log.info("üîì DEV mode: allowing all requests");
                    authz.anyRequest().permitAll();
                } else {
                    // PRODUCTION –ø—Ä–æ—Ñ—ñ–ª—å - –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ –±–µ–∑–ø–µ–∫–∞
                    authz
                        // –ü—É–±–ª—ñ—á–Ω—ñ endpoints (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó)
                        .requestMatchers(
                            // OpenAPI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è
                            "/v3/api-docs/**",
                            "/swagger-ui/**",
                            "/swagger-ui.html",
                            "/swagger-resources/**",
                            "/webjars/**",

                            // Health checks
                            "/actuator/health/**",
                            "/actuator/info",

                            // –°—Ç–∞—Ç–∏—á–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏
                            "/favicon.ico",
                            "/error"
                        ).permitAll()

                        // –í—Å—ñ —ñ–Ω—à—ñ requests –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
                        .anyRequest().authenticated();
                }
            });

        // HTTP Basic –¥–ª—è development (—Ç–∏–º—á–∞—Å–æ–≤–æ)
        if (!isDevProfile) {
            http.httpBasic(basic -> {});
        }

        return http.build();
    }

    /**
     * CORS –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ frontend
     */
    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();

        // –î–æ–∑–≤–æ–ª–µ–Ω—ñ origins (frontend URLs)
        configuration.setAllowedOriginPatterns(List.of(
            "http://localhost:3000",     // Next.js dev server
            "http://localhost",          // Traefik frontend
            "https://aksi.com.ua",       // Production frontend
            "https://*.aksi.com.ua"      // Production subdomains
        ));

        // –î–æ–∑–≤–æ–ª–µ–Ω—ñ HTTP –º–µ—Ç–æ–¥–∏
        configuration.setAllowedMethods(List.of(
            "GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"
        ));

        // –î–æ–∑–≤–æ–ª–µ–Ω—ñ headers
        configuration.setAllowedHeaders(List.of("*"));

        // –î–æ–∑–≤–æ–ª—è—î–º–æ credentials (cookies, authorization headers)
        configuration.setAllowCredentials(true);

        // –ö–µ—à—É–≤–∞–Ω–Ω—è preflight –∑–∞–ø–∏—Ç—ñ–≤
        configuration.setMaxAge(3600L);

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);

        log.info("üåê CORS configured for origins: {}", configuration.getAllowedOriginPatterns());

        return source;
    }
}
