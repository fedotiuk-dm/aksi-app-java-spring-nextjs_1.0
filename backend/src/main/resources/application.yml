server:
  port: 8080

spring:
  application:
    name: dry-cleaning-order-system

  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/aksi_cleaners_db_v5}
    username: ${SPRING_DATASOURCE_USERNAME:aksi_user}
    password: ${SPRING_DATASOURCE_PASSWORD:1911}
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true

  liquibase:
    change-log: classpath:db/changelog/db.changelog-master.yaml
    enabled: true

  # DevTools configuration for hot reload
  devtools:
    restart:
      enabled: true
      additional-paths: src/main/java
      exclude: static/**,public/**
    livereload:
      enabled: true
      port: 35729

  security:
    user:
      name: admin
      password: admin123
      roles: ADMIN

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

# OpenAPI Documentation
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
    tagsSorter: alpha

# Actuator endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when-authorized

# Logging
logging:
  level:
    com.aksi: DEBUG
    org.springframework.security: DEBUG
    org.springframework.boot: INFO
    org.springframework.boot.web.embedded.tomcat: INFO
    org.springframework.context: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/application.log

# CORS Configuration
cors:
  allowed-origins: "http://localhost:3000,http://localhost:3001,http://127.0.0.1:3000"

# Application Configuration
application:
  security:
    jwt:
      secret: ${JWT_SECRET:eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0}
      access-token-expiration: PT15M # 15 minutes
      refresh-token-expiration: P7D # 7 days
      issuer: AKSI Dry Cleaning System

---
# Development profile
spring:
  config:
    activate:
      on-profile: dev

  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/aksi_cleaners_db_v5}
    username: ${SPRING_DATASOURCE_USERNAME:aksi_user}
    password: ${SPRING_DATASOURCE_PASSWORD:1911}

  jpa:
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true

  # Liquibase для dev - стабільна схема
  liquibase:
    enabled: true # Liquibase увімкнений але без drop-first
    # drop-first: true # ВІДКЛЮЧЕНО: призводить до постійних recreate при DevTools restart

  # Disable mail health check in dev
  mail:
    test-connection: false

# Actuator для dev
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always

# DEV РЕЖИМ - докладні логи для діагностики
logging:
  level:
    root: INFO # Показувати основну інформацію
    com.aksi: DEBUG # Наш код - детальне логування
    org.springframework.boot: INFO # Spring Boot запуск
    org.springframework.boot.web.embedded.tomcat: INFO # Tomcat startup
    org.springframework.context: INFO # Context initialization
    org.springframework.security: DEBUG # Security налаштування
    org.hibernate: WARN # Hibernate - тільки попередження
    liquibase: INFO # Liquibase міграції
    org.postgresql: WARN # PostgreSQL
    com.zaxxer.hikari: INFO # HikariCP connection pool
    org.openapitools: WARN # OpenAPI генератор
  pattern:
    console: "%clr(%d{HH:mm:ss.SSS}){faint} %clr(%5p) %clr([%t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
