openapi: 3.1.1
info:
  title: User API
  description: User management API for system operators
  version: 1.0.0
  contact:
    name: API Support
    email: support@dryclean.example.com

servers:
  - url: http://localhost:8080
    description: Local development
  - url: https://api.dryclean.example.com
    description: Production

tags:
  - name: users
    description: User management operations

paths:
  /api/users:
    get:
      operationId: listUsers
      summary: List users
      description: Get paginated list of users with filtering
      tags:
        - users
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/SortBy'
        - $ref: '#/components/parameters/SortOrder'
        - name: search
          in: query
          description: Search by username, first name, or last name
          required: false
          schema:
            type: string
            example: ivan
        - name: role
          in: query
          description: Filter by role
          required: false
          schema:
            $ref: '#/components/schemas/UserRole'
        - name: branchId
          in: query
          description: Filter by branch
          required: false
          schema:
            type: string
            format: uuid
        - name: active
          in: query
          description: Filter by active status
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    
    post:
      operationId: createUser
      summary: Create new user
      description: Create a new system user
      tags:
        - users
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'

  /api/users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: User ID
        schema:
          type: string
          format: uuid
    
    get:
      operationId: getUserById
      summary: Get user details
      description: Get detailed information about a user
      tags:
        - users
      security:
        - cookieAuth: []
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    
    patch:
      operationId: updateUser
      summary: Update user
      description: Update user information
      tags:
        - users
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
  
  /api/users/{userId}/password:
    parameters:
      - name: userId
        in: path
        required: true
        description: User ID
        schema:
          type: string
          format: uuid
    
    put:
      operationId: changePassword
      summary: Change user password
      description: Change password for a user
      tags:
        - users
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '204':
          description: Password changed successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /api/users/{userId}/activate:
    parameters:
      - name: userId
        in: path
        required: true
        description: User ID
        schema:
          type: string
          format: uuid
    
    post:
      operationId: activateUser
      summary: Activate user
      description: Activate a deactivated user
      tags:
        - users
      security:
        - cookieAuth: []
      responses:
        '200':
          description: User activated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
  
  /api/users/{userId}/deactivate:
    parameters:
      - name: userId
        in: path
        required: true
        description: User ID
        schema:
          type: string
          format: uuid
    
    post:
      operationId: deactivateUser
      summary: Deactivate user
      description: Deactivate an active user
      tags:
        - users
      security:
        - cookieAuth: []
      responses:
        '200':
          description: User deactivated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
  
  /api/users/{userId}/roles:
    parameters:
      - name: userId
        in: path
        required: true
        description: User ID
        schema:
          type: string
          format: uuid
    
    put:
      operationId: updateUserRoles
      summary: Update user roles
      description: Replace user roles with new set
      tags:
        - users
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRolesRequest'
      responses:
        '200':
          description: Roles updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /api/users/{userId}/branches:
    parameters:
      - name: userId
        in: path
        required: true
        description: User ID
        schema:
          type: string
          format: uuid
    
    get:
      operationId: getUserBranches
      summary: Get user branches
      description: List branches assigned to user
      tags:
        - users
      security:
        - cookieAuth: []
      responses:
        '200':
          description: List of branches
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBranchesResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      operationId: updateUserBranches
      summary: Update user branches
      description: Replace user branch assignments
      tags:
        - users
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBranchesRequest'
      responses:
        '200':
          description: Branches updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBranchesResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  parameters:
    PageNumber:
      name: page
      in: query
      description: Page number (0-based)
      schema:
        type: integer
        minimum: 0
        default: 0
    
    PageSize:
      name: size
      in: query
      description: Page size
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    
    SortBy:
      name: sortBy
      in: query
      description: Field to sort by
      schema:
        type: string
        default: createdAt
        example: lastName

    SortOrder:
      name: sortOrder
      in: query
      description: Sort order
      schema:
        type: string
        enum: [asc, desc]
        default: desc
  
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    Unauthorized:
      description: Unauthorized access
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    Forbidden:
      description: Forbidden access
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    Conflict:
      description: Resource conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:
    UserRole:
      type: string
      enum:
        - OPERATOR
        - MANAGER
        - ADMIN
        - CLEANER
        - DRIVER
        - ACCOUNTANT
      description: |
        User roles:
        * `OPERATOR` - Order acceptance operator
        * `MANAGER` - Branch manager
        * `ADMIN` - System administrator
        * `CLEANER` - Cleaning specialist
        * `DRIVER` - Delivery driver
        * `ACCOUNTANT` - Financial specialist
    
    UserSummary:
      type: object
      required:
        - id
        - username
        - firstName
        - lastName
        - email
        - roles
        - active
        - createdAt
      properties:
        id:
          type: string
          format: uuid
          description: User ID
        username:
          type: string
          description: Username
          example: operator1
        firstName:
          type: string
          description: First name
          example: Ivan
        lastName:
          type: string
          description: Last name
          example: Petrenko
        email:
          type: string
          format: email
          description: Email address
          example: ivan.petrenko@example.com
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
          minItems: 1
        active:
          type: boolean
          description: Is user active
        # Primary branch can be determined from branches array where isPrimary=true
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        lastLoginAt:
          type: string
          nullable: true
          format: date-time
          description: Last login timestamp
    
    UserDetail:
      allOf:
        - $ref: '#/components/schemas/UserSummary'
        - type: object
          required:
            - branches
            - updatedAt
          properties:
            phone:
              type: string
              nullable: true
              pattern: '^\+?[0-9]{10,15}$'
              description: Phone number
              example: '+380501234567'
            # Permissions can be calculated by frontend based on roles or fetched via separate endpoint
            branches:
              type: array
              items:
                $ref: '#/components/schemas/BranchAssignment'
              description: Assigned branches
            updatedAt:
              type: string
              format: date-time
              description: Last update timestamp
            createdBy:
              type: string
              format: uuid
              description: ID of user who created this user
            updatedBy:
              type: string
              nullable: true
              format: uuid
              description: ID of user who last updated this user
    
    BranchAssignment:
      type: object
      required:
        - branchId
        - branchName
        - isPrimary
      properties:
        branchId:
          type: string
          format: uuid
          description: Branch ID
        branchName:
          type: string
          description: Branch name
          example: Main Street Branch
        isPrimary:
          type: boolean
          description: Is this the primary branch
    
    CreateUserRequest:
      type: object
      required:
        - username
        - password
        - firstName
        - lastName
        - email
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_]+$'
          description: Username (must be unique)
          example: operator1
          x-spring-validation: '@Username'
        password:
          type: string
          minLength: 8
          maxLength: 100
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$'
          description: Password (min 8 chars, must contain uppercase, lowercase, number and special char)
          example: SecurePassword123!
          x-spring-validation: '@StrongPassword'
        firstName:
          type: string
          minLength: 1
          maxLength: 100
          pattern: '^[a-zA-Z\u0400-\u04FF\s\-]+$'
          description: First name (letters only)
          example: Ivan
        lastName:
          type: string
          minLength: 1
          maxLength: 100
          pattern: '^[a-zA-Z\u0400-\u04FF\s\-]+$'
          description: Last name (letters only)
          example: Petrenko
        email:
          type: string
          format: email
          maxLength: 255
          description: Email address (must be unique)
          example: ivan.petrenko@example.com
          x-spring-validation: '@Email @UniqueEmail'
        phone:
          type: string
          nullable: true
          pattern: '^\+?[0-9]{10,15}$'
          description: Phone number (optional, international format)
          example: '+380501234567'
          default: null
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
          minItems: 1
          maxItems: 10
          description: User roles (defaults to OPERATOR if not specified)
          default: ['OPERATOR']
          x-spring-default: '#{T(java.util.List).of(T(com.aksi.api.user.dto.UserRole).OPERATOR)}'
        branchIds:
          type: array
          items:
            type: string
            format: uuid
          maxItems: 50
          description: Branch IDs to assign (optional)
          default: []
        primaryBranchId:
          type: string
          nullable: true
          format: uuid
          description: Primary branch ID (must be in branchIds if provided)
          default: null
          x-spring-validation: '@ValidPrimaryBranch'
        active:
          type: boolean
          description: Account active status
          default: true
          x-spring-hidden: true
        emailVerified:
          type: boolean
          description: Email verification status
          default: false
          x-spring-hidden: true
    
    UpdateUserRequest:
      type: object
      minProperties: 1
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 100
          description: First name
        lastName:
          type: string
          minLength: 1
          maxLength: 100
          description: Last name
        email:
          type: string
          format: email
          description: Email address
        phone:
          type: string
          nullable: true
          pattern: '^\+?[0-9]{10,15}$'
          description: Phone number
    
    ChangePasswordRequest:
      type: object
      required:
        - newPassword
      properties:
        currentPassword:
          type: string
          description: Current password (required if changing own password)
        newPassword:
          type: string
          minLength: 8
          maxLength: 100
          description: New password
          example: NewSecurePassword123!
    
    UpdateRolesRequest:
      type: object
      required:
        - roles
      properties:
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
          minItems: 1
          description: New set of roles
    
    UpdateBranchesRequest:
      type: object
      required:
        - branchIds
      properties:
        branchIds:
          type: array
          items:
            type: string
            format: uuid
          description: Branch IDs to assign
        primaryBranchId:
          type: string
          nullable: true
          format: uuid
          description: Primary branch ID (must be in branchIds if provided)
    
    UserBranchesResponse:
      type: object
      required:
        - branches
      properties:
        branches:
          type: array
          items:
            $ref: '#/components/schemas/BranchAssignment'
    
    # Error schemas
    ErrorDetail:
      type: object
      required:
        - field
        - message
      properties:
        field:
          type: string
          description: Field with error
          example: username
        message:
          type: string
          description: Field error message
          example: Username already exists
    
    ErrorResponse:
      type: object
      required:
        - timestamp
        - status
        - error
        - message
        - path
      properties:
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
        status:
          type: integer
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Error name
          example: Bad Request
        message:
          type: string
          description: Error message
          example: Validation failed
        path:
          type: string
          description: Request path
          example: /api/users
        errors:
          type: ['array', 'null']
          items:
            $ref: '#/components/schemas/ErrorDetail'
    
    # Pagination schema
    PaginatedResponse:
      type: object
      required:
        - data
        - totalElements
        - totalPages
        - size
        - number
        - numberOfElements
        - first
        - last
        - empty
      properties:
        data:
          type: array
          items: {}
          description: Page content
        totalElements:
          type: integer
          format: int64
          description: Total number of elements
          example: 100
        totalPages:
          type: integer
          description: Total number of pages
          example: 5
        size:
          type: integer
          description: Page size
          example: 20
        number:
          type: integer
          description: Current page number (0-based)
          example: 0
        numberOfElements:
          type: integer
          description: Number of elements in current page
          example: 20
        first:
          type: boolean
          description: Is first page
          example: true
        last:
          type: boolean
          description: Is last page
          example: false
        empty:
          type: boolean
          description: Is page empty
          example: false
    
    UserListResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/UserSummary'

security:
  - cookieAuth: []
