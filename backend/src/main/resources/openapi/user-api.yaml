openapi: 3.0.4
info:
  title: User API
  description: User management API for system operators
  version: 1.0.0
  contact:
    name: API Support
    email: support@dryclean.example.com

servers:
  - url: http://localhost:8080
    description: Local development
  - url: https://api.dryclean.example.com
    description: Production

tags:
  - name: users
    description: User management operations

paths:
  /api/users:
    get:
      operationId: listUsers
      summary: List users
      description: Get paginated list of users with filtering
      tags:
        - users
      security:
        - cookieAuth: []
      parameters:
        - $ref: "../openapi/common.yaml#/components/parameters/PageNumber"
        - $ref: "../openapi/common.yaml#/components/parameters/PageSize"
        - $ref: "#/components/parameters/SortBy"
        - $ref: "../openapi/common.yaml#/components/parameters/SortOrder"
        - name: search
          in: query
          description: Search by username, first name, or last name
          required: false
          schema:
            type: string
            example: ivan
        - name: role
          in: query
          description: Filter by role
          required: false
          schema:
            $ref: "../openapi/common.yaml#/components/schemas/UserRole"
        - name: branchId
          in: query
          description: Filter by branch
          required: false
          schema:
            type: string
            format: uuid
        - name: active
          in: query
          description: Filter by active status
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserListResponse"
        "400":
          $ref: "../openapi/common.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../openapi/common.yaml#/components/responses/Unauthorized"
        "403":
          $ref: "../openapi/common.yaml#/components/responses/Forbidden"

    post:
      operationId: createUser
      summary: Create new user
      description: Create a new system user
      tags:
        - users
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetail"
        "400":
          $ref: "../openapi/common.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../openapi/common.yaml#/components/responses/Unauthorized"
        "403":
          $ref: "../openapi/common.yaml#/components/responses/Forbidden"
        "409":
          $ref: "../openapi/common.yaml#/components/responses/Conflict"

  /api/users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: User ID
        schema:
          type: string
          format: uuid

    get:
      operationId: getUserById
      summary: Get user details
      description: Get detailed information about a user
      tags:
        - users
      security:
        - cookieAuth: []
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetail"
        "401":
          $ref: "../openapi/common.yaml#/components/responses/Unauthorized"
        "403":
          $ref: "../openapi/common.yaml#/components/responses/Forbidden"
        "404":
          $ref: "../openapi/common.yaml#/components/responses/NotFound"

    patch:
      operationId: updateUser
      summary: Update user
      description: Update user information
      tags:
        - users
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetail"
        "400":
          $ref: "../openapi/common.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../openapi/common.yaml#/components/responses/Unauthorized"
        "403":
          $ref: "../openapi/common.yaml#/components/responses/Forbidden"
        "404":
          $ref: "../openapi/common.yaml#/components/responses/NotFound"
        "409":
          $ref: "../openapi/common.yaml#/components/responses/Conflict"

  /api/users/{userId}/password:
    parameters:
      - name: userId
        in: path
        required: true
        description: User ID
        schema:
          type: string
          format: uuid

    put:
      operationId: changePassword
      summary: Change user password
      description: Change password for a user
      tags:
        - users
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequest"
      responses:
        "204":
          description: Password changed successfully
        "400":
          $ref: "../openapi/common.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../openapi/common.yaml#/components/responses/Unauthorized"
        "403":
          $ref: "../openapi/common.yaml#/components/responses/Forbidden"
        "404":
          $ref: "../openapi/common.yaml#/components/responses/NotFound"

  /api/users/{userId}/activate:
    parameters:
      - name: userId
        in: path
        required: true
        description: User ID
        schema:
          type: string
          format: uuid

    post:
      operationId: activateUser
      summary: Activate user
      description: Activate a deactivated user
      tags:
        - users
      security:
        - cookieAuth: []
      responses:
        "200":
          description: User activated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetail"
        "401":
          $ref: "../openapi/common.yaml#/components/responses/Unauthorized"
        "403":
          $ref: "../openapi/common.yaml#/components/responses/Forbidden"
        "404":
          $ref: "../openapi/common.yaml#/components/responses/NotFound"
        "409":
          $ref: "../openapi/common.yaml#/components/responses/Conflict"

  /api/users/{userId}/deactivate:
    parameters:
      - name: userId
        in: path
        required: true
        description: User ID
        schema:
          type: string
          format: uuid

    post:
      operationId: deactivateUser
      summary: Deactivate user
      description: Deactivate an active user
      tags:
        - users
      security:
        - cookieAuth: []
      responses:
        "200":
          description: User deactivated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetail"
        "401":
          $ref: "../openapi/common.yaml#/components/responses/Unauthorized"
        "403":
          $ref: "../openapi/common.yaml#/components/responses/Forbidden"
        "404":
          $ref: "../openapi/common.yaml#/components/responses/NotFound"
        "409":
          $ref: "../openapi/common.yaml#/components/responses/Conflict"

  /api/users/{userId}/roles:
    parameters:
      - name: userId
        in: path
        required: true
        description: User ID
        schema:
          type: string
          format: uuid

    put:
      operationId: updateUserRoles
      summary: Update user roles
      description: Replace user roles with new set
      tags:
        - users
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRolesRequest"
      responses:
        "200":
          description: Roles updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetail"
        "400":
          $ref: "../openapi/common.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../openapi/common.yaml#/components/responses/Unauthorized"
        "403":
          $ref: "../openapi/common.yaml#/components/responses/Forbidden"
        "404":
          $ref: "../openapi/common.yaml#/components/responses/NotFound"

  /api/users/{userId}/branches:
    parameters:
      - name: userId
        in: path
        required: true
        description: User ID
        schema:
          type: string
          format: uuid

    get:
      operationId: getUserBranches
      summary: Get user branches
      description: List branches assigned to user
      tags:
        - users
      security:
        - cookieAuth: []
      responses:
        "200":
          description: List of branches
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserBranchesResponse"
        "401":
          $ref: "../openapi/common.yaml#/components/responses/Unauthorized"
        "403":
          $ref: "../openapi/common.yaml#/components/responses/Forbidden"
        "404":
          $ref: "../openapi/common.yaml#/components/responses/NotFound"

    put:
      operationId: updateUserBranches
      summary: Update user branches
      description: Replace user branch assignments
      tags:
        - users
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBranchesRequest"
      responses:
        "200":
          description: Branches updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserBranchesResponse"
        "400":
          $ref: "../openapi/common.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../openapi/common.yaml#/components/responses/Unauthorized"
        "403":
          $ref: "../openapi/common.yaml#/components/responses/Forbidden"
        "404":
          $ref: "../openapi/common.yaml#/components/responses/NotFound"

  /api/roles/{role}/permissions:
    parameters:
      - name: role
        in: path
        required: true
        description: User role
        schema:
          $ref: "../openapi/common.yaml#/components/schemas/UserRole"

    get:
      operationId: getRolePermissions
      summary: Get role permissions
      description: Get all permissions associated with a specific role
      tags:
        - users
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Role permissions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          $ref: "../openapi/common.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../openapi/common.yaml#/components/responses/Unauthorized"
        "403":
          $ref: "../openapi/common.yaml#/components/responses/Forbidden"

  /api/users/{userId}/permissions:
    parameters:
      - name: userId
        in: path
        required: true
        description: User ID
        schema:
          type: string
          format: uuid
    get:
      summary: Get user permissions
      description: Get all permissions for a user based on their roles
      operationId: getUserPermissions
      tags:
        - users
      security:
        - cookieAuth: []
      responses:
        "200":
          description: User permissions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Permission string (e.g. "orders.create", "users.*")
        "401":
          $ref: "../openapi/common.yaml#/components/responses/Unauthorized"
        "403":
          $ref: "../openapi/common.yaml#/components/responses/Forbidden"
        "404":
          $ref: "../openapi/common.yaml#/components/responses/NotFound"

components:
  parameters:
    SortBy:
      name: sortBy
      in: query
      description: Field to sort by
      schema:
        type: string
        default: createdAt
        example: lastName

    SortOrder:
      $ref: "../openapi/common.yaml#/components/parameters/SortOrder"

  responses:
    BadRequest:
      $ref: "../openapi/common.yaml#/components/responses/BadRequest"
    Unauthorized:
      $ref: "../openapi/common.yaml#/components/responses/Unauthorized"
    Forbidden:
      $ref: "../openapi/common.yaml#/components/responses/Forbidden"
    NotFound:
      $ref: "../openapi/common.yaml#/components/responses/NotFound"
    Conflict:
      $ref: "../openapi/common.yaml#/components/responses/Conflict"

  schemas:
    UserRole:
      $ref: "../openapi/common.yaml#/components/schemas/UserRole"

    UserSummary:
      type: object
      required:
        - id
        - username
        - firstName
        - lastName
        - email
        - roles
        - active
        - createdAt
      properties:
        id:
          type: string
          format: uuid
          description: User ID
        username:
          type: string
          description: Username
          example: operator1
        firstName:
          type: string
          description: First name
          example: Ivan
        lastName:
          type: string
          description: Last name
          example: Petrenko
        email:
          type: string
          format: email
          description: Email address
          example: ivan.petrenko@example.com
        roles:
          type: array
          items:
            $ref: "../openapi/common.yaml#/components/schemas/UserRole"
          minItems: 1
        active:
          type: boolean
          description: Is user active
        # Primary branch can be determined from branches array where isPrimary=true
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        lastLoginAt:
          type: string
          format: date-time
          description: Last login timestamp

    UserDetail:
      allOf:
        - $ref: "#/components/schemas/UserSummary"
        - type: object
          required:
            - branches
            - updatedAt
          properties:
            phone:
              type: string
              pattern: '^\+?[0-9]{10,15}$'
              description: Phone number
              example: "+380501234567"
            # Permissions can be calculated by frontend based on roles or fetched via separate endpoint
            branches:
              type: array
              items:
                $ref: "#/components/schemas/BranchAssignment"
              description: Assigned branches
            updatedAt:
              type: string
              format: date-time
              description: Last update timestamp
            createdBy:
              type: string
              format: uuid
              description: ID of user who created this user
            updatedBy:
              type: string
              format: uuid
              description: ID of user who last updated this user
            failedLoginAttempts:
              type: integer
              minimum: 0
              description: Number of failed login attempts
              example: 0
            accountLockTime:
              type: string
              format: date-time
              description: When account was locked due to failed attempts
            lastFailedLoginAt:
              type: string
              format: date-time
              description: Last failed login attempt timestamp

    BranchAssignment:
      type: object
      required:
        - branchId
        - branchName
        - isPrimary
      properties:
        branchId:
          type: string
          format: uuid
          description: Branch ID
        branchName:
          type: string
          description: Branch name
          example: Main Street Branch
        isPrimary:
          type: boolean
          description: Is this the primary branch

    CreateUserRequest:
      type: object
      required:
        - username
        - password
        - firstName
        - lastName
        - email
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: "^[a-zA-Z0-9_]+$"
          description: Username (must be unique)
          example: operator1
          x-spring-validation: "@Username"
        password:
          type: string
          minLength: 6
          maxLength: 100
          # Pattern removed for dev mode - production should use strict pattern
          # pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{12,}$'
          description: Password (min 6 chars for dev, 12 for prod)
          example: SecurePassword123!
          x-spring-validation: "@StrongPassword"
        firstName:
          type: string
          minLength: 1
          maxLength: 100
          pattern: '^[a-zA-Z\u0400-\u04FF\s\-]+$'
          description: First name (letters only)
          example: Ivan
        lastName:
          type: string
          minLength: 1
          maxLength: 100
          pattern: '^[a-zA-Z\u0400-\u04FF\s\-]+$'
          description: Last name (letters only)
          example: Petrenko
        email:
          type: string
          format: email
          maxLength: 255
          description: Email address (must be unique)
          example: ivan.petrenko@example.com
          x-spring-validation: "@Email @UniqueEmail"
        phone:
          type: string
          pattern: '^\+?[0-9]{10,15}$'
          description: Phone number (optional, international format)
          example: "+380501234567"
        roles:
          type: array
          items:
            $ref: "../openapi/common.yaml#/components/schemas/UserRole"
          minItems: 1
          maxItems: 10
          description: User roles (defaults to OPERATOR if not specified)
          default: ["OPERATOR"]
          x-spring-default: "#{T(java.util.List).of(T(com.aksi.api.user.dto.UserRole).OPERATOR)}"
        branchIds:
          type: array
          items:
            type: string
            format: uuid
          maxItems: 50
          description: Branch IDs to assign (optional)
          default: []
        primaryBranchId:
          type: string
          format: uuid
          description: Primary branch ID (must be in branchIds if provided)
          x-spring-validation: "@ValidPrimaryBranch"
        active:
          type: boolean
          description: Account active status
          default: true
          x-spring-hidden: true
        emailVerified:
          type: boolean
          description: Email verification status
          default: false
          x-spring-hidden: true

    UpdateUserRequest:
      type: object
      minProperties: 1
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 100
          description: First name
        lastName:
          type: string
          minLength: 1
          maxLength: 100
          description: Last name
        email:
          type: string
          format: email
          description: Email address
        phone:
          type: string
          pattern: '^\+?[0-9]{10,15}$'
          description: Phone number

    ChangePasswordRequest:
      type: object
      required:
        - newPassword
      properties:
        currentPassword:
          type: string
          description: Current password (required if changing own password)
        newPassword:
          type: string
          minLength: 6
          maxLength: 100
          # Pattern removed for dev mode - production should use strict pattern
          # pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{12,}$'
          description: New password (min 6 chars for dev, 12 for prod)
          example: Admin123!

    UpdateRolesRequest:
      type: object
      required:
        - roles
      properties:
        roles:
          type: array
          items:
            $ref: "../openapi/common.yaml#/components/schemas/UserRole"
          minItems: 1
          description: New set of roles

    UpdateBranchesRequest:
      type: object
      required:
        - branchIds
      properties:
        branchIds:
          type: array
          items:
            type: string
            format: uuid
          description: Branch IDs to assign
        primaryBranchId:
          type: string
          format: uuid
          description: Primary branch ID (must be in branchIds if provided)

    UserBranchesResponse:
      type: object
      required:
        - branches
      properties:
        branches:
          type: array
          items:
            $ref: "#/components/schemas/BranchAssignment"

    # Error schemas
    # Error schemas centralized in common.yaml

    # Pagination schema
    PaginatedResponse:
      $ref: "../openapi/common.yaml#/components/schemas/PaginatedResponse"

    UserListResponse:
      allOf:
        - $ref: "#/components/schemas/PaginatedResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/UserSummary"

security:
  - cookieAuth: []
