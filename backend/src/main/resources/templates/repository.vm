package ${packageName}.repository;

import ${packageName}.entity.${className};
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

/**
 * Repository для роботи з ${domainName}
 * Використовує JpaSpecificationExecutor для type-safe dynamic queries
 *
 * <p>ПРИНЦИПИ:
 * 1. Складні динамічні запити → ${domainName}Specification
 * 2. Прості запити → derived methods (findBy*, countBy*, existsBy*)
 * 3. Специфічні запити → @Query (тільки коли необхідно, як quickSearch)
 *
 * Автоматично згенеровано Domain Code Generator
 */
@Repository
public interface ${domainName}Repository extends JpaRepository<${className}, Long>, JpaSpecificationExecutor<${className}> {

  // ==============================
  // БАЗОВІ МЕТОДИ ПОШУКУ (Derived Methods)
  // ==============================

  /** Пошук ${domainNameLower} за UUID (для API сумісності). */
  Optional<${className}> findByUuid(UUID uuid);

  /** Перевірка існування ${domainNameLower} за UUID. */
  boolean existsByUuid(UUID uuid);

#foreach($field in $searchableFields)
#if($field.type == "String")
  /** Пошук ${domainNameLower} за ${field.name}. */
  Optional<${className}> findBy${field.name.substring(0,1).toUpperCase()}${field.name.substring(1)}(String ${field.name});

  /** Перевірка існування ${domainNameLower} з таким ${field.name}. */
  boolean existsBy${field.name.substring(0,1).toUpperCase()}${field.name.substring(1)}(String ${field.name});

#end
#end

  // ==============================
  // СПЕЦІАЛЬНІ @QUERY МЕТОДИ
  // ==============================

#if($searchableFields && $searchableFields.size() > 0)
  /**
   * Швидкий пошук ${domainNameLower} за текстом з null safety
   */
  @Query("""
        SELECT e FROM ${className} e
        WHERE :query IS NOT NULL AND :query != '' AND (
#set($stringFields = [])
#foreach($field in $searchableFields)
#if($field.type == "String")
#set($ignored = $stringFields.add($field))
#end
#end
#if($stringFields.size() > 0)
#foreach($field in $stringFields)
            LOWER(COALESCE(e.${field.name}, '')) LIKE LOWER(CONCAT('%', :query, '%'))#if($foreach.hasNext)
            OR #end
#end
#else
            1=0
#end
        )
        ORDER BY#if($searchableFields.size() > 0) e.${searchableFields.get(0).name}#else e.id#end
        """)
  Page<${className}> quickSearch(@Param("query") String query, Pageable pageable);
#else
  /**
   * Базовий пошук за ID (fallback коли немає searchable полів)
   */
  @Query("SELECT e FROM ${className} e WHERE e.id = :id")
  Page<${className}> quickSearch(@Param("query") String query, Pageable pageable);
#end
}
