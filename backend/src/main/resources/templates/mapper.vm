package ${packageName}.mapper;

import ${packageName}.entity.${className};
import com.aksi.api.${apiPackageName}.dto.Create${domainName}Request;
import com.aksi.api.${apiPackageName}.dto.Update${domainName}Request;
import com.aksi.api.${apiPackageName}.dto.${domainName}Response;
import com.aksi.shared.mapper.BaseMapperConfig;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.BeanMapping;
import org.mapstruct.NullValuePropertyMappingStrategy;
import org.mapstruct.ReportingPolicy;

import java.util.List;

/**
 * MapStruct mapper для конвертації між Entity та DTO
 * Базується на реальних згенерованих OpenAPI DTO.
 *
 * Автоматично згенеровано Domain Code Generator
 */
@Mapper(
    componentModel = "spring",
    uses = {BaseMapperConfig.class},
    unmappedTargetPolicy = ReportingPolicy.IGNORE)
public interface ${domainName}Mapper {

  // DTO → Entity mappings (для create/update)

  /**
   * Конвертація Create${domainName}Request → ${className}
   * BaseEntity поля автоматично ігноруються через BaseMapperConfig.
   */
  ${className} toEntity(Create${domainName}Request request);

  /** Оновлення існуючого ${className} з Update${domainName}Request. */
  @BeanMapping(nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)
  void updateEntityFromRequest(Update${domainName}Request request, @MappingTarget ${className} entity);

  // Entity → DTO mappings (для response)

  /** Конвертація ${className} → ${domainName}Response. */
  @Mapping(target = "id", source = "uuid")
  @Mapping(
      target = "createdAt",
      source = "createdAt",
      qualifiedByName = "localDateTimeToOffsetDateTime")
  @Mapping(
      target = "updatedAt",
      source = "updatedAt",
      qualifiedByName = "localDateTimeToOffsetDateTime")
  ${domainName}Response toResponse(${className} entity);

  // List mappings

  /** Конвертація списку Entity → список Response. */
  List<${domainName}Response> toResponseList(List<${className}> entities);
}
