package ${packageName}.mapper;

import ${packageName}.entity.${className};
import com.aksi.api.${domainNameLower}.dto.Create${domainName}Request;
import com.aksi.api.${domainNameLower}.dto.Update${domainName}Request;
import com.aksi.api.${domainNameLower}.dto.${domainName}Response;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.BeanMapping;
import org.mapstruct.NullValuePropertyMappingStrategy;
import org.mapstruct.ReportingPolicy;

import java.util.List;

/**
 * MapStruct Mapper для ${domainName}
 * Автоматично згенеровано Domain Code Generator
 */
@Mapper(componentModel = "spring", unmappedTargetPolicy = ReportingPolicy.IGNORE)
public interface ${domainName}Mapper {

    /**
     * Конвертує CreateRequest в Entity
     */
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "uuid", ignore = true)
    @Mapping(target = "createdAt", ignore = true)
    @Mapping(target = "updatedAt", ignore = true)
    ${className} toEntity(Create${domainName}Request request);

    /**
     * Конвертує Entity в Response
     */
    ${domainName}Response toResponse(${className} entity);

    /**
     * Конвертує список Entity в список Response
     */
    List<${domainName}Response> toResponseList(List<${className}> entities);

    /**
     * Оновлює Entity з UpdateRequest (тільки non-null поля)
     */
    @BeanMapping(nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "uuid", ignore = true)
    @Mapping(target = "createdAt", ignore = true)
    @Mapping(target = "updatedAt", ignore = true)
    void updateEntityFromRequest(Update${domainName}Request request, @MappingTarget ${className} entity);
}
