services:
  # PostgreSQL
  postgres:
    image: postgres:17
    container_name: postgres-dev
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: aksi_user
      POSTGRES_PASSWORD: 1911
      POSTGRES_DB: aksi_cleaners_db_v5
      POSTGRES_SCHEMA: public
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aksi_user -d aksi_cleaners_db_v5"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aksi-network-dev

  # Redis
  redis:
    image: redis:8-alpine
    container_name: redis-dev
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - aksi-network-dev

  # PgAdmin
  pgadmin:
    image: dpage/pgadmin4:9.5
    container_name: aksi-pgadmin-dev
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@aksi.com
      PGADMIN_DEFAULT_PASSWORD: admin
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - pgadmin_data_dev:/var/lib/pgadmin
      - ./pgadmin/config/servers.json:/pgadmin4/servers.json
      - ./pgadmin/pgpass:/pgpass
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - aksi-network-dev

  # Backend (Spring Boot)
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile.dev
    container_name: backend-dev
    ports:
      - "8080:8080"
      - "5005:5005" # Remote debug
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/aksi_cleaners_db_v5
      SPRING_DATASOURCE_USERNAME: aksi_user
      SPRING_DATASOURCE_PASSWORD: 1911
      SPRING_PROFILES_ACTIVE: dev
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_MAIL_HOST: localhost
      SPRING_MAIL_PORT: 3025
      SPRING_MAIL_TEST-CONNECTION: "false"
      MANAGEMENT_HEALTH_MAIL_ENABLED: "false"
      SPRING_DEVTOOLS_RESTART_ENABLED: "true"
      SPRING_DEVTOOLS_LIVERELOAD_ENABLED: "true"
      AKSI_LOG_LEVEL: "DEBUG"
      LOGGING_LEVEL_COM_AKSI: "DEBUG"
      FILE_UPLOAD_DIR: /app/uploads
      FILE_BASE_URL: http://localhost:8080
      JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"
    volumes:
      - ../backend/src:/app/src
      - ../backend/target:/app/target
      - backend_m2_cache:/home/appuser/.m2
      - backend_uploads:/app/uploads
      - ./tmp/intellij:/tmp
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    networks:
      - aksi-network-dev
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8080/management/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (Next.js)
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.dev
    container_name: frontend-dev
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:8080
      NEXT_SERVER_API_URL: http://backend:8080
      NEXT_TELEMETRY_DISABLED: 1
      ORVAL_API_URL: http://backend:8080/v3/api-docs
      npm_config_audit: "false"
      npm_config_fund: "false"
      npm_config_progress: "false"
      npm_config_cache_max: "86400000"
      npm_config_maxsockets: "20"
      npm_config_audit_level: "none"
    volumes:
      - ../frontend:/app
      - frontend_node_modules:/app/node_modules
      - frontend_next_cache:/app/.next
      - frontend_npm_cache:/home/node/.npm
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - aksi-network-dev
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  aksi-network-dev:
    driver: bridge

volumes:
  postgres_data_dev:
  pgadmin_data_dev:
  frontend_node_modules:
  frontend_next_cache:
  frontend_npm_cache:
  backend_m2_cache:
  backend_uploads:
  portainer_data:
