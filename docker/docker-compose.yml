services:
  # Traefik - зворотний проксі для production
  traefik:
    image: traefik:v3.5
    container_name: traefik-prod
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic:/etc/traefik/dynamic:ro
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--log.level=INFO"
    networks:
      - aksi-network
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL
  postgres:
    image: postgres:17
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: aksi_user
      POSTGRES_PASSWORD: 1911
      POSTGRES_DB: aksi_cleaners_db_v5
      POSTGRES_SCHEMA: public
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aksi_user -d aksi_cleaners_db_v5"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aksi-network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # PgAdmin
  pgadmin:
    image: dpage/pgadmin4
    container_name: aksi-pgadmin
    expose:
      - "80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@aksi.com
      PGADMIN_DEFAULT_PASSWORD: admin
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin/config/servers.json:/pgadmin4/servers.json
      - ./pgadmin/pgpass:/pgpass
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      traefik:
        condition: service_started
    networks:
      - aksi-network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.localhost`)"
      - "traefik.http.services.pgadmin.loadbalancer.server.port=80"

  # Backend (Spring Boot)
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: backend
    expose:
      - "8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/aksi_cleaners_db_v5
      SPRING_DATASOURCE_USERNAME: aksi_user
      SPRING_DATASOURCE_PASSWORD: 1911
      SPRING_PROFILES_ACTIVE: prod
      # Production performance settings
      JAVA_OPTS: "-Xms512m -Xmx2g -XX:+UseG1GC"
    depends_on:
      postgres:
        condition: service_healthy
      traefik:
        condition: service_started
    restart: unless-stopped
    networks:
      - aksi-network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "-q",
          "--spider",
          "http://localhost:8080/actuator/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/`)"
      - "traefik.http.services.backend.loadbalancer.server.port=8080"
      - "traefik.http.routers.backend.priority=50"

  # Frontend (Next.js)
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: frontend
    expose:
      - "3000"
    environment:
      NODE_ENV: production
      # API URL для browser requests - через Traefik
      NEXT_PUBLIC_API_URL: http://localhost/api
      # API URL для SSR requests - прямо до backend контейнера
      NEXT_SERVER_API_URL: http://backend:8080
      NEXT_TELEMETRY_DISABLED: 1
    depends_on:
      backend:
        condition: service_healthy
      traefik:
        condition: service_started
    restart: unless-stopped
    networks:
      - aksi-network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
      - "traefik.http.routers.frontend.priority=1"

  # Portainer
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    expose:
      - "9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    depends_on:
      traefik:
        condition: service_started
    networks:
      - aksi-network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.localhost`)"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"

networks:
  aksi-network:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data:
  portainer_data:
