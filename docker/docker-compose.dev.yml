services:
  # # Traefik - –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –ø—Ä–æ–∫—Å—ñ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó
  # traefik:
  #   image: traefik:v3.5
  #   container_name: traefik-dev
  #   ports:
  #     - "80:80" # HTTP –ø–æ—Ä—Ç
  #     - "9090:8080" # Traefik Dashboard (–∑–º—ñ–Ω–µ–Ω–æ –∑ 8080 –Ω–∞ 9090, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É)
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #   command:
  #     # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Docker –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  #     - "--providers.docker=true"
  #     - "--providers.docker.exposedbydefault=false"
  #     # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–æ—á–æ–∫ –≤—Ö–æ–¥—É
  #     - "--entrypoints.web.address=:80"
  #     # –í–∫–ª—é—á–µ–Ω–Ω—è API Dashboard
  #     - "--api.dashboard=true"
  #     - "--api.insecure=true"
  #     # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
  #     - "--log.level=INFO"
  #   networks:
  #     - aksi-network-dev
  #   restart: unless-stopped
  # PostgreSQL - main database for the application
  postgres:
    image: postgres:17
    container_name: postgres-dev
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: aksi_user
      POSTGRES_PASSWORD: 1911
      POSTGRES_DB: aksi_cleaners_db_v5
      POSTGRES_SCHEMA: public
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aksi_user -d aksi_cleaners_db_v5"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aksi-network-dev

  # # PostgreSQL - separate database for GlitchTip
  # postgres-glitchtip:
  #   image: postgres:17
  #   container_name: postgres-glitchtip-dev
  #   expose:
  #     - "5432"
  #   environment:
  #     POSTGRES_USER: glitchtip
  #     POSTGRES_PASSWORD: glitchtip_pass
  #     POSTGRES_DB: glitchtip
  #     POSTGRES_SCHEMA: public
  #   volumes:
  #     - postgres_glitchtip_data_dev:/var/lib/postgresql/data
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U glitchtip -d glitchtip"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   networks:
  #     - aksi-network-dev

  # Redis for session management
  redis:
    image: redis:8-alpine
    container_name: redis-dev
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - aksi-network-dev

  # PgAdmin - keeping consistent with main compose file
  pgadmin:
    image: dpage/pgadmin4:9.5
    container_name: aksi-pgadmin-dev
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@aksi.com
      PGADMIN_DEFAULT_PASSWORD: admin
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - pgadmin_data_dev:/var/lib/pgadmin
      - ./pgadmin/config/servers.json:/pgadmin4/servers.json
      - ./pgadmin/pgpass:/pgpass
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - aksi-network-dev

  # # Portainer
  # portainer:
  #   image: portainer/portainer-ce:latest
  #   container_name: portainer
  #   restart: unless-stopped
  #   ports:
  #     - "9000:9000"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - portainer_data:/data
  #   logging:
  #     driver: json-file
  #     options:
  #       max-size: "10m"
  #       max-file: "3"

  # Backend (Spring Boot) - development
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile.dev
    container_name: backend-dev
    expose:
      - "8080"
      - "5005"
    ports:
      - "8080:8080"
      - "5005:5005" # Debug port
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/aksi_cleaners_db_v5
      SPRING_DATASOURCE_USERNAME: aksi_user
      SPRING_DATASOURCE_PASSWORD: 1911
      SPRING_PROFILES_ACTIVE: dev
      # Force English locale for Java
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8
      # Redis configuration
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      # –í—ñ–¥–∫–ª—é—á–∞—î–º–æ –ø–æ—à—Ç–æ–≤–∏–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏
      SPRING_MAIL_HOST: localhost
      SPRING_MAIL_PORT: 3025
      SPRING_MAIL_TEST-CONNECTION: "false"
      # –í–∏–º–∏–∫–∞—î–º–æ health checks –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
      MANAGEMENT_HEALTH_MAIL_ENABLED: "false"
      # DevTools –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è hot reload
      SPRING_DEVTOOLS_RESTART_ENABLED: "true"
      SPRING_DEVTOOLS_LIVERELOAD_ENABLED: "true"
      # –†—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è (ERROR –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–∏—Å—Ç–∏—Ö –ª–æ–≥—ñ–≤, DEBUG –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
      AKSI_LOG_LEVEL: "DEBUG"
      LOGGING_LEVEL_COM_AKSI: "DEBUG"
      # File storage configuration
      FILE_UPLOAD_DIR: /app/uploads
      FILE_BASE_URL: http://localhost:8080
      # # GlitchTip configuration
      # GLITCHTIP_DSN: http://b1abf81086f84a71bc66b1659e647402@glitchtip:8000/1
      # GLITCHTIP_DEBUG: "true"
      # GLITCHTIP_TRACES_SAMPLE_RATE: "1.0"
    volumes:
      - ../backend/src:/app/src # –ú–æ–Ω—Ç—É—î–º–æ —Ç—ñ–ª—å–∫–∏ src –¥–ª—è hot reload
      - ../backend/target:/app/target # –ú–æ–Ω—Ç—É—î–º–æ target –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è compiled –∫–ª–∞—Å—ñ–≤
      - backend_m2_cache:/home/appuser/.m2 # –ö–µ—à Maven –¥–ª—è non-root –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      - backend_uploads:/app/uploads # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —Ñ–∞–π–ª–∏
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      # traefik:
      #   condition: service_started
    restart: unless-stopped
    networks:
      - aksi-network-dev
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "-q",
          "--spider",
          "http://localhost:8080/management/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s # –î–∞—î–º–æ –±—ñ–ª—å—à–µ —á–∞—Å—É –Ω–∞ –∑–∞–ø—É—Å–∫ Spring Boot

  # # GlitchTip - Error Monitoring (Development)
  # glitchtip:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.glitchtip
  #   container_name: glitchtip-dev
  #   ports:
  #     - "8001:8000"
  #   environment:
  #     # Database settings (—è–∫ –≤ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–º—É –ø—Ä–∏–∫–ª–∞–¥—ñ)
  #     DATABASE_URL: postgres://glitchtip:glitchtip_pass@postgres-glitchtip:5432/glitchtip
  #     SECRET_KEY: "change_me_to_something_random_please_generate_new_key"
  #     PORT: 8000
  #     EMAIL_URL: consolemail://
  #     GLITCHTIP_DOMAIN: http://localhost:8001
  #     DEFAULT_FROM_EMAIL: admin@glitchtip.local
  #     CELERY_WORKER_AUTOSCALE: "1,3"
  #     REDIS_URL: redis://redis:6379/1
  #     DEBUG: "true"
  #     ALLOWED_HOSTS: "localhost,127.0.0.1,glitchtip"
  #   volumes:
  #     - glitchtip_uploads_dev:/code/uploads
  #   depends_on:
  #     postgres-glitchtip:
  #       condition: service_healthy
  #     redis:
  #       condition: service_started
  #   restart: unless-stopped
  #   networks:
  #     - aksi-network-dev
  #   healthcheck:
  #     test: ["CMD", "/usr/local/bin/healthcheck.sh"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 30s

  # # GlitchTip Worker (for Celery tasks)
  # glitchtip-worker:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.glitchtip
  #   container_name: glitchtip-worker-dev
  #   command: ./bin/run-celery-with-beat.sh
  #   environment:
  #     DATABASE_URL: postgres://glitchtip:glitchtip_pass@postgres-glitchtip:5432/glitchtip
  #     SECRET_KEY: "change_me_to_something_random_please_generate_new_key"
  #     PORT: 8000
  #     EMAIL_URL: consolemail://
  #     GLITCHTIP_DOMAIN: http://localhost:8001
  #     DEFAULT_FROM_EMAIL: admin@glitchtip.local
  #     CELERY_WORKER_AUTOSCALE: "1,3"
  #     REDIS_URL: redis://redis:6379/1
  #     DEBUG: "true"
  #     ALLOWED_HOSTS: "localhost,127.0.0.1,glitchtip"
  #   volumes:
  #     - glitchtip_uploads_dev:/code/uploads
  #   depends_on:
  #     - postgres-glitchtip
  #     - redis
  #   restart: unless-stopped
  #   networks:
  #     - aksi-network-dev

  # # GlitchTip Migrate (for database migrations)
  # glitchtip-migrate:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.glitchtip
  #   container_name: glitchtip-migrate-dev
  #   command: ./bin/run-migrate.sh
  #   environment:
  #     DATABASE_URL: postgres://glitchtip:glitchtip_pass@postgres-glitchtip:5432/glitchtip
  #     SECRET_KEY: "change_me_to_something_random_please_generate_new_key"
  #     PORT: 8000
  #     EMAIL_URL: consolemail://
  #     GLITCHTIP_DOMAIN: http://localhost:8001
  #     DEFAULT_FROM_EMAIL: admin@glitchtip.local
  #     CELERY_WORKER_AUTOSCALE: "1,3"
  #     REDIS_URL: redis://redis:6379/1
  #     DEBUG: "true"
  #     ALLOWED_HOSTS: "localhost,127.0.0.1,glitchtip"
  #   depends_on:
  #     - postgres-glitchtip
  #     - redis
  #   restart: "no"
  #   networks:
  #     - aksi-network-dev

  # Frontend (Next.js) - development
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.dev
    container_name: frontend-dev
    expose:
      - "3000"
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      # API URL –¥–ª—è –∫–ª—ñ—î–Ω—Ç—Å—å–∫–æ—ó —á–∞—Å—Ç–∏–Ω–∏ (browser) - –ø—Ä—è–º—ñ –∑–∞–ø–∏—Ç–∏ –¥–æ backend
      NEXT_PUBLIC_API_URL: http://localhost:8080
      # API URL –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ—ó —á–∞—Å—Ç–∏–Ω–∏ (SSR) - –ø—Ä—è–º–æ –¥–æ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
      NEXT_SERVER_API_URL: http://backend:8080
      NEXT_TELEMETRY_DISABLED: 1
      # Orval –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó API
      ORVAL_API_URL: http://backend:8080/v3/api-docs
      # # GlitchTip error monitoring
      # NEXT_PUBLIC_GLITCHTIP_DSN: http://b1abf81086f84a71bc66b1659e647402@glitchtip:8000/1
      # GLITCHTIP_ENABLED: "true"
      # üöÄ NPM –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø –¥–ª—è –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è
      npm_config_audit: "false"
      npm_config_fund: "false"
      npm_config_progress: "false"
      npm_config_cache_max: "86400000"
      npm_config_maxsockets: "20"
      npm_config_audit_level: "none"
    volumes:
      - ../frontend:/app # –ú–æ–Ω—Ç—É—î–º–æ –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      - frontend_node_modules:/app/node_modules # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ node_modules —É volume (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á node)
      - frontend_next_cache:/app/.next # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ .next –∫–µ—à —É volume
      - frontend_npm_cache:/home/node/.npm # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ npm –∫–µ—à —É volume
    depends_on:
      backend:
        condition: service_healthy
      # traefik:
      #   condition: service_started
    restart: unless-stopped
    networks:
      - aksi-network-dev
    # –î–æ–¥–∞—î–º–æ healthcheck –¥–ª—è Next.js
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s # –î–∞—î–º–æ —á–∞—Å –Ω–∞ –∑–∞–ø—É—Å–∫ Next.js
    # labels:
    #   # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Traefik
    #   - "traefik.enable=true"
    #   # –ü—Ä–∞–≤–∏–ª–æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó - –≤—Å—ñ –∑–∞–ø–∏—Ç–∏, —è–∫—ñ –Ω–µ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ /api
    #   - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
    #   # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç - –Ω–∏–∑—å–∫–∏–π, —â–æ–± –¥–æ–∑–≤–æ–ª–∏—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É –æ–±—Ä–æ–±–∏—Ç–∏ /api –∑–∞–ø–∏—Ç–∏
    #   - "traefik.http.routers.frontend.priority=1"
    #   # –í–∫–∞–∑—É—î–º–æ –Ω–∞ —è–∫–æ–º—É –ø–æ—Ä—Ç—ñ –ø—Ä–∞—Ü—é—î —Å–µ—Ä–≤—ñ—Å
    #   - "traefik.http.services.frontend.loadbalancer.server.port=3000"

networks:
  aksi-network-dev:
    driver: bridge

volumes:
  postgres_data_dev:
  # postgres_glitchtip_data_dev: # Volume for GlitchTip PostgreSQL
  pgadmin_data_dev:
  frontend_node_modules:
  frontend_next_cache:
  frontend_npm_cache:
  backend_m2_cache:
  backend_uploads: # Volume for uploaded files
  # glitchtip_uploads_dev: # Volume for GlitchTip uploads
  portainer_data:
