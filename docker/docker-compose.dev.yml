services:
  # PostgreSQL - зберігаємо однаковий з основним compose файлом
  postgres:
    image: postgres:17
    container_name: postgres-dev
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: aksi_user
      POSTGRES_PASSWORD: 1911
      POSTGRES_DB: aksi_cleaners_db_v5
      POSTGRES_SCHEMA: public
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U aksi_user -d aksi_cleaners_db_v5']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aksi-network-dev

  # PgAdmin - зберігаємо однаковий з основним compose файлом
  pgadmin:
    image: dpage/pgadmin4
    container_name: aksi-pgadmin-dev
    ports:
      - '5050:80'
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@aksi.com
      PGADMIN_DEFAULT_PASSWORD: admin
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    volumes:
      - pgadmin_data_dev:/var/lib/pgadmin
      - ./pgadmin/config/servers.json:/pgadmin4/servers.json
      - ./pgadmin/pgpass:/pgpass
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - aksi-network-dev

  # Portainer
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    ports:
      - '9000:9000'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '3'

  # Backend (Spring Boot) - розробка
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile.dev
    container_name: backend-dev
    ports:
      - '8080:8080'
      - '5005:5005' # Порт для Java remote debugging
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/aksi_cleaners_db_v5
      SPRING_DATASOURCE_USERNAME: aksi_user
      SPRING_DATASOURCE_PASSWORD: 1911
      SPRING_PROFILES_ACTIVE: dev
      # Відключаємо поштовий сервер для розробки
      SPRING_MAIL_HOST: localhost
      SPRING_MAIL_PORT: 3025
      SPRING_MAIL_TEST-CONNECTION: "false"
      # Вимикаємо health checks для різних сервісів
      MANAGEMENT_HEALTH_MAIL_ENABLED: "false"
    volumes:
      - ../backend:/app  # Монтуємо весь проект для автоматичного перезавантаження
      - backend_m2_cache:/root/.m2  # Кеш Maven в Docker volume для уникнення проблем з правами
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - aksi-network-dev
    # Додаємо healthcheck для перевірки Spring Boot
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s  # Даємо більше часу на запуск Spring Boot

  # Frontend (Next.js) - розробка
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.dev
    container_name: frontend-dev
    ports:
      - '3000:3000'
    environment:
      NODE_ENV: development
      # Важливо: використовуємо internal Docker hostname для комунікації між контейнерами
      NEXT_PUBLIC_API_URL: http://backend:8080/api
      NEXT_TELEMETRY_DISABLED: 1
    volumes:
      - ../frontend:/app  # Монтуємо весь проект для автоматичного перезавантаження
      - frontend_node_modules:/app/node_modules  # Зберігаємо node_modules у volume з повними правами
      - frontend_next_cache:/app/.next  # Зберігаємо .next кеш у volume
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - aksi-network-dev
    # Додаємо healthcheck для Next.js
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s  # Даємо час на запуск Next.js

networks:
  aksi-network-dev:
    driver: bridge

volumes:
  postgres_data_dev:
  pgadmin_data_dev:
  frontend_node_modules:
  frontend_next_cache:
  backend_m2_cache:
  portainer_data:

