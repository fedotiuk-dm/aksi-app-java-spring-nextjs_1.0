#!/bin/bash

# üöÄ –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É Aksi-app —É —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏
# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
#   ./start-dev.sh [clean|fast|logs|stop|status|shell]
#   clean  - –ø–æ–≤–Ω–∞ –ø–µ—Ä–µ–±—É–¥–æ–≤–∞ (–ø–æ–≤—ñ–ª—å–Ω–æ)
#   fast   - —à–≤–∏–¥–∫–∏–π –∑–∞–ø—É—Å–∫ –∑ –∫–µ—à–µ–º (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
#   logs   - –ø–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏ –∑–∞–ø—É—â–µ–Ω–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
#   stop   - –∑—É–ø–∏–Ω–∏—Ç–∏ –≤—Å—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏
#   status - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
#   shell  - –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞

set -e

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–æ–ª—å–æ—Ä–æ–≤–æ–≥–æ –≤–∏–≤–æ–¥—É
log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é Docker
cd "$(dirname "$0")"

COMPOSE_FILE="docker-compose.dev.yml"
MODE="${1:-fast}"

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ Docker –∑–∞–ø—É—â–µ–Ω–∏–π
check_docker() {
    if ! docker info >/dev/null 2>&1; then
        log_error "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø—É—Å—Ç—ñ—Ç—å Docker —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É."
        exit 1
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É —Å—Ç–∞—Ç—É—Å—É
show_status() {
    log_info "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤:"
    docker-compose -f $COMPOSE_FILE ps
    echo ""
    log_info "–ê–∫—Ç–∏–≤–Ω—ñ –ø–æ—Ä—Ç–∏:"
    docker-compose -f $COMPOSE_FILE port frontend 3000 2>/dev/null && echo "Frontend: http://localhost:3000" || echo "Frontend: –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π"
    docker-compose -f $COMPOSE_FILE port backend 8080 2>/dev/null && echo "Backend: http://localhost:8080/api" || echo "Backend: –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π"
    docker-compose -f $COMPOSE_FILE port pgadmin 80 2>/dev/null && echo "PgAdmin: http://localhost:5050" || echo "PgAdmin: –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π"
    docker-compose -f $COMPOSE_FILE port traefik 8080 2>/dev/null && echo "Traefik: http://localhost:9090" || echo "Traefik: –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑—É–ø–∏–Ω–∫–∏
stop_containers() {
    log_info "–ó—É–ø–∏–Ω—è—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏..."
    docker-compose -f $COMPOSE_FILE down
    log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –∑—É–ø–∏–Ω–µ–Ω–æ!"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –ª–æ–≥—ñ–≤
show_logs() {
    log_info "–ü–æ–∫–∞–∑—É—î–º–æ –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ (Ctrl+C –¥–ª—è –≤–∏—Ö–æ–¥—É)..."
    docker-compose -f $COMPOSE_FILE logs -f
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ shell
connect_shell() {
    local service="${2:-backend}"
    log_info "–ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ $service –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
    docker-compose -f $COMPOSE_FILE exec $service bash
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è volumes
create_volumes() {
    log_info "–°—Ç–≤–æ—Ä—é—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ volumes..."
    docker volume create backend_m2_cache 2>/dev/null || true
    docker volume create frontend_node_modules 2>/dev/null || true
    docker volume create frontend_next_cache 2>/dev/null || true
    log_success "Volumes —Å—Ç–≤–æ—Ä–µ–Ω–æ"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –∑–∞–ø—É—Å–∫—É
fast_start() {
    log_info "üöÄ –®–≤–∏–¥–∫–∏–π –∑–∞–ø—É—Å–∫ –∑ –∫–µ—à–µ–º..."

    check_docker
    create_volumes

    # –ó—É–ø–∏–Ω—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –∑–∞–ø—É—â–µ–Ω—ñ
    if docker-compose -f $COMPOSE_FILE ps -q | grep -q .; then
        log_info "–ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏..."
        docker-compose -f $COMPOSE_FILE down
    fi

    # –ë—É–¥—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –æ–±—Ä–∞–∑–∏ –Ω–µ —ñ—Å–Ω—É—é—Ç—å –∞–±–æ —î –∑–º—ñ–Ω–∏
    log_info "–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±—Ä–∞–∑–∏ —Ç–∞ –±—É–¥—É—î–º–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ..."
    docker-compose -f $COMPOSE_FILE build

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏
    log_info "–ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏..."
    docker-compose -f $COMPOSE_FILE up -d

    # –ß–µ–∫–∞—î–º–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ
    log_info "–û—á—ñ–∫—É—î–º–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
    sleep 10

    # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å
    show_status

    log_success "Aksi-app –∑–∞–ø—É—â–µ–Ω–æ!"
    show_usage_info
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–≤–Ω–æ—ó –ø–µ—Ä–µ–±—É–¥–æ–≤–∏
clean_start() {
    log_warning "üßπ –ü–æ–≤–Ω–∞ –ø–µ—Ä–µ–±—É–¥–æ–≤–∞ (—Ü–µ –∑–∞–π–º–µ —á–∞—Å)..."

    check_docker
    create_volumes

    # –ó—É–ø–∏–Ω—è—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏
    log_info "–ó—É–ø–∏–Ω—è—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏..."
    docker-compose -f $COMPOSE_FILE down

    # –í–∏–¥–∞–ª—è—î–º–æ –æ–±—Ä–∞–∑–∏ –ø—Ä–æ–µ–∫—Ç—É
    log_info "–í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –æ–±—Ä–∞–∑–∏ –ø—Ä–æ–µ–∫—Ç—É..."
    docker images --format "table {{.Repository}}:{{.Tag}}\t{{.ID}}" | grep -E "(docker_|docker-)" | awk '{print $2}' | xargs -r docker rmi -f 2>/dev/null || true

    # –ü–µ—Ä–µ–±—É–¥–æ–≤—É—î–º–æ –±–µ–∑ –∫–µ—à—É
    log_info "–ü–µ—Ä–µ–±—É–¥–æ–≤—É—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –±–µ–∑ –∫–µ—à—É..."
    docker-compose -f $COMPOSE_FILE build --no-cache

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ
    log_info "–ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏..."
    docker-compose -f $COMPOSE_FILE up -d

    # –ß–µ–∫–∞—î–º–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ
    log_info "–û—á—ñ–∫—É—î–º–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
    sleep 15

    # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å
    show_status

    log_success "Aksi-app –ø–µ—Ä–µ–±—É–¥–æ–≤–∞–Ω–æ —Ç–∞ –∑–∞–ø—É—â–µ–Ω–æ!"
    show_usage_info
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
show_usage_info() {
    echo ""
    log_success "üåê –î–æ—Å—Ç—É–ø –¥–æ —Å–µ—Ä–≤—ñ—Å—ñ–≤:"
    echo "   Frontend (Next.js):     http://localhost:3000"
    echo "   Backend API (Spring):   http://localhost:8080/api"
    echo "   Swagger UI:             http://localhost:8080/api/swagger-ui.html"
    echo "   PgAdmin:                http://localhost:5050 (admin@aksi.com / admin)"
    echo "   Traefik Dashboard:      http://localhost:9090"
    echo ""
    log_success "üîÑ –ß–µ—Ä–µ–∑ Traefik (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ):"
    echo "   Frontend:               http://localhost/"
    echo "   Backend API:            http://localhost/api"
    echo ""
    log_success "üõ†Ô∏è  –ö–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:"
    echo "   ./start-dev.sh logs     - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ª–æ–≥–∏"
    echo "   ./start-dev.sh stop     - –∑—É–ø–∏–Ω–∏—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏"
    echo "   ./start-dev.sh status   - —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤"
    echo "   ./start-dev.sh shell    - –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ backend"
    echo "   ./start-dev.sh clean    - –ø–æ–≤–Ω–∞ –ø–µ—Ä–µ–±—É–¥–æ–≤–∞"
    echo ""
    log_success "üîß –†–æ–∑—Ä–æ–±–∫–∞ API:"
    echo "   cd frontend && npm run orval     - –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö API"
    echo "   cd frontend && npm run orval:client - –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è Client API"
    echo ""
    log_success "üì¶ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö:"
    echo "   Host: localhost:5432"
    echo "   DB: aksi_cleaners_db_v5"
    echo "   User: aksi_user / Pass: 1911"
}

# –ì–æ–ª–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞
case $MODE in
    "clean")
        clean_start
        ;;
    "fast")
        fast_start
        ;;
    "logs")
        show_logs
        ;;
    "stop")
        stop_containers
        ;;
    "status")
        show_status
        ;;
    "shell")
        connect_shell "$@"
        ;;
    *)
        echo "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: $0 [clean|fast|logs|stop|status|shell]"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥–∏:"
        echo "  clean   - –ø–æ–≤–Ω–∞ –ø–µ—Ä–µ–±—É–¥–æ–≤–∞ (–ø–æ–≤—ñ–ª—å–Ω–æ, ~5-10 —Ö–≤–∏–ª–∏–Ω)"
        echo "  fast    - —à–≤–∏–¥–∫–∏–π –∑–∞–ø—É—Å–∫ –∑ –∫–µ—à–µ–º (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º, ~1-2 —Ö–≤–∏–ª–∏–Ω–∏)"
        echo "  logs    - –ø–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏ –∑–∞–ø—É—â–µ–Ω–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤"
        echo "  stop    - –∑—É–ø–∏–Ω–∏—Ç–∏ –≤—Å—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏"
        echo "  status  - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ —Ç–∞ –ø–æ—Ä—Ç—ñ–≤"
        echo "  shell   - –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
        echo ""
        echo "–ü—Ä–∏–∫–ª–∞–¥–∏:"
        echo "  $0                    # —à–≤–∏–¥–∫–∏–π –∑–∞–ø—É—Å–∫"
        echo "  $0 clean             # –ø–æ–≤–Ω–∞ –ø–µ—Ä–µ–±—É–¥–æ–≤–∞"
        echo "  $0 logs              # –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ª–æ–≥–∏"
        exit 1
        ;;
esac
