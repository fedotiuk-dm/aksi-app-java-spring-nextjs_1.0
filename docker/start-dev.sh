#!/bin/bash

# üöÄ –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É Aksi-app —É —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏
# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
#   ./start-dev.sh [clean|fast|turbo|reset|clean-volumes|logs|stop|status|shell] [--silent]
#   clean        - –ø–æ–≤–Ω–∞ –ø–µ—Ä–µ–±—É–¥–æ–≤–∞ (–ø–æ–≤—ñ–ª—å–Ω–æ)
#   fast         - —à–≤–∏–¥–∫–∏–π –∑–∞–ø—É—Å–∫ –∑ –∫–µ—à–µ–º (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
#   turbo        - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —à–≤–∏–¥–∫–∏–π –∑–∞–ø—É—Å–∫ (–æ—á–∏—â—É—î npm –∫–µ—à—ñ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø—Ä–æ–≤—ñ—Ä–∫–∏ provenance)
#   reset        - –ø–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Ç–∞ –º—ñ–≥—Ä–∞—Ü—ñ–π (–≤–∏—Ä—ñ—à—É—î Liquibase –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏)
#   clean-volumes - –æ—á–∏—â—É—î –≤—Å—ñ Docker volumes (–≤–∏—Ä—ñ—à—É—î WARN –ø—Ä–æ —ñ—Å–Ω—É—é—á—ñ volumes)
#   logs         - –ø–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏ –∑–∞–ø—É—â–µ–Ω–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
#   stop         - –∑—É–ø–∏–Ω–∏—Ç–∏ –≤—Å—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏
#   status       - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
#   shell        - –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
#   --silent     - –ø—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ª–æ–≥–∏ –∑–∞–ø—É—Å–∫—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø–æ–∫–∞–∑—É—é—Ç—å—Å—è)

set -e

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–æ–ª—å–æ—Ä–æ–≤–æ–≥–æ –≤–∏–≤–æ–¥—É
log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

# –û–±—Ä–æ–±–Ω–∏–∫ CTRL+C –¥–ª—è –ø–æ–∫–∞–∑—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å–µ—Ä–≤—ñ—Å–∏
cleanup_on_exit() {
    echo ""
    log_info "üõë –ü–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (Ctrl+C)"
    echo ""
    show_usage_info
    exit 0
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è CSV —Ñ–∞–π–ª—ñ–≤ –≤ PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
copy_csv_files() {
    log_info "–ö–æ–ø—ñ—é—î–º–æ CSV —Ñ–∞–π–ª–∏ –≤ PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."

    # –û—á—ñ–∫—É—î–º–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ PostgreSQL
    for i in {1..10}; do
        if docker exec postgres-dev pg_isready -U aksi_user -d aksi_cleaners_db_v5 >/dev/null 2>&1; then
            break
        fi
        log_info "–û—á—ñ–∫—É—î–º–æ PostgreSQL ($i/10)..."
        sleep 2
    done

    # –ö–æ–ø—ñ—é—î–º–æ price_list.csv
    if [ -f "../scripts/price_list/price_list.csv" ]; then
        docker cp ../scripts/price_list/price_list.csv postgres-dev:/price_list.csv 2>/dev/null && \
        log_success "price_list.csv —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ" || \
        log_warning "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ price_list.csv"
    else
        log_warning "–§–∞–π–ª price_list.csv –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ –∑ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º –ª–æ–≥—ñ–≤
start_containers_with_logs() {
    local build_mode="$1"

    # –ë—É–¥—É—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏
    if [ "$build_mode" = "no-cache" ]; then
        log_info "–ü–µ—Ä–µ–±—É–¥–æ–≤—É—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –±–µ–∑ –∫–µ—à—É..."
        docker-compose -f $COMPOSE_FILE build --no-cache
    else
        log_info "–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±—Ä–∞–∑–∏ —Ç–∞ –±—É–¥—É—î–º–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ..."
        docker-compose -f $COMPOSE_FILE build
    fi

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏
    log_info "–ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏..."
    if [ "$SILENT_MODE" = "true" ]; then
        docker-compose -f $COMPOSE_FILE up -d
        copy_csv_files
        sleep 5
    else
        log_info "üì∫ –ü–æ–∫–∞–∑—É—î–º–æ –ª–æ–≥–∏ –∑–∞–ø—É—Å–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ (Ctrl+C —â–æ–± –∑—É–ø–∏–Ω–∏—Ç–∏ –ª–æ–≥–∏, –∞–ª–µ –∑–∞–ª–∏—à–∏—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏)..."
        echo ""
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤ —Ñ–æ–Ω—ñ
        docker-compose -f $COMPOSE_FILE up -d
        copy_csv_files

        # –ü–æ–∫–∞–∑—É—î–º–æ –ª–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
        log_info "üîç –õ–æ–≥–∏ –∑–∞–ø—É—Å–∫—É:"
        timeout 30 docker-compose -f $COMPOSE_FILE logs -f || true
        echo ""
        log_info "‚è±Ô∏è  –õ–æ–≥–∏ –∑–∞–ø—É—Å–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω—ñ (30 —Å–µ–∫). –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –ø—Ä–æ–¥–æ–≤–∂—É—é—Ç—å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏."
    fi
}

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é Docker
cd "$(dirname "$0")"

COMPOSE_FILE="docker-compose.dev.yml"
MODE="${1:-fast}"
SILENT_MODE=false

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ --silent —Ñ–ª–∞–≥ –≤ —É—Å—ñ—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
for arg in "$@"; do
    if [ "$arg" = "--silent" ]; then
        SILENT_MODE=true
        break
    fi
done

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ Docker –∑–∞–ø—É—â–µ–Ω–∏–π
check_docker() {
    if ! docker info >/dev/null 2>&1; then
        log_error "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø—É—Å—Ç—ñ—Ç—å Docker —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É."
        exit 1
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É —Å—Ç–∞—Ç—É—Å—É
show_status() {
    log_info "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤:"
    docker-compose -f $COMPOSE_FILE ps
    echo ""
    log_info "–ê–∫—Ç–∏–≤–Ω—ñ –ø–æ—Ä—Ç–∏:"
    docker-compose -f $COMPOSE_FILE port frontend 3000 2>/dev/null && echo "Frontend: http://localhost:3000" || echo "Frontend: –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π"
    docker-compose -f $COMPOSE_FILE port backend 8080 2>/dev/null && echo "Backend: http://localhost:8080/api" || echo "Backend: –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π"
    docker-compose -f $COMPOSE_FILE port pgadmin 80 2>/dev/null && echo "PgAdmin: http://localhost:5050" || echo "PgAdmin: –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π"
    docker-compose -f $COMPOSE_FILE port traefik 8080 2>/dev/null && echo "Traefik: http://localhost:9090" || echo "Traefik: –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑—É–ø–∏–Ω–∫–∏
stop_containers() {
    log_info "–ó—É–ø–∏–Ω—è—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏..."
    docker-compose -f $COMPOSE_FILE down
    log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –∑—É–ø–∏–Ω–µ–Ω–æ!"
    echo ""
    show_usage_info
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –ª–æ–≥—ñ–≤
show_logs() {
    log_info "–ü–æ–∫–∞–∑—É—î–º–æ –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ (Ctrl+C –¥–ª—è –≤–∏—Ö–æ–¥—É)..."
    docker-compose -f $COMPOSE_FILE logs -f
    echo ""
    show_usage_info
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ shell
connect_shell() {
    local service="${2:-backend}"
    log_info "–ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ $service –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
    docker-compose -f $COMPOSE_FILE exec $service bash
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è volumes
create_volumes() {
    log_info "–°—Ç–≤–æ—Ä—é—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ volumes..."
    # Volumes –±—É–¥—É—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ docker-compose –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏
    # docker_backend_m2_cache, docker_frontend_node_modules, etc.
    log_success "Volumes –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –∑–∞–ø—É—Å–∫—É
fast_start() {
    log_info "üöÄ –®–≤–∏–¥–∫–∏–π –∑–∞–ø—É—Å–∫ –∑ –∫–µ—à–µ–º..."

    check_docker
    create_volumes

    # –ó—É–ø–∏–Ω—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –∑–∞–ø—É—â–µ–Ω—ñ
    if docker-compose -f $COMPOSE_FILE ps -q | grep -q .; then
        log_info "–ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏..."
        docker-compose -f $COMPOSE_FILE down
    fi

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑ –ª–æ–≥–∞–º–∏
    start_containers_with_logs "cache"

    # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å
    show_status

    log_success "Aksi-app –∑–∞–ø—É—â–µ–Ω–æ!"
    show_usage_info
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–≤–Ω–æ—ó –ø–µ—Ä–µ–±—É–¥–æ–≤–∏
clean_start() {
    log_warning "üßπ –ü–æ–≤–Ω–∞ –ø–µ—Ä–µ–±—É–¥–æ–≤–∞ (—Ü–µ –∑–∞–π–º–µ —á–∞—Å)..."

    check_docker
    create_volumes

    # –ó—É–ø–∏–Ω—è—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏
    log_info "–ó—É–ø–∏–Ω—è—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏..."
    docker-compose -f $COMPOSE_FILE down

    # –í–∏–¥–∞–ª—è—î–º–æ –æ–±—Ä–∞–∑–∏ –ø—Ä–æ–µ–∫—Ç—É
    log_info "–í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –æ–±—Ä–∞–∑–∏ –ø—Ä–æ–µ–∫—Ç—É..."
    docker images --format "table {{.Repository}}:{{.Tag}}\t{{.ID}}" | grep -E "(docker_|docker-)" | awk '{print $2}' | xargs -r docker rmi -f 2>/dev/null || true

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑ –ø–æ–≤–Ω–æ—é –ø–µ—Ä–µ–±—É–¥–æ–≤–æ—é —Ç–∞ –ª–æ–≥–∞–º–∏
    start_containers_with_logs "no-cache"

    # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å
    show_status

    log_success "Aksi-app –ø–µ—Ä–µ–±—É–¥–æ–≤–∞–Ω–æ —Ç–∞ –∑–∞–ø—É—â–µ–Ω–æ!"
    show_usage_info
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç—É—Ä–±–æ –∑–∞–ø—É—Å–∫—É (–æ—á–∏—â–µ–Ω–Ω—è npm –∫–µ—à—ñ–≤)
turbo_start() {
    log_warning "üöÄ –¢–£–†–ë–û —Ä–µ–∂–∏–º - –æ—á–∏—â—É—î–º–æ npm –∫–µ—à—ñ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è provenance –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏..."

    check_docker
    create_volumes

    # –ó—É–ø–∏–Ω—è—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏
    log_info "–ó—É–ø–∏–Ω—è—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏..."
    docker-compose -f $COMPOSE_FILE down

    # –û—á–∏—â—É—î–º–æ npm –∫–µ—à—ñ –≤ Docker volumes
    log_info "–û—á–∏—â—É—î–º–æ npm –∫–µ—à volume..."
    docker volume rm docker_frontend_npm_cache 2>/dev/null || true
    # Volume –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ docker-compose

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑ –ª–æ–≥–∞–º–∏
    start_containers_with_logs "cache"

    # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å
    show_status

    log_success "Aksi-app –∑–∞–ø—É—â–µ–Ω–æ –≤ –¢–£–†–ë–û —Ä–µ–∂–∏–º—ñ!"
    show_usage_info
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ —Å–∫–∏–¥–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
reset_database() {
    log_warning "üóÑÔ∏è RESET —Ä–µ–∂–∏–º - –ø–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!"

    if [ -f "./reset-database.sh" ]; then
        log_info "–ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∫—Ä–∏–ø—Ç –æ—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö..."
        chmod +x ./reset-database.sh
        ./reset-database.sh
    else
        log_error "–§–∞–π–ª reset-database.sh –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
show_usage_info() {
    echo ""
    log_success "üåê –î–æ—Å—Ç—É–ø –¥–æ —Å–µ—Ä–≤—ñ—Å—ñ–≤:"
    echo "   Frontend (Next.js):     http://localhost:3000"
    echo "   Backend API (Spring):   http://localhost:8080/api"
    echo "   Swagger UI:             http://localhost:8080/api/swagger-ui.html"
    echo "   PgAdmin:                http://localhost:5050 (admin@aksi.com / admin)"
    echo "   Traefik Dashboard:      http://localhost:9090"
    echo ""
    log_success "üîÑ –ß–µ—Ä–µ–∑ Traefik (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ):"
    echo "   Frontend:               http://localhost/"
    echo "   Backend API:            http://localhost/api"
    echo ""
    log_success "üõ†Ô∏è  –ö–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:"
    echo "   ./start-dev.sh logs              - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ª–æ–≥–∏"
    echo "   ./start-dev.sh stop              - –∑—É–ø–∏–Ω–∏—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏"
    echo "   ./start-dev.sh status            - —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤"
    echo "   ./start-dev.sh shell             - –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ backend"
    echo "   ./start-dev.sh turbo             - —à–≤–∏–¥–∫–∏–π –∑–∞–ø—É—Å–∫ (–æ—á–∏—â—É—î npm –∫–µ—à—ñ)"
    echo "   ./start-dev.sh reset             - –æ—á–∏—â–µ–Ω–Ω—è –ë–î (–≤–∏—Ä—ñ—à—É—î Liquibase –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏)"
    echo "   ./start-dev.sh clean-volumes     - –æ—á–∏—â–µ–Ω–Ω—è volumes (–≤–∏—Ä—ñ—à—É—î WARN –ø—Ä–æ volumes)"
    echo "   ./start-dev.sh clean             - –ø–æ–≤–Ω–∞ –ø–µ—Ä–µ–±—É–¥–æ–≤–∞"
    echo "   ./start-dev.sh fast --silent     - —à–≤–∏–¥–∫–∏–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –ª–æ–≥—ñ–≤"
    echo ""
    log_success "üîß –†–æ–∑—Ä–æ–±–∫–∞ API:"
    echo "   cd frontend && npm run orval     - –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö API"
    echo "   cd frontend && npm run orval:client - –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è Client API"
    echo ""
    log_success "üì¶ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö:"
    echo "   Host: localhost:5432"
    echo "   DB: aksi_cleaners_db_v5"
    echo "   User: aksi_user / Pass: 1911"
}

# –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—É SIGINT (Ctrl+C)
trap cleanup_on_exit SIGINT

# –ì–æ–ª–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞
case $MODE in
    "clean")
        clean_start
        ;;
    "fast")
        fast_start
        ;;
    "turbo")
        turbo_start
        ;;
    "reset")
        reset_database
        ;;
    "clean-volumes")
        log_info "üßπ –†–ï–ñ–ò–ú: –û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö volumes"
        if [ -f "./clean-volumes.sh" ]; then
            chmod +x ./clean-volumes.sh
            ./clean-volumes.sh
        else
            log_error "–§–∞–π–ª clean-volumes.sh –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!"
            exit 1
        fi
        ;;
    "logs")
        show_logs
        ;;
    "stop")
        stop_containers
        ;;
    "status")
        show_status
        ;;
    "shell")
        connect_shell "$@"
        ;;
    *)
        echo "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: $0 [clean|fast|turbo|reset|clean-volumes|logs|stop|status|shell] [--silent]"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥–∏:"
        echo "  clean        - –ø–æ–≤–Ω–∞ –ø–µ—Ä–µ–±—É–¥–æ–≤–∞ (–ø–æ–≤—ñ–ª—å–Ω–æ, ~5-10 —Ö–≤–∏–ª–∏–Ω)"
        echo "  fast         - —à–≤–∏–¥–∫–∏–π –∑–∞–ø—É—Å–∫ –∑ –∫–µ—à–µ–º (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º, ~1-2 —Ö–≤–∏–ª–∏–Ω–∏)"
        echo "  turbo        - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —à–≤–∏–¥–∫–∏–π –∑–∞–ø—É—Å–∫ (–æ—á–∏—â—É—î npm –∫–µ—à—ñ)"
        echo "  reset        - –ø–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö (–≤–∏—Ä—ñ—à—É—î Liquibase –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏)"
        echo "  clean-volumes - –æ—á–∏—â—É—î –≤—Å—ñ Docker volumes (–≤–∏—Ä—ñ—à—É—î WARN –ø—Ä–æ —ñ—Å–Ω—É—é—á—ñ volumes)"
        echo "  logs         - –ø–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏ –∑–∞–ø—É—â–µ–Ω–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤"
        echo "  stop         - –∑—É–ø–∏–Ω–∏—Ç–∏ –≤—Å—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏"
        echo "  status       - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ —Ç–∞ –ø–æ—Ä—Ç—ñ–≤"
        echo "  shell        - –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
        echo ""
        echo "–û–ø—Ü—ñ—ó:"
        echo "  --silent     - –ø—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ª–æ–≥–∏ –∑–∞–ø—É—Å–∫—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø–æ–∫–∞–∑—É—é—Ç—å—Å—è)"
        echo ""
        echo "–ü—Ä–∏–∫–ª–∞–¥–∏:"
        echo "  $0                    # —à–≤–∏–¥–∫–∏–π –∑–∞–ø—É—Å–∫ –∑ –ª–æ–≥–∞–º–∏"
        echo "  $0 fast --silent     # —à–≤–∏–¥–∫–∏–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –ª–æ–≥—ñ–≤"
        echo "  $0 clean             # –ø–æ–≤–Ω–∞ –ø–µ—Ä–µ–±—É–¥–æ–≤–∞ –∑ –ª–æ–≥–∞–º–∏"
        echo "  $0 clean-volumes     # –æ—á–∏—Å—Ç–∏—Ç–∏ volumes"
        echo "  $0 logs              # –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ª–æ–≥–∏"
        exit 1
        ;;
esac
