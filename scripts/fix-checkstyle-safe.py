#!/usr/bin/env python3
"""
–ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–ò–ô —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¢–Ü–õ–¨–ö–ò –±–µ–∑–ø–µ—á–Ω–∏—Ö Checkstyle –ø–æ–º–∏–ª–æ–∫
"""
import os
import re
import sys
from pathlib import Path
from typing import List, Tuple

def print_colored(text: str, color: str = "white"):
    """–î—Ä—É–∫ –∫–æ–ª—å–æ—Ä–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É"""
    colors = {
        "red": "\033[91m",
        "green": "\033[92m",
        "yellow": "\033[93m",
        "blue": "\033[94m",
        "white": "\033[97m",
        "reset": "\033[0m"
    }
    print(f"{colors.get(color, colors['white'])}{text}{colors['reset']}")

def fix_javadoc_periods_safe(content: str) -> Tuple[str, int]:
    """
    –ë–ï–ó–ü–ï–ß–ù–û –¥–æ–¥–∞—î –∫—Ä–∞–ø–∫–∏ –≤ –∫—ñ–Ω—Ü—ñ Javadoc –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
    """
    fixed_count = 0

    # –¢—ñ–ª—å–∫–∏ –¥–ª—è –û–î–ù–û–†–Ø–î–î–û–í–ò–• Javadoc –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ (–Ω–∞–π–±–µ–∑–ø–µ—á–Ω—ñ—à–µ)
    pattern = r'(/\*\*\s*)([^*\n]+?)(\s*\*/)'

    def replacer(match):
        nonlocal fixed_count
        start = match.group(1)
        content_text = match.group(2).strip()
        end = match.group(3)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ–º–∞—î –∫—Ä–∞–ø–∫–∏ –≤ –∫—ñ–Ω—Ü—ñ
        if not content_text.endswith('.') and not content_text.endswith('?') and not content_text.endswith('!'):
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ü–µ –Ω–µ @return –∞–±–æ @param —Ä—è–¥–æ–∫
            if not content_text.strip().startswith('@'):
                fixed_count += 1
                return f"{start}{content_text}.{end}"

        return match.group(0)

    fixed_content = re.sub(pattern, replacer, content)
    return fixed_content, fixed_count

def fix_simple_throws_tags(content: str) -> Tuple[str, int]:
    """
    –ë–ï–ó–ü–ï–ß–ù–û –¥–æ–¥–∞—î @throws —Ç–µ–≥–∏ –¥–ª—è IllegalArgumentException —Ç–∞ RuntimeException
    """
    fixed_count = 0

    # –®—É–∫–∞—î–º–æ –º–µ—Ç–æ–¥–∏ –∑ throws IllegalArgumentException
    pattern = r'(/\*\*[^}]*?\*/)\s*([^{]*?throws\s+IllegalArgumentException[^{]*?\{)'

    def replacer(match):
        nonlocal fixed_count
        javadoc = match.group(1)
        method_part = match.group(2)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î @throws IllegalArgumentException
        if '@throws IllegalArgumentException' not in javadoc:
            # –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä–∏—Ç—Ç—è–º Javadoc
            updated_javadoc = javadoc.replace('     */', '     * @throws IllegalArgumentException if invalid argument\n     */')
            fixed_count += 1
            return f"{updated_javadoc}{method_part}"

        return match.group(0)

    fixed_content = re.sub(pattern, replacer, content, flags=re.MULTILINE | re.DOTALL)
    return fixed_content, fixed_count

def process_java_file_safe(file_path: Path) -> dict:
    """–ë–µ–∑–ø–µ—á–Ω–æ –æ–±—Ä–æ–±–ª—è—î –æ–¥–∏–Ω Java —Ñ–∞–π–ª"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()

        original_content = content
        fixes = {}

        # –¢—ñ–ª—å–∫–∏ –ë–ï–ó–ü–ï–ß–ù–Ü –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
        content, period_fixes = fix_javadoc_periods_safe(content)
        fixes['javadoc_periods'] = period_fixes

        content, throws_fixes = fix_simple_throws_tags(content)
        fixes['simple_throws'] = throws_fixes

        # –ó–∞–ø–∏—Å—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –∑–º—ñ–Ω–∏
        if content != original_content:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            fixes['file_changed'] = True
        else:
            fixes['file_changed'] = False

        return fixes

    except Exception as e:
        print_colored(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ {file_path}: {e}", "red")
        return {'error': str(e)}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print_colored("üõ°Ô∏è  –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–ï –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è Checkstyle –ø–æ–º–∏–ª–æ–∫...", "blue")
    print_colored("   –í–∏–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è –¢–Ü–õ–¨–ö–ò –±–µ–∑–ø–µ—á–Ω—ñ —Ä–µ—á—ñ:", "yellow")
    print_colored("   ‚Ä¢ –ö—Ä–∞–ø–∫–∏ –≤ –æ–¥–Ω–æ—Ä—è–¥–¥–æ–≤–∏—Ö Javadoc", "white")
    print_colored("   ‚Ä¢ @throws –¥–ª—è IllegalArgumentException", "white")
    print_colored("", "white")

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ Java —Ñ–∞–π–ª–∏
    backend_path = Path("backend")
    if not backend_path.exists():
        backend_path = Path(".")

    java_files = list(backend_path.glob("src/main/java/**/*.java"))

    if not java_files:
        print_colored("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ Java —Ñ–∞–π–ª—ñ–≤", "red")
        return

    print_colored(f"üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ {len(java_files)} Java —Ñ–∞–π–ª—ñ–≤", "blue")
    print_colored("", "white")

    total_fixes = {
        'javadoc_periods': 0,
        'simple_throws': 0,
        'files_changed': 0
    }

    # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω —Ñ–∞–π–ª
    for java_file in java_files:
        relative_path = java_file.relative_to(backend_path if backend_path.name == "backend" else Path("."))
        print(f"üîç {relative_path}")

        fixes = process_java_file_safe(java_file)

        if 'error' in fixes:
            continue

        if fixes['file_changed']:
            total_fixes['files_changed'] += 1
            file_total = fixes['javadoc_periods'] + fixes['simple_throws']
            print_colored(f"  ‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ {file_total} –ø—Ä–æ–±–ª–µ–º", "green")
        else:
            print_colored(f"  ‚ÑπÔ∏è  –ë–µ–∑–ø–µ—á–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", "yellow")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_fixes['javadoc_periods'] += fixes['javadoc_periods']
        total_fixes['simple_throws'] += fixes['simple_throws']

    # –ü—ñ–¥—Å—É–º–æ–∫
    print_colored("", "white")
    print_colored("üìä –ü—ñ–¥—Å—É–º–æ–∫ –ë–ï–ó–ü–ï–ß–ù–ò–• –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å:", "blue")
    print_colored(f"   ‚Ä¢ Javadoc –∫—Ä–∞–ø–∫–∏: {total_fixes['javadoc_periods']}", "green")
    print_colored(f"   ‚Ä¢ @throws —Ç–µ–≥–∏: {total_fixes['simple_throws']}", "green")
    print_colored(f"   ‚Ä¢ –§–∞–π–ª—ñ–≤ –∑–º—ñ–Ω–µ–Ω–æ: {total_fixes['files_changed']}", "green")

    total_issues = total_fixes['javadoc_periods'] + total_fixes['simple_throws']
    print_colored(f"   üéØ –ó–∞–≥–∞–ª–æ–º –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_issues} –ø—Ä–æ–±–ª–µ–º", "green")

    if total_issues > 0:
        print_colored("", "white")
        print_colored("‚úÖ –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:", "blue")
        print_colored("1. git diff - –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–º—ñ–Ω–∏", "white")
        print_colored("2. mvn checkstyle:check - –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–∫—ñ–ª—å–∫–∏ –∑–∞–ª–∏—à–∏–ª–æ—Å—å", "white")
        print_colored("3. git add . && git commit -m 'Fix safe checkstyle issues'", "white")
    else:
        print_colored("", "white")
        print_colored("‚ÑπÔ∏è  –ë–µ–∑–ø–µ—á–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", "yellow")

if __name__ == "__main__":
    main()
