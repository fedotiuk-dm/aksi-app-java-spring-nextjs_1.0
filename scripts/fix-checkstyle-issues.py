#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è Checkstyle –ø–æ–º–∏–ª–æ–∫ –≤ Java –ø—Ä–æ–µ–∫—Ç—ñ
"""
import os
import re
import sys
from pathlib import Path
from typing import List, Tuple

def print_colored(text: str, color: str = "white"):
    """–î—Ä—É–∫ –∫–æ–ª—å–æ—Ä–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É"""
    colors = {
        "red": "\033[91m",
        "green": "\033[92m",
        "yellow": "\033[93m",
        "blue": "\033[94m",
        "white": "\033[97m",
        "reset": "\033[0m"
    }
    print(f"{colors.get(color, colors['white'])}{text}{colors['reset']}")

def fix_javadoc_periods(content: str) -> Tuple[str, int]:
    """
    –í–∏–ø—Ä–∞–≤–ª—è—î SummaryJavadoc - –¥–æ–¥–∞—î –∫—Ä–∞–ø–∫—É –≤ –∫—ñ–Ω—Ü—ñ –ø–µ—Ä—à–æ–≥–æ —Ä–µ—á–µ–Ω–Ω—è Javadoc
    """
    fixed_count = 0

    # 1. –ë–∞–≥–∞—Ç–æ—Ä—è–¥–∫–æ–≤—ñ Javadoc –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
    multiline_pattern = r'(/\*\*\s*\n\s*\*\s+)([^.]*?)(\s*\n\s*\*(?:\s+@|\s*/))'

    def multiline_replacer(match):
        nonlocal fixed_count
        start = match.group(1)
        summary = match.group(2).strip()
        end = match.group(3)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ–º–∞—î –∫—Ä–∞–ø–∫–∏ –≤ –∫—ñ–Ω—Ü—ñ
        if not summary.endswith('.') and not summary.endswith('?') and not summary.endswith('!'):
            fixed_count += 1
            return f"{start}{summary}.{end}"
        return match.group(0)

    # 2. –û–¥–Ω–æ—Ä—è–¥–¥–æ–≤—ñ Javadoc –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ /** ... */
    oneline_pattern = r'(/\*\*\s+)([^*/]*?)(\s+\*/)'

    def oneline_replacer(match):
        nonlocal fixed_count
        start = match.group(1)
        summary = match.group(2).strip()
        end = match.group(3)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ–º–∞—î –∫—Ä–∞–ø–∫–∏ –≤ –∫—ñ–Ω—Ü—ñ —ñ —á–∏ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å @ —Ç–µ–≥–∏
        if (not summary.endswith('.') and not summary.endswith('?') and
            not summary.endswith('!') and '@' not in summary):
            fixed_count += 1
            return f"{start}{summary}.{end}"
        return match.group(0)

    # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –æ–±–∏–¥–≤–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∏
    fixed_content = re.sub(multiline_pattern, multiline_replacer, content, flags=re.MULTILINE | re.DOTALL)
    fixed_content = re.sub(oneline_pattern, oneline_replacer, fixed_content, flags=re.MULTILINE)

    return fixed_content, fixed_count

def fix_missing_throws_tags(content: str) -> Tuple[str, int]:
    """
    –î–æ–¥–∞—î –≤—ñ–¥—Å—É—Ç–Ω—ñ @throws —Ç–µ–≥–∏ –¥–ª—è –º–µ—Ç–æ–¥—ñ–≤ —â–æ –∫–∏–¥–∞—é—Ç—å –≤–∏–∫–ª—é—á–µ–Ω–Ω—è
    """
    fixed_count = 0

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –º–µ—Ç–æ–¥–∏ —â–æ –∫–∏–¥–∞—é—Ç—å –≤–∏–∫–ª—é—á–µ–Ω–Ω—è –±–µ–∑ @throws –≤ Javadoc
    method_pattern = r'(/\*\*.*?\*/)\s*([^{]*?throws\s+(\w+(?:Exception|Error)[^{]*?)\{)'

    def replacer(match):
        nonlocal fixed_count
        javadoc = match.group(1)
        method_signature = match.group(2)
        throws_part = match.group(3)

        # –í–∏—Ç—è–≥—É—î–º–æ –Ω–∞–∑–≤–∏ –≤–∏–∫–ª—é—á–µ–Ω—å
        exceptions = re.findall(r'(\w+(?:Exception|Error))', throws_part)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —è–∫—ñ @throws –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ Javadoc
        missing_throws = []
        for exception in exceptions:
            if f"@throws {exception}" not in javadoc:
                missing_throws.append(exception)

        if missing_throws:
            # –î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ @throws —Ç–µ–≥–∏ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä–∏–≤–∞—é—á–∏–º */
            throws_tags = "\n".join([f"     * @throws {exc} —è–∫—â–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞" for exc in missing_throws])
            updated_javadoc = javadoc.replace("     */", f"     * {throws_tags}\n     */")
            fixed_count += len(missing_throws)
            return f"{updated_javadoc}{method_signature}"

        return match.group(0)

    fixed_content = re.sub(method_pattern, replacer, content, flags=re.MULTILINE | re.DOTALL)
    return fixed_content, fixed_count

def fix_missing_param_tags(content: str) -> Tuple[str, int]:
    """
    –î–æ–¥–∞—î –≤—ñ–¥—Å—É—Ç–Ω—ñ @param —Ç–µ–≥–∏ –¥–ª—è generic —Ç–∏–ø—ñ–≤
    """
    fixed_count = 0

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ generic –∫–ª–∞—Å–∏ –±–µ–∑ @param —Ç–µ–≥—ñ–≤
    generic_pattern = r'(/\*\*.*?\*/)\s*(?:public\s+)?(?:class|interface)\s+\w+<([^>]+)>'

    def replacer(match):
        nonlocal fixed_count
        javadoc = match.group(1)
        generic_params = match.group(2)

        # –í–∏—Ç—è–≥—É—î–º–æ generic –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        params = [p.strip() for p in generic_params.split(',')]

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —è–∫—ñ @param –≤—ñ–¥—Å—É—Ç–Ω—ñ
        missing_params = []
        for param in params:
            if f"@param <{param}>" not in javadoc:
                missing_params.append(param)

        if missing_params:
            # –î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ @param —Ç–µ–≥–∏
            param_tags = "\n".join([f"     * @param <{param}> —Ç–∏–ø –ø–∞—Ä–∞–º–µ—Ç—Ä–∞" for param in missing_params])
            updated_javadoc = javadoc.replace("     */", f"     * {param_tags}\n     */")
            fixed_count += len(missing_params)
            return javadoc.replace(javadoc, updated_javadoc) + match.group(0)[len(javadoc):]

        return match.group(0)

    fixed_content = re.sub(generic_pattern, replacer, content, flags=re.MULTILINE | re.DOTALL)
    return fixed_content, fixed_count

def fix_html_in_javadoc(content: str) -> Tuple[str, int]:
    """
    –í–∏–ø—Ä–∞–≤–ª—è—î HTML –ø–æ–º–∏–ª–∫–∏ –≤ Javadoc - –∑–∞–º—ñ–Ω—é—î < > –Ω–∞ HTML entities
    """
    fixed_count = 0

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ Javadoc –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –∑ –ø—Ä–æ–±–ª–µ–º–Ω–∏–º–∏ —Ç–∏–ø–∞–º–∏ –≤ <>
    html_pattern = r'(/\*\*.*?\*/)'

    def replacer(match):
        nonlocal fixed_count
        javadoc = match.group(1)
        original_javadoc = javadoc

        # –ó–∞–º—ñ–Ω—é—î–º–æ –ø—Ä–æ–±–ª–µ–º–Ω—ñ —Ç–∏–ø–∏ –≤ Javadoc –Ω–∞ –±–µ–∑–ø–µ—á–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏
        javadoc = re.sub(r'<(CommunicationMethodType|CommunicationMethod)>', r'`\1`', javadoc)

        if javadoc != original_javadoc:
            fixed_count += 1

        return javadoc

    fixed_content = re.sub(html_pattern, replacer, content, flags=re.MULTILINE | re.DOTALL)
    return fixed_content, fixed_count

def process_java_file(file_path: Path) -> dict:
    """–û–±—Ä–æ–±–ª—è—î –æ–¥–∏–Ω Java —Ñ–∞–π–ª"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()

        original_content = content
        fixes = {}

        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
        content, period_fixes = fix_javadoc_periods(content)
        fixes['javadoc_periods'] = period_fixes

        content, throws_fixes = fix_missing_throws_tags(content)
        fixes['missing_throws'] = throws_fixes

        content, param_fixes = fix_missing_param_tags(content)
        fixes['missing_params'] = param_fixes

        content, html_fixes = fix_html_in_javadoc(content)
        fixes['html_fixes'] = html_fixes

        # –ó–∞–ø–∏—Å—É—î–º–æ —Ñ–∞–π–ª —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –∑–º—ñ–Ω–∏
        if content != original_content:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            fixes['file_changed'] = True
        else:
            fixes['file_changed'] = False

        return fixes

    except Exception as e:
        print_colored(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ {file_path}: {e}", "red")
        return {'error': str(e)}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print_colored("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è Checkstyle –ø–æ–º–∏–ª–æ–∫...", "blue")
    print_colored("", "white")

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ Java —Ñ–∞–π–ª–∏ –≤ src/main/java
    backend_path = Path("backend")
    if not backend_path.exists():
        backend_path = Path(".")

    java_files = list(backend_path.glob("src/main/java/**/*.java"))

    if not java_files:
        print_colored("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ Java —Ñ–∞–π–ª—ñ–≤ –≤ src/main/java", "red")
        return

    print_colored(f"üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ {len(java_files)} Java —Ñ–∞–π–ª—ñ–≤", "blue")
    print_colored("", "white")

    total_fixes = {
        'javadoc_periods': 0,
        'missing_throws': 0,
        'missing_params': 0,
        'html_fixes': 0,
        'files_changed': 0
    }

    # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω —Ñ–∞–π–ª
    for java_file in java_files:
        relative_path = java_file.relative_to(backend_path if backend_path.name == "backend" else Path("."))
        print(f"üîç –û–±—Ä–æ–±–∫–∞: {relative_path}")

        fixes = process_java_file(java_file)

        if 'error' in fixes:
            continue

        if fixes['file_changed']:
            total_fixes['files_changed'] += 1
            file_total = (fixes['javadoc_periods'] + fixes['missing_throws'] +
                         fixes['missing_params'] + fixes['html_fixes'])
            print_colored(f"  ‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ {file_total} –ø—Ä–æ–±–ª–µ–º", "green")
        else:
            print_colored(f"  ‚ÑπÔ∏è  –ü—Ä–æ–±–ª–µ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", "yellow")

        # –î–æ–¥–∞—î–º–æ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_fixes['javadoc_periods'] += fixes['javadoc_periods']
        total_fixes['missing_throws'] += fixes['missing_throws']
        total_fixes['missing_params'] += fixes['missing_params']
        total_fixes['html_fixes'] += fixes['html_fixes']

    # –ü—ñ–¥—Å—É–º–æ–∫
    print_colored("", "white")
    print_colored("üìä –ü—ñ–¥—Å—É–º–æ–∫ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å:", "blue")
    print_colored(f"   ‚Ä¢ Javadoc –∫—Ä–∞–ø–∫–∏: {total_fixes['javadoc_periods']}", "green")
    print_colored(f"   ‚Ä¢ @throws —Ç–µ–≥–∏: {total_fixes['missing_throws']}", "green")
    print_colored(f"   ‚Ä¢ @param —Ç–µ–≥–∏: {total_fixes['missing_params']}", "green")
    print_colored(f"   ‚Ä¢ HTML –ø–æ–º–∏–ª–∫–∏: {total_fixes['html_fixes']}", "green")
    print_colored(f"   ‚Ä¢ –§–∞–π–ª—ñ–≤ –∑–º—ñ–Ω–µ–Ω–æ: {total_fixes['files_changed']}", "green")

    total_issues = (total_fixes['javadoc_periods'] + total_fixes['missing_throws'] +
                   total_fixes['missing_params'] + total_fixes['html_fixes'])
    print_colored(f"   üéØ –ó–∞–≥–∞–ª–æ–º –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_issues} –ø—Ä–æ–±–ª–µ–º", "green")

    if total_issues > 0:
        print_colored("", "white")
        print_colored("üîÑ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:", "blue")
        print_colored("1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–º—ñ–Ω–∏: git diff", "white")
        print_colored("2. –ó–∞–ø—É—Å—Ç—ñ—Ç—å checkstyle: mvn checkstyle:check", "white")
        print_colored("3. –ó–∞–∫–æ–º—ñ—Ç—å—Ç–µ –∑–º—ñ–Ω–∏: git add . && git commit -m 'Fix checkstyle issues'", "white")

if __name__ == "__main__":
    main()
