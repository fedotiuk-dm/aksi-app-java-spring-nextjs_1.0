#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è title –¥–æ –≤—Å—ñ—Ö OpenAPI —Å—Ö–µ–º –±–µ–∑ title.
–¶–µ —É—Å—É–≤–∞—î warnings —Ç–∏–ø—É "Inline schema created as SchemeName_property".
"""

import os
import re
import sys
from pathlib import Path


def add_title_to_schema(content, schema_name, schema_start_pos):
    """–î–æ–¥–∞—î title –¥–æ —Å—Ö–µ–º–∏ —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î"""

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—á–∞—Ç–æ–∫ —Å—Ö–µ–º–∏
    lines = content.split('\n')
    schema_line_num = content[:schema_start_pos].count('\n')

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î title
    schema_content = ""
    indent_level = None
    i = schema_line_num + 1

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ä—ñ–≤–µ–Ω—å –≤—ñ–¥—Å—Ç—É–ø—É —Å—Ö–µ–º–∏
    schema_line = lines[schema_line_num]
    schema_indent = len(schema_line) - len(schema_line.lstrip())

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î title –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —Ä—è–¥–∫–∞—Ö —Å—Ö–µ–º–∏
    while i < len(lines):
        line = lines[i]
        if line.strip() == "":
            i += 1
            continue

        line_indent = len(line) - len(line.lstrip())

        # –Ø–∫—â–æ –≤—ñ–¥—Å—Ç—É–ø –º–µ–Ω—à–∏–π –∞–±–æ —Ä—ñ–≤–Ω–∏–π —Å—Ö–µ–º—ñ - —Å—Ö–µ–º–∞ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å
        if line_indent <= schema_indent and line.strip():
            break

        if 'title:' in line:
            return content  # Title –≤–∂–µ —î

        i += 1

    # –î–æ–¥–∞—î–º–æ title –ø—ñ—Å–ª—è "type: object"
    type_line_pattern = f'^{" " * schema_indent}{schema_name}:\\s*$'
    type_object_pattern = f'^{" " * (schema_indent + 2)}type: object\\s*$'

    new_lines = []
    schema_found = False
    title_added = False

    for i, line in enumerate(lines):
        new_lines.append(line)

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞—à—É —Å—Ö–µ–º—É
        if re.match(type_line_pattern, line):
            schema_found = True
            continue

        # –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ —Å—Ö–µ–º—É —ñ type: object, –¥–æ–¥–∞—î–º–æ title
        if schema_found and re.match(type_object_pattern, line) and not title_added:
            title_line = f'{" " * (schema_indent + 2)}title: {schema_name}'
            new_lines.append(title_line)
            title_added = True
            schema_found = False

    return '\n'.join(new_lines)


def fix_openapi_file(file_path):
    """–í–∏–ø—Ä–∞–≤–ª—è—î –æ–¥–∏–Ω OpenAPI —Ñ–∞–π–ª"""
    print(f"–û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É: {file_path}")

    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()

    original_content = content

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ —Å—Ö–µ–º–∏ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è
    schema_pattern = r'^([A-Za-z][A-Za-z0-9_]*):?\s*$'
    type_object_pattern = r'^(\s+)type: object\s*$'

    lines = content.split('\n')

    for i, line in enumerate(lines):
        # –Ø–∫—â–æ —Ü–µ —Å—Ö–µ–º–∞ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è (–±–µ–∑ –≤—ñ–¥—Å—Ç—É–ø—É)
        if re.match(r'^[A-Za-z][A-Za-z0-9_]*:\s*$', line):
            schema_name = line.rstrip(':').strip()

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ä—è–¥–∫–∏ –Ω–∞ type: object
            j = i + 1
            while j < len(lines) and (lines[j].strip() == '' or lines[j].startswith('  ')):
                if re.match(r'^\s+type: object\s*$', lines[j]):
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î title –ø—ñ—Å–ª—è type: object
                    has_title = False
                    k = j + 1
                    while k < len(lines) and lines[k].startswith('  '):
                        if 'title:' in lines[k]:
                            has_title = True
                            break
                        if lines[k].strip() and not lines[k].startswith('    '):
                            break
                        k += 1

                    # –Ø–∫—â–æ –Ω–µ–º–∞—î title, –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ
                    if not has_title:
                        indent = '  '
                        title_line = f'{indent}title: {schema_name}'
                        description_line = f'{indent}description: {schema_name} —Å—Ö–µ–º–∞'

                        # –í—Å—Ç–∞–≤–ª—è—î–º–æ –ø—ñ—Å–ª—è type: object
                        lines.insert(j + 1, title_line)
                        print(f"  –î–æ–¥–∞–Ω–æ title –¥–ª—è —Å—Ö–µ–º–∏: {schema_name}")
                    break
                j += 1

    # –ó–∞–ø–∏—Å—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    updated_content = '\n'.join(lines)

    if updated_content != original_content:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(updated_content)
        print(f"  ‚úÖ –§–∞–π–ª –æ–Ω–æ–≤–ª–µ–Ω–æ")
        return True
    else:
        print(f"  ‚ÑπÔ∏è  –ó–º—ñ–Ω–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ")
        return False


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    backend_dir = Path(__file__).parent.parent / 'backend' / 'src' / 'main' / 'resources' / 'openapi'

    if not backend_dir.exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: {backend_dir}")
        sys.exit(1)

    print(f"üîç –ü–æ—à—É–∫ OpenAPI —Ñ–∞–π–ª—ñ–≤ –≤: {backend_dir}")

    yaml_files = list(backend_dir.rglob('*.yaml'))

    if not yaml_files:
        print("‚ùå OpenAPI —Ñ–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")
        sys.exit(1)

    print(f"üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ {len(yaml_files)} YAML —Ñ–∞–π–ª—ñ–≤")

    updated_count = 0

    for yaml_file in yaml_files:
        try:
            if fix_openapi_file(yaml_file):
                updated_count += 1
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ {yaml_file}: {e}")

    print(f"\n‚úÖ –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: {updated_count}")
    print(f"üìä –í—Å—å–æ–≥–æ —Ñ–∞–π–ª—ñ–≤: {len(yaml_files)}")


if __name__ == '__main__':
    main()
